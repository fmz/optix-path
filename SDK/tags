!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALPHA_MODE_BLEND	cuda/MaterialData.h	/^        ALPHA_MODE_BLEND  = 2$/;"	e	enum:MaterialData::AlphaMode
ALPHA_MODE_MASK	cuda/MaterialData.h	/^        ALPHA_MODE_MASK   = 1,$/;"	e	enum:MaterialData::AlphaMode
ALPHA_MODE_OPAQUE	cuda/MaterialData.h	/^        ALPHA_MODE_OPAQUE = 0,$/;"	e	enum:MaterialData::AlphaMode
AMBIENT	cuda/Light.h	/^        AMBIENT = 1$/;"	m	class:Light::Type
ANY_OBJECT	optixVolumeViewer/volume.h	/^    ANY_OBJECT = 0xFF,$/;"	e	enum:ObjectType
APIENTRY	support/GLFW/deps/glad/glad.h	18;"	d
APIENTRY	support/GLFW/include/GLFW/glfw3.h	100;"	d
APIENTRY	support/GLFW/include/GLFW/glfw3.h	98;"	d
APIENTRY	support/GLFW/include/GLFW/glfw3native.h	87;"	d
APIENTRY	support/GLFW/src/win32_platform.h	47;"	d
APIENTRY	support/glad/glad.h	42;"	d
APIENTRY	support/imgui/imgui_impl_glfw.cpp	41;"	d	file:
APIENTRYP	support/GLFW/deps/glad/glad.h	21;"	d
APIENTRYP	support/glad/glad.h	45;"	d
APIFUNC	optixNVLink/optixNVLink.cpp	232;"	d	file:
APIFUNC	optixNVLink/optixNVLink.cpp	234;"	d	file:
ARB_context_flush_control	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_context_flush_control;$/;"	m	struct:_GLFWlibraryGLX
ARB_context_flush_control	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_context_flush_control;$/;"	m	struct:_GLFWlibraryWGL
ARB_create_context	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_create_context;$/;"	m	struct:_GLFWlibraryGLX
ARB_create_context	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_create_context;$/;"	m	struct:_GLFWlibraryWGL
ARB_create_context_profile	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_create_context_profile;$/;"	m	struct:_GLFWlibraryGLX
ARB_create_context_profile	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_create_context_profile;$/;"	m	struct:_GLFWlibraryWGL
ARB_create_context_robustness	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_create_context_robustness;$/;"	m	struct:_GLFWlibraryGLX
ARB_create_context_robustness	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_create_context_robustness;$/;"	m	struct:_GLFWlibraryWGL
ARB_framebuffer_sRGB	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_framebuffer_sRGB;$/;"	m	struct:_GLFWlibraryGLX
ARB_framebuffer_sRGB	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_framebuffer_sRGB;$/;"	m	struct:_GLFWlibraryWGL
ARB_multisample	support/GLFW/src/glx_context.h	/^    GLFWbool        ARB_multisample;$/;"	m	struct:_GLFWlibraryGLX
ARB_multisample	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_multisample;$/;"	m	struct:_GLFWlibraryWGL
ARB_pixel_format	support/GLFW/src/wgl_context.h	/^    GLFWbool                            ARB_pixel_format;$/;"	m	struct:_GLFWlibraryWGL
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	569;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	572;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	575;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	578;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	581;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	585;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	587;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	589;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	593;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	596;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	599;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	604;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	607;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	610;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	615;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	618;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	621;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	624;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	627;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	630;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	633;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	636;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	639;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	642;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	645;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	650;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	653;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	656;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	659;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	662;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	665;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	670;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	673;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	676;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	679;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	682;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	686;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	689;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	694;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	697;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	700;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	703;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	706;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	709;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	712;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	716;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	554;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	557;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	560;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	563;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	566;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	570;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	572;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	574;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	578;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	581;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	584;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	589;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	592;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	595;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	600;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	603;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	606;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	609;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	612;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	615;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	618;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	621;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	624;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	627;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	630;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	635;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	638;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	641;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	644;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	647;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	650;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	655;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	658;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	661;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	664;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	667;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	671;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	674;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	679;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	682;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	685;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	688;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	691;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	694;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	697;"	d	file:
ARCHITECTURE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	701;"	d	file:
ARRAY_TYPE	support/tinygltf/tiny_gltf.h	/^  ARRAY_TYPE = 5,$/;"	e	enum:tinygltf::__anon114
AS	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^struct AS$/;"	s	file:
ATOM_PAIR	support/GLFW/src/x11_platform.h	/^    Atom            ATOM_PAIR;$/;"	m	struct:_GLFWlibraryX11
A_OFFSET	support/tinyexr/tinyexr.h	/^const int A_OFFSET = 1 << (NBITS - 1);$/;"	m	namespace:tinyexr
Aabb	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Aabb::Aabb( const float3& min, const float3& max )$/;"	f	class:sutil::Aabb
Aabb	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Aabb::Aabb( const float3& v0, const float3& v1, const float3& v2 )$/;"	f	class:sutil::Aabb
Aabb	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Aabb::Aabb()$/;"	f	class:sutil::Aabb
Aabb	sutil/Aabb.h	/^  class Aabb$/;"	c	namespace:sutil
Abs	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline T Abs(T x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Abs	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline double Abs(double x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Abs	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline float Abs(float x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Abs	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int Abs(int x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
AcceptDragDropPayload	support/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui
Accessor	support/tinygltf/tiny_gltf.h	/^  Accessor()$/;"	f	struct:tinygltf::Accessor
Accessor	support/tinygltf/tiny_gltf.h	/^struct Accessor {$/;"	s	namespace:tinygltf
ActivateItem	support/imgui/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui
Active	support/imgui/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unless Collapsed$/;"	m	struct:ImGuiWindow
ActiveId	support/imgui/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext
ActiveIdAllowNavDirFlags	support/imgui/imgui_internal.h	/^    int                     ActiveIdAllowNavDirFlags;           \/\/ Active widget allows using directional navigation (e.g. can activate a button and move away from it)$/;"	m	struct:ImGuiContext
ActiveIdAllowOverlap	support/imgui/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows another widget to steal active id (generally for overlapping widgets, but not always)$/;"	m	struct:ImGuiContext
ActiveIdBlockNavInputFlags	support/imgui/imgui_internal.h	/^    int                     ActiveIdBlockNavInputFlags;$/;"	m	struct:ImGuiContext
ActiveIdClickOffset	support/imgui/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)$/;"	m	struct:ImGuiContext
ActiveIdHasBeenEdited	support/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEdited;              \/\/ Was the value associated to the widget Edited over the course of the Active state.$/;"	m	struct:ImGuiContext
ActiveIdHasBeenPressed	support/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressed;             \/\/ Track whether the active id led to a press (this is to allow changing between PressOnClick and PressOnRelease without pressing twice). Used by range_select branch.$/;"	m	struct:ImGuiContext
ActiveIdIsAlive	support/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen this frame (we can't use a bool as the ActiveId may change within the frame)$/;"	m	struct:ImGuiContext
ActiveIdIsJustActivated	support/imgui/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activation for one frame$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrame	support/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameHasBeenEdited	support/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEdited;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameIsAlive	support/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext
ActiveIdSource	support/imgui/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or nav (gamepad\/keyboard)$/;"	m	struct:ImGuiContext
ActiveIdTimer	support/imgui/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext
ActiveIdWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext
Add	support/imgui/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Data.Size) { Data.resize(Data.Size + 1); FreeIdx++; } else { FreeIdx = *(int*)&Data[idx]; } IM_PLACEMENT_NEW(&Data[idx]) T(); return &Data[idx]; }$/;"	f	struct:ImPool
Add	support/imgui/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (Min.y > r.Min.y) Min.y = r.Min.y; if (Max.x < r.Max.x) Max.x = r.Max.x; if (Max.y < r.Max.y) Max.y = r.Max.y; }$/;"	f	struct:ImRect
Add	support/imgui/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (Min.y > p.y)     Min.y = p.y;     if (Max.x < p.x)     Max.x = p.x;     if (Max.y < p.y)     Max.y = p.y; }$/;"	f	struct:ImRect
AddBezierCurve	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments)$/;"	f	class:ImDrawList
AddCallback	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList
AddChar	support/imgui/imgui.h	/^    void            AddChar(ImWchar c)  { SetBit(c); }                          \/\/ Add character$/;"	f	struct:ImFontGlyphRangesBuilder
AddCircle	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments, float thickness)$/;"	f	class:ImDrawList
AddCircleFilled	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList
AddConvexPolyFilled	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList
AddCustomRectFontGlyph	support/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset)$/;"	f	class:ImFontAtlas
AddCustomRectRegular	support/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(unsigned int id, int width, int height)$/;"	f	class:ImFontAtlas
AddDrawCmd	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList
AddDrawListToDrawData	support/imgui/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	file:
AddFont	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas
AddFontDefault	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas
AddFontFromFileTTF	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryCompressedBase85TTF	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryCompressedTTF	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryTTF	support/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddGlyph	support/imgui/imgui_draw.cpp	/^void ImFont::AddGlyph(ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)$/;"	f	class:ImFont
AddImage	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col)$/;"	f	class:ImDrawList
AddImageQuad	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)$/;"	f	class:ImDrawList
AddImageRounded	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners)$/;"	f	class:ImDrawList
AddInputCharacter	support/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacter(ImWchar c)$/;"	f	class:ImGuiIO
AddInputCharactersUTF8	support/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO
AddLine	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddPolyline	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, bool closed, float thickness)$/;"	f	class:ImDrawList
AddQuad	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddQuadFilled	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col)$/;"	f	class:ImDrawList
AddRanges	support/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder
AddRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, int rounding_corners_flags, float thickness)$/;"	f	class:ImDrawList
AddRectFilled	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, int rounding_corners_flags)$/;"	f	class:ImDrawList
AddRectFilledMultiColor	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& a, const ImVec2& c, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)$/;"	f	class:ImDrawList
AddRemapChar	support/imgui/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont
AddRootWindowToDrawData	support/imgui/imgui.cpp	/^static void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	file:
AddText	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect)$/;"	f	class:ImDrawList
AddText	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end)$/;"	f	class:ImDrawList
AddText	support/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder
AddTriangle	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddTriangleFilled	support/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList
AddWindowToDrawData	support/imgui/imgui.cpp	/^static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)$/;"	f	file:
AddWindowToSortBuffer	support/imgui/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window)$/;"	f	file:
AdvanceCursor	support/imgui/imgui_internal.h	/^    bool        AdvanceCursor;$/;"	m	struct:ImGuiGroupData
AdvanceX	support/imgui/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)$/;"	m	struct:ImFontGlyph
AlignFirstTextHeightToWidgets	support/imgui/imgui.h	/^    static inline void  AlignFirstTextHeightToWidgets()       { AlignTextToFramePadding(); }$/;"	f	namespace:ImGui
AlignTextToFramePadding	support/imgui/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui
AlignUp	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline uint64_t AlignUp(uint64_t byteCount)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
AllocateImage	support/tinyexr/tinyexr.h	/^static unsigned char **AllocateImage(int num_channels,$/;"	f	namespace:tinyexr
Alpha	support/imgui/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in ImGui.$/;"	m	struct:ImGuiStyle
AlphaMode	cuda/MaterialData.h	/^    enum AlphaMode$/;"	g	struct:MaterialData
Ambient	cuda/Light.h	/^    struct Ambient$/;"	s	class:Light::Type
AngleMax12	support/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	file:
AngleMin12	support/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	file:
Animation	support/tinygltf/tiny_gltf.h	/^struct Animation {$/;"	s	namespace:tinygltf
AnimationChannel	support/tinygltf/tiny_gltf.h	/^  AnimationChannel() : sampler(-1), target_node(-1) {}$/;"	f	struct:tinygltf::AnimationChannel
AnimationChannel	support/tinygltf/tiny_gltf.h	/^struct AnimationChannel {$/;"	s	namespace:tinygltf
AnimationMode	optixDynamicGeometry/vertices.h	/^enum AnimationMode$/;"	g
AnimationMode	optixMotionGeometry/vertices.h	/^enum AnimationMode$/;"	g
AnimationMode_Deform	optixDynamicGeometry/vertices.h	/^    AnimationMode_Deform,$/;"	e	enum:AnimationMode
AnimationMode_Deform	optixMotionGeometry/vertices.h	/^    AnimationMode_Deform,$/;"	e	enum:AnimationMode
AnimationMode_Explode	optixDynamicGeometry/vertices.h	/^    AnimationMode_Explode$/;"	e	enum:AnimationMode
AnimationMode_Explode	optixMotionGeometry/vertices.h	/^    AnimationMode_Explode$/;"	e	enum:AnimationMode
AnimationMode_None	optixDynamicGeometry/vertices.h	/^    AnimationMode_None,$/;"	e	enum:AnimationMode
AnimationMode_None	optixMotionGeometry/vertices.h	/^    AnimationMode_None,$/;"	e	enum:AnimationMode
AnimationSampler	support/tinygltf/tiny_gltf.h	/^  AnimationSampler() : input(-1), output(-1), interpolation("LINEAR") {}$/;"	f	struct:tinygltf::AnimationSampler
AnimationSampler	support/tinygltf/tiny_gltf.h	/^struct AnimationSampler {$/;"	s	namespace:tinygltf
AntiAliasedFill	support/imgui/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)$/;"	m	struct:ImGuiStyle
AntiAliasedLines	support/imgui/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliasing on lines\/borders. Disable if you are really tight on CPU\/GPU.$/;"	m	struct:ImGuiStyle
Appearing	support/imgui/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where the window is appearing (or re-appearing)$/;"	m	struct:ImGuiWindow
Array	support/tinygltf/tiny_gltf.h	/^  typedef std::vector<Value> Array;$/;"	t	class:tinygltf::Value
ArrayBegin	support/tinygltf/tiny_gltf.h	/^json_const_array_iterator ArrayBegin(const json &o) {$/;"	f	namespace:tinygltf::__anon119
ArrayEnd	support/tinygltf/tiny_gltf.h	/^json_const_array_iterator ArrayEnd(const json &o) {$/;"	f	namespace:tinygltf::__anon119
ArrayLen	support/tinygltf/tiny_gltf.h	/^  size_t ArrayLen() const {$/;"	f	class:tinygltf::Value
ArrowButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui
ArrowButtonEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui
Ascent	support/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]$/;"	m	struct:ImFont
Asset	support/tinygltf/tiny_gltf.h	/^struct Asset {$/;"	s	namespace:tinygltf
AttributeArray	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                           AttributeArray = 2,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass
AutoFitChildAxises	support/imgui/imgui_internal.h	/^    int                     AutoFitChildAxises;$/;"	m	struct:ImGuiWindow
AutoFitFramesX	support/imgui/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow
AutoFitFramesY	support/imgui/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow
AutoFitOnlyGrows	support/imgui/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow
AutoPosLastDirection	support/imgui/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow
AutoScroll	support/imgui/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	file:
AutoScroll	support/imgui/imgui_demo.cpp	/^    bool                AutoScroll;$/;"	m	struct:ExampleAppLog	file:
BATTERY_DEVTYPE_GAMEPAD	support/GLFW/deps/mingw/xinput.h	139;"	d
BATTERY_DEVTYPE_HEADSET	support/GLFW/deps/mingw/xinput.h	140;"	d
BATTERY_LEVEL_EMPTY	support/GLFW/deps/mingw/xinput.h	146;"	d
BATTERY_LEVEL_FULL	support/GLFW/deps/mingw/xinput.h	149;"	d
BATTERY_LEVEL_LOW	support/GLFW/deps/mingw/xinput.h	147;"	d
BATTERY_LEVEL_MEDIUM	support/GLFW/deps/mingw/xinput.h	148;"	d
BATTERY_TYPE_ALKALINE	support/GLFW/deps/mingw/xinput.h	143;"	d
BATTERY_TYPE_DISCONNECTED	support/GLFW/deps/mingw/xinput.h	141;"	d
BATTERY_TYPE_NIMH	support/GLFW/deps/mingw/xinput.h	144;"	d
BATTERY_TYPE_UNKNOWN	support/GLFW/deps/mingw/xinput.h	145;"	d
BATTERY_TYPE_WIRED	support/GLFW/deps/mingw/xinput.h	142;"	d
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__          BBox()$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox()$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox(BBox& other, const SplitT&)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox(const BaseBBox<Coord>& bbox) : BBox(bbox[0], bbox[1]) {}$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox(const Coord& min, const Coord& max)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox(const CoordT& min, const CoordT& max)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox(const Vec3T& min, const Vec3T& max)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct BBox<CoordT, false> : public BaseBBox<CoordT>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
BBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct BBox<Vec3T, true> : public BaseBBox<Vec3T>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
BEZIER	optixCurves/optixCurves.cpp	/^    BEZIER,$/;"	e	enum:BasisType	file:
BINARY_TYPE	support/tinygltf/tiny_gltf.h	/^  BINARY_TYPE = 6,$/;"	e	enum:tinygltf::__anon114
BITMAP_SIZE	support/tinyexr/tinyexr.h	/^const int BITMAP_SIZE = (USHORT_RANGE >> 3);$/;"	m	namespace:tinyexr
BLOSC	optixVolumeViewer/nanovdb/util/IO.h	/^                              BLOSC = 2,$/;"	m	class:nanovdb::io::Codec
BOOL_TYPE	support/tinygltf/tiny_gltf.h	/^  BOOL_TYPE = 3,$/;"	e	enum:tinygltf::__anon114
BSPLINE	optixCurves/optixCurves.cpp	/^    BSPLINE,$/;"	e	enum:BasisType	file:
BackendFlags	support/imgui/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags_ enum. Set by back-end (imgui_impl_xxx files or custom back-end) to communicate features supported by the back-end.$/;"	m	struct:ImGuiIO
BackendLanguageUserData	support/imgui/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendPlatformName	support/imgui/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendPlatformUserData	support/imgui/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendRendererName	support/imgui/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendRendererUserData	support/imgui/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
BackgroundDrawList	support/imgui/imgui_internal.h	/^    ImDrawList              BackgroundDrawList;                 \/\/ First draw list to be rendered.$/;"	m	struct:ImGuiContext
Backup	support/imgui/imgui_internal.h	/^    void Backup()           { ImGuiWindow* window = GImGui->CurrentWindow; LastItemId = window->DC.LastItemId; LastItemStatusFlags = window->DC.LastItemStatusFlags; LastItemRect = window->DC.LastItemRect; LastItemDisplayRect = window->DC.LastItemDisplayRect; }$/;"	f	struct:ImGuiItemHoveredDataBackup
BackupActiveIdIsAlive	support/imgui/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData
BackupActiveIdPreviousFrameIsAlive	support/imgui/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData
BackupCurrentLineSize	support/imgui/imgui_internal.h	/^    ImVec2      BackupCurrentLineSize;$/;"	m	struct:ImGuiGroupData
BackupCurrentLineTextBaseOffset	support/imgui/imgui_internal.h	/^    float       BackupCurrentLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData
BackupCursorMaxPos	support/imgui/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData
BackupCursorPos	support/imgui/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData
BackupFloat	support/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon87
BackupGroupOffset	support/imgui/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData
BackupIndent	support/imgui/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData
BackupInt	support/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon87
BackupValue	support/imgui/imgui_internal.h	/^    ImVec4      BackupValue;$/;"	m	struct:ImGuiColorMod
BarRect	support/imgui/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar
Base	optixMotionGeometry/motionHelper.hpp	/^    typedef MatrixMotionTransformArray Base;$/;"	t	class:__anon4::MatrixMotionTransform
Base	optixMotionGeometry/motionHelper.hpp	/^    typedef MotionTransformArrayBase<MatrixMotionTransformArray, OptixMatrixMotionTransform> Base;$/;"	t	class:__anon4::MatrixMotionTransformArray
Base	optixMotionGeometry/motionHelper.hpp	/^    typedef MotionTransformArrayBase<SRTMotionTransformArray, OptixSRTMotionTransform> Base;$/;"	t	class:__anon4::SRTMotionTransformArray
BaseBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BaseBBox() {}$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
BaseBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BaseBBox(const Vec3T& min, const Vec3T& max)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
BaseBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct BaseBBox$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
BasisType	optixCurves/optixCurves.cpp	/^enum BasisType$/;"	g	file:
BatteryLevel	support/GLFW/deps/mingw/xinput.h	/^    BYTE BatteryLevel;$/;"	m	struct:_XINPUT_BATTERY_INFORMATION
BatteryType	support/GLFW/deps/mingw/xinput.h	/^    BYTE BatteryType;$/;"	m	struct:_XINPUT_BATTERY_INFORMATION
Begin	support/imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui
Begin	support/imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_first_use, float bg_alpha_override, ImGuiWindowFlags flags)$/;"	f	class:ImGui
Begin	support/imgui/imgui.cpp	/^void ImGuiListClipper::Begin(int count, float items_height)$/;"	f	class:ImGuiListClipper
BeginChild	support/imgui/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginChild	support/imgui/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginChildEx	support/imgui/imgui.cpp	/^static bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginChildFrame	support/imgui/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginColumns	support/imgui/imgui.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)$/;"	f	class:ImGui
BeginCombo	support/imgui/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui
BeginCount	support/imgui/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple Begin\/End pairs)$/;"	m	struct:ImGuiWindow
BeginDragDropSource	support/imgui/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui
BeginDragDropTarget	support/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui
BeginDragDropTargetCustom	support/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui
BeginGroup	support/imgui/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui
BeginMainMenuBar	support/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui
BeginMenu	support/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui
BeginMenuBar	support/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui
BeginOrderWithinContext	support/imgui/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Order within entire imgui context. This is mostly used for debugging submission order related issues.$/;"	m	struct:ImGuiWindow
BeginOrderWithinParent	support/imgui/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Order within immediate parent window, if we are a child window. Otherwise 0.$/;"	m	struct:ImGuiWindow
BeginPopup	support/imgui/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginPopupContextItem	support/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)$/;"	f	class:ImGui
BeginPopupContextVoid	support/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)$/;"	f	class:ImGui
BeginPopupContextWindow	support/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, int mouse_button, bool also_over_items)$/;"	f	class:ImGui
BeginPopupEx	support/imgui/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginPopupModal	support/imgui/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginPopupStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupRef> BeginPopupStack;                    \/\/ Which level of BeginPopup() we are in (reset every frame)$/;"	m	struct:ImGuiContext
BeginTabBar	support/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui
BeginTabBarEx	support/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags)$/;"	f	class:ImGui
BeginTabItem	support/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui
BeginTooltip	support/imgui/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui
BeginTooltipEx	support/imgui/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, bool override_previous_tooltip)$/;"	f	class:ImGui
BgAlphaCond	support/imgui/imgui_internal.h	/^    ImGuiCond               BgAlphaCond;$/;"	m	struct:ImGuiNextWindowData
BgAlphaVal	support/imgui/imgui_internal.h	/^    float                   BgAlphaVal;$/;"	m	struct:ImGuiNextWindowData
BindAPI	support/GLFW/src/egl_context.h	/^    PFNEGLBINDAPIPROC               BindAPI;$/;"	m	struct:_GLFWlibraryEGL
BringWindowToDisplayBack	support/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui
BringWindowToDisplayFront	support/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui
BringWindowToFocusFront	support/imgui/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui
Buf	support/imgui/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer
Buf	support/imgui/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-write   \/\/ [Resize] Can replace pointer \/ [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!$/;"	m	struct:ImGuiInputTextCallbackData
Buf	support/imgui/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	file:
BufCapacityA	support/imgui/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState
BufDirty	support/imgui/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write        \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
BufSize	support/imgui/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only    \/\/ [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1$/;"	m	struct:ImGuiInputTextCallbackData
BufTextLen	support/imgui/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-write   \/\/ [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()$/;"	m	struct:ImGuiInputTextCallbackData
Buffer	support/tinygltf/tiny_gltf.h	/^struct Buffer {$/;"	s	namespace:tinygltf
BufferImageFormat	sutil/sutil.h	/^enum BufferImageFormat$/;"	g	namespace:sutil
BufferTraits	optixVolumeViewer/nanovdb/util/GridHandle.h	/^struct BufferTraits$/;"	s	namespace:nanovdb
BufferView	cuda/BufferView.h	/^struct BufferView$/;"	s
BufferView	support/tinygltf/tiny_gltf.h	/^  BufferView()$/;"	f	struct:tinygltf::BufferView
BufferView	support/tinygltf/tiny_gltf.h	/^struct BufferView {$/;"	s	namespace:tinygltf
Build	support/imgui/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter
Build	support/imgui/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas
BuildLookupTable	support/imgui/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont
BuildRanges	support/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder
BuildSortByKey	support/imgui/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage
Bullet	support/imgui/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui
BulletText	support/imgui/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui
BulletTextV	support/imgui/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui
Button	support/imgui/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui
Button6	support/GLFW/src/x11_window.c	48;"	d	file:
Button7	support/GLFW/src/x11_window.c	49;"	d	file:
ButtonBehavior	support/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)$/;"	f	class:ImGui
ButtonEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui
ButtonTextAlign	support/imgui/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).$/;"	m	struct:ImGuiStyle
Byte	support/tinyexr/tinyexr.h	/^typedef unsigned char Byte;$/;"	t
ByteStride	support/tinygltf/tiny_gltf.h	/^  int ByteStride(const BufferView &bufferViewObject) const {$/;"	f	struct:tinygltf::Accessor
Bytef	support/tinyexr/tinyexr.h	/^typedef Byte Bytef;$/;"	t
CALLBACK	support/GLFW/include/GLFW/glfw3.h	114;"	d
CALLBACK	support/GLFW/include/GLFW/glfw3.h	4236;"	d
CATROM	optixCurves/optixCurves.cpp	/^    CATROM$/;"	e	enum:BasisType	file:
CATROM_CURVE_ARRAY	cuda/GeometryData.h	/^        CATROM_CURVE_ARRAY    = 7,$/;"	e	enum:GeometryData::Type
CATROM_SPLINE	optixHair/Hair.h	/^        CATROM_SPLINE$/;"	e	enum:Hair::SplineMode
CHANGEFILTERSTRUCT	support/GLFW/src/win32_platform.h	/^} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;$/;"	t	typeref:struct:tagCHANGEFILTERSTRUCT
CHANGEWINDOWMESSAGEFILTEREX_T	support/GLFW/src/win32_platform.h	/^typedef BOOL (WINAPI * CHANGEWINDOWMESSAGEFILTEREX_T)(HWND,UINT,DWORD,PCHANGEFILTERSTRUCT);$/;"	t
CHECKERBOARD_OMM_SUBDIV_LEVEL	optixCutouts/optixCutouts.cpp	/^constexpr int CHECKERBOARD_OMM_SUBDIV_LEVEL = 3;$/;"	v
CHECKERBOARD_SIZE	optixCutouts/optixCutouts.cpp	/^constexpr int CHECKERBOARD_SIZE = 1 << CHECKERBOARD_OMM_SUBDIV_LEVEL;$/;"	v
CHECKER_PHONG	cuda/MaterialData.h	/^        CHECKER_PHONG = 3$/;"	e	enum:MaterialData::Type
CIRCLE_OMM_SUBDIV_LEVEL	optixCutouts/optixCutouts.cpp	/^constexpr int CIRCLE_OMM_SUBDIV_LEVEL = 5;$/;"	v
CIRCLE_RADIUS	optixCutouts/optixCutouts.h	35;"	d
CIRCLE_RADIUS	optixOpacityMicromap/optixOpacityMicromap.h	/^constexpr float CIRCLE_RADIUS = 0.75f;$/;"	v
CLIPBOARD	support/GLFW/src/x11_platform.h	/^    Atom            CLIPBOARD;$/;"	m	struct:_GLFWlibraryX11
CLIPBOARD_MANAGER	support/GLFW/src/x11_platform.h	/^    Atom            CLIPBOARD_MANAGER;$/;"	m	struct:_GLFWlibraryX11
CLOCK_REALTIME	support/GLFW/deps/tinycthread.h	126;"	d
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	109;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	123;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	175;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	198;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	205;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	220;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	228;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	264;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	273;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	279;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	318;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	325;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	355;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	383;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	407;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	427;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	123;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	182;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	240;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	279;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	363;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
COMPILER_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	250;"	d	file:
COMPILER_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	257;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	259;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	322;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	398;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	403;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	259;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	316;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	396;"	d	file:
COMPILER_VERSION_INTERNAL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	291;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	307;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	319;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	340;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	35;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	367;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	386;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	395;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	400;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	409;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	290;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	301;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	323;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	353;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	365;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	398;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	184;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	208;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	236;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	242;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	292;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	330;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	358;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	368;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	401;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	415;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	156;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	192;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	230;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	236;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	275;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	286;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	302;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	314;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	335;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	356;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	399;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	269;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	309;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	321;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	331;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	343;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	388;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	397;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	411;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	416;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	209;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	359;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	386;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	395;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	315;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	379;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	389;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	377;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	387;"	d	file:
COMPILER_VERSION_TWEAK	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILE_WITH_TASKS_CHECK	lib/CompileWithTasks.h	50;"	d
COMPOUND_STRING	support/GLFW/src/x11_platform.h	/^    Atom            COMPOUND_STRING;$/;"	m	struct:_GLFWlibraryX11
COM_NO_WINDOWS_H	support/GLFW/deps/mingw/dinput.h	22;"	d
CONSTANT_R	optixHair/Hair.h	/^        CONSTANT_R,$/;"	e	enum:Hair::Radius
CONST_STATIC_INIT	sutil/Preprocessor.h	35;"	d
CONST_STATIC_INIT	sutil/Preprocessor.h	39;"	d
COUNT	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    COUNT$/;"	e	enum:InstanceType	file:
CPOINT	support/GLFW/deps/mingw/dinput.h	/^} CPOINT, *PCPOINT;$/;"	t	typeref:struct:_CPOINT
CUBE_OBJECT	optixVolumeViewer/volume.h	/^    CUBE_OBJECT   = 1 << 1,$/;"	e	enum:ObjectType
CUBIC_BSPLINE	optixHair/Hair.h	/^        CUBIC_BSPLINE,$/;"	e	enum:Hair::SplineMode
CUBIC_CURVE_ARRAY	cuda/GeometryData.h	/^        CUBIC_CURVE_ARRAY     = 6,$/;"	e	enum:GeometryData::Type
CUDAOutputBuffer	sutil/CUDAOutputBuffer.h	/^CUDAOutputBuffer<PIXEL_FORMAT>::CUDAOutputBuffer( CUDAOutputBufferType type, int32_t width, int32_t height )$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
CUDAOutputBuffer	sutil/CUDAOutputBuffer.h	/^class CUDAOutputBuffer$/;"	c	class:sutil::CUDAOutputBufferType
CUDAOutputBufferType	sutil/CUDAOutputBuffer.h	/^enum class CUDAOutputBufferType$/;"	c	namespace:sutil
CUDA_CHECK	sutil/CuBuffer.h	287;"	d
CUDA_CHECK	sutil/CuBuffer.h	40;"	d
CUDA_CHECK	sutil/Exception.h	110;"	d
CUDA_CHECK_NOTHROW	sutil/Exception.h	116;"	d
CUDA_DEVICE	sutil/CUDAOutputBuffer.h	/^    CUDA_DEVICE = 0, \/\/ not preferred, typically slower than ZERO_COPY$/;"	m	class:sutil::CUDAOutputBufferType
CUDA_NVRTC_ENABLED	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	45;"	d
CUDA_NVRTC_ENABLED	optixConsole/sampleConfig.h	38;"	d
CUDA_NVRTC_OPTIONS	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	49;"	d
CUDA_NVRTC_OPTIONS	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	60;"	d
CUDA_NVRTC_OPTIONS	optixConsole/sampleConfig.h	41;"	d
CUDA_P2P	sutil/CUDAOutputBuffer.h	/^    CUDA_P2P    = 3  \/\/ fully connected only, preferred for fully nvlink connected$/;"	m	class:sutil::CUDAOutputBufferType
CUDA_SYNC_CHECK	sutil/Exception.h	112;"	d
CXX_STD	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	789;"	d	file:
CXX_STD	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	791;"	d	file:
CXX_STD	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	794;"	d	file:
CXX_STD	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	797;"	d	file:
CXX_STD	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	799;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	803;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	805;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	808;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	810;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	812;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	814;"	d	file:
C_VERSION	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	816;"	d	file:
CacheLevels	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int CacheLevels = 0;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
CacheLevels	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int CacheLevels = 1;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
CacheLevels	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int CacheLevels = 3;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
CalcCustomRectUV	support/imgui/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max)$/;"	f	class:ImFontAtlas
CalcExtraSpace	support/imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::CalcExtraSpace(float avail_w)$/;"	f	class:ImGuiMenuColumns
CalcFontSize	support/imgui/imgui_internal.h	/^    float       CalcFontSize() const                    { return GImGui->FontBaseSize * FontWindowScale; }$/;"	f	struct:ImGuiWindow
CalcItemRectClosestPoint	support/imgui/imgui.h	/^    static inline ImVec2 CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge = false, float outward = 0.f) { IM_UNUSED(on_edge); IM_UNUSED(outward); IM_ASSERT(0); return pos; }$/;"	f	namespace:ImGui
CalcItemSize	support/imgui/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)$/;"	f	class:ImGui
CalcItemWidth	support/imgui/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui
CalcListClipping	support/imgui/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)$/;"	f	class:ImGui
CalcMaxPopupHeightFromItemCount	support/imgui/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	file:
CalcNextScrollFromScrollTargetAndClamp	support/imgui/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges)$/;"	f	file:
CalcResizePosSizeFromAnyCorner	support/imgui/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, const ImVec2& corner_norm, ImVec2* out_pos, ImVec2* out_size)$/;"	f	file:
CalcSizeAfterConstraint	support/imgui/imgui.cpp	/^static ImVec2 CalcSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)$/;"	f	file:
CalcSizeAutoFit	support/imgui/imgui.cpp	/^static ImVec2 CalcSizeAutoFit(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	file:
CalcSizeContents	support/imgui/imgui.cpp	/^static ImVec2 CalcSizeContents(ImGuiWindow* window)$/;"	f	file:
CalcTextSize	support/imgui/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)$/;"	f	class:ImGui
CalcTextSizeA	support/imgui/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining) const$/;"	f	class:ImFont
CalcTypematicPressedRepeatAmount	support/imgui/imgui.cpp	/^int ImGui::CalcTypematicPressedRepeatAmount(float t, float t_prev, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui
CalcWindowExpectedSize	support/imgui/imgui.cpp	/^ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)$/;"	f	class:ImGui
CalcWordWrapPositionA	support/imgui/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const$/;"	f	class:ImFont
CalcWrapWidthForPos	support/imgui/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui
CallableProgramsHitGroupData	optixCallablePrograms/optixCallablePrograms.h	/^struct CallableProgramsHitGroupData : whitted::HitGroupData$/;"	s
CallableProgramsState	optixCallablePrograms/optixCallablePrograms.cpp	/^struct CallableProgramsState$/;"	s	file:
CallablesRecord	optixCallablePrograms/optixCallablePrograms.cpp	/^typedef Record<EmptyData>                    CallablesRecord;$/;"	t	file:
Camera	support/tinygltf/tiny_gltf.h	/^  Camera() {}$/;"	f	struct:tinygltf::Camera
Camera	support/tinygltf/tiny_gltf.h	/^struct Camera {$/;"	s	namespace:tinygltf
Camera	sutil/Camera.h	/^    SUTILAPI Camera()$/;"	f	class:sutil::Camera
Camera	sutil/Camera.h	/^    SUTILAPI Camera(const float3& eye, const float3& lookat, const float3& up, float fovY, float aspectRatio)$/;"	f	class:sutil::Camera
Camera	sutil/Camera.h	/^class Camera {$/;"	c	namespace:sutil
Capacity	support/imgui/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector
CaptureKeyboardFromApp	support/imgui/imgui.cpp	/^void ImGui::CaptureKeyboardFromApp(bool capture)$/;"	f	class:ImGui
CaptureMouseFromApp	support/imgui/imgui.cpp	/^void ImGui::CaptureMouseFromApp(bool capture)$/;"	f	class:ImGui
Ceil	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Ceil(double x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Ceil	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Ceil(float x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
ChangeWindowMessageFilterEx	support/GLFW/src/win32_platform.h	/^        CHANGEWINDOWMESSAGEFILTEREX_T ChangeWindowMessageFilterEx;$/;"	m	struct:_GLFWlibraryWin32::__anon15
ChannelInfo	support/tinyexr/tinyexr.h	/^} ChannelInfo;$/;"	t	namespace:tinyexr	typeref:struct:tinyexr::__anon63
ChannelsMerge	support/imgui/imgui_draw.cpp	/^void ImDrawList::ChannelsMerge()$/;"	f	class:ImDrawList
ChannelsSetCurrent	support/imgui/imgui_draw.cpp	/^void ImDrawList::ChannelsSetCurrent(int idx)$/;"	f	class:ImDrawList
ChannelsSplit	support/imgui/imgui_draw.cpp	/^void ImDrawList::ChannelsSplit(int channels_count)$/;"	f	class:ImDrawList
CheckProgram	support/imgui/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	file:
CheckShader	support/imgui/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	file:
CheckStacksSize	support/imgui/imgui.cpp	/^static void CheckStacksSize(ImGuiWindow* window, bool write)$/;"	f	file:
Checkbox	support/imgui/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui
CheckboxFlags	support/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui
CheckerPhong	cuda/MaterialData.h	/^    struct CheckerPhong$/;"	s	struct:MaterialData
ChildBorderSize	support/imgui/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
ChildId	support/imgui/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in parent window (for navigation to return from child window to parent window)$/;"	m	struct:ImGuiWindow
ChildNodeType	optixVolumeViewer/nanovdb/NanoVDB.h	/^    struct ChildNodeType$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
ChildRounding	support/imgui/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to 0.0f to have rectangular windows.$/;"	m	struct:ImGuiStyle
ChildWindowComparer	support/imgui/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	file:
ChildWindows	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData
CircleVtx12	support/imgui/imgui_internal.h	/^    ImVec2          CircleVtx12[12];$/;"	m	struct:ImDrawListSharedData
Clamp	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline double Clamp(double x, double a, double b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Clamp	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline float Clamp(float x, float a, float b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Clear	support/imgui/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter
Clear	support/imgui/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage
Clear	support/imgui/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }$/;"	f	struct:ImGuiPayload
Clear	support/imgui/imgui.h	/^    void Clear()    { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; DisplayPos = DisplaySize = FramebufferScale = ImVec2(0.f, 0.f); } \/\/ The ImDrawList are owned by ImGuiContext!$/;"	f	struct:ImDrawData
Clear	support/imgui/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog
Clear	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas
Clear	support/imgui/imgui_draw.cpp	/^void ImDrawList::Clear()$/;"	f	class:ImDrawList
Clear	support/imgui/imgui_internal.h	/^    void            Clear()                 { Storage.clear(); }$/;"	f	struct:ImBoolVector
Clear	support/imgui/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { int idx = Map.Data[n].val_i; if (idx != -1) Data[idx].~T(); } Map.Clear(); Data.clear(); FreeIdx = 0; }$/;"	f	struct:ImPool
Clear	support/imgui/imgui_internal.h	/^    void    Clear()$/;"	f	struct:ImGuiNextWindowData
Clear	support/imgui/imgui_internal.h	/^    void Clear()            { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].resize(0); }$/;"	f	struct:ImDrawDataBuilder
Clear	support/imgui/imgui_internal.h	/^    void Clear()         { ID = SelectScopeId = 0; Window = NULL; DistBox = DistCenter = DistAxial = FLT_MAX; RectRel = ImRect(); }$/;"	f	struct:ImGuiNavMoveResult
Clear	support/imgui/imgui_internal.h	/^    void Clear()$/;"	f	struct:ImGuiColumnsSet
ClearActiveID	support/imgui/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui
ClearDragDrop	support/imgui/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui
ClearFonts	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas
ClearFreeMemory	support/imgui/imgui_draw.cpp	/^void ImDrawList::ClearFreeMemory()$/;"	f	class:ImDrawList
ClearFreeMemory	support/imgui/imgui_internal.h	/^    void                ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear(); }$/;"	f	struct:ImGuiInputTextState
ClearFreeMemory	support/imgui/imgui_internal.h	/^    void ClearFreeMemory()  { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].clear(); }$/;"	f	struct:ImDrawDataBuilder
ClearInputCharacters	support/imgui/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO
ClearInputData	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas
ClearLog	support/imgui/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole
ClearOutputData	support/imgui/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont
ClearSelection	support/imgui/imgui_internal.h	/^    void                ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState
ClearTexData	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas
ClipRect	support/imgui/imgui.h	/^    ImVec4          ClipRect;               \/\/ Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates$/;"	m	struct:ImDrawCmd
ClipRect	support/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping rectangle. = DrawList->clip_rect_stack.back(). Scissoring \/ clipping rectangle. x1, y1, x2, y2.$/;"	m	struct:ImGuiWindow
ClipRect	support/imgui/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiColumnData
ClipRectFullscreen	support/imgui/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData
ClipWith	support/imgui/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, r.Max); }                   \/\/ Simple version, may lead to an inverted rectangle, which is fine for Contains\/Overlaps test but not for display.$/;"	f	struct:ImRect
ClipWithFull	support/imgui/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = ImClamp(Max, r.Min, r.Max); } \/\/ Full version, ensure both points are fully clipped.$/;"	f	struct:ImRect
ClipboardUserData	support/imgui/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO
CloneOutput	support/imgui/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList
CloseButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)$/;"	f	class:ImGui
CloseCurrentPopup	support/imgui/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui
ClosePopupToLevel	support/imgui/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool apply_focus_to_window_under)$/;"	f	class:ImGui
ClosePopupsOverWindow	support/imgui/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window)$/;"	f	class:ImGui
CmdBuffer	support/imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.$/;"	m	struct:ImDrawList
CmdBuffer	support/imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;$/;"	m	struct:ImDrawChannel
CmdLists	support/imgui/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.$/;"	m	struct:ImDrawData
CmdListsCount	support/imgui/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData
Codec	optixVolumeViewer/nanovdb/util/IO.h	/^enum class Codec : uint16_t { NONE = 0,$/;"	c	namespace:nanovdb::io
Codepoint	support/imgui/imgui.h	/^    ImWchar         Codepoint;          \/\/ 0x0000..0xFFFF$/;"	m	struct:ImFontGlyph
Col	support/imgui/imgui_internal.h	/^    ImGuiCol    Col;$/;"	m	struct:ImGuiColorMod
CollapseButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui
Collapsed	support/imgui/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window to become only title-bar$/;"	m	struct:ImGuiWindow
Collapsed	support/imgui/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings
CollapsedCond	support/imgui/imgui_internal.h	/^    ImGuiCond               CollapsedCond;$/;"	m	struct:ImGuiNextWindowData
CollapsedVal	support/imgui/imgui_internal.h	/^    bool                    CollapsedVal;$/;"	m	struct:ImGuiNextWindowData
CollapsingHeader	support/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
CollapsingHeader	support/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
Color	support/imgui/imgui_demo.cpp	/^    ImVec4      Color;          \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	file:
ColorButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)$/;"	f	class:ImGui
ColorConvertFloat4ToU32	support/imgui/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui
ColorConvertHSVtoRGB	support/imgui/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)$/;"	f	class:ImGui
ColorConvertRGBtoHSV	support/imgui/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)$/;"	f	class:ImGui
ColorConvertU32ToFloat4	support/imgui/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui
ColorEdit3	support/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorEdit4	support/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorEditOptions	support/imgui/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for color edit widgets$/;"	m	struct:ImGuiContext
ColorEditOptionsPopup	support/imgui/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorFactor	support/tinygltf/tiny_gltf.h	/^  ColorValue ColorFactor() const {$/;"	f	struct:tinygltf::Parameter
ColorModifiers	support/imgui/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorModifiers;                     \/\/ Stack for PushStyleColor()\/PopStyleColor()$/;"	m	struct:ImGuiContext
ColorPicker3	support/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorPicker4	support/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)$/;"	f	class:ImGui
ColorPickerOptionsPopup	support/imgui/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorPickerRef	support/imgui/imgui_internal.h	/^    ImVec4                  ColorPickerRef;$/;"	m	struct:ImGuiContext
ColorTooltip	support/imgui/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
Colors	support/imgui/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle
Columns	support/imgui/imgui.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui
Columns	support/imgui/imgui_internal.h	/^    ImVector<ImGuiColumnData> Columns;$/;"	m	struct:ImGuiColumnsSet
ColumnsMinSpacing	support/imgui/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns.$/;"	m	struct:ImGuiStyle
ColumnsOffset	support/imgui/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API.$/;"	m	struct:ImGuiWindowTempData
ColumnsSet	support/imgui/imgui_internal.h	/^    ImGuiColumnsSet*        ColumnsSet;             \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData
ColumnsStorage	support/imgui/imgui_internal.h	/^    ImVector<ImGuiColumnsSet> ColumnsStorage;$/;"	m	struct:ImGuiWindow
Combo	support/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items)$/;"	f	class:ImGui
Combo	support/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)$/;"	f	class:ImGui
Combo	support/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)$/;"	f	class:ImGui
Commands	support/imgui/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	file:
CompileOperation	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct CompileOperation$/;"	s	file:
CompileWithTasks	lib/CompileWithTasks.h	/^namespace CompileWithTasks {$/;"	n	namespace:optix
CompressPiz	support/tinyexr/tinyexr.h	/^static bool CompressPiz(unsigned char *outPtr, unsigned int *outSize,$/;"	f	namespace:tinyexr
CompressRle	support/tinyexr/tinyexr.h	/^static void CompressRle(unsigned char *dst,$/;"	f	namespace:tinyexr
CompressZfp	support/tinyexr/tinyexr.h	/^bool CompressZfp(std::vector<unsigned char> *outBuf, unsigned int *outSize,$/;"	f	namespace:tinyexr
CompressZip	support/tinyexr/tinyexr.h	/^static void CompressZip(unsigned char *dst,$/;"	f	namespace:tinyexr
ComputeChannelLayout	support/tinyexr/tinyexr.h	/^static bool ComputeChannelLayout(std::vector<size_t> *channel_offset_list,$/;"	f	namespace:tinyexr
ConfigData	support/imgui/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Internal data$/;"	m	struct:ImFontAtlas
ConfigData	support/imgui/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Pointer within ContainerAtlas->ConfigData$/;"	m	struct:ImFont
ConfigDataCount	support/imgui/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.$/;"	m	struct:ImFont
ConfigFlags	support/imgui/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_ enum. Set by user\/application. Gamepad\/keyboard navigation options, etc.$/;"	m	struct:ImGuiIO
ConfigInputTextCursorBlink	support/imgui/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Set to false to disable blinking cursor, for users who consider it distracting. (was called: io.OptCursorBlink prior to 1.63)$/;"	m	struct:ImGuiIO
ConfigMacOSXBehaviors	support/imgui/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd\/Super instead of Ctrl, Line\/Text Start and End using Cmd+Arrows instead of Home\/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd\/Super instead of Ctrl (was called io.OptMacOSXBehaviors prior to 1.63)$/;"	m	struct:ImGuiIO
ConfigWindowsMoveFromTitleBarOnly	support/imgui/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.$/;"	m	struct:ImGuiIO
ConfigWindowsResizeFromEdges	support/imgui/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)$/;"	m	struct:ImGuiIO
ContainerAtlas	support/imgui/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ What we has been loaded into$/;"	m	struct:ImFont
Contains	support/imgui/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min.y && r.Max.x <= Max.x && r.Max.y <= Max.y; }$/;"	f	struct:ImRect
Contains	support/imgui/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min.y && p.x     <  Max.x && p.y     <  Max.y; }$/;"	f	struct:ImRect
Contains	support/imgui/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Data.Data && p < Data.Data + Data.Size); }$/;"	f	struct:ImPool
ContentSizeCond	support/imgui/imgui_internal.h	/^    ImGuiCond               ContentSizeCond;$/;"	m	struct:ImGuiNextWindowData
ContentSizeVal	support/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData
ContentsHeight	support/imgui/imgui_internal.h	/^    float               ContentsHeight;$/;"	m	struct:ImGuiTabBar
ContentsRegionRect	support/imgui/imgui_internal.h	/^    ImRect                  ContentsRegionRect;                 \/\/ FIXME: This is currently confusing\/misleading. Maximum visible content position ~~ Pos + (SizeContentsExplicit ? SizeContentsExplicit : Size - ScrollbarSizes) - CursorStartPos, per axis$/;"	m	struct:ImGuiWindow
ConvertHeader	support/tinyexr/tinyexr.h	/^static void ConvertHeader(EXRHeader *exr_header, const HeaderInfo &info) {$/;"	f	namespace:tinyexr
Coord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
Coord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord(ValueType *ptr)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
Coord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord(ValueType i, ValueType j, ValueType k)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
Coord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Coord(ValueType n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
Coord	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Coord$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
CoordToOffset	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t CoordToOffset(const CoordT& ijk)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
CoordToOffset	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t CoordToOffset(const CoordType& ijk)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
CopyCurrentKeyboardLayoutInputSource	support/GLFW/src/cocoa_platform.h	/^        PFN_TISCopyCurrentKeyboardLayoutInputSource CopyCurrentKeyboardLayoutInputSource;$/;"	m	struct:_GLFWlibraryNS::__anon27
CornerPosN	support/imgui/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	file:
Count	support/imgui/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	file:
Count	support/imgui/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiColumnsSet
CountGrep	support/imgui/imgui.h	/^    int                 CountGrep;$/;"	m	struct:ImGuiTextFilter
CountOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static inline uint32_t CountOn(uint64_t v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
CreateContext	support/GLFW/src/egl_context.h	/^    PFNEGLCREATECONTEXTPROC         CreateContext;$/;"	m	struct:_GLFWlibraryEGL
CreateContext	support/GLFW/src/wgl_context.h	/^    WGLCREATECONTEXT_T                  CreateContext;$/;"	m	struct:_GLFWlibraryWGL
CreateContext	support/imgui/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui
CreateContextAttribsARB	support/GLFW/src/glx_context.h	/^    PFNGLXCREATECONTEXTATTRIBSARBPROC   CreateContextAttribsARB;$/;"	m	struct:_GLFWlibraryGLX
CreateContextAttribsARB	support/GLFW/src/wgl_context.h	/^    PFNWGLCREATECONTEXTATTRIBSARBPROC   CreateContextAttribsARB;$/;"	m	struct:_GLFWlibraryWGL
CreateNewContext	support/GLFW/src/glx_context.h	/^    PFNGLXCREATENEWCONTEXTPROC          CreateNewContext;$/;"	m	struct:_GLFWlibraryGLX
CreateNewWindow	support/imgui/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)$/;"	f	file:
CreateNewWindowSettings	support/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui
CreateWindow	support/GLFW/src/glx_context.h	/^    PFNGLXCREATEWINDOWPROC              CreateWindow;$/;"	m	struct:_GLFWlibraryGLX
CreateWindowSurface	support/GLFW/src/egl_context.h	/^    PFNEGLCREATEWINDOWSURFACEPROC   CreateWindowSurface;$/;"	m	struct:_GLFWlibraryEGL
CuBuffer	sutil/CuBuffer.h	/^    CuBuffer( const std::vector<T>& data )$/;"	f	class:CuBuffer
CuBuffer	sutil/CuBuffer.h	/^    CuBuffer( size_t count = 0 )$/;"	f	class:CuBuffer
CuBuffer	sutil/CuBuffer.h	/^    CuBuffer( size_t count, const T* data )$/;"	f	class:CuBuffer
CuBuffer	sutil/CuBuffer.h	/^    CuBuffer( std::initializer_list<T> data )$/;"	f	class:CuBuffer
CuBuffer	sutil/CuBuffer.h	/^    CuBuffer(CuBuffer&& other)$/;"	f	class:CuBuffer
CuBuffer	sutil/CuBuffer.h	/^class CuBuffer$/;"	c
Cube	optixVolumeViewer/optixVolumeViewer.h	/^struct Cube$/;"	s
CubeAccel	optixVolumeViewer/optixVolumeViewer.h	/^struct CubeAccel$/;"	s
CubicInterpolator	cuda/curve.h	/^    __device__ __forceinline__ CubicInterpolator() {}$/;"	f	struct:CubicInterpolator
CubicInterpolator	cuda/curve.h	/^struct CubicInterpolator$/;"	s
CurLenA	support/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length in both UTF-8 and wchar format. UTF-8 len is valid even if TextA is not.$/;"	m	struct:ImGuiInputTextState
CurLenW	support/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length in both UTF-8 and wchar format. UTF-8 len is valid even if TextA is not.$/;"	m	struct:ImGuiInputTextState
CurrFrameVisible	support/imgui/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar
Current	support/imgui/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiColumnsSet
CurrentLineSize	support/imgui/imgui_internal.h	/^    ImVec2                  CurrentLineSize;$/;"	m	struct:ImGuiWindowTempData
CurrentLineTextBaseOffset	support/imgui/imgui_internal.h	/^    float                   CurrentLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData
CurrentSize	support/imgui/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData
CurrentTabBar	support/imgui/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext
CurrentTabBarStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiTabBarRef>        CurrentTabBarStack;$/;"	m	struct:ImGuiContext
CurrentWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Being drawn into$/;"	m	struct:ImGuiContext
CurrentWindowStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  CurrentWindowStack;$/;"	m	struct:ImGuiContext
CursorAnim	support/imgui/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every user action so the cursor reappears immediately$/;"	m	struct:ImGuiInputTextState
CursorAnimReset	support/imgui/imgui_internal.h	/^    void                CursorAnimReset()           { CursorAnim = -0.30f; }                                   \/\/ After a user-input the cursor stays on for a while without blinking$/;"	f	struct:ImGuiInputTextState
CursorClamp	support/imgui/imgui_internal.h	/^    void                CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.select_start = ImMin(Stb.select_start, CurLenW); Stb.select_end = ImMin(Stb.select_end, CurLenW); }$/;"	f	struct:ImGuiInputTextState
CursorFollow	support/imgui/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow the current cursor position (not always!)$/;"	m	struct:ImGuiInputTextState
CursorMaxPos	support/imgui/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate the size of our contents, always growing during the frame. Turned into window->SizeContents at the beginning of next frame$/;"	m	struct:ImGuiWindowTempData
CursorPos	support/imgui/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
CursorPos	support/imgui/imgui_internal.h	/^    ImVec2                  CursorPos;$/;"	m	struct:ImGuiWindowTempData
CursorPosPrevLine	support/imgui/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData
CursorStartPos	support/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position in client area with padding$/;"	m	struct:ImGuiWindowTempData
CurveTessellationTol	support/imgui/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.$/;"	m	struct:ImGuiStyle
CurveTessellationTol	support/imgui/imgui_internal.h	/^    float           CurveTessellationTol;$/;"	m	struct:ImDrawListSharedData
Curves	cuda/GeometryData.h	/^    struct Curves$/;"	s	struct:GeometryData
CustomRect	support/imgui/imgui.h	/^        CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }$/;"	f	struct:ImFontAtlas::CustomRect
CustomRect	support/imgui/imgui.h	/^    struct CustomRect$/;"	s	struct:ImFontAtlas
CustomRectIds	support/imgui/imgui.h	/^    int                         CustomRectIds[1];   \/\/ Identifiers of custom texture rectangle used by ImFontAtlas\/ImDrawList$/;"	m	struct:ImFontAtlas
CustomRects	support/imgui/imgui.h	/^    ImVector<CustomRect>        CustomRects;        \/\/ Rectangles for packing custom texture data into the atlas.$/;"	m	struct:ImFontAtlas
CutoutsHitGroupData	optixCutouts/optixCutouts.h	/^struct CutoutsHitGroupData : whitted::HitGroupData$/;"	s
CutoutsState	optixCutouts/optixCutouts.cpp	/^struct CutoutsState$/;"	s	file:
D3DCOLOR	support/GLFW/deps/mingw/dinput.h	/^typedef DWORD D3DCOLOR;$/;"	t
D3DCOLOR_DEFINED	support/GLFW/deps/mingw/dinput.h	1354;"	d
DC	support/imgui/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the "DC" variable name.$/;"	m	struct:ImGuiWindow
DDA	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ DDA(const RayT& ray) { this->init(ray); }$/;"	f	class:nanovdb::DDA
DDA	optixVolumeViewer/nanovdb/util/HDDA.h	/^class DDA$/;"	c	namespace:nanovdb
DEC	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	720;"	d	file:
DEC	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	705;"	d	file:
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput2A,IDirectInputA)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput2W,IDirectInputW)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput7A,IDirectInput2A)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput7W,IDirectInput2W)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput8A,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInput8W,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputA,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice2A,IDirectInputDeviceA)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice2W,IDirectInputDeviceW)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice7A,IDirectInputDevice2A)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice7W,IDirectInputDevice2W)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice8A,IDirectInputDevice7A)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice8W,IDirectInputDevice7W)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDeviceA,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputDeviceW,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputEffect,IUnknown)$/;"	f
DECLARE_INTERFACE_	support/GLFW/deps/mingw/dinput.h	/^DECLARE_INTERFACE_(IDirectInputW,IUnknown)$/;"	f
DECL_WINELIB_TYPE_AW	support/GLFW/deps/mingw/_mingw_dxhelper.h	112;"	d
DECL_WINELIB_TYPE_AW	support/GLFW/deps/mingw/_mingw_dxhelper.h	114;"	d
DEFAULT_HEIGHT	optixOpacityMicromap/optixOpacityMicromap.cpp	/^constexpr int DEFAULT_HEIGHT   =  768;$/;"	v
DEFAULT_METHODS	support/tinygltf/tiny_gltf.h	86;"	d
DEFAULT_WIDTH	optixOpacityMicromap/optixOpacityMicromap.cpp	/^constexpr int DEFAULT_WIDTH    = 1024;$/;"	v
DI8DEVCLASS_ALL	support/GLFW/deps/mingw/dinput.h	230;"	d
DI8DEVCLASS_DEVICE	support/GLFW/deps/mingw/dinput.h	231;"	d
DI8DEVCLASS_GAMECTRL	support/GLFW/deps/mingw/dinput.h	234;"	d
DI8DEVCLASS_KEYBOARD	support/GLFW/deps/mingw/dinput.h	233;"	d
DI8DEVCLASS_POINTER	support/GLFW/deps/mingw/dinput.h	232;"	d
DI8DEVTYPE1STPERSON_LIMITED	support/GLFW/deps/mingw/dinput.h	318;"	d
DI8DEVTYPE1STPERSON_SHOOTER	support/GLFW/deps/mingw/dinput.h	321;"	d
DI8DEVTYPE1STPERSON_SIXDOF	support/GLFW/deps/mingw/dinput.h	320;"	d
DI8DEVTYPE1STPERSON_UNKNOWN	support/GLFW/deps/mingw/dinput.h	319;"	d
DI8DEVTYPEDEVICECTRL_COMMSSELECTION	support/GLFW/deps/mingw/dinput.h	331;"	d
DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED	support/GLFW/deps/mingw/dinput.h	332;"	d
DI8DEVTYPEDEVICECTRL_UNKNOWN	support/GLFW/deps/mingw/dinput.h	330;"	d
DI8DEVTYPEDRIVING_COMBINEDPEDALS	support/GLFW/deps/mingw/dinput.h	308;"	d
DI8DEVTYPEDRIVING_DUALPEDALS	support/GLFW/deps/mingw/dinput.h	309;"	d
DI8DEVTYPEDRIVING_HANDHELD	support/GLFW/deps/mingw/dinput.h	311;"	d
DI8DEVTYPEDRIVING_LIMITED	support/GLFW/deps/mingw/dinput.h	307;"	d
DI8DEVTYPEDRIVING_THREEPEDALS	support/GLFW/deps/mingw/dinput.h	310;"	d
DI8DEVTYPEFLIGHT_LIMITED	support/GLFW/deps/mingw/dinput.h	313;"	d
DI8DEVTYPEFLIGHT_RC	support/GLFW/deps/mingw/dinput.h	316;"	d
DI8DEVTYPEFLIGHT_STICK	support/GLFW/deps/mingw/dinput.h	314;"	d
DI8DEVTYPEFLIGHT_YOKE	support/GLFW/deps/mingw/dinput.h	315;"	d
DI8DEVTYPEGAMEPAD_LIMITED	support/GLFW/deps/mingw/dinput.h	303;"	d
DI8DEVTYPEGAMEPAD_STANDARD	support/GLFW/deps/mingw/dinput.h	304;"	d
DI8DEVTYPEGAMEPAD_TILT	support/GLFW/deps/mingw/dinput.h	305;"	d
DI8DEVTYPEJOYSTICK_LIMITED	support/GLFW/deps/mingw/dinput.h	300;"	d
DI8DEVTYPEJOYSTICK_STANDARD	support/GLFW/deps/mingw/dinput.h	301;"	d
DI8DEVTYPEKEYBOARD_J3100	support/GLFW/deps/mingw/dinput.h	296;"	d
DI8DEVTYPEKEYBOARD_JAPAN106	support/GLFW/deps/mingw/dinput.h	294;"	d
DI8DEVTYPEKEYBOARD_JAPANAX	support/GLFW/deps/mingw/dinput.h	295;"	d
DI8DEVTYPEKEYBOARD_NEC98	support/GLFW/deps/mingw/dinput.h	291;"	d
DI8DEVTYPEKEYBOARD_NEC98106	support/GLFW/deps/mingw/dinput.h	293;"	d
DI8DEVTYPEKEYBOARD_NEC98LAPTOP	support/GLFW/deps/mingw/dinput.h	292;"	d
DI8DEVTYPEKEYBOARD_NOKIA1050	support/GLFW/deps/mingw/dinput.h	289;"	d
DI8DEVTYPEKEYBOARD_NOKIA9140	support/GLFW/deps/mingw/dinput.h	290;"	d
DI8DEVTYPEKEYBOARD_OLIVETTI	support/GLFW/deps/mingw/dinput.h	286;"	d
DI8DEVTYPEKEYBOARD_PCAT	support/GLFW/deps/mingw/dinput.h	287;"	d
DI8DEVTYPEKEYBOARD_PCENH	support/GLFW/deps/mingw/dinput.h	288;"	d
DI8DEVTYPEKEYBOARD_PCXT	support/GLFW/deps/mingw/dinput.h	285;"	d
DI8DEVTYPEKEYBOARD_UNKNOWN	support/GLFW/deps/mingw/dinput.h	284;"	d
DI8DEVTYPEMOUSE_ABSOLUTE	support/GLFW/deps/mingw/dinput.h	282;"	d
DI8DEVTYPEMOUSE_FINGERSTICK	support/GLFW/deps/mingw/dinput.h	279;"	d
DI8DEVTYPEMOUSE_TOUCHPAD	support/GLFW/deps/mingw/dinput.h	280;"	d
DI8DEVTYPEMOUSE_TRACKBALL	support/GLFW/deps/mingw/dinput.h	281;"	d
DI8DEVTYPEMOUSE_TRADITIONAL	support/GLFW/deps/mingw/dinput.h	278;"	d
DI8DEVTYPEMOUSE_UNKNOWN	support/GLFW/deps/mingw/dinput.h	277;"	d
DI8DEVTYPEREMOTE_UNKNOWN	support/GLFW/deps/mingw/dinput.h	328;"	d
DI8DEVTYPESCREENPTR_LIGHTGUN	support/GLFW/deps/mingw/dinput.h	324;"	d
DI8DEVTYPESCREENPTR_LIGHTPEN	support/GLFW/deps/mingw/dinput.h	325;"	d
DI8DEVTYPESCREENPTR_TOUCH	support/GLFW/deps/mingw/dinput.h	326;"	d
DI8DEVTYPESCREENPTR_UNKNOWN	support/GLFW/deps/mingw/dinput.h	323;"	d
DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER	support/GLFW/deps/mingw/dinput.h	335;"	d
DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS	support/GLFW/deps/mingw/dinput.h	342;"	d
DI8DEVTYPESUPPLEMENTAL_DUALPEDALS	support/GLFW/deps/mingw/dinput.h	343;"	d
DI8DEVTYPESUPPLEMENTAL_HANDTRACKER	support/GLFW/deps/mingw/dinput.h	337;"	d
DI8DEVTYPESUPPLEMENTAL_HEADTRACKER	support/GLFW/deps/mingw/dinput.h	336;"	d
DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS	support/GLFW/deps/mingw/dinput.h	345;"	d
DI8DEVTYPESUPPLEMENTAL_SHIFTER	support/GLFW/deps/mingw/dinput.h	339;"	d
DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE	support/GLFW/deps/mingw/dinput.h	338;"	d
DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE	support/GLFW/deps/mingw/dinput.h	341;"	d
DI8DEVTYPESUPPLEMENTAL_THREEPEDALS	support/GLFW/deps/mingw/dinput.h	344;"	d
DI8DEVTYPESUPPLEMENTAL_THROTTLE	support/GLFW/deps/mingw/dinput.h	340;"	d
DI8DEVTYPESUPPLEMENTAL_UNKNOWN	support/GLFW/deps/mingw/dinput.h	334;"	d
DI8DEVTYPE_1STPERSON	support/GLFW/deps/mingw/dinput.h	243;"	d
DI8DEVTYPE_DEVICE	support/GLFW/deps/mingw/dinput.h	236;"	d
DI8DEVTYPE_DEVICECTRL	support/GLFW/deps/mingw/dinput.h	244;"	d
DI8DEVTYPE_DRIVING	support/GLFW/deps/mingw/dinput.h	241;"	d
DI8DEVTYPE_FLIGHT	support/GLFW/deps/mingw/dinput.h	242;"	d
DI8DEVTYPE_GAMEPAD	support/GLFW/deps/mingw/dinput.h	240;"	d
DI8DEVTYPE_JOYSTICK	support/GLFW/deps/mingw/dinput.h	239;"	d
DI8DEVTYPE_KEYBOARD	support/GLFW/deps/mingw/dinput.h	238;"	d
DI8DEVTYPE_LIMITEDGAMESUBTYPE	support/GLFW/deps/mingw/dinput.h	298;"	d
DI8DEVTYPE_MOUSE	support/GLFW/deps/mingw/dinput.h	237;"	d
DI8DEVTYPE_REMOTE	support/GLFW/deps/mingw/dinput.h	246;"	d
DI8DEVTYPE_SCREENPOINTER	support/GLFW/deps/mingw/dinput.h	245;"	d
DI8DEVTYPE_SUPPLEMENTAL	support/GLFW/deps/mingw/dinput.h	247;"	d
DIACTIONA	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONA, *LPDIACTIONA;$/;"	t	typeref:struct:_DIACTIONA
DIACTIONFORMATA	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONFORMATA, *LPDIACTIONFORMATA;$/;"	t	typeref:struct:_DIACTIONFORMATA
DIACTIONFORMATW	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONFORMATW, *LPDIACTIONFORMATW;$/;"	t	typeref:struct:_DIACTIONFORMATW
DIACTIONW	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONW, *LPDIACTIONW;$/;"	t	typeref:struct:_DIACTIONW
DIAFTS_NEWDEVICEHIGH	support/GLFW/deps/mingw/dinput.h	1336;"	d
DIAFTS_NEWDEVICELOW	support/GLFW/deps/mingw/dinput.h	1335;"	d
DIAFTS_UNUSEDDEVICEHIGH	support/GLFW/deps/mingw/dinput.h	1338;"	d
DIAFTS_UNUSEDDEVICELOW	support/GLFW/deps/mingw/dinput.h	1337;"	d
DIAH_APPREQUESTED	support/GLFW/deps/mingw/dinput.h	1289;"	d
DIAH_DEFAULT	support/GLFW/deps/mingw/dinput.h	1292;"	d
DIAH_ERROR	support/GLFW/deps/mingw/dinput.h	1293;"	d
DIAH_HWAPP	support/GLFW/deps/mingw/dinput.h	1290;"	d
DIAH_HWDEFAULT	support/GLFW/deps/mingw/dinput.h	1291;"	d
DIAH_UNMAPPED	support/GLFW/deps/mingw/dinput.h	1287;"	d
DIAH_USERCONFIG	support/GLFW/deps/mingw/dinput.h	1288;"	d
DIA_APPFIXED	support/GLFW/deps/mingw/dinput.h	1285;"	d
DIA_APPMAPPED	support/GLFW/deps/mingw/dinput.h	1282;"	d
DIA_APPNOMAP	support/GLFW/deps/mingw/dinput.h	1283;"	d
DIA_FORCEFEEDBACK	support/GLFW/deps/mingw/dinput.h	1281;"	d
DIA_NORANGE	support/GLFW/deps/mingw/dinput.h	1284;"	d
DICD_DEFAULT	support/GLFW/deps/mingw/dinput.h	1349;"	d
DICD_EDIT	support/GLFW/deps/mingw/dinput.h	1350;"	d
DICOLORSET	support/GLFW/deps/mingw/dinput.h	/^} DICOLORSET, *LPDICOLORSET;$/;"	t	typeref:struct:_DICOLORSET
DICONDITION	support/GLFW/deps/mingw/dinput.h	/^typedef struct DICONDITION {$/;"	s
DICONDITION	support/GLFW/deps/mingw/dinput.h	/^} DICONDITION, *LPDICONDITION;$/;"	t	typeref:struct:DICONDITION
DICONFIGUREDEVICESPARAMSA	support/GLFW/deps/mingw/dinput.h	/^} DICONFIGUREDEVICESPARAMSA, *LPDICONFIGUREDEVICESPARAMSA;$/;"	t	typeref:struct:_DICONFIGUREDEVICESPARAMSA
DICONFIGUREDEVICESPARAMSW	support/GLFW/deps/mingw/dinput.h	/^} DICONFIGUREDEVICESPARAMSW, *LPDICONFIGUREDEVICESPARAMSW;$/;"	t	typeref:struct:_DICONFIGUREDEVICESPARAMSW
DICONSTANTFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DICONSTANTFORCE {$/;"	s
DICONSTANTFORCE	support/GLFW/deps/mingw/dinput.h	/^} DICONSTANTFORCE, *LPDICONSTANTFORCE;$/;"	t	typeref:struct:DICONSTANTFORCE
DICUSTOMFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DICUSTOMFORCE {$/;"	s
DICUSTOMFORCE	support/GLFW/deps/mingw/dinput.h	/^} DICUSTOMFORCE, *LPDICUSTOMFORCE;$/;"	t	typeref:struct:DICUSTOMFORCE
DIDAL_BOTTOMALIGNED	support/GLFW/deps/mingw/dinput.h	1406;"	d
DIDAL_CENTERED	support/GLFW/deps/mingw/dinput.h	1401;"	d
DIDAL_LEFTALIGNED	support/GLFW/deps/mingw/dinput.h	1402;"	d
DIDAL_MIDDLE	support/GLFW/deps/mingw/dinput.h	1404;"	d
DIDAL_RIGHTALIGNED	support/GLFW/deps/mingw/dinput.h	1403;"	d
DIDAL_TOPALIGNED	support/GLFW/deps/mingw/dinput.h	1405;"	d
DIDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^} DIDATAFORMAT, *LPDIDATAFORMAT;$/;"	t	typeref:struct:_DIDATAFORMAT
DIDBAM_DEFAULT	support/GLFW/deps/mingw/dinput.h	1340;"	d
DIDBAM_HWDEFAULTS	support/GLFW/deps/mingw/dinput.h	1343;"	d
DIDBAM_INITIALIZE	support/GLFW/deps/mingw/dinput.h	1342;"	d
DIDBAM_PRESERVE	support/GLFW/deps/mingw/dinput.h	1341;"	d
DIDC_ALIAS	support/GLFW/deps/mingw/dinput.h	934;"	d
DIDC_ATTACHED	support/GLFW/deps/mingw/dinput.h	922;"	d
DIDC_DEADBAND	support/GLFW/deps/mingw/dinput.h	932;"	d
DIDC_EMULATED	support/GLFW/deps/mingw/dinput.h	924;"	d
DIDC_FFATTACK	support/GLFW/deps/mingw/dinput.h	927;"	d
DIDC_FFFADE	support/GLFW/deps/mingw/dinput.h	928;"	d
DIDC_FORCEFEEDBACK	support/GLFW/deps/mingw/dinput.h	926;"	d
DIDC_HIDDEN	support/GLFW/deps/mingw/dinput.h	936;"	d
DIDC_PHANTOM	support/GLFW/deps/mingw/dinput.h	935;"	d
DIDC_POLLEDDATAFORMAT	support/GLFW/deps/mingw/dinput.h	925;"	d
DIDC_POLLEDDEVICE	support/GLFW/deps/mingw/dinput.h	923;"	d
DIDC_POSNEGCOEFFICIENTS	support/GLFW/deps/mingw/dinput.h	930;"	d
DIDC_POSNEGSATURATION	support/GLFW/deps/mingw/dinput.h	931;"	d
DIDC_SATURATION	support/GLFW/deps/mingw/dinput.h	929;"	d
DIDC_STARTDELAY	support/GLFW/deps/mingw/dinput.h	933;"	d
DIDEVCAPS	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVCAPS {$/;"	s
DIDEVCAPS	support/GLFW/deps/mingw/dinput.h	/^} DIDEVCAPS,*LPDIDEVCAPS;$/;"	t	typeref:struct:DIDEVCAPS
DIDEVCAPS_DX3	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVCAPS_DX3 {$/;"	s
DIDEVCAPS_DX3	support/GLFW/deps/mingw/dinput.h	/^} DIDEVCAPS_DX3, *LPDIDEVCAPS_DX3;$/;"	t	typeref:struct:DIDEVCAPS_DX3
DIDEVICEIMAGEINFOA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOA, *LPDIDEVICEIMAGEINFOA;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOA
DIDEVICEIMAGEINFOHEADERA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOHEADERA, *LPDIDEVICEIMAGEINFOHEADERA;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOHEADERA
DIDEVICEIMAGEINFOHEADERW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOHEADERW, *LPDIDEVICEIMAGEINFOHEADERW;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOHEADERW
DIDEVICEIMAGEINFOW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOW, *LPDIDEVICEIMAGEINFOW;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOW
DIDEVICEINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEINSTANCEA {$/;"	s
DIDEVICEINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCEA, *LPDIDEVICEINSTANCEA;$/;"	t	typeref:struct:DIDEVICEINSTANCEA
DIDEVICEINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEINSTANCEW {$/;"	s
DIDEVICEINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCEW, *LPDIDEVICEINSTANCEW;$/;"	t	typeref:struct:DIDEVICEINSTANCEW
DIDEVICEINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEINSTANCE_DX3A {$/;"	s
DIDEVICEINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCE_DX3A, *LPDIDEVICEINSTANCE_DX3A;$/;"	t	typeref:struct:DIDEVICEINSTANCE_DX3A
DIDEVICEINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEINSTANCE_DX3W {$/;"	s
DIDEVICEINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCE_DX3W, *LPDIDEVICEINSTANCE_DX3W;$/;"	t	typeref:struct:DIDEVICEINSTANCE_DX3W
DIDEVICEOBJECTDATA	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTDATA {$/;"	s
DIDEVICEOBJECTDATA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTDATA, *LPDIDEVICEOBJECTDATA;$/;"	t	typeref:struct:DIDEVICEOBJECTDATA
DIDEVICEOBJECTDATA_DX3	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTDATA_DX3 {$/;"	s
DIDEVICEOBJECTDATA_DX3	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTDATA_DX3,*LPDIDEVICEOBJECTDATA_DX3;$/;"	t	typeref:struct:DIDEVICEOBJECTDATA_DX3
DIDEVICEOBJECTINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTINSTANCEA {$/;"	s
DIDEVICEOBJECTINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCEA, *LPDIDEVICEOBJECTINSTANCEA;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCEA
DIDEVICEOBJECTINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTINSTANCEW {$/;"	s
DIDEVICEOBJECTINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCEW, *LPDIDEVICEOBJECTINSTANCEW;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCEW
DIDEVICEOBJECTINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTINSTANCE_DX3A {$/;"	s
DIDEVICEOBJECTINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCE_DX3A, *LPDIDEVICEOBJECTINSTANCE_DX3A;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCE_DX3A
DIDEVICEOBJECTINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIDEVICEOBJECTINSTANCE_DX3W {$/;"	s
DIDEVICEOBJECTINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCE_DX3W, *LPDIDEVICEOBJECTINSTANCE_DX3W;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCE_DX3W
DIDEVTYPEJOYSTICK_FLIGHTSTICK	support/GLFW/deps/mingw/dinput.h	271;"	d
DIDEVTYPEJOYSTICK_GAMEPAD	support/GLFW/deps/mingw/dinput.h	272;"	d
DIDEVTYPEJOYSTICK_HEADTRACKER	support/GLFW/deps/mingw/dinput.h	275;"	d
DIDEVTYPEJOYSTICK_RUDDER	support/GLFW/deps/mingw/dinput.h	273;"	d
DIDEVTYPEJOYSTICK_TRADITIONAL	support/GLFW/deps/mingw/dinput.h	270;"	d
DIDEVTYPEJOYSTICK_UNKNOWN	support/GLFW/deps/mingw/dinput.h	269;"	d
DIDEVTYPEJOYSTICK_WHEEL	support/GLFW/deps/mingw/dinput.h	274;"	d
DIDEVTYPEKEYBOARD_J3100	support/GLFW/deps/mingw/dinput.h	267;"	d
DIDEVTYPEKEYBOARD_JAPAN106	support/GLFW/deps/mingw/dinput.h	265;"	d
DIDEVTYPEKEYBOARD_JAPANAX	support/GLFW/deps/mingw/dinput.h	266;"	d
DIDEVTYPEKEYBOARD_NEC98	support/GLFW/deps/mingw/dinput.h	262;"	d
DIDEVTYPEKEYBOARD_NEC98106	support/GLFW/deps/mingw/dinput.h	264;"	d
DIDEVTYPEKEYBOARD_NEC98LAPTOP	support/GLFW/deps/mingw/dinput.h	263;"	d
DIDEVTYPEKEYBOARD_NOKIA1050	support/GLFW/deps/mingw/dinput.h	260;"	d
DIDEVTYPEKEYBOARD_NOKIA9140	support/GLFW/deps/mingw/dinput.h	261;"	d
DIDEVTYPEKEYBOARD_OLIVETTI	support/GLFW/deps/mingw/dinput.h	257;"	d
DIDEVTYPEKEYBOARD_PCAT	support/GLFW/deps/mingw/dinput.h	258;"	d
DIDEVTYPEKEYBOARD_PCENH	support/GLFW/deps/mingw/dinput.h	259;"	d
DIDEVTYPEKEYBOARD_PCXT	support/GLFW/deps/mingw/dinput.h	256;"	d
DIDEVTYPEKEYBOARD_UNKNOWN	support/GLFW/deps/mingw/dinput.h	255;"	d
DIDEVTYPEMOUSE_FINGERSTICK	support/GLFW/deps/mingw/dinput.h	251;"	d
DIDEVTYPEMOUSE_TOUCHPAD	support/GLFW/deps/mingw/dinput.h	252;"	d
DIDEVTYPEMOUSE_TRACKBALL	support/GLFW/deps/mingw/dinput.h	253;"	d
DIDEVTYPEMOUSE_TRADITIONAL	support/GLFW/deps/mingw/dinput.h	250;"	d
DIDEVTYPEMOUSE_UNKNOWN	support/GLFW/deps/mingw/dinput.h	249;"	d
DIDEVTYPE_DEVICE	support/GLFW/deps/mingw/dinput.h	224;"	d
DIDEVTYPE_HID	support/GLFW/deps/mingw/dinput.h	228;"	d
DIDEVTYPE_JOYSTICK	support/GLFW/deps/mingw/dinput.h	227;"	d
DIDEVTYPE_KEYBOARD	support/GLFW/deps/mingw/dinput.h	226;"	d
DIDEVTYPE_MOUSE	support/GLFW/deps/mingw/dinput.h	225;"	d
DIDFT_ABSAXIS	support/GLFW/deps/mingw/dinput.h	672;"	d
DIDFT_ALIAS	support/GLFW/deps/mingw/dinput.h	690;"	d
DIDFT_ALL	support/GLFW/deps/mingw/dinput.h	670;"	d
DIDFT_ANYINSTANCE	support/GLFW/deps/mingw/dinput.h	680;"	d
DIDFT_AXIS	support/GLFW/deps/mingw/dinput.h	673;"	d
DIDFT_BUTTON	support/GLFW/deps/mingw/dinput.h	676;"	d
DIDFT_COLLECTION	support/GLFW/deps/mingw/dinput.h	678;"	d
DIDFT_ENUMCOLLECTION	support/GLFW/deps/mingw/dinput.h	695;"	d
DIDFT_FFACTUATOR	support/GLFW/deps/mingw/dinput.h	685;"	d
DIDFT_FFEFFECTTRIGGER	support/GLFW/deps/mingw/dinput.h	686;"	d
DIDFT_GETINSTANCE	support/GLFW/deps/mingw/dinput.h	684;"	d
DIDFT_GETTYPE	support/GLFW/deps/mingw/dinput.h	683;"	d
DIDFT_INSTANCEMASK	support/GLFW/deps/mingw/dinput.h	681;"	d
DIDFT_MAKEINSTANCE	support/GLFW/deps/mingw/dinput.h	682;"	d
DIDFT_NOCOLLECTION	support/GLFW/deps/mingw/dinput.h	696;"	d
DIDFT_NODATA	support/GLFW/deps/mingw/dinput.h	679;"	d
DIDFT_OPTIONAL	support/GLFW/deps/mingw/dinput.h	693;"	d
DIDFT_OPTIONAL	support/GLFW/src/win32_platform.h	160;"	d
DIDFT_OUTPUT	support/GLFW/deps/mingw/dinput.h	688;"	d
DIDFT_POV	support/GLFW/deps/mingw/dinput.h	677;"	d
DIDFT_PSHBUTTON	support/GLFW/deps/mingw/dinput.h	674;"	d
DIDFT_RELAXIS	support/GLFW/deps/mingw/dinput.h	671;"	d
DIDFT_TGLBUTTON	support/GLFW/deps/mingw/dinput.h	675;"	d
DIDFT_VENDORDEFINED	support/GLFW/deps/mingw/dinput.h	689;"	d
DIDF_ABSAXIS	support/GLFW/deps/mingw/dinput.h	698;"	d
DIDF_RELAXIS	support/GLFW/deps/mingw/dinput.h	699;"	d
DIDIFT_CONFIGURATION	support/GLFW/deps/mingw/dinput.h	1398;"	d
DIDIFT_OVERLAY	support/GLFW/deps/mingw/dinput.h	1399;"	d
DIDOI_ASPECTACCEL	support/GLFW/deps/mingw/dinput.h	748;"	d
DIDOI_ASPECTFORCE	support/GLFW/deps/mingw/dinput.h	749;"	d
DIDOI_ASPECTMASK	support/GLFW/deps/mingw/dinput.h	750;"	d
DIDOI_ASPECTPOSITION	support/GLFW/deps/mingw/dinput.h	746;"	d
DIDOI_ASPECTVELOCITY	support/GLFW/deps/mingw/dinput.h	747;"	d
DIDOI_FFACTUATOR	support/GLFW/deps/mingw/dinput.h	743;"	d
DIDOI_FFEFFECTTRIGGER	support/GLFW/deps/mingw/dinput.h	744;"	d
DIDOI_GUIDISUSAGE	support/GLFW/deps/mingw/dinput.h	753;"	d
DIDOI_POLLED	support/GLFW/deps/mingw/dinput.h	745;"	d
DIDSAM_DEFAULT	support/GLFW/deps/mingw/dinput.h	1345;"	d
DIDSAM_FORCESAVE	support/GLFW/deps/mingw/dinput.h	1347;"	d
DIDSAM_NOUSER	support/GLFW/deps/mingw/dinput.h	1346;"	d
DIEB_NOTRIGGER	support/GLFW/deps/mingw/dinput.h	1011;"	d
DIEDBSFL_ATTACHEDONLY	support/GLFW/deps/mingw/dinput.h	485;"	d
DIEDBSFL_AVAILABLEDEVICES	support/GLFW/deps/mingw/dinput.h	488;"	d
DIEDBSFL_FORCEFEEDBACK	support/GLFW/deps/mingw/dinput.h	487;"	d
DIEDBSFL_MULTIMICEKEYBOARDS	support/GLFW/deps/mingw/dinput.h	489;"	d
DIEDBSFL_NONGAMINGDEVICES	support/GLFW/deps/mingw/dinput.h	490;"	d
DIEDBSFL_THISUSER	support/GLFW/deps/mingw/dinput.h	486;"	d
DIEDBSFL_VALID	support/GLFW/deps/mingw/dinput.h	491;"	d
DIEDBS_MAPPEDPRI1	support/GLFW/deps/mingw/dinput.h	480;"	d
DIEDBS_MAPPEDPRI2	support/GLFW/deps/mingw/dinput.h	481;"	d
DIEDBS_NEWDEVICE	support/GLFW/deps/mingw/dinput.h	483;"	d
DIEDBS_RECENTDEVICE	support/GLFW/deps/mingw/dinput.h	482;"	d
DIEDFL_ALLDEVICES	support/GLFW/deps/mingw/dinput.h	217;"	d
DIEDFL_ATTACHEDONLY	support/GLFW/deps/mingw/dinput.h	218;"	d
DIEDFL_FORCEFEEDBACK	support/GLFW/deps/mingw/dinput.h	219;"	d
DIEDFL_INCLUDEALIASES	support/GLFW/deps/mingw/dinput.h	220;"	d
DIEDFL_INCLUDEHIDDEN	support/GLFW/deps/mingw/dinput.h	222;"	d
DIEDFL_INCLUDEPHANTOMS	support/GLFW/deps/mingw/dinput.h	221;"	d
DIEFFECT	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIEFFECT {$/;"	s
DIEFFECT	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECT, *LPDIEFFECT;$/;"	t	typeref:struct:DIEFFECT
DIEFFECTINFOA	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIEFFECTINFOA {$/;"	s
DIEFFECTINFOA	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECTINFOA, *LPDIEFFECTINFOA;$/;"	t	typeref:struct:DIEFFECTINFOA
DIEFFECTINFOW	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIEFFECTINFOW {$/;"	s
DIEFFECTINFOW	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECTINFOW, *LPDIEFFECTINFOW;$/;"	t	typeref:struct:DIEFFECTINFOW
DIEFFECT_DX5	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIEFFECT_DX5 {$/;"	s
DIEFFECT_DX5	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECT_DX5, *LPDIEFFECT_DX5;$/;"	t	typeref:struct:DIEFFECT_DX5
DIEFFECT_DX6	support/GLFW/deps/mingw/dinput.h	/^typedef DIEFFECT DIEFFECT_DX6;$/;"	t
DIEFFESCAPE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIEFFESCAPE {$/;"	s
DIEFFESCAPE	support/GLFW/deps/mingw/dinput.h	/^} DIEFFESCAPE, *LPDIEFFESCAPE;$/;"	t	typeref:struct:DIEFFESCAPE
DIEFF_CARTESIAN	support/GLFW/deps/mingw/dinput.h	988;"	d
DIEFF_OBJECTIDS	support/GLFW/deps/mingw/dinput.h	986;"	d
DIEFF_OBJECTOFFSETS	support/GLFW/deps/mingw/dinput.h	987;"	d
DIEFF_POLAR	support/GLFW/deps/mingw/dinput.h	989;"	d
DIEFF_SPHERICAL	support/GLFW/deps/mingw/dinput.h	990;"	d
DIEFT_ALL	support/GLFW/deps/mingw/dinput.h	969;"	d
DIEFT_CONDITION	support/GLFW/deps/mingw/dinput.h	974;"	d
DIEFT_CONSTANTFORCE	support/GLFW/deps/mingw/dinput.h	971;"	d
DIEFT_CUSTOMFORCE	support/GLFW/deps/mingw/dinput.h	975;"	d
DIEFT_DEADBAND	support/GLFW/deps/mingw/dinput.h	982;"	d
DIEFT_FFATTACK	support/GLFW/deps/mingw/dinput.h	977;"	d
DIEFT_FFFADE	support/GLFW/deps/mingw/dinput.h	978;"	d
DIEFT_GETTYPE	support/GLFW/deps/mingw/dinput.h	984;"	d
DIEFT_HARDWARE	support/GLFW/deps/mingw/dinput.h	976;"	d
DIEFT_PERIODIC	support/GLFW/deps/mingw/dinput.h	973;"	d
DIEFT_POSNEGCOEFFICIENTS	support/GLFW/deps/mingw/dinput.h	980;"	d
DIEFT_POSNEGSATURATION	support/GLFW/deps/mingw/dinput.h	981;"	d
DIEFT_RAMPFORCE	support/GLFW/deps/mingw/dinput.h	972;"	d
DIEFT_SATURATION	support/GLFW/deps/mingw/dinput.h	979;"	d
DIEFT_STARTDELAY	support/GLFW/deps/mingw/dinput.h	983;"	d
DIEGES_EMULATED	support/GLFW/deps/mingw/dinput.h	1017;"	d
DIEGES_PLAYING	support/GLFW/deps/mingw/dinput.h	1016;"	d
DIENUM_CONTINUE	support/GLFW/deps/mingw/dinput.h	215;"	d
DIENUM_STOP	support/GLFW/deps/mingw/dinput.h	214;"	d
DIENVELOPE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIENVELOPE {$/;"	s
DIENVELOPE	support/GLFW/deps/mingw/dinput.h	/^} DIENVELOPE, *LPDIENVELOPE;$/;"	t	typeref:struct:DIENVELOPE
DIEP_ALLPARAMS	support/GLFW/deps/mingw/dinput.h	1004;"	d
DIEP_ALLPARAMS	support/GLFW/deps/mingw/dinput.h	1006;"	d
DIEP_ALLPARAMS_DX5	support/GLFW/deps/mingw/dinput.h	1003;"	d
DIEP_AXES	support/GLFW/deps/mingw/dinput.h	997;"	d
DIEP_DIRECTION	support/GLFW/deps/mingw/dinput.h	998;"	d
DIEP_DURATION	support/GLFW/deps/mingw/dinput.h	992;"	d
DIEP_ENVELOPE	support/GLFW/deps/mingw/dinput.h	999;"	d
DIEP_GAIN	support/GLFW/deps/mingw/dinput.h	994;"	d
DIEP_NODOWNLOAD	support/GLFW/deps/mingw/dinput.h	1010;"	d
DIEP_NORESTART	support/GLFW/deps/mingw/dinput.h	1009;"	d
DIEP_SAMPLEPERIOD	support/GLFW/deps/mingw/dinput.h	993;"	d
DIEP_START	support/GLFW/deps/mingw/dinput.h	1008;"	d
DIEP_STARTDELAY	support/GLFW/deps/mingw/dinput.h	1002;"	d
DIEP_TRIGGERBUTTON	support/GLFW/deps/mingw/dinput.h	995;"	d
DIEP_TRIGGERREPEATINTERVAL	support/GLFW/deps/mingw/dinput.h	996;"	d
DIEP_TYPESPECIFICPARAMS	support/GLFW/deps/mingw/dinput.h	1000;"	d
DIERR_ACQUIRED	support/GLFW/deps/mingw/dinput.h	192;"	d
DIERR_ALREADYINITIALIZED	support/GLFW/deps/mingw/dinput.h	186;"	d
DIERR_BADDRIVERVER	support/GLFW/deps/mingw/dinput.h	172;"	d
DIERR_BETADIRECTINPUTVERSION	support/GLFW/deps/mingw/dinput.h	170;"	d
DIERR_DEVICEFULL	support/GLFW/deps/mingw/dinput.h	202;"	d
DIERR_DEVICENOTREG	support/GLFW/deps/mingw/dinput.h	174;"	d
DIERR_EFFECTPLAYING	support/GLFW/deps/mingw/dinput.h	209;"	d
DIERR_GENERIC	support/GLFW/deps/mingw/dinput.h	181;"	d
DIERR_HANDLEEXISTS	support/GLFW/deps/mingw/dinput.h	197;"	d
DIERR_HASEFFECTS	support/GLFW/deps/mingw/dinput.h	205;"	d
DIERR_INCOMPLETEEFFECT	support/GLFW/deps/mingw/dinput.h	207;"	d
DIERR_INPUTLOST	support/GLFW/deps/mingw/dinput.h	190;"	d
DIERR_INSUFFICIENTPRIVS	support/GLFW/deps/mingw/dinput.h	201;"	d
DIERR_INVALIDPARAM	support/GLFW/deps/mingw/dinput.h	179;"	d
DIERR_MAPFILEFAIL	support/GLFW/deps/mingw/dinput.h	212;"	d
DIERR_MOREDATA	support/GLFW/deps/mingw/dinput.h	203;"	d
DIERR_NOAGGREGATION	support/GLFW/deps/mingw/dinput.h	188;"	d
DIERR_NOINTERFACE	support/GLFW/deps/mingw/dinput.h	180;"	d
DIERR_NOTACQUIRED	support/GLFW/deps/mingw/dinput.h	194;"	d
DIERR_NOTBUFFERED	support/GLFW/deps/mingw/dinput.h	208;"	d
DIERR_NOTDOWNLOADED	support/GLFW/deps/mingw/dinput.h	204;"	d
DIERR_NOTEXCLUSIVEACQUIRED	support/GLFW/deps/mingw/dinput.h	206;"	d
DIERR_NOTFOUND	support/GLFW/deps/mingw/dinput.h	175;"	d
DIERR_NOTINITIALIZED	support/GLFW/deps/mingw/dinput.h	184;"	d
DIERR_OBJECTNOTFOUND	support/GLFW/deps/mingw/dinput.h	177;"	d
DIERR_OLDDIRECTINPUTVERSION	support/GLFW/deps/mingw/dinput.h	168;"	d
DIERR_OTHERAPPHASPRIO	support/GLFW/deps/mingw/dinput.h	189;"	d
DIERR_OUTOFMEMORY	support/GLFW/deps/mingw/dinput.h	182;"	d
DIERR_READONLY	support/GLFW/deps/mingw/dinput.h	196;"	d
DIERR_REPORTFULL	support/GLFW/deps/mingw/dinput.h	211;"	d
DIERR_UNPLUGGED	support/GLFW/deps/mingw/dinput.h	210;"	d
DIERR_UNSUPPORTED	support/GLFW/deps/mingw/dinput.h	183;"	d
DIES_NODOWNLOAD	support/GLFW/deps/mingw/dinput.h	1014;"	d
DIES_SOLO	support/GLFW/deps/mingw/dinput.h	1013;"	d
DIFILEEFFECT	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIFILEEFFECT {$/;"	s
DIFILEEFFECT	support/GLFW/deps/mingw/dinput.h	/^} DIFILEEFFECT, *LPDIFILEEFFECT;$/;"	t	typeref:struct:DIFILEEFFECT
DIGDD_PEEK	support/GLFW/deps/mingw/dinput.h	701;"	d
DIGFFS_ACTUATORSOFF	support/GLFW/deps/mingw/dinput.h	959;"	d
DIGFFS_ACTUATORSON	support/GLFW/deps/mingw/dinput.h	958;"	d
DIGFFS_DEVICELOST	support/GLFW/deps/mingw/dinput.h	966;"	d
DIGFFS_EMPTY	support/GLFW/deps/mingw/dinput.h	955;"	d
DIGFFS_PAUSED	support/GLFW/deps/mingw/dinput.h	957;"	d
DIGFFS_POWEROFF	support/GLFW/deps/mingw/dinput.h	961;"	d
DIGFFS_POWERON	support/GLFW/deps/mingw/dinput.h	960;"	d
DIGFFS_SAFETYSWITCHOFF	support/GLFW/deps/mingw/dinput.h	963;"	d
DIGFFS_SAFETYSWITCHON	support/GLFW/deps/mingw/dinput.h	962;"	d
DIGFFS_STOPPED	support/GLFW/deps/mingw/dinput.h	956;"	d
DIGFFS_USERFFSWITCHOFF	support/GLFW/deps/mingw/dinput.h	965;"	d
DIGFFS_USERFFSWITCHON	support/GLFW/deps/mingw/dinput.h	964;"	d
DIJOFS_BUTTON	support/GLFW/deps/mingw/dinput.h	1199;"	d
DIJOFS_BUTTON0	support/GLFW/deps/mingw/dinput.h	1200;"	d
DIJOFS_BUTTON1	support/GLFW/deps/mingw/dinput.h	1201;"	d
DIJOFS_BUTTON10	support/GLFW/deps/mingw/dinput.h	1210;"	d
DIJOFS_BUTTON11	support/GLFW/deps/mingw/dinput.h	1211;"	d
DIJOFS_BUTTON12	support/GLFW/deps/mingw/dinput.h	1212;"	d
DIJOFS_BUTTON13	support/GLFW/deps/mingw/dinput.h	1213;"	d
DIJOFS_BUTTON14	support/GLFW/deps/mingw/dinput.h	1214;"	d
DIJOFS_BUTTON15	support/GLFW/deps/mingw/dinput.h	1215;"	d
DIJOFS_BUTTON16	support/GLFW/deps/mingw/dinput.h	1216;"	d
DIJOFS_BUTTON17	support/GLFW/deps/mingw/dinput.h	1217;"	d
DIJOFS_BUTTON18	support/GLFW/deps/mingw/dinput.h	1218;"	d
DIJOFS_BUTTON19	support/GLFW/deps/mingw/dinput.h	1219;"	d
DIJOFS_BUTTON2	support/GLFW/deps/mingw/dinput.h	1202;"	d
DIJOFS_BUTTON20	support/GLFW/deps/mingw/dinput.h	1220;"	d
DIJOFS_BUTTON21	support/GLFW/deps/mingw/dinput.h	1221;"	d
DIJOFS_BUTTON22	support/GLFW/deps/mingw/dinput.h	1222;"	d
DIJOFS_BUTTON23	support/GLFW/deps/mingw/dinput.h	1223;"	d
DIJOFS_BUTTON24	support/GLFW/deps/mingw/dinput.h	1224;"	d
DIJOFS_BUTTON25	support/GLFW/deps/mingw/dinput.h	1225;"	d
DIJOFS_BUTTON26	support/GLFW/deps/mingw/dinput.h	1226;"	d
DIJOFS_BUTTON27	support/GLFW/deps/mingw/dinput.h	1227;"	d
DIJOFS_BUTTON28	support/GLFW/deps/mingw/dinput.h	1228;"	d
DIJOFS_BUTTON29	support/GLFW/deps/mingw/dinput.h	1229;"	d
DIJOFS_BUTTON3	support/GLFW/deps/mingw/dinput.h	1203;"	d
DIJOFS_BUTTON30	support/GLFW/deps/mingw/dinput.h	1230;"	d
DIJOFS_BUTTON31	support/GLFW/deps/mingw/dinput.h	1231;"	d
DIJOFS_BUTTON4	support/GLFW/deps/mingw/dinput.h	1204;"	d
DIJOFS_BUTTON5	support/GLFW/deps/mingw/dinput.h	1205;"	d
DIJOFS_BUTTON6	support/GLFW/deps/mingw/dinput.h	1206;"	d
DIJOFS_BUTTON7	support/GLFW/deps/mingw/dinput.h	1207;"	d
DIJOFS_BUTTON8	support/GLFW/deps/mingw/dinput.h	1208;"	d
DIJOFS_BUTTON9	support/GLFW/deps/mingw/dinput.h	1209;"	d
DIJOFS_POV	support/GLFW/deps/mingw/dinput.h	1197;"	d
DIJOFS_RX	support/GLFW/deps/mingw/dinput.h	1192;"	d
DIJOFS_RY	support/GLFW/deps/mingw/dinput.h	1193;"	d
DIJOFS_RZ	support/GLFW/deps/mingw/dinput.h	1194;"	d
DIJOFS_SLIDER	support/GLFW/deps/mingw/dinput.h	1195;"	d
DIJOFS_X	support/GLFW/deps/mingw/dinput.h	1189;"	d
DIJOFS_Y	support/GLFW/deps/mingw/dinput.h	1190;"	d
DIJOFS_Z	support/GLFW/deps/mingw/dinput.h	1191;"	d
DIJOYSTATE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIJOYSTATE {$/;"	s
DIJOYSTATE	support/GLFW/deps/mingw/dinput.h	/^} DIJOYSTATE, *LPDIJOYSTATE;$/;"	t	typeref:struct:DIJOYSTATE
DIJOYSTATE2	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIJOYSTATE2 {$/;"	s
DIJOYSTATE2	support/GLFW/deps/mingw/dinput.h	/^} DIJOYSTATE2, *LPDIJOYSTATE2;$/;"	t	typeref:struct:DIJOYSTATE2
DIK_0	support/GLFW/deps/mingw/dinput.h	519;"	d
DIK_1	support/GLFW/deps/mingw/dinput.h	510;"	d
DIK_2	support/GLFW/deps/mingw/dinput.h	511;"	d
DIK_3	support/GLFW/deps/mingw/dinput.h	512;"	d
DIK_4	support/GLFW/deps/mingw/dinput.h	513;"	d
DIK_5	support/GLFW/deps/mingw/dinput.h	514;"	d
DIK_6	support/GLFW/deps/mingw/dinput.h	515;"	d
DIK_7	support/GLFW/deps/mingw/dinput.h	516;"	d
DIK_8	support/GLFW/deps/mingw/dinput.h	517;"	d
DIK_9	support/GLFW/deps/mingw/dinput.h	518;"	d
DIK_A	support/GLFW/deps/mingw/dinput.h	538;"	d
DIK_ABNT_C1	support/GLFW/deps/mingw/dinput.h	599;"	d
DIK_ABNT_C2	support/GLFW/deps/mingw/dinput.h	603;"	d
DIK_ADD	support/GLFW/deps/mingw/dinput.h	586;"	d
DIK_APOSTROPHE	support/GLFW/deps/mingw/dinput.h	548;"	d
DIK_APPS	support/GLFW/deps/mingw/dinput.h	640;"	d
DIK_AT	support/GLFW/deps/mingw/dinput.h	606;"	d
DIK_AX	support/GLFW/deps/mingw/dinput.h	611;"	d
DIK_B	support/GLFW/deps/mingw/dinput.h	556;"	d
DIK_BACK	support/GLFW/deps/mingw/dinput.h	522;"	d
DIK_BACKSLASH	support/GLFW/deps/mingw/dinput.h	551;"	d
DIK_BACKSPACE	support/GLFW/deps/mingw/dinput.h	654;"	d
DIK_C	support/GLFW/deps/mingw/dinput.h	554;"	d
DIK_CALCULATOR	support/GLFW/deps/mingw/dinput.h	617;"	d
DIK_CAPITAL	support/GLFW/deps/mingw/dinput.h	566;"	d
DIK_CAPSLOCK	support/GLFW/deps/mingw/dinput.h	657;"	d
DIK_CIRCUMFLEX	support/GLFW/deps/mingw/dinput.h	605;"	d
DIK_COLON	support/GLFW/deps/mingw/dinput.h	607;"	d
DIK_COMMA	support/GLFW/deps/mingw/dinput.h	559;"	d
DIK_CONVERT	support/GLFW/deps/mingw/dinput.h	600;"	d
DIK_D	support/GLFW/deps/mingw/dinput.h	540;"	d
DIK_DECIMAL	support/GLFW/deps/mingw/dinput.h	591;"	d
DIK_DELETE	support/GLFW/deps/mingw/dinput.h	637;"	d
DIK_DIVIDE	support/GLFW/deps/mingw/dinput.h	624;"	d
DIK_DOWN	support/GLFW/deps/mingw/dinput.h	634;"	d
DIK_DOWNARROW	support/GLFW/deps/mingw/dinput.h	667;"	d
DIK_E	support/GLFW/deps/mingw/dinput.h	526;"	d
DIK_END	support/GLFW/deps/mingw/dinput.h	633;"	d
DIK_EQUALS	support/GLFW/deps/mingw/dinput.h	521;"	d
DIK_ESCAPE	support/GLFW/deps/mingw/dinput.h	509;"	d
DIK_F	support/GLFW/deps/mingw/dinput.h	541;"	d
DIK_F1	support/GLFW/deps/mingw/dinput.h	567;"	d
DIK_F10	support/GLFW/deps/mingw/dinput.h	576;"	d
DIK_F11	support/GLFW/deps/mingw/dinput.h	593;"	d
DIK_F12	support/GLFW/deps/mingw/dinput.h	594;"	d
DIK_F13	support/GLFW/deps/mingw/dinput.h	595;"	d
DIK_F14	support/GLFW/deps/mingw/dinput.h	596;"	d
DIK_F15	support/GLFW/deps/mingw/dinput.h	597;"	d
DIK_F2	support/GLFW/deps/mingw/dinput.h	568;"	d
DIK_F3	support/GLFW/deps/mingw/dinput.h	569;"	d
DIK_F4	support/GLFW/deps/mingw/dinput.h	570;"	d
DIK_F5	support/GLFW/deps/mingw/dinput.h	571;"	d
DIK_F6	support/GLFW/deps/mingw/dinput.h	572;"	d
DIK_F7	support/GLFW/deps/mingw/dinput.h	573;"	d
DIK_F8	support/GLFW/deps/mingw/dinput.h	574;"	d
DIK_F9	support/GLFW/deps/mingw/dinput.h	575;"	d
DIK_G	support/GLFW/deps/mingw/dinput.h	542;"	d
DIK_GRAVE	support/GLFW/deps/mingw/dinput.h	549;"	d
DIK_H	support/GLFW/deps/mingw/dinput.h	543;"	d
DIK_HOME	support/GLFW/deps/mingw/dinput.h	628;"	d
DIK_I	support/GLFW/deps/mingw/dinput.h	531;"	d
DIK_INSERT	support/GLFW/deps/mingw/dinput.h	636;"	d
DIK_J	support/GLFW/deps/mingw/dinput.h	544;"	d
DIK_K	support/GLFW/deps/mingw/dinput.h	545;"	d
DIK_KANA	support/GLFW/deps/mingw/dinput.h	598;"	d
DIK_KANJI	support/GLFW/deps/mingw/dinput.h	609;"	d
DIK_L	support/GLFW/deps/mingw/dinput.h	546;"	d
DIK_LALT	support/GLFW/deps/mingw/dinput.h	656;"	d
DIK_LBRACKET	support/GLFW/deps/mingw/dinput.h	534;"	d
DIK_LCONTROL	support/GLFW/deps/mingw/dinput.h	537;"	d
DIK_LEFT	support/GLFW/deps/mingw/dinput.h	631;"	d
DIK_LEFTARROW	support/GLFW/deps/mingw/dinput.h	665;"	d
DIK_LMENU	support/GLFW/deps/mingw/dinput.h	564;"	d
DIK_LSHIFT	support/GLFW/deps/mingw/dinput.h	550;"	d
DIK_LWIN	support/GLFW/deps/mingw/dinput.h	638;"	d
DIK_M	support/GLFW/deps/mingw/dinput.h	558;"	d
DIK_MAIL	support/GLFW/deps/mingw/dinput.h	651;"	d
DIK_MEDIASELECT	support/GLFW/deps/mingw/dinput.h	652;"	d
DIK_MEDIASTOP	support/GLFW/deps/mingw/dinput.h	619;"	d
DIK_MINUS	support/GLFW/deps/mingw/dinput.h	520;"	d
DIK_MULTIPLY	support/GLFW/deps/mingw/dinput.h	563;"	d
DIK_MUTE	support/GLFW/deps/mingw/dinput.h	616;"	d
DIK_MYCOMPUTER	support/GLFW/deps/mingw/dinput.h	650;"	d
DIK_N	support/GLFW/deps/mingw/dinput.h	557;"	d
DIK_NEXT	support/GLFW/deps/mingw/dinput.h	635;"	d
DIK_NEXTTRACK	support/GLFW/deps/mingw/dinput.h	613;"	d
DIK_NOCONVERT	support/GLFW/deps/mingw/dinput.h	601;"	d
DIK_NUMLOCK	support/GLFW/deps/mingw/dinput.h	577;"	d
DIK_NUMPAD0	support/GLFW/deps/mingw/dinput.h	590;"	d
DIK_NUMPAD1	support/GLFW/deps/mingw/dinput.h	587;"	d
DIK_NUMPAD2	support/GLFW/deps/mingw/dinput.h	588;"	d
DIK_NUMPAD3	support/GLFW/deps/mingw/dinput.h	589;"	d
DIK_NUMPAD4	support/GLFW/deps/mingw/dinput.h	583;"	d
DIK_NUMPAD5	support/GLFW/deps/mingw/dinput.h	584;"	d
DIK_NUMPAD6	support/GLFW/deps/mingw/dinput.h	585;"	d
DIK_NUMPAD7	support/GLFW/deps/mingw/dinput.h	579;"	d
DIK_NUMPAD8	support/GLFW/deps/mingw/dinput.h	580;"	d
DIK_NUMPAD9	support/GLFW/deps/mingw/dinput.h	581;"	d
DIK_NUMPADCOMMA	support/GLFW/deps/mingw/dinput.h	623;"	d
DIK_NUMPADENTER	support/GLFW/deps/mingw/dinput.h	614;"	d
DIK_NUMPADEQUALS	support/GLFW/deps/mingw/dinput.h	604;"	d
DIK_NUMPADMINUS	support/GLFW/deps/mingw/dinput.h	658;"	d
DIK_NUMPADPERIOD	support/GLFW/deps/mingw/dinput.h	660;"	d
DIK_NUMPADPLUS	support/GLFW/deps/mingw/dinput.h	659;"	d
DIK_NUMPADSLASH	support/GLFW/deps/mingw/dinput.h	661;"	d
DIK_NUMPADSTAR	support/GLFW/deps/mingw/dinput.h	655;"	d
DIK_O	support/GLFW/deps/mingw/dinput.h	532;"	d
DIK_OEM_102	support/GLFW/deps/mingw/dinput.h	592;"	d
DIK_P	support/GLFW/deps/mingw/dinput.h	533;"	d
DIK_PAUSE	support/GLFW/deps/mingw/dinput.h	627;"	d
DIK_PERIOD	support/GLFW/deps/mingw/dinput.h	560;"	d
DIK_PGDN	support/GLFW/deps/mingw/dinput.h	668;"	d
DIK_PGUP	support/GLFW/deps/mingw/dinput.h	664;"	d
DIK_PLAYPAUSE	support/GLFW/deps/mingw/dinput.h	618;"	d
DIK_POWER	support/GLFW/deps/mingw/dinput.h	641;"	d
DIK_PRIOR	support/GLFW/deps/mingw/dinput.h	630;"	d
DIK_Q	support/GLFW/deps/mingw/dinput.h	524;"	d
DIK_R	support/GLFW/deps/mingw/dinput.h	527;"	d
DIK_RALT	support/GLFW/deps/mingw/dinput.h	662;"	d
DIK_RBRACKET	support/GLFW/deps/mingw/dinput.h	535;"	d
DIK_RCONTROL	support/GLFW/deps/mingw/dinput.h	615;"	d
DIK_RETURN	support/GLFW/deps/mingw/dinput.h	536;"	d
DIK_RIGHT	support/GLFW/deps/mingw/dinput.h	632;"	d
DIK_RIGHTARROW	support/GLFW/deps/mingw/dinput.h	666;"	d
DIK_RMENU	support/GLFW/deps/mingw/dinput.h	626;"	d
DIK_RSHIFT	support/GLFW/deps/mingw/dinput.h	562;"	d
DIK_RWIN	support/GLFW/deps/mingw/dinput.h	639;"	d
DIK_S	support/GLFW/deps/mingw/dinput.h	539;"	d
DIK_SCROLL	support/GLFW/deps/mingw/dinput.h	578;"	d
DIK_SEMICOLON	support/GLFW/deps/mingw/dinput.h	547;"	d
DIK_SLASH	support/GLFW/deps/mingw/dinput.h	561;"	d
DIK_SLEEP	support/GLFW/deps/mingw/dinput.h	642;"	d
DIK_SPACE	support/GLFW/deps/mingw/dinput.h	565;"	d
DIK_STOP	support/GLFW/deps/mingw/dinput.h	610;"	d
DIK_SUBTRACT	support/GLFW/deps/mingw/dinput.h	582;"	d
DIK_SYSRQ	support/GLFW/deps/mingw/dinput.h	625;"	d
DIK_T	support/GLFW/deps/mingw/dinput.h	528;"	d
DIK_TAB	support/GLFW/deps/mingw/dinput.h	523;"	d
DIK_U	support/GLFW/deps/mingw/dinput.h	530;"	d
DIK_UNDERLINE	support/GLFW/deps/mingw/dinput.h	608;"	d
DIK_UNLABELED	support/GLFW/deps/mingw/dinput.h	612;"	d
DIK_UP	support/GLFW/deps/mingw/dinput.h	629;"	d
DIK_UPARROW	support/GLFW/deps/mingw/dinput.h	663;"	d
DIK_V	support/GLFW/deps/mingw/dinput.h	555;"	d
DIK_VOLUMEDOWN	support/GLFW/deps/mingw/dinput.h	620;"	d
DIK_VOLUMEUP	support/GLFW/deps/mingw/dinput.h	621;"	d
DIK_W	support/GLFW/deps/mingw/dinput.h	525;"	d
DIK_WAKE	support/GLFW/deps/mingw/dinput.h	643;"	d
DIK_WEBBACK	support/GLFW/deps/mingw/dinput.h	649;"	d
DIK_WEBFAVORITES	support/GLFW/deps/mingw/dinput.h	645;"	d
DIK_WEBFORWARD	support/GLFW/deps/mingw/dinput.h	648;"	d
DIK_WEBHOME	support/GLFW/deps/mingw/dinput.h	622;"	d
DIK_WEBREFRESH	support/GLFW/deps/mingw/dinput.h	646;"	d
DIK_WEBSEARCH	support/GLFW/deps/mingw/dinput.h	644;"	d
DIK_WEBSTOP	support/GLFW/deps/mingw/dinput.h	647;"	d
DIK_X	support/GLFW/deps/mingw/dinput.h	553;"	d
DIK_Y	support/GLFW/deps/mingw/dinput.h	529;"	d
DIK_YEN	support/GLFW/deps/mingw/dinput.h	602;"	d
DIK_Z	support/GLFW/deps/mingw/dinput.h	552;"	d
DIM	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t DIM = 1u << TOTAL; \/\/ number of voxels along each axis of this node$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
DIM	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t DIM = 1u << TOTAL; \/\/ number of voxels along each axis of this node$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
DIMAKEUSAGEDWORD	support/GLFW/deps/mingw/dinput.h	770;"	d
DIMOFS_BUTTON0	support/GLFW/deps/mingw/dinput.h	2131;"	d
DIMOFS_BUTTON1	support/GLFW/deps/mingw/dinput.h	2132;"	d
DIMOFS_BUTTON2	support/GLFW/deps/mingw/dinput.h	2133;"	d
DIMOFS_BUTTON3	support/GLFW/deps/mingw/dinput.h	2134;"	d
DIMOFS_BUTTON4	support/GLFW/deps/mingw/dinput.h	2136;"	d
DIMOFS_BUTTON5	support/GLFW/deps/mingw/dinput.h	2137;"	d
DIMOFS_BUTTON6	support/GLFW/deps/mingw/dinput.h	2138;"	d
DIMOFS_BUTTON7	support/GLFW/deps/mingw/dinput.h	2139;"	d
DIMOFS_X	support/GLFW/deps/mingw/dinput.h	2128;"	d
DIMOFS_Y	support/GLFW/deps/mingw/dinput.h	2129;"	d
DIMOFS_Z	support/GLFW/deps/mingw/dinput.h	2130;"	d
DIMOUSESTATE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIMOUSESTATE {$/;"	s
DIMOUSESTATE	support/GLFW/deps/mingw/dinput.h	/^} DIMOUSESTATE;$/;"	t	typeref:struct:DIMOUSESTATE
DIMOUSESTATE2	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIMOUSESTATE2 {$/;"	s
DIMOUSESTATE2	support/GLFW/deps/mingw/dinput.h	/^} DIMOUSESTATE2;$/;"	t	typeref:struct:DIMOUSESTATE2
DIOBJECTDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^} DIOBJECTDATAFORMAT, *LPDIOBJECTDATAFORMAT;$/;"	t	typeref:struct:_DIOBJECTDATAFORMAT
DIPERIODIC	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPERIODIC {$/;"	s
DIPERIODIC	support/GLFW/deps/mingw/dinput.h	/^} DIPERIODIC, *LPDIPERIODIC;$/;"	t	typeref:struct:DIPERIODIC
DIPH_BYID	support/GLFW/deps/mingw/dinput.h	766;"	d
DIPH_BYOFFSET	support/GLFW/deps/mingw/dinput.h	765;"	d
DIPH_BYUSAGE	support/GLFW/deps/mingw/dinput.h	768;"	d
DIPH_DEVICE	support/GLFW/deps/mingw/dinput.h	764;"	d
DIPROPAUTOCENTER_OFF	support/GLFW/deps/mingw/dinput.h	847;"	d
DIPROPAUTOCENTER_ON	support/GLFW/deps/mingw/dinput.h	848;"	d
DIPROPAXISMODE_ABS	support/GLFW/deps/mingw/dinput.h	836;"	d
DIPROPAXISMODE_REL	support/GLFW/deps/mingw/dinput.h	837;"	d
DIPROPCAL	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPCAL {$/;"	s
DIPROPCAL	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCAL, *LPDIPROPCAL;$/;"	t	typeref:struct:DIPROPCAL
DIPROPCALIBRATIONMODE_COOKED	support/GLFW/deps/mingw/dinput.h	852;"	d
DIPROPCALIBRATIONMODE_RAW	support/GLFW/deps/mingw/dinput.h	853;"	d
DIPROPCALPOV	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPCALPOV {$/;"	s
DIPROPCALPOV	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCALPOV, *LPDIPROPCALPOV;$/;"	t	typeref:struct:DIPROPCALPOV
DIPROPCPOINTS	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPCPOINTS {$/;"	s
DIPROPCPOINTS	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCPOINTS, *LPDIPROPCPOINTS;$/;"	t	typeref:struct:DIPROPCPOINTS
DIPROPDWORD	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPDWORD {$/;"	s
DIPROPDWORD	support/GLFW/deps/mingw/dinput.h	/^} DIPROPDWORD, *LPDIPROPDWORD;$/;"	t	typeref:struct:DIPROPDWORD
DIPROPGUIDANDPATH	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPGUIDANDPATH {$/;"	s
DIPROPGUIDANDPATH	support/GLFW/deps/mingw/dinput.h	/^} DIPROPGUIDANDPATH, *LPDIPROPGUIDANDPATH;$/;"	t	typeref:struct:DIPROPGUIDANDPATH
DIPROPHEADER	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPHEADER {$/;"	s
DIPROPHEADER	support/GLFW/deps/mingw/dinput.h	/^} DIPROPHEADER,*LPDIPROPHEADER;$/;"	t	typeref:struct:DIPROPHEADER
DIPROPPOINTER	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPPOINTER {$/;"	s
DIPROPPOINTER	support/GLFW/deps/mingw/dinput.h	/^} DIPROPPOINTER, *LPDIPROPPOINTER;$/;"	t	typeref:struct:DIPROPPOINTER
DIPROPRANGE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPRANGE {$/;"	s
DIPROPRANGE	support/GLFW/deps/mingw/dinput.h	/^} DIPROPRANGE, *LPDIPROPRANGE;$/;"	t	typeref:struct:DIPROPRANGE
DIPROPRANGE_NOMAX	support/GLFW/deps/mingw/dinput.h	787;"	d
DIPROPRANGE_NOMIN	support/GLFW/deps/mingw/dinput.h	786;"	d
DIPROPSTRING	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIPROPSTRING {$/;"	s
DIPROPSTRING	support/GLFW/deps/mingw/dinput.h	/^} DIPROPSTRING, *LPDIPROPSTRING;$/;"	t	typeref:struct:DIPROPSTRING
DIPROP_APPDATA	support/GLFW/deps/mingw/dinput.h	875;"	d
DIPROP_AUTOCENTER	support/GLFW/deps/mingw/dinput.h	845;"	d
DIPROP_AXISMODE	support/GLFW/deps/mingw/dinput.h	834;"	d
DIPROP_BUFFERSIZE	support/GLFW/deps/mingw/dinput.h	833;"	d
DIPROP_CALIBRATION	support/GLFW/deps/mingw/dinput.h	856;"	d
DIPROP_CALIBRATIONMODE	support/GLFW/deps/mingw/dinput.h	850;"	d
DIPROP_CPOINTS	support/GLFW/deps/mingw/dinput.h	874;"	d
DIPROP_DEADZONE	support/GLFW/deps/mingw/dinput.h	841;"	d
DIPROP_FFGAIN	support/GLFW/deps/mingw/dinput.h	843;"	d
DIPROP_FFLOAD	support/GLFW/deps/mingw/dinput.h	844;"	d
DIPROP_GETPORTDISPLAYNAME	support/GLFW/deps/mingw/dinput.h	864;"	d
DIPROP_GRANULARITY	support/GLFW/deps/mingw/dinput.h	839;"	d
DIPROP_GUIDANDPATH	support/GLFW/deps/mingw/dinput.h	857;"	d
DIPROP_INSTANCENAME	support/GLFW/deps/mingw/dinput.h	858;"	d
DIPROP_JOYSTICKID	support/GLFW/deps/mingw/dinput.h	863;"	d
DIPROP_KEYNAME	support/GLFW/deps/mingw/dinput.h	873;"	d
DIPROP_LOGICALRANGE	support/GLFW/deps/mingw/dinput.h	869;"	d
DIPROP_PHYSICALRANGE	support/GLFW/deps/mingw/dinput.h	868;"	d
DIPROP_PRODUCTNAME	support/GLFW/deps/mingw/dinput.h	859;"	d
DIPROP_RANGE	support/GLFW/deps/mingw/dinput.h	840;"	d
DIPROP_SATURATION	support/GLFW/deps/mingw/dinput.h	842;"	d
DIPROP_SCANCODE	support/GLFW/deps/mingw/dinput.h	876;"	d
DIPROP_TYPENAME	support/GLFW/deps/mingw/dinput.h	879;"	d
DIPROP_USERNAME	support/GLFW/deps/mingw/dinput.h	878;"	d
DIPROP_VIDPID	support/GLFW/deps/mingw/dinput.h	877;"	d
DIRAMPFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef struct DIRAMPFORCE {$/;"	s
DIRAMPFORCE	support/GLFW/deps/mingw/dinput.h	/^} DIRAMPFORCE, *LPDIRAMPFORCE;$/;"	t	typeref:struct:DIRAMPFORCE
DIRECTINPUT8CREATE_T	support/GLFW/src/win32_platform.h	/^typedef HRESULT (WINAPI * DIRECTINPUT8CREATE_T)(HINSTANCE,DWORD,REFIID,LPVOID*,LPUNKNOWN);$/;"	t
DIRECTINPUT_VERSION	support/GLFW/deps/mingw/dinput.h	27;"	d
DIRECTINPUT_VERSION	support/GLFW/src/win32_platform.h	65;"	d
DISCL_BACKGROUND	support/GLFW/deps/mingw/dinput.h	943;"	d
DISCL_EXCLUSIVE	support/GLFW/deps/mingw/dinput.h	940;"	d
DISCL_FOREGROUND	support/GLFW/deps/mingw/dinput.h	942;"	d
DISCL_NONEXCLUSIVE	support/GLFW/deps/mingw/dinput.h	941;"	d
DISCL_NOWINKEY	support/GLFW/deps/mingw/dinput.h	944;"	d
DISEQUENCE_COMPARE	support/GLFW/deps/mingw/dinput.h	703;"	d
DISFFC_CONTINUE	support/GLFW/deps/mingw/dinput.h	951;"	d
DISFFC_PAUSE	support/GLFW/deps/mingw/dinput.h	950;"	d
DISFFC_RESET	support/GLFW/deps/mingw/dinput.h	948;"	d
DISFFC_SETACTUATORSOFF	support/GLFW/deps/mingw/dinput.h	953;"	d
DISFFC_SETACTUATORSON	support/GLFW/deps/mingw/dinput.h	952;"	d
DISFFC_STOPALL	support/GLFW/deps/mingw/dinput.h	949;"	d
DISPLAY_DEVICE_ACTIVE	support/GLFW/src/win32_platform.h	105;"	d
DI_BUFFEROVERFLOW	support/GLFW/deps/mingw/dinput.h	157;"	d
DI_DEGREES	support/GLFW/deps/mingw/dinput.h	1019;"	d
DI_DOWNLOADSKIPPED	support/GLFW/deps/mingw/dinput.h	161;"	d
DI_EFFECTRESTARTED	support/GLFW/deps/mingw/dinput.h	162;"	d
DI_FFNOMINALMAX	support/GLFW/deps/mingw/dinput.h	1020;"	d
DI_NOEFFECT	support/GLFW/deps/mingw/dinput.h	159;"	d
DI_NOTATTACHED	support/GLFW/deps/mingw/dinput.h	156;"	d
DI_OK	support/GLFW/deps/mingw/dinput.h	155;"	d
DI_POLLEDDEVICE	support/GLFW/deps/mingw/dinput.h	160;"	d
DI_PROPNOEFFECT	support/GLFW/deps/mingw/dinput.h	158;"	d
DI_SECONDS	support/GLFW/deps/mingw/dinput.h	1021;"	d
DI_SETTINGSNOTSAVED	support/GLFW/deps/mingw/dinput.h	164;"	d
DI_TRUNCATED	support/GLFW/deps/mingw/dinput.h	163;"	d
DI_TRUNCATEDANDRESTARTED	support/GLFW/deps/mingw/dinput.h	165;"	d
DI_WRITEPROTECT	support/GLFW/deps/mingw/dinput.h	166;"	d
DO_GL_CHECK	sutil/Exception.h	49;"	d
DUMMYSTRUCTNAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	80;"	d
DUMMYSTRUCTNAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	87;"	d
DUMMYSTRUCTNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	81;"	d
DUMMYSTRUCTNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	88;"	d
DUMMYSTRUCTNAME2	support/GLFW/deps/mingw/_mingw_dxhelper.h	82;"	d
DUMMYSTRUCTNAME2	support/GLFW/deps/mingw/_mingw_dxhelper.h	89;"	d
DUMMYSTRUCTNAME3	support/GLFW/deps/mingw/_mingw_dxhelper.h	83;"	d
DUMMYSTRUCTNAME3	support/GLFW/deps/mingw/_mingw_dxhelper.h	90;"	d
DUMMYSTRUCTNAME4	support/GLFW/deps/mingw/_mingw_dxhelper.h	84;"	d
DUMMYSTRUCTNAME4	support/GLFW/deps/mingw/_mingw_dxhelper.h	91;"	d
DUMMYSTRUCTNAME5	support/GLFW/deps/mingw/_mingw_dxhelper.h	85;"	d
DUMMYSTRUCTNAME5	support/GLFW/deps/mingw/_mingw_dxhelper.h	92;"	d
DUMMYUNIONNAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	46;"	d
DUMMYUNIONNAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	57;"	d
DUMMYUNIONNAME	support/GLFW/deps/mingw/dinput.h	/^	} DUMMYUNIONNAME;$/;"	m	struct:_DIACTIONA	typeref:union:_DIACTIONA::__anon29
DUMMYUNIONNAME	support/GLFW/deps/mingw/dinput.h	/^	} DUMMYUNIONNAME;$/;"	m	struct:_DIACTIONW	typeref:union:_DIACTIONW::__anon30
DUMMYUNIONNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	47;"	d
DUMMYUNIONNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	58;"	d
DUMMYUNIONNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	72;"	d
DUMMYUNIONNAME1	support/GLFW/deps/mingw/_mingw_dxhelper.h	74;"	d
DUMMYUNIONNAME2	support/GLFW/deps/mingw/_mingw_dxhelper.h	48;"	d
DUMMYUNIONNAME2	support/GLFW/deps/mingw/_mingw_dxhelper.h	59;"	d
DUMMYUNIONNAME3	support/GLFW/deps/mingw/_mingw_dxhelper.h	49;"	d
DUMMYUNIONNAME3	support/GLFW/deps/mingw/_mingw_dxhelper.h	60;"	d
DUMMYUNIONNAME4	support/GLFW/deps/mingw/_mingw_dxhelper.h	50;"	d
DUMMYUNIONNAME4	support/GLFW/deps/mingw/_mingw_dxhelper.h	61;"	d
DUMMYUNIONNAME5	support/GLFW/deps/mingw/_mingw_dxhelper.h	51;"	d
DUMMYUNIONNAME5	support/GLFW/deps/mingw/_mingw_dxhelper.h	62;"	d
DUMMYUNIONNAME6	support/GLFW/deps/mingw/_mingw_dxhelper.h	52;"	d
DUMMYUNIONNAME6	support/GLFW/deps/mingw/_mingw_dxhelper.h	63;"	d
DUMMYUNIONNAME7	support/GLFW/deps/mingw/_mingw_dxhelper.h	53;"	d
DUMMYUNIONNAME7	support/GLFW/deps/mingw/_mingw_dxhelper.h	64;"	d
DUMMYUNIONNAME8	support/GLFW/deps/mingw/_mingw_dxhelper.h	54;"	d
DUMMYUNIONNAME8	support/GLFW/deps/mingw/_mingw_dxhelper.h	65;"	d
DUMMYUNIONNAME9	support/GLFW/deps/mingw/_mingw_dxhelper.h	55;"	d
DUMMYUNIONNAME9	support/GLFW/deps/mingw/_mingw_dxhelper.h	66;"	d
DWMFLUSH_T	support/GLFW/src/win32_platform.h	/^typedef HRESULT (WINAPI * DWMFLUSH_T)(VOID);$/;"	t
DWMISCOMPOSITIONENABLED_T	support/GLFW/src/win32_platform.h	/^typedef HRESULT (WINAPI * DWMISCOMPOSITIONENABLED_T)(BOOL*);$/;"	t
Data	optixDenoiser/OptiXDenoiser.h	/^    struct Data$/;"	s	class:OptiXDenoiser
Data	support/imgui/imgui.h	/^    ImVector<Pair>      Data;$/;"	m	struct:ImGuiStorage
Data	support/imgui/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector
Data	support/imgui/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload
Data	support/imgui/imgui_internal.h	/^    ImVector<T>     Data;       \/\/ Contiguous data$/;"	m	struct:ImPool
DataFrameCount	support/imgui/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload
DataSize	support/imgui/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload
DataType	support/imgui/imgui.h	/^    char            DataType[32+1];     \/\/ Data type tag (short user-supplied string, 32 characters max)$/;"	m	struct:ImGuiPayload
DataTypeApplyOp	support/imgui/imgui_widgets.cpp	/^static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)$/;"	f	file:
DataTypeApplyOpFromText	support/imgui/imgui_widgets.cpp	/^static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* format)$/;"	f	file:
DataTypeFormatString	support/imgui/imgui_widgets.cpp	/^static inline int DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* data_ptr, const char* format)$/;"	f	file:
DeIndexAllBuffers	support/imgui/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData
DebugCheckVersionAndDataLayout	support/imgui/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert)$/;"	f	class:ImGui
DeclColumns	support/imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) \/\/ not using va_arg because they promote float to double$/;"	f	class:ImGuiMenuColumns
Decode85	support/imgui/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	file:
Decode85Byte	support/imgui/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\' ? c-36 : c-35; }$/;"	f	file:
DecodeChunk	support/tinyexr/tinyexr.h	/^static int DecodeChunk(EXRImage *exr_image, const EXRHeader *exr_header,$/;"	f	namespace:tinyexr
DecodeDataURI	support/tinygltf/tiny_gltf.h	/^bool DecodeDataURI(std::vector<unsigned char> *out, std::string &mime_type,$/;"	f	namespace:tinygltf
DecodeEXRImage	support/tinyexr/tinyexr.h	/^static int DecodeEXRImage(EXRImage *exr_image, const EXRHeader *exr_header,$/;"	f	namespace:tinyexr
DecodeIndexBuffer	support/tinygltf/tiny_gltf.h	/^static void DecodeIndexBuffer(draco::Mesh *mesh, size_t componentSize,$/;"	f	namespace:tinygltf
DecodePixelData	support/tinyexr/tinyexr.h	/^static bool DecodePixelData(\/* out *\/ unsigned char **out_images,$/;"	f	namespace:tinyexr
DecodeTiledPixelData	support/tinyexr/tinyexr.h	/^static void DecodeTiledPixelData($/;"	f	namespace:tinyexr
DecompressPiz	support/tinyexr/tinyexr.h	/^static bool DecompressPiz(unsigned char *outPtr, const unsigned char *inPtr,$/;"	f	namespace:tinyexr
DecompressRle	support/tinyexr/tinyexr.h	/^static bool DecompressRle(unsigned char *dst,$/;"	f	namespace:tinyexr
DecompressZfp	support/tinyexr/tinyexr.h	/^static bool DecompressZfp(float *dst, int dst_width, int dst_num_lines,$/;"	f	namespace:tinyexr
DecompressZip	support/tinyexr/tinyexr.h	/^static bool DecompressZip(unsigned char *dst,$/;"	f	namespace:tinyexr
DeepImage	support/tinyexr/tinyexr.h	/^} DeepImage;$/;"	t	typeref:struct:_DeepImage
DeformSphereAnimation	optixMotionGeometry/optixMotionGeometry.cpp	/^struct DeformSphereAnimation {$/;"	s	file:
DeleteChars	support/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData
DeleteContext	support/GLFW/src/wgl_context.h	/^    WGLDELETECONTEXT_T                  DeleteContext;$/;"	m	struct:_GLFWlibraryWGL
Delivery	support/imgui/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mouse button is released over the target item.$/;"	m	struct:ImGuiPayload
Delta	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Delta<double>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Delta	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Delta<float>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
DeltaTime	support/imgui/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since last frame, in seconds.$/;"	m	struct:ImGuiIO
Descent	support/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]$/;"	m	struct:ImFont
DesiredSize	support/imgui/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.$/;"	m	struct:ImGuiSizeCallbackData
DestroyContext	support/GLFW/src/egl_context.h	/^    PFNEGLDESTROYCONTEXTPROC        DestroyContext;$/;"	m	struct:_GLFWlibraryEGL
DestroyContext	support/GLFW/src/glx_context.h	/^    PFNGLXDESTROYCONTEXTPROC            DestroyContext;$/;"	m	struct:_GLFWlibraryGLX
DestroyContext	support/imgui/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui
DestroySurface	support/GLFW/src/egl_context.h	/^    PFNEGLDESTROYSURFACEPROC        DestroySurface;$/;"	m	struct:_GLFWlibraryEGL
DestroyWindow	support/GLFW/src/glx_context.h	/^    PFNGLXDESTROYWINDOWPROC             DestroyWindow;$/;"	m	struct:_GLFWlibraryGLX
DimBgRatio	support/imgui/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fading in a dimming background (for modal window and CTRL+TAB list)$/;"	m	struct:ImGuiContext
DirectInput8Create	support/GLFW/src/win32_platform.h	/^        DIRECTINPUT8CREATE_T DirectInput8Create;$/;"	m	struct:_GLFWlibraryWin32::__anon13
DirectInputCreate	support/GLFW/deps/mingw/dinput.h	2458;"	d
Dirty	support/imgui/imgui_demo.cpp	/^    bool        Dirty;          \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	file:
DirtyLookupTables	support/imgui/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont
DisplacedMicromeshState	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^struct DisplacedMicromeshState$/;"	s	file:
DisplacementBlock64MicroTris64B	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^struct DisplacementBlock64MicroTris64B$/;"	s	file:
DisplayContents	support/imgui/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument
DisplayContextMenu	support/imgui/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument
DisplayEnd	support/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
DisplayFramebufferScale	support/imgui/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.$/;"	m	struct:ImGuiIO
DisplayOffset	support/imgui/imgui.h	/^    ImVec2                      DisplayOffset;      \/\/ 8     \/\/ in  \/\/ = (0,0)    \/\/ Offset font rendering by xx pixels$/;"	m	struct:ImFont
DisplayPos	support/imgui/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)$/;"	m	struct:ImDrawData
DisplaySafeAreaPadding	support/imgui/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups\/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!$/;"	m	struct:ImGuiStyle
DisplaySize	support/imgui/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)$/;"	m	struct:ImDrawData
DisplaySize	support/imgui/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in pixels.$/;"	m	struct:ImGuiIO
DisplayStart	support/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
DisplayWindowPadding	support/imgui/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible within the display area by at least this amount. Only applies to regular windows.$/;"	m	struct:ImGuiStyle
DistAxial	support/imgui/imgui_internal.h	/^    float         DistAxial;$/;"	m	struct:ImGuiNavMoveResult
DistBox	support/imgui/imgui_internal.h	/^    float         DistBox;      \/\/ Best candidate box distance to current NavId$/;"	m	struct:ImGuiNavMoveResult
DistCenter	support/imgui/imgui_internal.h	/^    float         DistCenter;   \/\/ Best candidate center distance to current NavId$/;"	m	struct:ImGuiNavMoveResult
DllMain	support/GLFW/src/win32_init.c	/^BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, LPVOID reserved)$/;"	f
DmmArray	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    struct DmmArray$/;"	s	struct:MeshData	file:
DoForceClose	support/imgui/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument
DoOpen	support/imgui/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument
DoQueueClose	support/imgui/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument
DoSave	support/imgui/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument
Documents	support/imgui/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	file:
Double	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Double = 2,$/;"	m	class:nanovdb::GridType
DragBehavior	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* v, float v_speed, const void* v_min, const void* v_max, const char* format, float power, ImGuiDragFlags flags)$/;"	f	class:ImGui
DragBehaviorT	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiDragFlags flags)$/;"	f	class:ImGui
DragCurrentAccum	support/imgui/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings$/;"	m	struct:ImGuiContext
DragCurrentAccumDirty	support/imgui/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext
DragDropAcceptFlags	support/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext
DragDropAcceptFrameCount	support/imgui/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expressed a desire to accept the source$/;"	m	struct:ImGuiContext
DragDropAcceptIdCurr	support/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the time of accepting the payload)$/;"	m	struct:ImGuiContext
DragDropAcceptIdCurrRectSurface	support/imgui/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we resolve overlapping targets by prioritizing the smaller surface)$/;"	m	struct:ImGuiContext
DragDropAcceptIdPrev	support/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previous frame (we need to store this to allow for overlapping drag and drop targets)$/;"	m	struct:ImGuiContext
DragDropActive	support/imgui/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext
DragDropMouseButton	support/imgui/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext
DragDropPayload	support/imgui/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext
DragDropPayloadBufHeap	support/imgui/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVector<> directly$/;"	m	struct:ImGuiContext
DragDropPayloadBufLocal	support/imgui/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[8];         \/\/ Local buffer for small payloads$/;"	m	struct:ImGuiContext
DragDropSourceFlags	support/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext
DragDropSourceFrameCount	support/imgui/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext
DragDropTargetId	support/imgui/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext
DragDropTargetRect	support/imgui/imgui_internal.h	/^    ImRect                  DragDropTargetRect;$/;"	m	struct:ImGuiContext
DragDropWithinSourceOrTarget	support/imgui/imgui_internal.h	/^    bool                    DragDropWithinSourceOrTarget;$/;"	m	struct:ImGuiContext
DragFloat	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat2	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat3	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat4	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloatRange2	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, float power)$/;"	f	class:ImGui
DragInt	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt2	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt3	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt4	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragIntRange2	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max)$/;"	f	class:ImGui
DragScalar	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
DragScalarN	support/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
DragSpeedDefaultRatio	support/imgui/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio$/;"	m	struct:ImGuiContext
Draw	support/imgui/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter
Draw	support/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog
Draw	support/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole
DrawData	support/imgui/imgui_internal.h	/^    ImDrawData              DrawData;                           \/\/ Main ImDrawData instance to pass render information to the user$/;"	m	struct:ImGuiContext
DrawDataBuilder	support/imgui/imgui_internal.h	/^    ImDrawDataBuilder       DrawDataBuilder;$/;"	m	struct:ImGuiContext
DrawList	support/imgui/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backward compatibility reason with code using imgui_internal.h we keep this a pointer)$/;"	m	struct:ImGuiWindow
DrawListInst	support/imgui/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow
DrawListSharedData	support/imgui/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext
DstFont	support/imgui/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig
DstIndex	support/imgui/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	file:
Dummy	support/imgui/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui
DwmFlush	support/GLFW/src/win32_platform.h	/^        DWMFLUSH_T      DwmFlush;$/;"	m	struct:_GLFWlibraryWin32::__anon16
DwmIsCompositionEnabled	support/GLFW/src/win32_platform.h	/^        DWMISCOMPOSITIONENABLED_T DwmIsCompositionEnabled;$/;"	m	struct:_GLFWlibraryWin32::__anon16
DynamicGeometryState	optixDynamicGeometry/optixDynamicGeometry.cpp	/^struct DynamicGeometryState$/;"	s	file:
EDS_ROTATEDMODE	support/GLFW/src/win32_platform.h	102;"	d
EGLAPIENTRY	support/GLFW/src/egl_context.h	34;"	d
EGLAPIENTRY	support/GLFW/src/egl_context.h	38;"	d
EGLAPIENTRY	support/GLFW/src/egl_context.h	42;"	d
EGLAPIENTRY	support/GLFW/src/egl_context.h	46;"	d
EGLBoolean	support/GLFW/src/egl_context.h	/^typedef unsigned int EGLBoolean;$/;"	t
EGLConfig	support/GLFW/src/egl_context.h	/^typedef void* EGLConfig;$/;"	t
EGLContext	support/GLFW/src/egl_context.h	/^typedef void* EGLContext;$/;"	t
EGLDisplay	support/GLFW/src/egl_context.h	/^typedef void* EGLDisplay;$/;"	t
EGLNativeDisplayType	support/GLFW/src/egl_context.h	/^typedef Display* EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	support/GLFW/src/egl_context.h	/^typedef HDC EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	support/GLFW/src/egl_context.h	/^typedef MirEGLNativeDisplayType EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	support/GLFW/src/egl_context.h	/^typedef struct wl_display* EGLNativeDisplayType;$/;"	t	typeref:struct:wl_display
EGLNativeWindowType	support/GLFW/src/egl_context.h	/^typedef HWND EGLNativeWindowType;$/;"	t
EGLNativeWindowType	support/GLFW/src/egl_context.h	/^typedef MirEGLNativeWindowType EGLNativeWindowType;$/;"	t
EGLNativeWindowType	support/GLFW/src/egl_context.h	/^typedef Window EGLNativeWindowType;$/;"	t
EGLNativeWindowType	support/GLFW/src/egl_context.h	/^typedef struct wl_egl_window* EGLNativeWindowType;$/;"	t	typeref:struct:wl_egl_window
EGLSurface	support/GLFW/src/egl_context.h	/^typedef void* EGLSurface;$/;"	t
EGL_ALPHA_SIZE	support/GLFW/src/egl_context.h	76;"	d
EGL_BAD_ACCESS	support/GLFW/src/egl_context.h	55;"	d
EGL_BAD_ALLOC	support/GLFW/src/egl_context.h	56;"	d
EGL_BAD_ATTRIBUTE	support/GLFW/src/egl_context.h	57;"	d
EGL_BAD_CONFIG	support/GLFW/src/egl_context.h	58;"	d
EGL_BAD_CONTEXT	support/GLFW/src/egl_context.h	59;"	d
EGL_BAD_CURRENT_SURFACE	support/GLFW/src/egl_context.h	60;"	d
EGL_BAD_DISPLAY	support/GLFW/src/egl_context.h	61;"	d
EGL_BAD_MATCH	support/GLFW/src/egl_context.h	62;"	d
EGL_BAD_NATIVE_PIXMAP	support/GLFW/src/egl_context.h	63;"	d
EGL_BAD_NATIVE_WINDOW	support/GLFW/src/egl_context.h	64;"	d
EGL_BAD_PARAMETER	support/GLFW/src/egl_context.h	65;"	d
EGL_BAD_SURFACE	support/GLFW/src/egl_context.h	66;"	d
EGL_BLUE_SIZE	support/GLFW/src/egl_context.h	77;"	d
EGL_COLOR_BUFFER_TYPE	support/GLFW/src/egl_context.h	68;"	d
EGL_CONTEXT_CLIENT_VERSION	support/GLFW/src/egl_context.h	87;"	d
EGL_CONTEXT_FLAGS_KHR	support/GLFW/src/egl_context.h	105;"	d
EGL_CONTEXT_LOST	support/GLFW/src/egl_context.h	67;"	d
EGL_CONTEXT_MAJOR_VERSION_KHR	support/GLFW/src/egl_context.h	102;"	d
EGL_CONTEXT_MINOR_VERSION_KHR	support/GLFW/src/egl_context.h	103;"	d
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR	support/GLFW/src/egl_context.h	96;"	d
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR	support/GLFW/src/egl_context.h	95;"	d
EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR	support/GLFW/src/egl_context.h	97;"	d
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR	support/GLFW/src/egl_context.h	94;"	d
EGL_CONTEXT_OPENGL_NO_ERROR_KHR	support/GLFW/src/egl_context.h	106;"	d
EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR	support/GLFW/src/egl_context.h	104;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR	support/GLFW/src/egl_context.h	98;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR	support/GLFW/src/egl_context.h	101;"	d
EGL_DEFAULT_DISPLAY	support/GLFW/src/egl_context.h	92;"	d
EGL_DEPTH_SIZE	support/GLFW/src/egl_context.h	80;"	d
EGL_EXTENSIONS	support/GLFW/src/egl_context.h	86;"	d
EGL_GL_COLORSPACE_KHR	support/GLFW/src/egl_context.h	107;"	d
EGL_GL_COLORSPACE_SRGB_KHR	support/GLFW/src/egl_context.h	108;"	d
EGL_GREEN_SIZE	support/GLFW/src/egl_context.h	78;"	d
EGL_LOSE_CONTEXT_ON_RESET_KHR	support/GLFW/src/egl_context.h	100;"	d
EGL_NATIVE_VISUAL_ID	support/GLFW/src/egl_context.h	88;"	d
EGL_NONE	support/GLFW/src/egl_context.h	85;"	d
EGL_NOT_INITIALIZED	support/GLFW/src/egl_context.h	54;"	d
EGL_NO_CONTEXT	support/GLFW/src/egl_context.h	91;"	d
EGL_NO_DISPLAY	support/GLFW/src/egl_context.h	90;"	d
EGL_NO_RESET_NOTIFICATION_KHR	support/GLFW/src/egl_context.h	99;"	d
EGL_NO_SURFACE	support/GLFW/src/egl_context.h	89;"	d
EGL_OPENGL_API	support/GLFW/src/egl_context.h	84;"	d
EGL_OPENGL_BIT	support/GLFW/src/egl_context.h	75;"	d
EGL_OPENGL_ES2_BIT	support/GLFW/src/egl_context.h	74;"	d
EGL_OPENGL_ES_API	support/GLFW/src/egl_context.h	83;"	d
EGL_OPENGL_ES_BIT	support/GLFW/src/egl_context.h	73;"	d
EGL_RED_SIZE	support/GLFW/src/egl_context.h	79;"	d
EGL_RENDERABLE_TYPE	support/GLFW/src/egl_context.h	72;"	d
EGL_RGB_BUFFER	support/GLFW/src/egl_context.h	69;"	d
EGL_SAMPLES	support/GLFW/src/egl_context.h	82;"	d
EGL_STENCIL_SIZE	support/GLFW/src/egl_context.h	81;"	d
EGL_SUCCESS	support/GLFW/src/egl_context.h	53;"	d
EGL_SURFACE_TYPE	support/GLFW/src/egl_context.h	70;"	d
EGL_WINDOW_BIT	support/GLFW/src/egl_context.h	71;"	d
EGLenum	support/GLFW/src/egl_context.h	/^typedef unsigned int EGLenum;$/;"	t
EGLint	support/GLFW/src/egl_context.h	/^typedef int EGLint;$/;"	t
END	optixVolumeViewer/nanovdb/util/IO.h	/^                              END = 3 };$/;"	m	class:nanovdb::io::Codec
ENFORCE_FORWARD_STEPPING	optixVolumeViewer/nanovdb/util/HDDA.h	14;"	d
ERROR_INVALID_PROFILE_ARB	support/GLFW/src/wgl_context.h	77;"	d
ERROR_INVALID_VERSION_ARB	support/GLFW/src/wgl_context.h	76;"	d
EXRAttribute	support/tinyexr/tinyexr.h	/^} EXRAttribute;$/;"	t	typeref:struct:_EXRAttribute
EXRChannelInfo	support/tinyexr/tinyexr.h	/^} EXRChannelInfo;$/;"	t	typeref:struct:_EXRChannelInfo
EXRHeader	support/tinyexr/tinyexr.h	/^} EXRHeader;$/;"	t	typeref:struct:_EXRHeader
EXRImage	support/tinyexr/tinyexr.h	/^} EXRImage;$/;"	t	typeref:struct:_EXRImage
EXRMultiPartHeader	support/tinyexr/tinyexr.h	/^} EXRMultiPartHeader;$/;"	t	typeref:struct:_EXRMultiPartHeader
EXRMultiPartImage	support/tinyexr/tinyexr.h	/^} EXRMultiPartImage;$/;"	t	typeref:struct:_EXRMultiPartImage
EXRTile	support/tinyexr/tinyexr.h	/^} EXRTile;$/;"	t	typeref:struct:_EXRTile
EXRVersion	support/tinyexr/tinyexr.h	/^} EXRVersion;$/;"	t	typeref:struct:_EXRVersion
EXT_create_context_es2_profile	support/GLFW/src/glx_context.h	/^    GLFWbool        EXT_create_context_es2_profile;$/;"	m	struct:_GLFWlibraryGLX
EXT_create_context_es2_profile	support/GLFW/src/wgl_context.h	/^    GLFWbool                            EXT_create_context_es2_profile;$/;"	m	struct:_GLFWlibraryWGL
EXT_framebuffer_sRGB	support/GLFW/src/glx_context.h	/^    GLFWbool        EXT_framebuffer_sRGB;$/;"	m	struct:_GLFWlibraryGLX
EXT_framebuffer_sRGB	support/GLFW/src/wgl_context.h	/^    GLFWbool                            EXT_framebuffer_sRGB;$/;"	m	struct:_GLFWlibraryWGL
EXT_swap_control	support/GLFW/src/glx_context.h	/^    GLFWbool        EXT_swap_control;$/;"	m	struct:_GLFWlibraryGLX
EXT_swap_control	support/GLFW/src/wgl_context.h	/^    GLFWbool                            EXT_swap_control;$/;"	m	struct:_GLFWlibraryWGL
E_PENDING	support/GLFW/deps/mingw/dinput.h	199;"	d
ElemCount	support/imgui/imgui.h	/^    unsigned int    ElemCount;              \/\/ Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].$/;"	m	struct:ImDrawCmd
ElemType	sutil/CuBuffer.h	/^    typedef T ElemType;$/;"	t	class:CuBuffer
EmptyData	optixCallablePrograms/optixCallablePrograms.h	/^struct EmptyData$/;"	s
EmptyData	sutil/Record.h	/^struct EmptyData {};$/;"	s	namespace:sutil
EmptyRecord	sutil/Record.h	/^typedef Record<EmptyData> EmptyRecord;$/;"	t	namespace:sutil
EmptyString	support/imgui/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	file:
EmptyString	support/imgui/imgui.h	/^    static char         EmptyString[1];$/;"	m	struct:ImGuiTextBuffer
End	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              End = 7 };$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
End	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                           End = 4 };$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass
End	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  End = 6 };$/;"	m	class:nanovdb::GridType::GridClass
End	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 End = 11 };$/;"	m	class:nanovdb::GridType
End	optixVolumeViewer/nanovdb/NanoVDB.h	/^    End = 1 << 5,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
End	support/imgui/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui
End	support/imgui/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper
EndChild	support/imgui/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui
EndChildFrame	support/imgui/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui
EndColumns	support/imgui/imgui.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui
EndCombo	support/imgui/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui
EndDragDropSource	support/imgui/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui
EndDragDropTarget	support/imgui/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui
EndFrame	support/imgui/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui
EndGroup	support/imgui/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui
EndMainMenuBar	support/imgui/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui
EndMenu	support/imgui/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui
EndMenuBar	support/imgui/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui
EndPopup	support/imgui/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui
EndTabBar	support/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui
EndTabItem	support/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui
EndTooltip	support/imgui/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui
EnumerateInstanceExtensionProperties	support/GLFW/src/internal.h	/^        PFN_vkEnumerateInstanceExtensionProperties EnumerateInstanceExtensionProperties;$/;"	m	struct:_GLFWlibrary::__anon10
Equals	support/tinygltf/tiny_gltf.h	/^static bool Equals(const std::vector<double> &one,$/;"	f	namespace:tinygltf
Equals	support/tinygltf/tiny_gltf.h	/^static bool Equals(const tinygltf::Value &one, const tinygltf::Value &other) {$/;"	f	namespace:tinygltf
Error	optixMotionGeometry/tiny_obj_loader.h	/^  const std::string &Error() const { return error_; }$/;"	f	class:tinyobj::ObjReader
EventChar	support/imgui/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-write   \/\/ [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;$/;"	m	struct:ImGuiInputTextCallbackData
EventFlag	support/imgui/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
EventKey	support/imgui/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-only    \/\/ [Completion,History]$/;"	m	struct:ImGuiInputTextCallbackData
EventNode	support/GLFW/src/mir_window.c	/^typedef struct EventNode$/;"	s	file:
EventNode	support/GLFW/src/mir_window.c	/^} EventNode;$/;"	t	typeref:struct:EventNode	file:
EventQueue	support/GLFW/src/mir_platform.h	/^typedef struct EventQueue$/;"	s
EventQueue	support/GLFW/src/mir_platform.h	/^} EventQueue;$/;"	t	typeref:struct:EventQueue
ExampleAppConsole	support/imgui/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole
ExampleAppConsole	support/imgui/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	support/imgui/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments
ExampleAppDocuments	support/imgui/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	support/imgui/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog
ExampleAppLog	support/imgui/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
Exception	sutil/Exception.h	/^    Exception( OptixResult res, const char* msg )$/;"	f	class:sutil::Exception
Exception	sutil/Exception.h	/^    Exception( const char* msg )$/;"	f	class:sutil::Exception
Exception	sutil/Exception.h	/^class Exception : public std::runtime_error$/;"	c	namespace:sutil
ExecCommand	support/imgui/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole
ExhaustFume	optixMotionGeometry/optixMotionGeometry.cpp	/^    ExhaustFume()$/;"	f	class:ExhaustFume
ExhaustFume	optixMotionGeometry/optixMotionGeometry.cpp	/^    ExhaustFume(ExhaustFume&& other)$/;"	f	class:ExhaustFume
ExhaustFume	optixMotionGeometry/optixMotionGeometry.cpp	/^class ExhaustFume$/;"	c	file:
Expand	support/imgui/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max.x += amount.x; Max.y += amount.y; }$/;"	f	struct:ImRect
Expand	support/imgui/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max.x += amount;   Max.y += amount; }$/;"	f	struct:ImRect
ExpandFilePath	support/tinygltf/tiny_gltf.h	/^  ExpandFilePathFunction ExpandFilePath;$/;"	m	struct:tinygltf::FsCallbacks
ExpandFilePath	support/tinygltf/tiny_gltf.h	/^std::string ExpandFilePath(const std::string &filepath, void *) {$/;"	f	namespace:tinygltf
ExpandFilePathFunction	support/tinygltf/tiny_gltf.h	/^typedef std::string (*ExpandFilePathFunction)(const std::string &, void *);$/;"	t	class:tinygltf::std
Exponent	support/tinyexr/tinyexr.h	/^    unsigned int Exponent : 5;$/;"	m	struct:tinyexr::FP16::__anon62
Exponent	support/tinyexr/tinyexr.h	/^    unsigned int Exponent : 8;$/;"	m	struct:tinyexr::FP32::__anon61
ExtStatus	support/GLFW/src/win32_platform.h	/^    DWORD ExtStatus;$/;"	m	struct:tagCHANGEFILTERSTRUCT
ExtensionMap	support/tinygltf/tiny_gltf.h	/^typedef std::map<std::string, Value> ExtensionMap;$/;"	t	namespace:tinygltf
EyeFixed	sutil/Trackball.h	/^        EyeFixed,$/;"	e	enum:sutil::Trackball::ViewMode
FALSE	support/GLFW/deps/tinycthread.c	53;"	d	file:
FAST_BITS	support/tinygltf/stb_image.h	1750;"	d
FHeapCompare	support/tinyexr/tinyexr.h	/^struct FHeapCompare {$/;"	s	namespace:tinyexr
FLOAT3	sutil/sutil.h	/^    FLOAT3$/;"	e	enum:sutil::BufferImageFormat
FLOAT4	sutil/sutil.h	/^    FLOAT4,$/;"	e	enum:sutil::BufferImageFormat
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	support/imgui/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	support/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H      = 27;$/;"	v
FONT_ATLAS_DEFAULT_TEX_DATA_ID	support/imgui/imgui_draw.cpp	/^const unsigned int FONT_ATLAS_DEFAULT_TEX_DATA_ID = 0x80000000;$/;"	v
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	support/imgui/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * FONT_ATLAS_DEFAULT_TEX_DATA_H + 1] =$/;"	v	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF	support/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF = 108;$/;"	v
FP16	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 FP16 = 9,$/;"	m	class:nanovdb::GridType
FP16	support/tinyexr/tinyexr.h	/^union FP16 {$/;"	u	namespace:tinyexr
FP32	support/tinyexr/tinyexr.h	/^union FP32 {$/;"	u	namespace:tinyexr
Factor	support/tinygltf/tiny_gltf.h	/^  double Factor() const { return number_value; }$/;"	f	struct:tinygltf::Parameter
FallbackAdvanceX	support/imgui/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->AdvanceX$/;"	m	struct:ImFont
FallbackChar	support/imgui/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ in  \/\/ = '?'      \/\/ Replacement glyph if one isn't found. Only set via SetFallbackChar()$/;"	m	struct:ImFont
FallbackGlyph	support/imgui/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFallbackChar)$/;"	m	struct:ImFont
Falloff	cuda/Light.h	/^    enum class Falloff : int$/;"	c	struct:Light
FileExists	support/tinygltf/tiny_gltf.h	/^  FileExistsFunction FileExists;$/;"	m	struct:tinygltf::FsCallbacks
FileExists	support/tinygltf/tiny_gltf.h	/^bool FileExists(const std::string &abs_filename, void *) {$/;"	f	namespace:tinygltf
FileExistsFunction	support/tinygltf/tiny_gltf.h	/^typedef bool (*FileExistsFunction)(const std::string &abs_filename, void *);$/;"	t	namespace:tinygltf
FileHeader	optixHair/Hair.h	/^    struct FileHeader$/;"	s	class:Hair
FileRenderer	optixHair/Renderers.cpp	/^FileRenderer::FileRenderer( HairState* pState )$/;"	f	class:FileRenderer
FileRenderer	optixHair/Renderers.h	/^class FileRenderer : public Renderer$/;"	c
FillInRGBBitsFromPixelFormat	support/GLFW/src/mir_monitor.c	/^void FillInRGBBitsFromPixelFormat(GLFWvidmode* mode, const MirPixelFormat pf)$/;"	f
Filter	support/imgui/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	file:
Filter	support/imgui/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	file:
Filters	support/imgui/imgui.h	/^    ImVector<TextRange> Filters;$/;"	m	struct:ImGuiTextFilter
FindBestWindowPosForPopup	support/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui
FindBestWindowPosForPopupEx	support/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* last_dir, const ImRect& r_outer, const ImRect& r_avoid, ImGuiPopupPositionPolicy policy)$/;"	f	class:ImGui
FindFile	support/tinygltf/tiny_gltf.h	/^static std::string FindFile(const std::vector<std::string> &paths,$/;"	f	namespace:tinygltf
FindGlyph	support/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont
FindGlyphNoFallback	support/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont
FindHighestOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ static inline uint32_t FindHighestOn(uint32_t v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FindHighestOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ static inline uint32_t FindHighestOn(uint64_t v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FindHoveredWindow	support/imgui/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	file:
FindLowestOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ static inline uint32_t FindLowestOn(uint32_t v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FindLowestOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ static inline uint32_t FindLowestOn(uint64_t v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FindMember	support/tinygltf/tiny_gltf.h	/^bool FindMember(const json &o, const char *member, json_const_iterator &it) {$/;"	f	namespace:tinygltf::__anon119
FindOrAddColumnsSet	support/imgui/imgui.cpp	/^static ImGuiColumnsSet* FindOrAddColumnsSet(ImGuiWindow* window, ImGuiID id)$/;"	f	file:
FindOrCreateWindowSettings	support/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)$/;"	f	class:ImGui
FindRenderedTextEnd	support/imgui/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui
FindSettingsHandler	support/imgui/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui
FindWindowByID	support/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui
FindWindowByName	support/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui
FindWindowFocusIndex	support/imgui/imgui.cpp	/^static int FindWindowFocusIndex(ImGuiWindow* window) \/\/ FIXME-OPT O(N)$/;"	f	file:
FindWindowNavFocusable	support/imgui/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	file:
FindWindowSettings	support/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui
FindZFPCompressionParam	support/tinyexr/tinyexr.h	/^bool FindZFPCompressionParam(ZFPCompressionParam *param,$/;"	f	namespace:tinyexr
Flags	support/GLFW/deps/mingw/xinput.h	/^    WORD Flags;$/;"	m	struct:_XINPUT_CAPABILITIES
Flags	support/GLFW/deps/mingw/xinput.h	/^    WORD Flags;$/;"	m	struct:_XINPUT_KEYSTROKE
Flags	support/imgui/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust anti-aliasing settings per-primitive.$/;"	m	struct:ImDrawList
Flags	support/imgui/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas
Flags	support/imgui/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
Flags	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiColumnData
Flags	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;$/;"	m	struct:ImGuiColumnsSet
Flags	support/imgui/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar
Flags	support/imgui/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem
Flags	support/imgui/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow
FlattenIntoSingleLayer	support/imgui/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder
Float	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Float = 1,$/;"	m	class:nanovdb::GridType
FloatTraits	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct FloatTraits$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FloatTraits	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct FloatTraits<T, 8>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Floor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static Coord Floor(const Vec3T& xyz) { return Coord(nanovdb::Floor(xyz[0]), nanovdb::Floor(xyz[1]), nanovdb::Floor(xyz[2])); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
Floor	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Floor(double x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Floor	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Floor(float x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Floor	support/imgui/imgui_internal.h	/^    void        Floor()                             { Min.x = (float)(int)Min.x; Min.y = (float)(int)Min.y; Max.x = (float)(int)Max.x; Max.y = (float)(int)Max.y; }$/;"	f	struct:ImRect
FocusCond	support/imgui/imgui_internal.h	/^    ImGuiCond               FocusCond;$/;"	m	struct:ImGuiNextWindowData
FocusCounterAll	support/imgui/imgui_internal.h	/^    int                     FocusCounterAll;        \/\/ Counter for focus\/tabbing system. Start at -1 and increase as assigned via FocusableItemRegister() (FIXME-NAV: Needs redesign)$/;"	m	struct:ImGuiWindowTempData
FocusCounterTab	support/imgui/imgui_internal.h	/^    int                     FocusCounterTab;        \/\/ (same, but only count widgets which you can Tab through)$/;"	m	struct:ImGuiWindowTempData
FocusPreviousWindowIgnoringOne	support/imgui/imgui.cpp	/^void ImGui::FocusPreviousWindowIgnoringOne(ImGuiWindow* ignore_window)$/;"	f	class:ImGui
FocusRequestCurrCounterAll	support/imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterAll;         \/\/ Any item being requested for focus, stored as an index (we on layout to be stable between the frame pressing TAB and the next frame, semi-ouch)$/;"	m	struct:ImGuiContext
FocusRequestCurrCounterTab	support/imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterTab;         \/\/ Tab item being requested for focus, stored as an index$/;"	m	struct:ImGuiContext
FocusRequestCurrWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestCurrWindow;             \/\/$/;"	m	struct:ImGuiContext
FocusRequestNextCounterAll	support/imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterAll;         \/\/ Stored for next frame$/;"	m	struct:ImGuiContext
FocusRequestNextCounterTab	support/imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterTab;         \/\/ "$/;"	m	struct:ImGuiContext
FocusRequestNextWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestNextWindow;             \/\/$/;"	m	struct:ImGuiContext
FocusTabPressed	support/imgui/imgui_internal.h	/^    bool                    FocusTabPressed;                    \/\/$/;"	m	struct:ImGuiContext
FocusWindow	support/imgui/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui
FocusableItemRegister	support/imgui/imgui.cpp	/^bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui
FocusableItemUnregister	support/imgui/imgui.cpp	/^void ImGui::FocusableItemUnregister(ImGuiWindow* window)$/;"	f	class:ImGui
FogVolume	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  FogVolume = 2,$/;"	m	class:nanovdb::GridType::GridClass
Font	support/imgui/imgui.h	/^        ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): target font$/;"	m	struct:ImFontAtlas::CustomRect
Font	support/imgui/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()$/;"	m	struct:ImGuiContext
Font	support/imgui/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simplified AddText overload)$/;"	m	struct:ImDrawListSharedData
FontAllowUserScaling	support/imgui/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling text of individual window with CTRL+Wheel.$/;"	m	struct:ImGuiIO
FontAtlasOwnedByContext	support/imgui/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ Io.Fonts-> is owned by the ImGuiContext and will be destructed along with it.$/;"	m	struct:ImGuiContext
FontBaseSize	support/imgui/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobalScale * Font->Scale * Font->FontSize. Base text height.$/;"	m	struct:ImGuiContext
FontData	support/imgui/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig
FontDataOwnedByAtlas	support/imgui/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).$/;"	m	struct:ImFontConfig
FontDataSize	support/imgui/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig
FontDefault	support/imgui/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].$/;"	m	struct:ImGuiIO
FontGlobalScale	support/imgui/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all fonts$/;"	m	struct:ImGuiIO
FontInfo	support/imgui/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	file:
FontNo	support/imgui/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF file$/;"	m	struct:ImFontConfig
FontSize	support/imgui/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Height of characters\/line, set during loading (don't change after loading)$/;"	m	struct:ImFont
FontSize	support/imgui/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize * g.CurrentWindow->FontWindowScale == window->FontSize(). Text height for current window.$/;"	m	struct:ImGuiContext
FontSize	support/imgui/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for simplified AddText overload)$/;"	m	struct:ImDrawListSharedData
FontStack	support/imgui/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFont()$/;"	m	struct:ImGuiContext
FontWindowScale	support/imgui/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-window$/;"	m	struct:ImGuiWindow
Fonts	support/imgui/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Load, rasterize and pack one or more fonts into a single texture.$/;"	m	struct:ImGuiIO
Fonts	support/imgui/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()\/PopFont() to change the current font.$/;"	m	struct:ImFontAtlas
ForegroundDrawList	support/imgui/imgui_internal.h	/^    ImDrawList              ForegroundDrawList;                 \/\/ Last draw list to be rendered. This is where we the render software mouse cursor (if io.MouseDrawCursor is set) and most debug overlays.$/;"	m	struct:ImGuiContext
Fract	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline double Fract(double x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Fract	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline float Fract(float x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
FrameBorderSize	support/imgui/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
FrameCount	support/imgui/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext
FrameCountEnded	support/imgui/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext
FrameCountRendered	support/imgui/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext
FramePadding	support/imgui/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most widgets).$/;"	m	struct:ImGuiStyle
FramePadding	support/imgui/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of BeginTabBar()$/;"	m	struct:ImGuiTabBar
FrameRounding	support/imgui/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).$/;"	m	struct:ImGuiStyle
FrameScopeActive	support/imgui/imgui_internal.h	/^    bool                    FrameScopeActive;                   \/\/ Set by NewFrame(), cleared by EndFrame()$/;"	m	struct:ImGuiContext
FrameScopePushedImplicitWindow	support/imgui/imgui_internal.h	/^    bool                    FrameScopePushedImplicitWindow;     \/\/ Set by NewFrame(), cleared by EndFrame()$/;"	m	struct:ImGuiContext
FramebufferScale	support/imgui/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.$/;"	m	struct:ImDrawData
Framerate	support/imgui/imgui.h	/^    float       Framerate;                      \/\/ Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames$/;"	m	struct:ImGuiIO
FramerateSecPerFrame	support/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of framerate for user over the last 2 seconds.$/;"	m	struct:ImGuiContext
FramerateSecPerFrameAccum	support/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext
FramerateSecPerFrameIdx	support/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext
FreeEXRErrorMessage	support/tinyexr/tinyexr.h	/^void FreeEXRErrorMessage(const char *msg) {$/;"	f
FreeEXRHeader	support/tinyexr/tinyexr.h	/^int FreeEXRHeader(EXRHeader *exr_header) {$/;"	f
FreeEXRImage	support/tinyexr/tinyexr.h	/^int FreeEXRImage(EXRImage *exr_image) {$/;"	f
FreeIdx	support/imgui/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool
FreeWrapper	support/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(ptr); IM_ASSERT(0); }$/;"	f	file:
FreeWrapper	support/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr); }$/;"	f	file:
FsCallbacks	support/tinygltf/tiny_gltf.h	/^struct FsCallbacks {$/;"	s	namespace:tinygltf
GCrc32LookupTable	support/imgui/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] = $/;"	v	file:
GDataTypeInfo	support/imgui/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	file:
GET_DIDEVICE_SUBTYPE	support/GLFW/deps/mingw/dinput.h	348;"	d
GET_DIDEVICE_TYPE	support/GLFW/deps/mingw/dinput.h	347;"	d
GET_XBUTTON_WPARAM	support/GLFW/src/win32_platform.h	99;"	d
GImAllocatorAllocFunc	support/imgui/imgui.cpp	/^static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;$/;"	v	file:
GImAllocatorFreeFunc	support/imgui/imgui.cpp	/^static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;$/;"	v	file:
GImAllocatorUserData	support/imgui/imgui.cpp	/^static void*    GImAllocatorUserData = NULL;$/;"	v	file:
GLAD_GL_ARB_multisample	support/GLFW/deps/glad.c	/^int GLAD_GL_ARB_multisample;$/;"	v
GLAD_GL_ARB_multisample	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_ARB_multisample;$/;"	v
GLAD_GL_ARB_robustness	support/GLFW/deps/glad.c	/^int GLAD_GL_ARB_robustness;$/;"	v
GLAD_GL_ARB_robustness	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_ARB_robustness;$/;"	v
GLAD_GL_EXT_separate_specular_color	support/GLFW/deps/glad.c	/^int GLAD_GL_EXT_separate_specular_color;$/;"	v
GLAD_GL_EXT_separate_specular_color	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_EXT_separate_specular_color;$/;"	v
GLAD_GL_VERSION_1_0	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_0;$/;"	v
GLAD_GL_VERSION_1_0	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_0;$/;"	v
GLAD_GL_VERSION_1_0	support/glad/glad.c	/^int GLAD_GL_VERSION_1_0 = 0;$/;"	v
GLAD_GL_VERSION_1_0	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_0;$/;"	v
GLAD_GL_VERSION_1_1	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_1;$/;"	v
GLAD_GL_VERSION_1_1	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_1;$/;"	v
GLAD_GL_VERSION_1_1	support/glad/glad.c	/^int GLAD_GL_VERSION_1_1 = 0;$/;"	v
GLAD_GL_VERSION_1_1	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_1;$/;"	v
GLAD_GL_VERSION_1_2	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_2;$/;"	v
GLAD_GL_VERSION_1_2	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_2;$/;"	v
GLAD_GL_VERSION_1_2	support/glad/glad.c	/^int GLAD_GL_VERSION_1_2 = 0;$/;"	v
GLAD_GL_VERSION_1_2	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_2;$/;"	v
GLAD_GL_VERSION_1_3	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_3;$/;"	v
GLAD_GL_VERSION_1_3	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_3;$/;"	v
GLAD_GL_VERSION_1_3	support/glad/glad.c	/^int GLAD_GL_VERSION_1_3 = 0;$/;"	v
GLAD_GL_VERSION_1_3	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_3;$/;"	v
GLAD_GL_VERSION_1_4	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_4;$/;"	v
GLAD_GL_VERSION_1_4	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_4;$/;"	v
GLAD_GL_VERSION_1_4	support/glad/glad.c	/^int GLAD_GL_VERSION_1_4 = 0;$/;"	v
GLAD_GL_VERSION_1_4	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_4;$/;"	v
GLAD_GL_VERSION_1_5	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_1_5;$/;"	v
GLAD_GL_VERSION_1_5	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_5;$/;"	v
GLAD_GL_VERSION_1_5	support/glad/glad.c	/^int GLAD_GL_VERSION_1_5 = 0;$/;"	v
GLAD_GL_VERSION_1_5	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_5;$/;"	v
GLAD_GL_VERSION_2_0	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_2_0;$/;"	v
GLAD_GL_VERSION_2_0	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_0;$/;"	v
GLAD_GL_VERSION_2_0	support/glad/glad.c	/^int GLAD_GL_VERSION_2_0 = 0;$/;"	v
GLAD_GL_VERSION_2_0	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_0;$/;"	v
GLAD_GL_VERSION_2_1	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_2_1;$/;"	v
GLAD_GL_VERSION_2_1	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_1;$/;"	v
GLAD_GL_VERSION_2_1	support/glad/glad.c	/^int GLAD_GL_VERSION_2_1 = 0;$/;"	v
GLAD_GL_VERSION_2_1	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_1;$/;"	v
GLAD_GL_VERSION_3_0	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_3_0;$/;"	v
GLAD_GL_VERSION_3_0	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_0;$/;"	v
GLAD_GL_VERSION_3_0	support/glad/glad.c	/^int GLAD_GL_VERSION_3_0 = 0;$/;"	v
GLAD_GL_VERSION_3_0	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_0;$/;"	v
GLAD_GL_VERSION_3_1	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_3_1;$/;"	v
GLAD_GL_VERSION_3_1	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_1;$/;"	v
GLAD_GL_VERSION_3_1	support/glad/glad.c	/^int GLAD_GL_VERSION_3_1 = 0;$/;"	v
GLAD_GL_VERSION_3_1	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_1;$/;"	v
GLAD_GL_VERSION_3_2	support/GLFW/deps/glad.c	/^int GLAD_GL_VERSION_3_2;$/;"	v
GLAD_GL_VERSION_3_2	support/GLFW/deps/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_2;$/;"	v
GLAD_GL_VERSION_3_2	support/glad/glad.c	/^int GLAD_GL_VERSION_3_2 = 0;$/;"	v
GLAD_GL_VERSION_3_2	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_2;$/;"	v
GLAD_GL_VERSION_3_3	support/glad/glad.c	/^int GLAD_GL_VERSION_3_3 = 0;$/;"	v
GLAD_GL_VERSION_3_3	support/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_3;$/;"	v
GLADloadproc	support/GLFW/deps/glad/glad.h	/^typedef void* (* GLADloadproc)(const char *name);$/;"	t
GLADloadproc	support/glad/glad.h	/^typedef void* (* GLADloadproc)(const char *name);$/;"	t
GLAPI	support/GLFW/deps/glad/glad.h	42;"	d
GLAPI	support/GLFW/deps/glad/glad.h	44;"	d
GLAPI	support/GLFW/deps/glad/glad.h	48;"	d
GLAPI	support/GLFW/deps/glad/glad.h	50;"	d
GLAPI	support/GLFW/deps/glad/glad.h	54;"	d
GLAPI	support/GLFW/deps/glad/glad.h	56;"	d
GLAPI	support/GLFW/deps/glad/glad.h	59;"	d
GLAPI	support/glad/glad.h	68;"	d
GLAPI	support/glad/glad.h	70;"	d
GLAPI	support/glad/glad.h	74;"	d
GLAPI	support/glad/glad.h	76;"	d
GLAPI	support/glad/glad.h	80;"	d
GLAPI	support/glad/glad.h	82;"	d
GLAPI	support/glad/glad.h	85;"	d
GLAPIENTRY	support/glad/glad.h	49;"	d
GLASS	cuda/MaterialData.h	/^        GLASS         = 1,$/;"	e	enum:MaterialData::Type
GLDEBUGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROC	support/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCAMD	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);$/;"	t
GLDEBUGPROCAMD	support/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);$/;"	t
GLDEBUGPROCARB	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCARB	support/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCKHR	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCKHR	support/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDisplay	sutil/GLDisplay.cpp	/^GLDisplay::GLDisplay( BufferImageFormat image_format )$/;"	f	class:sutil::GLDisplay
GLDisplay	sutil/GLDisplay.h	/^class GLDisplay$/;"	c	namespace:sutil
GLEXT_64_TYPES_DEFINED	support/GLFW/deps/glad/glad.h	68;"	d
GLFWAPI	support/GLFW/include/GLFW/glfw3.h	194;"	d
GLFWAPI	support/GLFW/include/GLFW/glfw3.h	197;"	d
GLFWAPI	support/GLFW/include/GLFW/glfw3.h	200;"	d
GLFWAPI	support/GLFW/include/GLFW/glfw3.h	203;"	d
GLFW_ACCUM_ALPHA_BITS	support/GLFW/include/GLFW/glfw3.h	643;"	d
GLFW_ACCUM_BLUE_BITS	support/GLFW/include/GLFW/glfw3.h	642;"	d
GLFW_ACCUM_GREEN_BITS	support/GLFW/include/GLFW/glfw3.h	641;"	d
GLFW_ACCUM_RED_BITS	support/GLFW/include/GLFW/glfw3.h	640;"	d
GLFW_ALPHA_BITS	support/GLFW/include/GLFW/glfw3.h	637;"	d
GLFW_ANY_RELEASE_BEHAVIOR	support/GLFW/include/GLFW/glfw3.h	683;"	d
GLFW_API_UNAVAILABLE	support/GLFW/include/GLFW/glfw3.h	567;"	d
GLFW_ARROW_CURSOR	support/GLFW/include/GLFW/glfw3.h	701;"	d
GLFW_AUTO_ICONIFY	support/GLFW/include/GLFW/glfw3.h	630;"	d
GLFW_AUX_BUFFERS	support/GLFW/include/GLFW/glfw3.h	644;"	d
GLFW_BLUE_BITS	support/GLFW/include/GLFW/glfw3.h	636;"	d
GLFW_CALLBACK_DEFINED	support/GLFW/include/GLFW/glfw3.h	115;"	d
GLFW_CALLBACK_DEFINED	support/GLFW/include/GLFW/glfw3.h	4237;"	d
GLFW_CLIENT_API	support/GLFW/include/GLFW/glfw3.h	651;"	d
GLFW_CONNECTED	support/GLFW/include/GLFW/glfw3.h	729;"	d
GLFW_CONTEXT_CREATION_API	support/GLFW/include/GLFW/glfw3.h	661;"	d
GLFW_CONTEXT_NO_ERROR	support/GLFW/include/GLFW/glfw3.h	660;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	support/GLFW/include/GLFW/glfw3.h	659;"	d
GLFW_CONTEXT_REVISION	support/GLFW/include/GLFW/glfw3.h	654;"	d
GLFW_CONTEXT_ROBUSTNESS	support/GLFW/include/GLFW/glfw3.h	655;"	d
GLFW_CONTEXT_VERSION_MAJOR	support/GLFW/include/GLFW/glfw3.h	652;"	d
GLFW_CONTEXT_VERSION_MINOR	support/GLFW/include/GLFW/glfw3.h	653;"	d
GLFW_CROSSHAIR_CURSOR	support/GLFW/include/GLFW/glfw3.h	711;"	d
GLFW_CURSOR	support/GLFW/include/GLFW/glfw3.h	675;"	d
GLFW_CURSOR_DISABLED	support/GLFW/include/GLFW/glfw3.h	681;"	d
GLFW_CURSOR_HIDDEN	support/GLFW/include/GLFW/glfw3.h	680;"	d
GLFW_CURSOR_NORMAL	support/GLFW/include/GLFW/glfw3.h	679;"	d
GLFW_DECORATED	support/GLFW/include/GLFW/glfw3.h	629;"	d
GLFW_DEPTH_BITS	support/GLFW/include/GLFW/glfw3.h	638;"	d
GLFW_DISCONNECTED	support/GLFW/include/GLFW/glfw3.h	730;"	d
GLFW_DONT_CARE	support/GLFW/include/GLFW/glfw3.h	732;"	d
GLFW_DOUBLEBUFFER	support/GLFW/include/GLFW/glfw3.h	649;"	d
GLFW_EGL_CONTEXT_API	support/GLFW/include/GLFW/glfw3.h	688;"	d
GLFW_EXPOSE_NATIVE_WIN32	support/imgui/imgui_impl_glfw.cpp	42;"	d	file:
GLFW_FALSE	support/GLFW/include/GLFW/glfw3.h	250;"	d
GLFW_FLOATING	support/GLFW/include/GLFW/glfw3.h	631;"	d
GLFW_FOCUSED	support/GLFW/include/GLFW/glfw3.h	625;"	d
GLFW_FORMAT_UNAVAILABLE	support/GLFW/include/GLFW/glfw3.h	614;"	d
GLFW_GREEN_BITS	support/GLFW/include/GLFW/glfw3.h	635;"	d
GLFW_HAND_CURSOR	support/GLFW/include/GLFW/glfw3.h	716;"	d
GLFW_HAS_PER_MONITOR_DPI	support/imgui/imgui_impl_glfw.cpp	48;"	d	file:
GLFW_HAS_VULKAN	support/imgui/imgui_impl_glfw.cpp	49;"	d	file:
GLFW_HAS_WINDOW_ALPHA	support/imgui/imgui_impl_glfw.cpp	47;"	d	file:
GLFW_HAS_WINDOW_HOVERED	support/imgui/imgui_impl_glfw.cpp	46;"	d	file:
GLFW_HAS_WINDOW_TOPMOST	support/imgui/imgui_impl_glfw.cpp	45;"	d	file:
GLFW_HRESIZE_CURSOR	support/GLFW/include/GLFW/glfw3.h	721;"	d
GLFW_IBEAM_CURSOR	support/GLFW/include/GLFW/glfw3.h	706;"	d
GLFW_ICONIFIED	support/GLFW/include/GLFW/glfw3.h	626;"	d
GLFW_INCLUDE_NONE	support/GLFW/src/internal.h	48;"	d
GLFW_INVALID_ENUM	support/GLFW/include/GLFW/glfw3.h	532;"	d
GLFW_INVALID_VALUE	support/GLFW/include/GLFW/glfw3.h	543;"	d
GLFW_JOYSTICK_1	support/GLFW/include/GLFW/glfw3.h	480;"	d
GLFW_JOYSTICK_10	support/GLFW/include/GLFW/glfw3.h	489;"	d
GLFW_JOYSTICK_11	support/GLFW/include/GLFW/glfw3.h	490;"	d
GLFW_JOYSTICK_12	support/GLFW/include/GLFW/glfw3.h	491;"	d
GLFW_JOYSTICK_13	support/GLFW/include/GLFW/glfw3.h	492;"	d
GLFW_JOYSTICK_14	support/GLFW/include/GLFW/glfw3.h	493;"	d
GLFW_JOYSTICK_15	support/GLFW/include/GLFW/glfw3.h	494;"	d
GLFW_JOYSTICK_16	support/GLFW/include/GLFW/glfw3.h	495;"	d
GLFW_JOYSTICK_2	support/GLFW/include/GLFW/glfw3.h	481;"	d
GLFW_JOYSTICK_3	support/GLFW/include/GLFW/glfw3.h	482;"	d
GLFW_JOYSTICK_4	support/GLFW/include/GLFW/glfw3.h	483;"	d
GLFW_JOYSTICK_5	support/GLFW/include/GLFW/glfw3.h	484;"	d
GLFW_JOYSTICK_6	support/GLFW/include/GLFW/glfw3.h	485;"	d
GLFW_JOYSTICK_7	support/GLFW/include/GLFW/glfw3.h	486;"	d
GLFW_JOYSTICK_8	support/GLFW/include/GLFW/glfw3.h	487;"	d
GLFW_JOYSTICK_9	support/GLFW/include/GLFW/glfw3.h	488;"	d
GLFW_JOYSTICK_LAST	support/GLFW/include/GLFW/glfw3.h	496;"	d
GLFW_KEY_0	support/GLFW/include/GLFW/glfw3.h	311;"	d
GLFW_KEY_1	support/GLFW/include/GLFW/glfw3.h	312;"	d
GLFW_KEY_2	support/GLFW/include/GLFW/glfw3.h	313;"	d
GLFW_KEY_3	support/GLFW/include/GLFW/glfw3.h	314;"	d
GLFW_KEY_4	support/GLFW/include/GLFW/glfw3.h	315;"	d
GLFW_KEY_5	support/GLFW/include/GLFW/glfw3.h	316;"	d
GLFW_KEY_6	support/GLFW/include/GLFW/glfw3.h	317;"	d
GLFW_KEY_7	support/GLFW/include/GLFW/glfw3.h	318;"	d
GLFW_KEY_8	support/GLFW/include/GLFW/glfw3.h	319;"	d
GLFW_KEY_9	support/GLFW/include/GLFW/glfw3.h	320;"	d
GLFW_KEY_A	support/GLFW/include/GLFW/glfw3.h	323;"	d
GLFW_KEY_APOSTROPHE	support/GLFW/include/GLFW/glfw3.h	306;"	d
GLFW_KEY_B	support/GLFW/include/GLFW/glfw3.h	324;"	d
GLFW_KEY_BACKSLASH	support/GLFW/include/GLFW/glfw3.h	350;"	d
GLFW_KEY_BACKSPACE	support/GLFW/include/GLFW/glfw3.h	360;"	d
GLFW_KEY_C	support/GLFW/include/GLFW/glfw3.h	325;"	d
GLFW_KEY_CAPS_LOCK	support/GLFW/include/GLFW/glfw3.h	371;"	d
GLFW_KEY_COMMA	support/GLFW/include/GLFW/glfw3.h	307;"	d
GLFW_KEY_D	support/GLFW/include/GLFW/glfw3.h	326;"	d
GLFW_KEY_DELETE	support/GLFW/include/GLFW/glfw3.h	362;"	d
GLFW_KEY_DOWN	support/GLFW/include/GLFW/glfw3.h	365;"	d
GLFW_KEY_E	support/GLFW/include/GLFW/glfw3.h	327;"	d
GLFW_KEY_END	support/GLFW/include/GLFW/glfw3.h	370;"	d
GLFW_KEY_ENTER	support/GLFW/include/GLFW/glfw3.h	358;"	d
GLFW_KEY_EQUAL	support/GLFW/include/GLFW/glfw3.h	322;"	d
GLFW_KEY_ESCAPE	support/GLFW/include/GLFW/glfw3.h	357;"	d
GLFW_KEY_F	support/GLFW/include/GLFW/glfw3.h	328;"	d
GLFW_KEY_F1	support/GLFW/include/GLFW/glfw3.h	376;"	d
GLFW_KEY_F10	support/GLFW/include/GLFW/glfw3.h	385;"	d
GLFW_KEY_F11	support/GLFW/include/GLFW/glfw3.h	386;"	d
GLFW_KEY_F12	support/GLFW/include/GLFW/glfw3.h	387;"	d
GLFW_KEY_F13	support/GLFW/include/GLFW/glfw3.h	388;"	d
GLFW_KEY_F14	support/GLFW/include/GLFW/glfw3.h	389;"	d
GLFW_KEY_F15	support/GLFW/include/GLFW/glfw3.h	390;"	d
GLFW_KEY_F16	support/GLFW/include/GLFW/glfw3.h	391;"	d
GLFW_KEY_F17	support/GLFW/include/GLFW/glfw3.h	392;"	d
GLFW_KEY_F18	support/GLFW/include/GLFW/glfw3.h	393;"	d
GLFW_KEY_F19	support/GLFW/include/GLFW/glfw3.h	394;"	d
GLFW_KEY_F2	support/GLFW/include/GLFW/glfw3.h	377;"	d
GLFW_KEY_F20	support/GLFW/include/GLFW/glfw3.h	395;"	d
GLFW_KEY_F21	support/GLFW/include/GLFW/glfw3.h	396;"	d
GLFW_KEY_F22	support/GLFW/include/GLFW/glfw3.h	397;"	d
GLFW_KEY_F23	support/GLFW/include/GLFW/glfw3.h	398;"	d
GLFW_KEY_F24	support/GLFW/include/GLFW/glfw3.h	399;"	d
GLFW_KEY_F25	support/GLFW/include/GLFW/glfw3.h	400;"	d
GLFW_KEY_F3	support/GLFW/include/GLFW/glfw3.h	378;"	d
GLFW_KEY_F4	support/GLFW/include/GLFW/glfw3.h	379;"	d
GLFW_KEY_F5	support/GLFW/include/GLFW/glfw3.h	380;"	d
GLFW_KEY_F6	support/GLFW/include/GLFW/glfw3.h	381;"	d
GLFW_KEY_F7	support/GLFW/include/GLFW/glfw3.h	382;"	d
GLFW_KEY_F8	support/GLFW/include/GLFW/glfw3.h	383;"	d
GLFW_KEY_F9	support/GLFW/include/GLFW/glfw3.h	384;"	d
GLFW_KEY_G	support/GLFW/include/GLFW/glfw3.h	329;"	d
GLFW_KEY_GRAVE_ACCENT	support/GLFW/include/GLFW/glfw3.h	352;"	d
GLFW_KEY_H	support/GLFW/include/GLFW/glfw3.h	330;"	d
GLFW_KEY_HOME	support/GLFW/include/GLFW/glfw3.h	369;"	d
GLFW_KEY_I	support/GLFW/include/GLFW/glfw3.h	331;"	d
GLFW_KEY_INSERT	support/GLFW/include/GLFW/glfw3.h	361;"	d
GLFW_KEY_J	support/GLFW/include/GLFW/glfw3.h	332;"	d
GLFW_KEY_K	support/GLFW/include/GLFW/glfw3.h	333;"	d
GLFW_KEY_KP_0	support/GLFW/include/GLFW/glfw3.h	401;"	d
GLFW_KEY_KP_1	support/GLFW/include/GLFW/glfw3.h	402;"	d
GLFW_KEY_KP_2	support/GLFW/include/GLFW/glfw3.h	403;"	d
GLFW_KEY_KP_3	support/GLFW/include/GLFW/glfw3.h	404;"	d
GLFW_KEY_KP_4	support/GLFW/include/GLFW/glfw3.h	405;"	d
GLFW_KEY_KP_5	support/GLFW/include/GLFW/glfw3.h	406;"	d
GLFW_KEY_KP_6	support/GLFW/include/GLFW/glfw3.h	407;"	d
GLFW_KEY_KP_7	support/GLFW/include/GLFW/glfw3.h	408;"	d
GLFW_KEY_KP_8	support/GLFW/include/GLFW/glfw3.h	409;"	d
GLFW_KEY_KP_9	support/GLFW/include/GLFW/glfw3.h	410;"	d
GLFW_KEY_KP_ADD	support/GLFW/include/GLFW/glfw3.h	415;"	d
GLFW_KEY_KP_DECIMAL	support/GLFW/include/GLFW/glfw3.h	411;"	d
GLFW_KEY_KP_DIVIDE	support/GLFW/include/GLFW/glfw3.h	412;"	d
GLFW_KEY_KP_ENTER	support/GLFW/include/GLFW/glfw3.h	416;"	d
GLFW_KEY_KP_EQUAL	support/GLFW/include/GLFW/glfw3.h	417;"	d
GLFW_KEY_KP_MULTIPLY	support/GLFW/include/GLFW/glfw3.h	413;"	d
GLFW_KEY_KP_SUBTRACT	support/GLFW/include/GLFW/glfw3.h	414;"	d
GLFW_KEY_L	support/GLFW/include/GLFW/glfw3.h	334;"	d
GLFW_KEY_LAST	support/GLFW/include/GLFW/glfw3.h	428;"	d
GLFW_KEY_LEFT	support/GLFW/include/GLFW/glfw3.h	364;"	d
GLFW_KEY_LEFT_ALT	support/GLFW/include/GLFW/glfw3.h	420;"	d
GLFW_KEY_LEFT_BRACKET	support/GLFW/include/GLFW/glfw3.h	349;"	d
GLFW_KEY_LEFT_CONTROL	support/GLFW/include/GLFW/glfw3.h	419;"	d
GLFW_KEY_LEFT_SHIFT	support/GLFW/include/GLFW/glfw3.h	418;"	d
GLFW_KEY_LEFT_SUPER	support/GLFW/include/GLFW/glfw3.h	421;"	d
GLFW_KEY_M	support/GLFW/include/GLFW/glfw3.h	335;"	d
GLFW_KEY_MENU	support/GLFW/include/GLFW/glfw3.h	426;"	d
GLFW_KEY_MINUS	support/GLFW/include/GLFW/glfw3.h	308;"	d
GLFW_KEY_N	support/GLFW/include/GLFW/glfw3.h	336;"	d
GLFW_KEY_NUM_LOCK	support/GLFW/include/GLFW/glfw3.h	373;"	d
GLFW_KEY_O	support/GLFW/include/GLFW/glfw3.h	337;"	d
GLFW_KEY_P	support/GLFW/include/GLFW/glfw3.h	338;"	d
GLFW_KEY_PAGE_DOWN	support/GLFW/include/GLFW/glfw3.h	368;"	d
GLFW_KEY_PAGE_UP	support/GLFW/include/GLFW/glfw3.h	367;"	d
GLFW_KEY_PAUSE	support/GLFW/include/GLFW/glfw3.h	375;"	d
GLFW_KEY_PERIOD	support/GLFW/include/GLFW/glfw3.h	309;"	d
GLFW_KEY_PRINT_SCREEN	support/GLFW/include/GLFW/glfw3.h	374;"	d
GLFW_KEY_Q	support/GLFW/include/GLFW/glfw3.h	339;"	d
GLFW_KEY_R	support/GLFW/include/GLFW/glfw3.h	340;"	d
GLFW_KEY_RIGHT	support/GLFW/include/GLFW/glfw3.h	363;"	d
GLFW_KEY_RIGHT_ALT	support/GLFW/include/GLFW/glfw3.h	424;"	d
GLFW_KEY_RIGHT_BRACKET	support/GLFW/include/GLFW/glfw3.h	351;"	d
GLFW_KEY_RIGHT_CONTROL	support/GLFW/include/GLFW/glfw3.h	423;"	d
GLFW_KEY_RIGHT_SHIFT	support/GLFW/include/GLFW/glfw3.h	422;"	d
GLFW_KEY_RIGHT_SUPER	support/GLFW/include/GLFW/glfw3.h	425;"	d
GLFW_KEY_S	support/GLFW/include/GLFW/glfw3.h	341;"	d
GLFW_KEY_SCROLL_LOCK	support/GLFW/include/GLFW/glfw3.h	372;"	d
GLFW_KEY_SEMICOLON	support/GLFW/include/GLFW/glfw3.h	321;"	d
GLFW_KEY_SLASH	support/GLFW/include/GLFW/glfw3.h	310;"	d
GLFW_KEY_SPACE	support/GLFW/include/GLFW/glfw3.h	305;"	d
GLFW_KEY_T	support/GLFW/include/GLFW/glfw3.h	342;"	d
GLFW_KEY_TAB	support/GLFW/include/GLFW/glfw3.h	359;"	d
GLFW_KEY_U	support/GLFW/include/GLFW/glfw3.h	343;"	d
GLFW_KEY_UNKNOWN	support/GLFW/include/GLFW/glfw3.h	302;"	d
GLFW_KEY_UP	support/GLFW/include/GLFW/glfw3.h	366;"	d
GLFW_KEY_V	support/GLFW/include/GLFW/glfw3.h	344;"	d
GLFW_KEY_W	support/GLFW/include/GLFW/glfw3.h	345;"	d
GLFW_KEY_WORLD_1	support/GLFW/include/GLFW/glfw3.h	353;"	d
GLFW_KEY_WORLD_2	support/GLFW/include/GLFW/glfw3.h	354;"	d
GLFW_KEY_X	support/GLFW/include/GLFW/glfw3.h	346;"	d
GLFW_KEY_Y	support/GLFW/include/GLFW/glfw3.h	347;"	d
GLFW_KEY_Z	support/GLFW/include/GLFW/glfw3.h	348;"	d
GLFW_LOSE_CONTEXT_ON_RESET	support/GLFW/include/GLFW/glfw3.h	669;"	d
GLFW_MAXIMIZED	support/GLFW/include/GLFW/glfw3.h	632;"	d
GLFW_MOD_ALT	support/GLFW/include/GLFW/glfw3.h	447;"	d
GLFW_MOD_CONTROL	support/GLFW/include/GLFW/glfw3.h	444;"	d
GLFW_MOD_SHIFT	support/GLFW/include/GLFW/glfw3.h	441;"	d
GLFW_MOD_SUPER	support/GLFW/include/GLFW/glfw3.h	450;"	d
GLFW_MOUSE_BUTTON_1	support/GLFW/include/GLFW/glfw3.h	460;"	d
GLFW_MOUSE_BUTTON_2	support/GLFW/include/GLFW/glfw3.h	461;"	d
GLFW_MOUSE_BUTTON_3	support/GLFW/include/GLFW/glfw3.h	462;"	d
GLFW_MOUSE_BUTTON_4	support/GLFW/include/GLFW/glfw3.h	463;"	d
GLFW_MOUSE_BUTTON_5	support/GLFW/include/GLFW/glfw3.h	464;"	d
GLFW_MOUSE_BUTTON_6	support/GLFW/include/GLFW/glfw3.h	465;"	d
GLFW_MOUSE_BUTTON_7	support/GLFW/include/GLFW/glfw3.h	466;"	d
GLFW_MOUSE_BUTTON_8	support/GLFW/include/GLFW/glfw3.h	467;"	d
GLFW_MOUSE_BUTTON_LAST	support/GLFW/include/GLFW/glfw3.h	468;"	d
GLFW_MOUSE_BUTTON_LEFT	support/GLFW/include/GLFW/glfw3.h	469;"	d
GLFW_MOUSE_BUTTON_MIDDLE	support/GLFW/include/GLFW/glfw3.h	471;"	d
GLFW_MOUSE_BUTTON_RIGHT	support/GLFW/include/GLFW/glfw3.h	470;"	d
GLFW_NATIVE_CONTEXT_API	support/GLFW/include/GLFW/glfw3.h	687;"	d
GLFW_NOT_INITIALIZED	support/GLFW/include/GLFW/glfw3.h	513;"	d
GLFW_NO_API	support/GLFW/include/GLFW/glfw3.h	663;"	d
GLFW_NO_CURRENT_CONTEXT	support/GLFW/include/GLFW/glfw3.h	523;"	d
GLFW_NO_RESET_NOTIFICATION	support/GLFW/include/GLFW/glfw3.h	668;"	d
GLFW_NO_ROBUSTNESS	support/GLFW/include/GLFW/glfw3.h	667;"	d
GLFW_NO_WINDOW_CONTEXT	support/GLFW/include/GLFW/glfw3.h	622;"	d
GLFW_OPENGL_ANY_PROFILE	support/GLFW/include/GLFW/glfw3.h	671;"	d
GLFW_OPENGL_API	support/GLFW/include/GLFW/glfw3.h	664;"	d
GLFW_OPENGL_COMPAT_PROFILE	support/GLFW/include/GLFW/glfw3.h	673;"	d
GLFW_OPENGL_CORE_PROFILE	support/GLFW/include/GLFW/glfw3.h	672;"	d
GLFW_OPENGL_DEBUG_CONTEXT	support/GLFW/include/GLFW/glfw3.h	657;"	d
GLFW_OPENGL_ES_API	support/GLFW/include/GLFW/glfw3.h	665;"	d
GLFW_OPENGL_FORWARD_COMPAT	support/GLFW/include/GLFW/glfw3.h	656;"	d
GLFW_OPENGL_PROFILE	support/GLFW/include/GLFW/glfw3.h	658;"	d
GLFW_OUT_OF_MEMORY	support/GLFW/include/GLFW/glfw3.h	551;"	d
GLFW_PLATFORM_ERROR	support/GLFW/include/GLFW/glfw3.h	595;"	d
GLFW_PRESS	support/GLFW/include/GLFW/glfw3.h	268;"	d
GLFW_RED_BITS	support/GLFW/include/GLFW/glfw3.h	634;"	d
GLFW_REFRESH_RATE	support/GLFW/include/GLFW/glfw3.h	648;"	d
GLFW_RELEASE	support/GLFW/include/GLFW/glfw3.h	261;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	support/GLFW/include/GLFW/glfw3.h	684;"	d
GLFW_RELEASE_BEHAVIOR_NONE	support/GLFW/include/GLFW/glfw3.h	685;"	d
GLFW_REPEAT	support/GLFW/include/GLFW/glfw3.h	275;"	d
GLFW_RESIZABLE	support/GLFW/include/GLFW/glfw3.h	627;"	d
GLFW_SAMPLES	support/GLFW/include/GLFW/glfw3.h	646;"	d
GLFW_SELECTION	support/GLFW/src/x11_platform.h	/^    Atom            GLFW_SELECTION;$/;"	m	struct:_GLFWlibraryX11
GLFW_SRGB_CAPABLE	support/GLFW/include/GLFW/glfw3.h	647;"	d
GLFW_STENCIL_BITS	support/GLFW/include/GLFW/glfw3.h	639;"	d
GLFW_STEREO	support/GLFW/include/GLFW/glfw3.h	645;"	d
GLFW_STICKY_KEYS	support/GLFW/include/GLFW/glfw3.h	676;"	d
GLFW_STICKY_MOUSE_BUTTONS	support/GLFW/include/GLFW/glfw3.h	677;"	d
GLFW_TRUE	support/GLFW/include/GLFW/glfw3.h	243;"	d
GLFW_VERSION_MAJOR	support/GLFW/include/GLFW/glfw3.h	218;"	d
GLFW_VERSION_MINOR	support/GLFW/include/GLFW/glfw3.h	225;"	d
GLFW_VERSION_REVISION	support/GLFW/include/GLFW/glfw3.h	232;"	d
GLFW_VERSION_UNAVAILABLE	support/GLFW/include/GLFW/glfw3.h	584;"	d
GLFW_VISIBLE	support/GLFW/include/GLFW/glfw3.h	628;"	d
GLFW_VRESIZE_CURSOR	support/GLFW/include/GLFW/glfw3.h	726;"	d
GLFW_WINGDIAPI_DEFINED	support/GLFW/include/GLFW/glfw3.h	108;"	d
GLFW_WINGDIAPI_DEFINED	support/GLFW/include/GLFW/glfw3.h	4232;"	d
GLFWbool	support/GLFW/src/internal.h	/^typedef int GLFWbool;$/;"	t
GLFWcharfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t
GLFWcharmodsfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t
GLFWcursor	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t
GLFWcursorposfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t
GLFWdropfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t
GLFWerrorfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t
GLFWframebuffersizefun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t
GLFWgammaramp	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	support/GLFW/include/GLFW/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	support/GLFW/include/GLFW/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t
GLFWimage	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	support/GLFW/include/GLFW/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWjoystickfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWjoystickfun)(int,int);$/;"	t
GLFWkeyfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t
GLFWmonitor	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t
GLFWmousebuttonfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t
GLFWscrollfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t
GLFWvidmode	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	support/GLFW/include/GLFW/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWvkproc	support/GLFW/include/GLFW/glfw3.h	/^typedef void (*GLFWvkproc)(void);$/;"	t
GLFWwindow	support/GLFW/include/GLFW/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t
GLFWwindowfocusfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t
GLFWwindowiconifyfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t
GLFWwindowposfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t
GLFWwindowrefreshfun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t
GLFWwindowsizefun	support/GLFW/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t
GLVULKANPROCNV	support/glad/glad.h	/^typedef void (APIENTRY *GLVULKANPROCNV)(void);$/;"	t
GLVersion	support/GLFW/deps/glad.c	/^struct gladGLversionStruct GLVersion;$/;"	v	typeref:struct:gladGLversionStruct
GLVersion	support/glad/glad.c	/^struct gladGLversionStruct GLVersion = { 0, 0 };$/;"	v	typeref:struct:gladGLversionStruct
GLVersion	support/glad/glad.h	/^GLAPI struct gladGLversionStruct GLVersion;$/;"	v	typeref:struct:gladGLversionStruct
GLXBadProfileARB	support/GLFW/src/glx_context.c	35;"	d	file:
GLXContext	support/GLFW/src/glx_context.h	/^typedef struct __GLXcontext* GLXContext;$/;"	t	typeref:struct:__GLXcontext
GLXDrawable	support/GLFW/src/glx_context.h	/^typedef XID GLXDrawable;$/;"	t
GLXFBConfig	support/GLFW/src/glx_context.h	/^typedef struct __GLXFBConfig* GLXFBConfig;$/;"	t	typeref:struct:__GLXFBConfig
GLXWindow	support/GLFW/src/glx_context.h	/^typedef XID GLXWindow;$/;"	t
GLX_ACCUM_ALPHA_SIZE	support/GLFW/src/glx_context.h	49;"	d
GLX_ACCUM_BLUE_SIZE	support/GLFW/src/glx_context.h	48;"	d
GLX_ACCUM_GREEN_SIZE	support/GLFW/src/glx_context.h	47;"	d
GLX_ACCUM_RED_SIZE	support/GLFW/src/glx_context.h	46;"	d
GLX_ALPHA_SIZE	support/GLFW/src/glx_context.h	43;"	d
GLX_AUX_BUFFERS	support/GLFW/src/glx_context.h	39;"	d
GLX_BLUE_SIZE	support/GLFW/src/glx_context.h	42;"	d
GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	support/GLFW/src/glx_context.h	55;"	d
GLX_CONTEXT_CORE_PROFILE_BIT_ARB	support/GLFW/src/glx_context.h	56;"	d
GLX_CONTEXT_DEBUG_BIT_ARB	support/GLFW/src/glx_context.h	54;"	d
GLX_CONTEXT_ES2_PROFILE_BIT_EXT	support/GLFW/src/glx_context.h	62;"	d
GLX_CONTEXT_FLAGS_ARB	support/GLFW/src/glx_context.h	61;"	d
GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	support/GLFW/src/glx_context.h	58;"	d
GLX_CONTEXT_MAJOR_VERSION_ARB	support/GLFW/src/glx_context.h	59;"	d
GLX_CONTEXT_MINOR_VERSION_ARB	support/GLFW/src/glx_context.h	60;"	d
GLX_CONTEXT_PROFILE_MASK_ARB	support/GLFW/src/glx_context.h	57;"	d
GLX_CONTEXT_RELEASE_BEHAVIOR_ARB	support/GLFW/src/glx_context.h	67;"	d
GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB	support/GLFW/src/glx_context.h	69;"	d
GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB	support/GLFW/src/glx_context.h	68;"	d
GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB	support/GLFW/src/glx_context.h	65;"	d
GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB	support/GLFW/src/glx_context.h	63;"	d
GLX_DEPTH_SIZE	support/GLFW/src/glx_context.h	44;"	d
GLX_DOUBLEBUFFER	support/GLFW/src/glx_context.h	37;"	d
GLX_DRAWABLE_TYPE	support/GLFW/src/glx_context.h	34;"	d
GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB	support/GLFW/src/glx_context.h	53;"	d
GLX_GREEN_SIZE	support/GLFW/src/glx_context.h	41;"	d
GLX_LOSE_CONTEXT_ON_RESET_ARB	support/GLFW/src/glx_context.h	64;"	d
GLX_NO_RESET_NOTIFICATION_ARB	support/GLFW/src/glx_context.h	66;"	d
GLX_RED_SIZE	support/GLFW/src/glx_context.h	40;"	d
GLX_RENDER_TYPE	support/GLFW/src/glx_context.h	35;"	d
GLX_RGBA_BIT	support/GLFW/src/glx_context.h	32;"	d
GLX_RGBA_TYPE	support/GLFW/src/glx_context.h	36;"	d
GLX_SAMPLES	support/GLFW/src/glx_context.h	50;"	d
GLX_STENCIL_SIZE	support/GLFW/src/glx_context.h	45;"	d
GLX_STEREO	support/GLFW/src/glx_context.h	38;"	d
GLX_VENDOR	support/GLFW/src/glx_context.h	31;"	d
GLX_VISUAL_ID	support/GLFW/src/glx_context.h	51;"	d
GLX_WINDOW_BIT	support/GLFW/src/glx_context.h	33;"	d
GL_2D	support/GLFW/deps/glad/glad.h	382;"	d
GL_2D	support/glad/glad.h	344;"	d
GL_2_BYTES	support/GLFW/deps/glad/glad.h	594;"	d
GL_2_BYTES	support/glad/glad.h	518;"	d
GL_3D	support/GLFW/deps/glad/glad.h	383;"	d
GL_3D	support/glad/glad.h	345;"	d
GL_3D_COLOR	support/GLFW/deps/glad/glad.h	384;"	d
GL_3D_COLOR	support/glad/glad.h	346;"	d
GL_3D_COLOR_TEXTURE	support/GLFW/deps/glad/glad.h	385;"	d
GL_3D_COLOR_TEXTURE	support/glad/glad.h	347;"	d
GL_3_BYTES	support/GLFW/deps/glad/glad.h	595;"	d
GL_3_BYTES	support/glad/glad.h	519;"	d
GL_4D_COLOR_TEXTURE	support/GLFW/deps/glad/glad.h	386;"	d
GL_4D_COLOR_TEXTURE	support/glad/glad.h	348;"	d
GL_4_BYTES	support/GLFW/deps/glad/glad.h	596;"	d
GL_4_BYTES	support/glad/glad.h	520;"	d
GL_ACCUM	support/GLFW/deps/glad/glad.h	373;"	d
GL_ACCUM	support/glad/glad.h	335;"	d
GL_ACCUM_ALPHA_BITS	support/GLFW/deps/glad/glad.h	528;"	d
GL_ACCUM_ALPHA_BITS	support/glad/glad.h	479;"	d
GL_ACCUM_BLUE_BITS	support/GLFW/deps/glad/glad.h	527;"	d
GL_ACCUM_BLUE_BITS	support/glad/glad.h	478;"	d
GL_ACCUM_BUFFER_BIT	support/GLFW/deps/glad/glad.h	358;"	d
GL_ACCUM_BUFFER_BIT	support/glad/glad.h	323;"	d
GL_ACCUM_CLEAR_VALUE	support/GLFW/deps/glad/glad.h	453;"	d
GL_ACCUM_CLEAR_VALUE	support/glad/glad.h	407;"	d
GL_ACCUM_GREEN_BITS	support/GLFW/deps/glad/glad.h	526;"	d
GL_ACCUM_GREEN_BITS	support/glad/glad.h	477;"	d
GL_ACCUM_RED_BITS	support/GLFW/deps/glad/glad.h	525;"	d
GL_ACCUM_RED_BITS	support/glad/glad.h	476;"	d
GL_ACTIVE_ATTRIBUTES	support/GLFW/deps/glad/glad.h	979;"	d
GL_ACTIVE_ATTRIBUTES	support/glad/glad.h	976;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	support/GLFW/deps/glad/glad.h	980;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	support/glad/glad.h	977;"	d
GL_ACTIVE_TEXTURE	support/GLFW/deps/glad/glad.h	748;"	d
GL_ACTIVE_TEXTURE	support/glad/glad.h	743;"	d
GL_ACTIVE_UNIFORMS	support/GLFW/deps/glad/glad.h	976;"	d
GL_ACTIVE_UNIFORMS	support/glad/glad.h	973;"	d
GL_ACTIVE_UNIFORM_BLOCKS	support/GLFW/deps/glad/glad.h	1297;"	d
GL_ACTIVE_UNIFORM_BLOCKS	support/glad/glad.h	1294;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	support/GLFW/deps/glad/glad.h	1296;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	support/glad/glad.h	1293;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	support/GLFW/deps/glad/glad.h	977;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	support/glad/glad.h	974;"	d
GL_ADD	support/GLFW/deps/glad/glad.h	377;"	d
GL_ADD	support/glad/glad.h	339;"	d
GL_ADD_SIGNED	support/GLFW/deps/glad/glad.h	804;"	d
GL_ADD_SIGNED	support/glad/glad.h	799;"	d
GL_ALIASED_LINE_WIDTH_RANGE	support/GLFW/deps/glad/glad.h	710;"	d
GL_ALIASED_LINE_WIDTH_RANGE	support/glad/glad.h	705;"	d
GL_ALIASED_POINT_SIZE_RANGE	support/GLFW/deps/glad/glad.h	715;"	d
GL_ALIASED_POINT_SIZE_RANGE	support/glad/glad.h	710;"	d
GL_ALL_ATTRIB_BITS	support/GLFW/deps/glad/glad.h	367;"	d
GL_ALL_ATTRIB_BITS	support/glad/glad.h	332;"	d
GL_ALPHA	support/GLFW/deps/glad/glad.h	309;"	d
GL_ALPHA	support/glad/glad.h	290;"	d
GL_ALPHA12	support/GLFW/deps/glad/glad.h	630;"	d
GL_ALPHA12	support/glad/glad.h	639;"	d
GL_ALPHA16	support/GLFW/deps/glad/glad.h	631;"	d
GL_ALPHA16	support/glad/glad.h	640;"	d
GL_ALPHA4	support/GLFW/deps/glad/glad.h	628;"	d
GL_ALPHA4	support/glad/glad.h	637;"	d
GL_ALPHA8	support/GLFW/deps/glad/glad.h	629;"	d
GL_ALPHA8	support/glad/glad.h	638;"	d
GL_ALPHA_BIAS	support/GLFW/deps/glad/glad.h	505;"	d
GL_ALPHA_BIAS	support/glad/glad.h	457;"	d
GL_ALPHA_BITS	support/GLFW/deps/glad/glad.h	522;"	d
GL_ALPHA_BITS	support/glad/glad.h	473;"	d
GL_ALPHA_INTEGER	support/GLFW/deps/glad/glad.h	1253;"	d
GL_ALPHA_INTEGER	support/glad/glad.h	1250;"	d
GL_ALPHA_SCALE	support/GLFW/deps/glad/glad.h	504;"	d
GL_ALPHA_SCALE	support/glad/glad.h	456;"	d
GL_ALPHA_TEST	support/GLFW/deps/glad/glad.h	464;"	d
GL_ALPHA_TEST	support/glad/glad.h	417;"	d
GL_ALPHA_TEST_FUNC	support/GLFW/deps/glad/glad.h	465;"	d
GL_ALPHA_TEST_FUNC	support/glad/glad.h	418;"	d
GL_ALPHA_TEST_REF	support/GLFW/deps/glad/glad.h	466;"	d
GL_ALPHA_TEST_REF	support/glad/glad.h	419;"	d
GL_ALREADY_SIGNALED	support/GLFW/deps/glad/glad.h	1352;"	d
GL_ALREADY_SIGNALED	support/glad/glad.h	1349;"	d
GL_ALWAYS	support/GLFW/deps/glad/glad.h	167;"	d
GL_ALWAYS	support/glad/glad.h	162;"	d
GL_AMBIENT	support/GLFW/deps/glad/glad.h	582;"	d
GL_AMBIENT	support/glad/glad.h	506;"	d
GL_AMBIENT_AND_DIFFUSE	support/GLFW/deps/glad/glad.h	599;"	d
GL_AMBIENT_AND_DIFFUSE	support/glad/glad.h	523;"	d
GL_AND	support/GLFW/deps/glad/glad.h	285;"	d
GL_AND	support/glad/glad.h	266;"	d
GL_AND_INVERTED	support/GLFW/deps/glad/glad.h	288;"	d
GL_AND_INVERTED	support/glad/glad.h	269;"	d
GL_AND_REVERSE	support/GLFW/deps/glad/glad.h	286;"	d
GL_AND_REVERSE	support/glad/glad.h	267;"	d
GL_ANY_SAMPLES_PASSED	support/glad/glad.h	1381;"	d
GL_ARB_multisample	support/GLFW/deps/glad/glad.h	3445;"	d
GL_ARB_robustness	support/GLFW/deps/glad/glad.h	3452;"	d
GL_ARRAY_BUFFER	support/GLFW/deps/glad/glad.h	866;"	d
GL_ARRAY_BUFFER	support/glad/glad.h	863;"	d
GL_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	868;"	d
GL_ARRAY_BUFFER_BINDING	support/glad/glad.h	865;"	d
GL_ATTACHED_SHADERS	support/GLFW/deps/glad/glad.h	975;"	d
GL_ATTACHED_SHADERS	support/glad/glad.h	972;"	d
GL_ATTRIB_STACK_DEPTH	support/GLFW/deps/glad/glad.h	462;"	d
GL_ATTRIB_STACK_DEPTH	support/glad/glad.h	416;"	d
GL_AUTO_NORMAL	support/GLFW/deps/glad/glad.h	530;"	d
GL_AUTO_NORMAL	support/glad/glad.h	481;"	d
GL_AUX0	support/GLFW/deps/glad/glad.h	378;"	d
GL_AUX0	support/glad/glad.h	340;"	d
GL_AUX1	support/GLFW/deps/glad/glad.h	379;"	d
GL_AUX1	support/glad/glad.h	341;"	d
GL_AUX2	support/GLFW/deps/glad/glad.h	380;"	d
GL_AUX2	support/glad/glad.h	342;"	d
GL_AUX3	support/GLFW/deps/glad/glad.h	381;"	d
GL_AUX3	support/glad/glad.h	343;"	d
GL_AUX_BUFFERS	support/GLFW/deps/glad/glad.h	469;"	d
GL_AUX_BUFFERS	support/glad/glad.h	421;"	d
GL_BACK	support/GLFW/deps/glad/glad.h	185;"	d
GL_BACK	support/glad/glad.h	180;"	d
GL_BACK_LEFT	support/GLFW/deps/glad/glad.h	182;"	d
GL_BACK_LEFT	support/glad/glad.h	177;"	d
GL_BACK_RIGHT	support/GLFW/deps/glad/glad.h	183;"	d
GL_BACK_RIGHT	support/glad/glad.h	178;"	d
GL_BGR	support/GLFW/deps/glad/glad.h	697;"	d
GL_BGR	support/glad/glad.h	692;"	d
GL_BGRA	support/GLFW/deps/glad/glad.h	698;"	d
GL_BGRA	support/glad/glad.h	693;"	d
GL_BGRA_INTEGER	support/GLFW/deps/glad/glad.h	1089;"	d
GL_BGRA_INTEGER	support/glad/glad.h	1086;"	d
GL_BGR_INTEGER	support/GLFW/deps/glad/glad.h	1088;"	d
GL_BGR_INTEGER	support/glad/glad.h	1085;"	d
GL_BITMAP	support/GLFW/deps/glad/glad.h	606;"	d
GL_BITMAP	support/glad/glad.h	530;"	d
GL_BITMAP_TOKEN	support/GLFW/deps/glad/glad.h	391;"	d
GL_BITMAP_TOKEN	support/glad/glad.h	353;"	d
GL_BLEND	support/GLFW/deps/glad/glad.h	226;"	d
GL_BLEND	support/glad/glad.h	221;"	d
GL_BLEND_COLOR	support/glad/glad.h	846;"	d
GL_BLEND_DST	support/GLFW/deps/glad/glad.h	224;"	d
GL_BLEND_DST	support/glad/glad.h	219;"	d
GL_BLEND_DST_ALPHA	support/GLFW/deps/glad/glad.h	814;"	d
GL_BLEND_DST_ALPHA	support/glad/glad.h	809;"	d
GL_BLEND_DST_RGB	support/GLFW/deps/glad/glad.h	812;"	d
GL_BLEND_DST_RGB	support/glad/glad.h	807;"	d
GL_BLEND_EQUATION	support/glad/glad.h	847;"	d
GL_BLEND_EQUATION_ALPHA	support/GLFW/deps/glad/glad.h	939;"	d
GL_BLEND_EQUATION_ALPHA	support/glad/glad.h	936;"	d
GL_BLEND_EQUATION_RGB	support/GLFW/deps/glad/glad.h	910;"	d
GL_BLEND_EQUATION_RGB	support/glad/glad.h	907;"	d
GL_BLEND_SRC	support/GLFW/deps/glad/glad.h	225;"	d
GL_BLEND_SRC	support/glad/glad.h	220;"	d
GL_BLEND_SRC_ALPHA	support/GLFW/deps/glad/glad.h	815;"	d
GL_BLEND_SRC_ALPHA	support/glad/glad.h	810;"	d
GL_BLEND_SRC_RGB	support/GLFW/deps/glad/glad.h	813;"	d
GL_BLEND_SRC_RGB	support/glad/glad.h	808;"	d
GL_BLUE	support/GLFW/deps/glad/glad.h	308;"	d
GL_BLUE	support/glad/glad.h	289;"	d
GL_BLUE_BIAS	support/GLFW/deps/glad/glad.h	503;"	d
GL_BLUE_BIAS	support/glad/glad.h	455;"	d
GL_BLUE_BITS	support/GLFW/deps/glad/glad.h	521;"	d
GL_BLUE_BITS	support/glad/glad.h	472;"	d
GL_BLUE_INTEGER	support/GLFW/deps/glad/glad.h	1085;"	d
GL_BLUE_INTEGER	support/glad/glad.h	1082;"	d
GL_BLUE_SCALE	support/GLFW/deps/glad/glad.h	502;"	d
GL_BLUE_SCALE	support/glad/glad.h	454;"	d
GL_BOOL	support/GLFW/deps/glad/glad.h	957;"	d
GL_BOOL	support/glad/glad.h	954;"	d
GL_BOOL_VEC2	support/GLFW/deps/glad/glad.h	958;"	d
GL_BOOL_VEC2	support/glad/glad.h	955;"	d
GL_BOOL_VEC3	support/GLFW/deps/glad/glad.h	959;"	d
GL_BOOL_VEC3	support/glad/glad.h	956;"	d
GL_BOOL_VEC4	support/GLFW/deps/glad/glad.h	960;"	d
GL_BOOL_VEC4	support/glad/glad.h	957;"	d
GL_BUFFER_ACCESS	support/GLFW/deps/glad/glad.h	874;"	d
GL_BUFFER_ACCESS	support/glad/glad.h	871;"	d
GL_BUFFER_ACCESS_FLAGS	support/GLFW/deps/glad/glad.h	1114;"	d
GL_BUFFER_ACCESS_FLAGS	support/glad/glad.h	1111;"	d
GL_BUFFER_MAPPED	support/GLFW/deps/glad/glad.h	875;"	d
GL_BUFFER_MAPPED	support/glad/glad.h	872;"	d
GL_BUFFER_MAP_LENGTH	support/GLFW/deps/glad/glad.h	1115;"	d
GL_BUFFER_MAP_LENGTH	support/glad/glad.h	1112;"	d
GL_BUFFER_MAP_OFFSET	support/GLFW/deps/glad/glad.h	1116;"	d
GL_BUFFER_MAP_OFFSET	support/glad/glad.h	1113;"	d
GL_BUFFER_MAP_POINTER	support/GLFW/deps/glad/glad.h	876;"	d
GL_BUFFER_MAP_POINTER	support/glad/glad.h	873;"	d
GL_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	860;"	d
GL_BUFFER_SIZE	support/glad/glad.h	857;"	d
GL_BUFFER_USAGE	support/GLFW/deps/glad/glad.h	861;"	d
GL_BUFFER_USAGE	support/glad/glad.h	858;"	d
GL_BYTE	support/GLFW/deps/glad/glad.h	274;"	d
GL_BYTE	support/glad/glad.h	256;"	d
GL_C3F_V3F	support/GLFW/deps/glad/glad.h	651;"	d
GL_C3F_V3F	support/glad/glad.h	660;"	d
GL_C4F_N3F_V3F	support/GLFW/deps/glad/glad.h	653;"	d
GL_C4F_N3F_V3F	support/glad/glad.h	662;"	d
GL_C4UB_V2F	support/GLFW/deps/glad/glad.h	649;"	d
GL_C4UB_V2F	support/glad/glad.h	658;"	d
GL_C4UB_V3F	support/GLFW/deps/glad/glad.h	650;"	d
GL_C4UB_V3F	support/glad/glad.h	659;"	d
GL_CCW	support/GLFW/deps/glad/glad.h	195;"	d
GL_CCW	support/glad/glad.h	190;"	d
GL_CHECK	sutil/Exception.h	52;"	d
GL_CHECK	sutil/Exception.h	63;"	d
GL_CHECK_ERRORS	sutil/Exception.h	60;"	d
GL_CHECK_ERRORS	sutil/Exception.h	68;"	d
GL_CLAMP	support/GLFW/deps/glad/glad.h	627;"	d
GL_CLAMP	support/glad/glad.h	551;"	d
GL_CLAMP_FRAGMENT_COLOR	support/GLFW/deps/glad/glad.h	1252;"	d
GL_CLAMP_FRAGMENT_COLOR	support/glad/glad.h	1249;"	d
GL_CLAMP_READ_COLOR	support/GLFW/deps/glad/glad.h	1042;"	d
GL_CLAMP_READ_COLOR	support/glad/glad.h	1039;"	d
GL_CLAMP_TO_BORDER	support/GLFW/deps/glad/glad.h	774;"	d
GL_CLAMP_TO_BORDER	support/glad/glad.h	769;"	d
GL_CLAMP_TO_EDGE	support/GLFW/deps/glad/glad.h	701;"	d
GL_CLAMP_TO_EDGE	support/glad/glad.h	696;"	d
GL_CLAMP_VERTEX_COLOR	support/GLFW/deps/glad/glad.h	1251;"	d
GL_CLAMP_VERTEX_COLOR	support/glad/glad.h	1248;"	d
GL_CLEAR	support/GLFW/deps/glad/glad.h	284;"	d
GL_CLEAR	support/glad/glad.h	265;"	d
GL_CLIENT_ACTIVE_TEXTURE	support/GLFW/deps/glad/glad.h	775;"	d
GL_CLIENT_ACTIVE_TEXTURE	support/glad/glad.h	770;"	d
GL_CLIENT_ALL_ATTRIB_BITS	support/GLFW/deps/glad/glad.h	370;"	d
GL_CLIENT_ALL_ATTRIB_BITS	support/glad/glad.h	598;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	support/GLFW/deps/glad/glad.h	463;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	support/glad/glad.h	607;"	d
GL_CLIENT_PIXEL_STORE_BIT	support/GLFW/deps/glad/glad.h	368;"	d
GL_CLIENT_PIXEL_STORE_BIT	support/glad/glad.h	596;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	support/GLFW/deps/glad/glad.h	369;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	support/glad/glad.h	597;"	d
GL_CLIP_DISTANCE0	support/GLFW/deps/glad/glad.h	1018;"	d
GL_CLIP_DISTANCE0	support/glad/glad.h	1015;"	d
GL_CLIP_DISTANCE1	support/GLFW/deps/glad/glad.h	1019;"	d
GL_CLIP_DISTANCE1	support/glad/glad.h	1016;"	d
GL_CLIP_DISTANCE2	support/GLFW/deps/glad/glad.h	1020;"	d
GL_CLIP_DISTANCE2	support/glad/glad.h	1017;"	d
GL_CLIP_DISTANCE3	support/GLFW/deps/glad/glad.h	1021;"	d
GL_CLIP_DISTANCE3	support/glad/glad.h	1018;"	d
GL_CLIP_DISTANCE4	support/GLFW/deps/glad/glad.h	1022;"	d
GL_CLIP_DISTANCE4	support/glad/glad.h	1019;"	d
GL_CLIP_DISTANCE5	support/GLFW/deps/glad/glad.h	1023;"	d
GL_CLIP_DISTANCE5	support/glad/glad.h	1020;"	d
GL_CLIP_DISTANCE6	support/GLFW/deps/glad/glad.h	1024;"	d
GL_CLIP_DISTANCE6	support/glad/glad.h	1021;"	d
GL_CLIP_DISTANCE7	support/GLFW/deps/glad/glad.h	1025;"	d
GL_CLIP_DISTANCE7	support/glad/glad.h	1022;"	d
GL_CLIP_PLANE0	support/GLFW/deps/glad/glad.h	661;"	d
GL_CLIP_PLANE0	support/glad/glad.h	552;"	d
GL_CLIP_PLANE1	support/GLFW/deps/glad/glad.h	662;"	d
GL_CLIP_PLANE1	support/glad/glad.h	553;"	d
GL_CLIP_PLANE2	support/GLFW/deps/glad/glad.h	663;"	d
GL_CLIP_PLANE2	support/glad/glad.h	554;"	d
GL_CLIP_PLANE3	support/GLFW/deps/glad/glad.h	664;"	d
GL_CLIP_PLANE3	support/glad/glad.h	555;"	d
GL_CLIP_PLANE4	support/GLFW/deps/glad/glad.h	665;"	d
GL_CLIP_PLANE4	support/glad/glad.h	556;"	d
GL_CLIP_PLANE5	support/GLFW/deps/glad/glad.h	666;"	d
GL_CLIP_PLANE5	support/glad/glad.h	557;"	d
GL_COEFF	support/GLFW/deps/glad/glad.h	397;"	d
GL_COEFF	support/glad/glad.h	359;"	d
GL_COLOR	support/GLFW/deps/glad/glad.h	301;"	d
GL_COLOR	support/glad/glad.h	282;"	d
GL_COLOR_ARRAY	support/GLFW/deps/glad/glad.h	558;"	d
GL_COLOR_ARRAY	support/glad/glad.h	615;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	890;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	support/glad/glad.h	887;"	d
GL_COLOR_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	412;"	d
GL_COLOR_ARRAY_POINTER	support/glad/glad.h	601;"	d
GL_COLOR_ARRAY_SIZE	support/GLFW/deps/glad/glad.h	567;"	d
GL_COLOR_ARRAY_SIZE	support/glad/glad.h	624;"	d
GL_COLOR_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	569;"	d
GL_COLOR_ARRAY_STRIDE	support/glad/glad.h	626;"	d
GL_COLOR_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	568;"	d
GL_COLOR_ARRAY_TYPE	support/glad/glad.h	625;"	d
GL_COLOR_ATTACHMENT0	support/GLFW/deps/glad/glad.h	1162;"	d
GL_COLOR_ATTACHMENT0	support/glad/glad.h	1159;"	d
GL_COLOR_ATTACHMENT1	support/GLFW/deps/glad/glad.h	1163;"	d
GL_COLOR_ATTACHMENT1	support/glad/glad.h	1160;"	d
GL_COLOR_ATTACHMENT10	support/GLFW/deps/glad/glad.h	1172;"	d
GL_COLOR_ATTACHMENT10	support/glad/glad.h	1169;"	d
GL_COLOR_ATTACHMENT11	support/GLFW/deps/glad/glad.h	1173;"	d
GL_COLOR_ATTACHMENT11	support/glad/glad.h	1170;"	d
GL_COLOR_ATTACHMENT12	support/GLFW/deps/glad/glad.h	1174;"	d
GL_COLOR_ATTACHMENT12	support/glad/glad.h	1171;"	d
GL_COLOR_ATTACHMENT13	support/GLFW/deps/glad/glad.h	1175;"	d
GL_COLOR_ATTACHMENT13	support/glad/glad.h	1172;"	d
GL_COLOR_ATTACHMENT14	support/GLFW/deps/glad/glad.h	1176;"	d
GL_COLOR_ATTACHMENT14	support/glad/glad.h	1173;"	d
GL_COLOR_ATTACHMENT15	support/GLFW/deps/glad/glad.h	1177;"	d
GL_COLOR_ATTACHMENT15	support/glad/glad.h	1174;"	d
GL_COLOR_ATTACHMENT16	support/GLFW/deps/glad/glad.h	1178;"	d
GL_COLOR_ATTACHMENT16	support/glad/glad.h	1175;"	d
GL_COLOR_ATTACHMENT17	support/GLFW/deps/glad/glad.h	1179;"	d
GL_COLOR_ATTACHMENT17	support/glad/glad.h	1176;"	d
GL_COLOR_ATTACHMENT18	support/GLFW/deps/glad/glad.h	1180;"	d
GL_COLOR_ATTACHMENT18	support/glad/glad.h	1177;"	d
GL_COLOR_ATTACHMENT19	support/GLFW/deps/glad/glad.h	1181;"	d
GL_COLOR_ATTACHMENT19	support/glad/glad.h	1178;"	d
GL_COLOR_ATTACHMENT2	support/GLFW/deps/glad/glad.h	1164;"	d
GL_COLOR_ATTACHMENT2	support/glad/glad.h	1161;"	d
GL_COLOR_ATTACHMENT20	support/GLFW/deps/glad/glad.h	1182;"	d
GL_COLOR_ATTACHMENT20	support/glad/glad.h	1179;"	d
GL_COLOR_ATTACHMENT21	support/GLFW/deps/glad/glad.h	1183;"	d
GL_COLOR_ATTACHMENT21	support/glad/glad.h	1180;"	d
GL_COLOR_ATTACHMENT22	support/GLFW/deps/glad/glad.h	1184;"	d
GL_COLOR_ATTACHMENT22	support/glad/glad.h	1181;"	d
GL_COLOR_ATTACHMENT23	support/GLFW/deps/glad/glad.h	1185;"	d
GL_COLOR_ATTACHMENT23	support/glad/glad.h	1182;"	d
GL_COLOR_ATTACHMENT24	support/GLFW/deps/glad/glad.h	1186;"	d
GL_COLOR_ATTACHMENT24	support/glad/glad.h	1183;"	d
GL_COLOR_ATTACHMENT25	support/GLFW/deps/glad/glad.h	1187;"	d
GL_COLOR_ATTACHMENT25	support/glad/glad.h	1184;"	d
GL_COLOR_ATTACHMENT26	support/GLFW/deps/glad/glad.h	1188;"	d
GL_COLOR_ATTACHMENT26	support/glad/glad.h	1185;"	d
GL_COLOR_ATTACHMENT27	support/GLFW/deps/glad/glad.h	1189;"	d
GL_COLOR_ATTACHMENT27	support/glad/glad.h	1186;"	d
GL_COLOR_ATTACHMENT28	support/GLFW/deps/glad/glad.h	1190;"	d
GL_COLOR_ATTACHMENT28	support/glad/glad.h	1187;"	d
GL_COLOR_ATTACHMENT29	support/GLFW/deps/glad/glad.h	1191;"	d
GL_COLOR_ATTACHMENT29	support/glad/glad.h	1188;"	d
GL_COLOR_ATTACHMENT3	support/GLFW/deps/glad/glad.h	1165;"	d
GL_COLOR_ATTACHMENT3	support/glad/glad.h	1162;"	d
GL_COLOR_ATTACHMENT30	support/GLFW/deps/glad/glad.h	1192;"	d
GL_COLOR_ATTACHMENT30	support/glad/glad.h	1189;"	d
GL_COLOR_ATTACHMENT31	support/GLFW/deps/glad/glad.h	1193;"	d
GL_COLOR_ATTACHMENT31	support/glad/glad.h	1190;"	d
GL_COLOR_ATTACHMENT4	support/GLFW/deps/glad/glad.h	1166;"	d
GL_COLOR_ATTACHMENT4	support/glad/glad.h	1163;"	d
GL_COLOR_ATTACHMENT5	support/GLFW/deps/glad/glad.h	1167;"	d
GL_COLOR_ATTACHMENT5	support/glad/glad.h	1164;"	d
GL_COLOR_ATTACHMENT6	support/GLFW/deps/glad/glad.h	1168;"	d
GL_COLOR_ATTACHMENT6	support/glad/glad.h	1165;"	d
GL_COLOR_ATTACHMENT7	support/GLFW/deps/glad/glad.h	1169;"	d
GL_COLOR_ATTACHMENT7	support/glad/glad.h	1166;"	d
GL_COLOR_ATTACHMENT8	support/GLFW/deps/glad/glad.h	1170;"	d
GL_COLOR_ATTACHMENT8	support/glad/glad.h	1167;"	d
GL_COLOR_ATTACHMENT9	support/GLFW/deps/glad/glad.h	1171;"	d
GL_COLOR_ATTACHMENT9	support/glad/glad.h	1168;"	d
GL_COLOR_BUFFER_BIT	support/GLFW/deps/glad/glad.h	149;"	d
GL_COLOR_BUFFER_BIT	support/GLFW/src/internal.h	71;"	d
GL_COLOR_BUFFER_BIT	support/glad/glad.h	144;"	d
GL_COLOR_CLEAR_VALUE	support/GLFW/deps/glad/glad.h	233;"	d
GL_COLOR_CLEAR_VALUE	support/glad/glad.h	227;"	d
GL_COLOR_INDEX	support/GLFW/deps/glad/glad.h	603;"	d
GL_COLOR_INDEX	support/glad/glad.h	527;"	d
GL_COLOR_INDEXES	support/GLFW/deps/glad/glad.h	600;"	d
GL_COLOR_INDEXES	support/glad/glad.h	524;"	d
GL_COLOR_LOGIC_OP	support/GLFW/deps/glad/glad.h	228;"	d
GL_COLOR_LOGIC_OP	support/glad/glad.h	566;"	d
GL_COLOR_MATERIAL	support/GLFW/deps/glad/glad.h	445;"	d
GL_COLOR_MATERIAL	support/glad/glad.h	399;"	d
GL_COLOR_MATERIAL_FACE	support/GLFW/deps/glad/glad.h	443;"	d
GL_COLOR_MATERIAL_FACE	support/glad/glad.h	397;"	d
GL_COLOR_MATERIAL_PARAMETER	support/GLFW/deps/glad/glad.h	444;"	d
GL_COLOR_MATERIAL_PARAMETER	support/glad/glad.h	398;"	d
GL_COLOR_SUM	support/GLFW/deps/glad/glad.h	841;"	d
GL_COLOR_SUM	support/glad/glad.h	836;"	d
GL_COLOR_WRITEMASK	support/GLFW/deps/glad/glad.h	234;"	d
GL_COLOR_WRITEMASK	support/glad/glad.h	228;"	d
GL_COMBINE	support/GLFW/deps/glad/glad.h	788;"	d
GL_COMBINE	support/glad/glad.h	783;"	d
GL_COMBINE_ALPHA	support/GLFW/deps/glad/glad.h	790;"	d
GL_COMBINE_ALPHA	support/glad/glad.h	785;"	d
GL_COMBINE_RGB	support/GLFW/deps/glad/glad.h	789;"	d
GL_COMBINE_RGB	support/glad/glad.h	784;"	d
GL_COMPARE_REF_TO_TEXTURE	support/GLFW/deps/glad/glad.h	1017;"	d
GL_COMPARE_REF_TO_TEXTURE	support/glad/glad.h	1014;"	d
GL_COMPARE_R_TO_TEXTURE	support/GLFW/deps/glad/glad.h	850;"	d
GL_COMPARE_R_TO_TEXTURE	support/glad/glad.h	845;"	d
GL_COMPILE	support/GLFW/deps/glad/glad.h	592;"	d
GL_COMPILE	support/glad/glad.h	516;"	d
GL_COMPILE_AND_EXECUTE	support/GLFW/deps/glad/glad.h	593;"	d
GL_COMPILE_AND_EXECUTE	support/glad/glad.h	517;"	d
GL_COMPILE_STATUS	support/GLFW/deps/glad/glad.h	971;"	d
GL_COMPILE_STATUS	support/glad/glad.h	968;"	d
GL_COMPRESSED_ALPHA	support/GLFW/deps/glad/glad.h	784;"	d
GL_COMPRESSED_ALPHA	support/glad/glad.h	779;"	d
GL_COMPRESSED_INTENSITY	support/GLFW/deps/glad/glad.h	787;"	d
GL_COMPRESSED_INTENSITY	support/glad/glad.h	782;"	d
GL_COMPRESSED_LUMINANCE	support/GLFW/deps/glad/glad.h	785;"	d
GL_COMPRESSED_LUMINANCE	support/glad/glad.h	780;"	d
GL_COMPRESSED_LUMINANCE_ALPHA	support/GLFW/deps/glad/glad.h	786;"	d
GL_COMPRESSED_LUMINANCE_ALPHA	support/glad/glad.h	781;"	d
GL_COMPRESSED_RED	support/GLFW/deps/glad/glad.h	1031;"	d
GL_COMPRESSED_RED	support/glad/glad.h	1028;"	d
GL_COMPRESSED_RED_RGTC1	support/GLFW/deps/glad/glad.h	1224;"	d
GL_COMPRESSED_RED_RGTC1	support/glad/glad.h	1221;"	d
GL_COMPRESSED_RG	support/GLFW/deps/glad/glad.h	1032;"	d
GL_COMPRESSED_RG	support/glad/glad.h	1029;"	d
GL_COMPRESSED_RGB	support/GLFW/deps/glad/glad.h	767;"	d
GL_COMPRESSED_RGB	support/glad/glad.h	762;"	d
GL_COMPRESSED_RGBA	support/GLFW/deps/glad/glad.h	768;"	d
GL_COMPRESSED_RGBA	support/glad/glad.h	763;"	d
GL_COMPRESSED_RG_RGTC2	support/GLFW/deps/glad/glad.h	1226;"	d
GL_COMPRESSED_RG_RGTC2	support/glad/glad.h	1223;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	support/GLFW/deps/glad/glad.h	1225;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	support/glad/glad.h	1222;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	support/GLFW/deps/glad/glad.h	1227;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	support/glad/glad.h	1224;"	d
GL_COMPRESSED_SLUMINANCE	support/GLFW/deps/glad/glad.h	1015;"	d
GL_COMPRESSED_SLUMINANCE	support/glad/glad.h	1012;"	d
GL_COMPRESSED_SLUMINANCE_ALPHA	support/GLFW/deps/glad/glad.h	1016;"	d
GL_COMPRESSED_SLUMINANCE_ALPHA	support/glad/glad.h	1013;"	d
GL_COMPRESSED_SRGB	support/GLFW/deps/glad/glad.h	1008;"	d
GL_COMPRESSED_SRGB	support/glad/glad.h	1005;"	d
GL_COMPRESSED_SRGB_ALPHA	support/GLFW/deps/glad/glad.h	1009;"	d
GL_COMPRESSED_SRGB_ALPHA	support/glad/glad.h	1006;"	d
GL_COMPRESSED_TEXTURE_FORMATS	support/GLFW/deps/glad/glad.h	773;"	d
GL_COMPRESSED_TEXTURE_FORMATS	support/glad/glad.h	768;"	d
GL_CONDITION_SATISFIED	support/GLFW/deps/glad/glad.h	1354;"	d
GL_CONDITION_SATISFIED	support/glad/glad.h	1351;"	d
GL_CONSTANT	support/GLFW/deps/glad/glad.h	807;"	d
GL_CONSTANT	support/glad/glad.h	802;"	d
GL_CONSTANT_ALPHA	support/GLFW/deps/glad/glad.h	858;"	d
GL_CONSTANT_ALPHA	support/glad/glad.h	850;"	d
GL_CONSTANT_ATTENUATION	support/GLFW/deps/glad/glad.h	589;"	d
GL_CONSTANT_ATTENUATION	support/glad/glad.h	513;"	d
GL_CONSTANT_COLOR	support/GLFW/deps/glad/glad.h	856;"	d
GL_CONSTANT_COLOR	support/glad/glad.h	848;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	support/GLFW/deps/glad/glad.h	1316;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	support/GLFW/src/internal.h	78;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	support/glad/glad.h	1313;"	d
GL_CONTEXT_CORE_PROFILE_BIT	support/GLFW/deps/glad/glad.h	1315;"	d
GL_CONTEXT_CORE_PROFILE_BIT	support/GLFW/src/internal.h	79;"	d
GL_CONTEXT_CORE_PROFILE_BIT	support/glad/glad.h	1312;"	d
GL_CONTEXT_FLAGS	support/GLFW/deps/glad/glad.h	1030;"	d
GL_CONTEXT_FLAGS	support/GLFW/src/internal.h	74;"	d
GL_CONTEXT_FLAGS	support/glad/glad.h	1027;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	support/GLFW/src/internal.h	76;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	support/GLFW/deps/glad/glad.h	1033;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	support/GLFW/src/internal.h	75;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	support/glad/glad.h	1030;"	d
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR	support/GLFW/src/internal.h	85;"	d
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB	support/GLFW/deps/glad/glad.h	3433;"	d
GL_CONTEXT_PROFILE_MASK	support/GLFW/deps/glad/glad.h	1336;"	d
GL_CONTEXT_PROFILE_MASK	support/GLFW/src/internal.h	77;"	d
GL_CONTEXT_PROFILE_MASK	support/glad/glad.h	1333;"	d
GL_CONTEXT_RELEASE_BEHAVIOR	support/GLFW/src/internal.h	83;"	d
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH	support/GLFW/src/internal.h	84;"	d
GL_COORD_REPLACE	support/GLFW/deps/glad/glad.h	992;"	d
GL_COORD_REPLACE	support/glad/glad.h	989;"	d
GL_COPY	support/GLFW/deps/glad/glad.h	287;"	d
GL_COPY	support/glad/glad.h	268;"	d
GL_COPY_INVERTED	support/GLFW/deps/glad/glad.h	296;"	d
GL_COPY_INVERTED	support/glad/glad.h	277;"	d
GL_COPY_PIXEL_TOKEN	support/GLFW/deps/glad/glad.h	393;"	d
GL_COPY_PIXEL_TOKEN	support/glad/glad.h	355;"	d
GL_COPY_READ_BUFFER	support/GLFW/deps/glad/glad.h	1280;"	d
GL_COPY_READ_BUFFER	support/glad/glad.h	1277;"	d
GL_COPY_WRITE_BUFFER	support/GLFW/deps/glad/glad.h	1281;"	d
GL_COPY_WRITE_BUFFER	support/glad/glad.h	1278;"	d
GL_CULL_FACE	support/GLFW/deps/glad/glad.h	205;"	d
GL_CULL_FACE	support/glad/glad.h	200;"	d
GL_CULL_FACE_MODE	support/GLFW/deps/glad/glad.h	206;"	d
GL_CULL_FACE_MODE	support/glad/glad.h	201;"	d
GL_CURRENT_BIT	support/GLFW/deps/glad/glad.h	350;"	d
GL_CURRENT_BIT	support/glad/glad.h	315;"	d
GL_CURRENT_COLOR	support/GLFW/deps/glad/glad.h	418;"	d
GL_CURRENT_COLOR	support/glad/glad.h	372;"	d
GL_CURRENT_FOG_COORD	support/GLFW/deps/glad/glad.h	899;"	d
GL_CURRENT_FOG_COORD	support/glad/glad.h	896;"	d
GL_CURRENT_FOG_COORDINATE	support/GLFW/deps/glad/glad.h	836;"	d
GL_CURRENT_FOG_COORDINATE	support/glad/glad.h	831;"	d
GL_CURRENT_INDEX	support/GLFW/deps/glad/glad.h	419;"	d
GL_CURRENT_INDEX	support/glad/glad.h	373;"	d
GL_CURRENT_NORMAL	support/GLFW/deps/glad/glad.h	420;"	d
GL_CURRENT_NORMAL	support/glad/glad.h	374;"	d
GL_CURRENT_PROGRAM	support/GLFW/deps/glad/glad.h	983;"	d
GL_CURRENT_PROGRAM	support/glad/glad.h	980;"	d
GL_CURRENT_QUERY	support/GLFW/deps/glad/glad.h	863;"	d
GL_CURRENT_QUERY	support/glad/glad.h	860;"	d
GL_CURRENT_RASTER_COLOR	support/GLFW/deps/glad/glad.h	422;"	d
GL_CURRENT_RASTER_COLOR	support/glad/glad.h	376;"	d
GL_CURRENT_RASTER_DISTANCE	support/GLFW/deps/glad/glad.h	427;"	d
GL_CURRENT_RASTER_DISTANCE	support/glad/glad.h	381;"	d
GL_CURRENT_RASTER_INDEX	support/GLFW/deps/glad/glad.h	423;"	d
GL_CURRENT_RASTER_INDEX	support/glad/glad.h	377;"	d
GL_CURRENT_RASTER_POSITION	support/GLFW/deps/glad/glad.h	425;"	d
GL_CURRENT_RASTER_POSITION	support/glad/glad.h	379;"	d
GL_CURRENT_RASTER_POSITION_VALID	support/GLFW/deps/glad/glad.h	426;"	d
GL_CURRENT_RASTER_POSITION_VALID	support/glad/glad.h	380;"	d
GL_CURRENT_RASTER_SECONDARY_COLOR	support/GLFW/deps/glad/glad.h	1010;"	d
GL_CURRENT_RASTER_SECONDARY_COLOR	support/glad/glad.h	1007;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	support/GLFW/deps/glad/glad.h	424;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	support/glad/glad.h	378;"	d
GL_CURRENT_SECONDARY_COLOR	support/GLFW/deps/glad/glad.h	842;"	d
GL_CURRENT_SECONDARY_COLOR	support/glad/glad.h	837;"	d
GL_CURRENT_TEXTURE_COORDS	support/GLFW/deps/glad/glad.h	421;"	d
GL_CURRENT_TEXTURE_COORDS	support/glad/glad.h	375;"	d
GL_CURRENT_VERTEX_ATTRIB	support/GLFW/deps/glad/glad.h	915;"	d
GL_CURRENT_VERTEX_ATTRIB	support/glad/glad.h	912;"	d
GL_CW	support/GLFW/deps/glad/glad.h	194;"	d
GL_CW	support/glad/glad.h	189;"	d
GL_DECAL	support/GLFW/deps/glad/glad.h	617;"	d
GL_DECAL	support/glad/glad.h	541;"	d
GL_DECR	support/GLFW/deps/glad/glad.h	318;"	d
GL_DECR	support/glad/glad.h	299;"	d
GL_DECR_WRAP	support/GLFW/deps/glad/glad.h	824;"	d
GL_DECR_WRAP	support/glad/glad.h	819;"	d
GL_DELETE_STATUS	support/GLFW/deps/glad/glad.h	970;"	d
GL_DELETE_STATUS	support/glad/glad.h	967;"	d
GL_DEPTH	support/GLFW/deps/glad/glad.h	302;"	d
GL_DEPTH	support/glad/glad.h	283;"	d
GL_DEPTH24_STENCIL8	support/GLFW/deps/glad/glad.h	1135;"	d
GL_DEPTH24_STENCIL8	support/glad/glad.h	1132;"	d
GL_DEPTH32F_STENCIL8	support/GLFW/deps/glad/glad.h	1118;"	d
GL_DEPTH32F_STENCIL8	support/glad/glad.h	1115;"	d
GL_DEPTH_ATTACHMENT	support/GLFW/deps/glad/glad.h	1194;"	d
GL_DEPTH_ATTACHMENT	support/glad/glad.h	1191;"	d
GL_DEPTH_BIAS	support/GLFW/deps/glad/glad.h	507;"	d
GL_DEPTH_BIAS	support/glad/glad.h	459;"	d
GL_DEPTH_BITS	support/GLFW/deps/glad/glad.h	523;"	d
GL_DEPTH_BITS	support/glad/glad.h	474;"	d
GL_DEPTH_BUFFER_BIT	support/GLFW/deps/glad/glad.h	147;"	d
GL_DEPTH_BUFFER_BIT	support/glad/glad.h	142;"	d
GL_DEPTH_CLAMP	support/GLFW/deps/glad/glad.h	1337;"	d
GL_DEPTH_CLAMP	support/glad/glad.h	1334;"	d
GL_DEPTH_CLEAR_VALUE	support/GLFW/deps/glad/glad.h	211;"	d
GL_DEPTH_CLEAR_VALUE	support/glad/glad.h	206;"	d
GL_DEPTH_COMPONENT	support/GLFW/deps/glad/glad.h	305;"	d
GL_DEPTH_COMPONENT	support/glad/glad.h	286;"	d
GL_DEPTH_COMPONENT16	support/GLFW/deps/glad/glad.h	817;"	d
GL_DEPTH_COMPONENT16	support/glad/glad.h	812;"	d
GL_DEPTH_COMPONENT24	support/GLFW/deps/glad/glad.h	818;"	d
GL_DEPTH_COMPONENT24	support/glad/glad.h	813;"	d
GL_DEPTH_COMPONENT32	support/GLFW/deps/glad/glad.h	819;"	d
GL_DEPTH_COMPONENT32	support/glad/glad.h	814;"	d
GL_DEPTH_COMPONENT32F	support/GLFW/deps/glad/glad.h	1117;"	d
GL_DEPTH_COMPONENT32F	support/glad/glad.h	1114;"	d
GL_DEPTH_FUNC	support/GLFW/deps/glad/glad.h	212;"	d
GL_DEPTH_FUNC	support/glad/glad.h	207;"	d
GL_DEPTH_RANGE	support/GLFW/deps/glad/glad.h	208;"	d
GL_DEPTH_RANGE	support/glad/glad.h	203;"	d
GL_DEPTH_SCALE	support/GLFW/deps/glad/glad.h	506;"	d
GL_DEPTH_SCALE	support/glad/glad.h	458;"	d
GL_DEPTH_STENCIL	support/GLFW/deps/glad/glad.h	1133;"	d
GL_DEPTH_STENCIL	support/glad/glad.h	1130;"	d
GL_DEPTH_STENCIL_ATTACHMENT	support/GLFW/deps/glad/glad.h	1131;"	d
GL_DEPTH_STENCIL_ATTACHMENT	support/glad/glad.h	1128;"	d
GL_DEPTH_TEST	support/GLFW/deps/glad/glad.h	209;"	d
GL_DEPTH_TEST	support/glad/glad.h	204;"	d
GL_DEPTH_TEXTURE_MODE	support/GLFW/deps/glad/glad.h	849;"	d
GL_DEPTH_TEXTURE_MODE	support/glad/glad.h	844;"	d
GL_DEPTH_WRITEMASK	support/GLFW/deps/glad/glad.h	210;"	d
GL_DEPTH_WRITEMASK	support/glad/glad.h	205;"	d
GL_DIFFUSE	support/GLFW/deps/glad/glad.h	583;"	d
GL_DIFFUSE	support/glad/glad.h	507;"	d
GL_DITHER	support/GLFW/deps/glad/glad.h	223;"	d
GL_DITHER	support/glad/glad.h	218;"	d
GL_DOMAIN	support/GLFW/deps/glad/glad.h	399;"	d
GL_DOMAIN	support/glad/glad.h	361;"	d
GL_DONT_CARE	support/GLFW/deps/glad/glad.h	271;"	d
GL_DONT_CARE	support/glad/glad.h	253;"	d
GL_DOT3_RGB	support/GLFW/deps/glad/glad.h	810;"	d
GL_DOT3_RGB	support/glad/glad.h	805;"	d
GL_DOT3_RGBA	support/GLFW/deps/glad/glad.h	811;"	d
GL_DOT3_RGBA	support/glad/glad.h	806;"	d
GL_DOUBLE	support/GLFW/deps/glad/glad.h	281;"	d
GL_DOUBLE	support/glad/glad.h	579;"	d
GL_DOUBLEBUFFER	support/GLFW/deps/glad/glad.h	235;"	d
GL_DOUBLEBUFFER	support/glad/glad.h	229;"	d
GL_DRAW_BUFFER	support/GLFW/deps/glad/glad.h	229;"	d
GL_DRAW_BUFFER	support/glad/glad.h	223;"	d
GL_DRAW_BUFFER0	support/GLFW/deps/glad/glad.h	923;"	d
GL_DRAW_BUFFER0	support/glad/glad.h	920;"	d
GL_DRAW_BUFFER1	support/GLFW/deps/glad/glad.h	924;"	d
GL_DRAW_BUFFER1	support/glad/glad.h	921;"	d
GL_DRAW_BUFFER10	support/GLFW/deps/glad/glad.h	933;"	d
GL_DRAW_BUFFER10	support/glad/glad.h	930;"	d
GL_DRAW_BUFFER11	support/GLFW/deps/glad/glad.h	934;"	d
GL_DRAW_BUFFER11	support/glad/glad.h	931;"	d
GL_DRAW_BUFFER12	support/GLFW/deps/glad/glad.h	935;"	d
GL_DRAW_BUFFER12	support/glad/glad.h	932;"	d
GL_DRAW_BUFFER13	support/GLFW/deps/glad/glad.h	936;"	d
GL_DRAW_BUFFER13	support/glad/glad.h	933;"	d
GL_DRAW_BUFFER14	support/GLFW/deps/glad/glad.h	937;"	d
GL_DRAW_BUFFER14	support/glad/glad.h	934;"	d
GL_DRAW_BUFFER15	support/GLFW/deps/glad/glad.h	938;"	d
GL_DRAW_BUFFER15	support/glad/glad.h	935;"	d
GL_DRAW_BUFFER2	support/GLFW/deps/glad/glad.h	925;"	d
GL_DRAW_BUFFER2	support/glad/glad.h	922;"	d
GL_DRAW_BUFFER3	support/GLFW/deps/glad/glad.h	926;"	d
GL_DRAW_BUFFER3	support/glad/glad.h	923;"	d
GL_DRAW_BUFFER4	support/GLFW/deps/glad/glad.h	927;"	d
GL_DRAW_BUFFER4	support/glad/glad.h	924;"	d
GL_DRAW_BUFFER5	support/GLFW/deps/glad/glad.h	928;"	d
GL_DRAW_BUFFER5	support/glad/glad.h	925;"	d
GL_DRAW_BUFFER6	support/GLFW/deps/glad/glad.h	929;"	d
GL_DRAW_BUFFER6	support/glad/glad.h	926;"	d
GL_DRAW_BUFFER7	support/GLFW/deps/glad/glad.h	930;"	d
GL_DRAW_BUFFER7	support/glad/glad.h	927;"	d
GL_DRAW_BUFFER8	support/GLFW/deps/glad/glad.h	931;"	d
GL_DRAW_BUFFER8	support/glad/glad.h	928;"	d
GL_DRAW_BUFFER9	support/GLFW/deps/glad/glad.h	932;"	d
GL_DRAW_BUFFER9	support/glad/glad.h	929;"	d
GL_DRAW_FRAMEBUFFER	support/GLFW/deps/glad/glad.h	1147;"	d
GL_DRAW_FRAMEBUFFER	support/glad/glad.h	1144;"	d
GL_DRAW_FRAMEBUFFER_BINDING	support/GLFW/deps/glad/glad.h	1144;"	d
GL_DRAW_FRAMEBUFFER_BINDING	support/glad/glad.h	1141;"	d
GL_DRAW_PIXEL_TOKEN	support/GLFW/deps/glad/glad.h	392;"	d
GL_DRAW_PIXEL_TOKEN	support/glad/glad.h	354;"	d
GL_DST_ALPHA	support/GLFW/deps/glad/glad.h	174;"	d
GL_DST_ALPHA	support/glad/glad.h	169;"	d
GL_DST_COLOR	support/GLFW/deps/glad/glad.h	176;"	d
GL_DST_COLOR	support/glad/glad.h	171;"	d
GL_DYNAMIC_COPY	support/GLFW/deps/glad/glad.h	885;"	d
GL_DYNAMIC_COPY	support/glad/glad.h	882;"	d
GL_DYNAMIC_DRAW	support/GLFW/deps/glad/glad.h	883;"	d
GL_DYNAMIC_DRAW	support/glad/glad.h	880;"	d
GL_DYNAMIC_READ	support/GLFW/deps/glad/glad.h	884;"	d
GL_DYNAMIC_READ	support/glad/glad.h	881;"	d
GL_EDGE_FLAG	support/GLFW/deps/glad/glad.h	437;"	d
GL_EDGE_FLAG	support/glad/glad.h	391;"	d
GL_EDGE_FLAG_ARRAY	support/GLFW/deps/glad/glad.h	561;"	d
GL_EDGE_FLAG_ARRAY	support/glad/glad.h	618;"	d
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	893;"	d
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING	support/glad/glad.h	890;"	d
GL_EDGE_FLAG_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	415;"	d
GL_EDGE_FLAG_ARRAY_POINTER	support/glad/glad.h	604;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	575;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	support/glad/glad.h	632;"	d
GL_ELEMENT_ARRAY_BUFFER	support/GLFW/deps/glad/glad.h	867;"	d
GL_ELEMENT_ARRAY_BUFFER	support/glad/glad.h	864;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	869;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	support/glad/glad.h	866;"	d
GL_EMISSION	support/GLFW/deps/glad/glad.h	597;"	d
GL_EMISSION	support/glad/glad.h	521;"	d
GL_ENABLE_BIT	support/GLFW/deps/glad/glad.h	361;"	d
GL_ENABLE_BIT	support/glad/glad.h	326;"	d
GL_EQUAL	support/GLFW/deps/glad/glad.h	162;"	d
GL_EQUAL	support/glad/glad.h	157;"	d
GL_EQUIV	support/GLFW/deps/glad/glad.h	293;"	d
GL_EQUIV	support/glad/glad.h	274;"	d
GL_EVAL_BIT	support/GLFW/deps/glad/glad.h	363;"	d
GL_EVAL_BIT	support/glad/glad.h	328;"	d
GL_EXP	support/GLFW/deps/glad/glad.h	395;"	d
GL_EXP	support/glad/glad.h	357;"	d
GL_EXP2	support/GLFW/deps/glad/glad.h	396;"	d
GL_EXP2	support/glad/glad.h	358;"	d
GL_EXTENSIONS	support/GLFW/deps/glad/glad.h	322;"	d
GL_EXTENSIONS	support/GLFW/src/internal.h	72;"	d
GL_EXTENSIONS	support/glad/glad.h	303;"	d
GL_EXT_separate_specular_color	support/GLFW/deps/glad/glad.h	3441;"	d
GL_EYE_LINEAR	support/GLFW/deps/glad/glad.h	621;"	d
GL_EYE_LINEAR	support/glad/glad.h	545;"	d
GL_EYE_PLANE	support/GLFW/deps/glad/glad.h	626;"	d
GL_EYE_PLANE	support/glad/glad.h	550;"	d
GL_FALSE	support/GLFW/deps/glad/glad.h	150;"	d
GL_FALSE	support/glad/glad.h	145;"	d
GL_FASTEST	support/GLFW/deps/glad/glad.h	272;"	d
GL_FASTEST	support/glad/glad.h	254;"	d
GL_FEEDBACK	support/GLFW/deps/glad/glad.h	608;"	d
GL_FEEDBACK	support/glad/glad.h	532;"	d
GL_FEEDBACK_BUFFER_POINTER	support/GLFW/deps/glad/glad.h	416;"	d
GL_FEEDBACK_BUFFER_POINTER	support/glad/glad.h	605;"	d
GL_FEEDBACK_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	553;"	d
GL_FEEDBACK_BUFFER_SIZE	support/glad/glad.h	610;"	d
GL_FEEDBACK_BUFFER_TYPE	support/GLFW/deps/glad/glad.h	554;"	d
GL_FEEDBACK_BUFFER_TYPE	support/glad/glad.h	611;"	d
GL_FILL	support/GLFW/deps/glad/glad.h	314;"	d
GL_FILL	support/glad/glad.h	295;"	d
GL_FIRST_VERTEX_CONVENTION	support/GLFW/deps/glad/glad.h	1339;"	d
GL_FIRST_VERTEX_CONVENTION	support/glad/glad.h	1336;"	d
GL_FIXED_ONLY	support/GLFW/deps/glad/glad.h	1043;"	d
GL_FIXED_ONLY	support/glad/glad.h	1040;"	d
GL_FLAT	support/GLFW/deps/glad/glad.h	610;"	d
GL_FLAT	support/glad/glad.h	534;"	d
GL_FLOAT	support/GLFW/deps/glad/glad.h	280;"	d
GL_FLOAT	support/glad/glad.h	262;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	support/GLFW/deps/glad/glad.h	1119;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	support/glad/glad.h	1116;"	d
GL_FLOAT_MAT2	support/GLFW/deps/glad/glad.h	961;"	d
GL_FLOAT_MAT2	support/glad/glad.h	958;"	d
GL_FLOAT_MAT2x3	support/GLFW/deps/glad/glad.h	998;"	d
GL_FLOAT_MAT2x3	support/glad/glad.h	995;"	d
GL_FLOAT_MAT2x4	support/GLFW/deps/glad/glad.h	999;"	d
GL_FLOAT_MAT2x4	support/glad/glad.h	996;"	d
GL_FLOAT_MAT3	support/GLFW/deps/glad/glad.h	962;"	d
GL_FLOAT_MAT3	support/glad/glad.h	959;"	d
GL_FLOAT_MAT3x2	support/GLFW/deps/glad/glad.h	1000;"	d
GL_FLOAT_MAT3x2	support/glad/glad.h	997;"	d
GL_FLOAT_MAT3x4	support/GLFW/deps/glad/glad.h	1001;"	d
GL_FLOAT_MAT3x4	support/glad/glad.h	998;"	d
GL_FLOAT_MAT4	support/GLFW/deps/glad/glad.h	963;"	d
GL_FLOAT_MAT4	support/glad/glad.h	960;"	d
GL_FLOAT_MAT4x2	support/GLFW/deps/glad/glad.h	1002;"	d
GL_FLOAT_MAT4x2	support/glad/glad.h	999;"	d
GL_FLOAT_MAT4x3	support/GLFW/deps/glad/glad.h	1003;"	d
GL_FLOAT_MAT4x3	support/glad/glad.h	1000;"	d
GL_FLOAT_VEC2	support/GLFW/deps/glad/glad.h	951;"	d
GL_FLOAT_VEC2	support/glad/glad.h	948;"	d
GL_FLOAT_VEC3	support/GLFW/deps/glad/glad.h	952;"	d
GL_FLOAT_VEC3	support/glad/glad.h	949;"	d
GL_FLOAT_VEC4	support/GLFW/deps/glad/glad.h	953;"	d
GL_FLOAT_VEC4	support/glad/glad.h	950;"	d
GL_FOG	support/GLFW/deps/glad/glad.h	446;"	d
GL_FOG	support/glad/glad.h	400;"	d
GL_FOG_BIT	support/GLFW/deps/glad/glad.h	357;"	d
GL_FOG_BIT	support/glad/glad.h	322;"	d
GL_FOG_COLOR	support/GLFW/deps/glad/glad.h	452;"	d
GL_FOG_COLOR	support/glad/glad.h	406;"	d
GL_FOG_COORD	support/GLFW/deps/glad/glad.h	898;"	d
GL_FOG_COORD	support/glad/glad.h	895;"	d
GL_FOG_COORDINATE	support/GLFW/deps/glad/glad.h	834;"	d
GL_FOG_COORDINATE	support/glad/glad.h	829;"	d
GL_FOG_COORDINATE_ARRAY	support/GLFW/deps/glad/glad.h	840;"	d
GL_FOG_COORDINATE_ARRAY	support/glad/glad.h	835;"	d
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	895;"	d
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING	support/glad/glad.h	892;"	d
GL_FOG_COORDINATE_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	839;"	d
GL_FOG_COORDINATE_ARRAY_POINTER	support/glad/glad.h	834;"	d
GL_FOG_COORDINATE_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	838;"	d
GL_FOG_COORDINATE_ARRAY_STRIDE	support/glad/glad.h	833;"	d
GL_FOG_COORDINATE_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	837;"	d
GL_FOG_COORDINATE_ARRAY_TYPE	support/glad/glad.h	832;"	d
GL_FOG_COORDINATE_SOURCE	support/GLFW/deps/glad/glad.h	833;"	d
GL_FOG_COORDINATE_SOURCE	support/glad/glad.h	828;"	d
GL_FOG_COORD_ARRAY	support/GLFW/deps/glad/glad.h	903;"	d
GL_FOG_COORD_ARRAY	support/glad/glad.h	900;"	d
GL_FOG_COORD_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	904;"	d
GL_FOG_COORD_ARRAY_BUFFER_BINDING	support/glad/glad.h	901;"	d
GL_FOG_COORD_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	902;"	d
GL_FOG_COORD_ARRAY_POINTER	support/glad/glad.h	899;"	d
GL_FOG_COORD_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	901;"	d
GL_FOG_COORD_ARRAY_STRIDE	support/glad/glad.h	898;"	d
GL_FOG_COORD_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	900;"	d
GL_FOG_COORD_ARRAY_TYPE	support/glad/glad.h	897;"	d
GL_FOG_COORD_SRC	support/GLFW/deps/glad/glad.h	897;"	d
GL_FOG_COORD_SRC	support/glad/glad.h	894;"	d
GL_FOG_DENSITY	support/GLFW/deps/glad/glad.h	448;"	d
GL_FOG_DENSITY	support/glad/glad.h	402;"	d
GL_FOG_END	support/GLFW/deps/glad/glad.h	450;"	d
GL_FOG_END	support/glad/glad.h	404;"	d
GL_FOG_HINT	support/GLFW/deps/glad/glad.h	477;"	d
GL_FOG_HINT	support/glad/glad.h	429;"	d
GL_FOG_INDEX	support/GLFW/deps/glad/glad.h	447;"	d
GL_FOG_INDEX	support/glad/glad.h	401;"	d
GL_FOG_MODE	support/GLFW/deps/glad/glad.h	451;"	d
GL_FOG_MODE	support/glad/glad.h	405;"	d
GL_FOG_START	support/GLFW/deps/glad/glad.h	449;"	d
GL_FOG_START	support/glad/glad.h	403;"	d
GL_FRAGMENT_DEPTH	support/GLFW/deps/glad/glad.h	835;"	d
GL_FRAGMENT_DEPTH	support/glad/glad.h	830;"	d
GL_FRAGMENT_SHADER	support/GLFW/deps/glad/glad.h	943;"	d
GL_FRAGMENT_SHADER	support/glad/glad.h	940;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	support/GLFW/deps/glad/glad.h	981;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	support/glad/glad.h	978;"	d
GL_FRAMEBUFFER	support/GLFW/deps/glad/glad.h	1196;"	d
GL_FRAMEBUFFER	support/glad/glad.h	1193;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	support/GLFW/deps/glad/glad.h	1126;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	support/glad/glad.h	1123;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	support/GLFW/deps/glad/glad.h	1125;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	support/glad/glad.h	1122;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	support/GLFW/deps/glad/glad.h	1121;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	support/glad/glad.h	1118;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	support/GLFW/deps/glad/glad.h	1122;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	support/glad/glad.h	1119;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	support/GLFW/deps/glad/glad.h	1127;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	support/glad/glad.h	1124;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	support/GLFW/deps/glad/glad.h	1124;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	support/glad/glad.h	1121;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	support/GLFW/deps/glad/glad.h	1323;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	support/glad/glad.h	1320;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	support/GLFW/deps/glad/glad.h	1151;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	support/glad/glad.h	1148;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	support/GLFW/deps/glad/glad.h	1150;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	support/glad/glad.h	1147;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	support/GLFW/deps/glad/glad.h	1123;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	support/glad/glad.h	1120;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	support/GLFW/deps/glad/glad.h	1128;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	support/glad/glad.h	1125;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	support/GLFW/deps/glad/glad.h	1153;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	support/glad/glad.h	1150;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	support/GLFW/deps/glad/glad.h	1154;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	support/glad/glad.h	1151;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	support/GLFW/deps/glad/glad.h	1152;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	support/glad/glad.h	1149;"	d
GL_FRAMEBUFFER_BINDING	support/GLFW/deps/glad/glad.h	1143;"	d
GL_FRAMEBUFFER_BINDING	support/glad/glad.h	1140;"	d
GL_FRAMEBUFFER_COMPLETE	support/GLFW/deps/glad/glad.h	1155;"	d
GL_FRAMEBUFFER_COMPLETE	support/glad/glad.h	1152;"	d
GL_FRAMEBUFFER_DEFAULT	support/GLFW/deps/glad/glad.h	1129;"	d
GL_FRAMEBUFFER_DEFAULT	support/glad/glad.h	1126;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	support/GLFW/deps/glad/glad.h	1156;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	support/glad/glad.h	1153;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	support/GLFW/deps/glad/glad.h	1158;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	support/glad/glad.h	1155;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	support/GLFW/deps/glad/glad.h	1324;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	support/glad/glad.h	1321;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	support/GLFW/deps/glad/glad.h	1157;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	support/glad/glad.h	1154;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1211;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	support/glad/glad.h	1208;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	support/GLFW/deps/glad/glad.h	1159;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	support/glad/glad.h	1156;"	d
GL_FRAMEBUFFER_SRGB	support/GLFW/deps/glad/glad.h	1216;"	d
GL_FRAMEBUFFER_SRGB	support/glad/glad.h	1213;"	d
GL_FRAMEBUFFER_UNDEFINED	support/GLFW/deps/glad/glad.h	1130;"	d
GL_FRAMEBUFFER_UNDEFINED	support/glad/glad.h	1127;"	d
GL_FRAMEBUFFER_UNSUPPORTED	support/GLFW/deps/glad/glad.h	1160;"	d
GL_FRAMEBUFFER_UNSUPPORTED	support/glad/glad.h	1157;"	d
GL_FRONT	support/GLFW/deps/glad/glad.h	184;"	d
GL_FRONT	support/glad/glad.h	179;"	d
GL_FRONT_AND_BACK	support/GLFW/deps/glad/glad.h	188;"	d
GL_FRONT_AND_BACK	support/glad/glad.h	183;"	d
GL_FRONT_FACE	support/GLFW/deps/glad/glad.h	207;"	d
GL_FRONT_FACE	support/glad/glad.h	202;"	d
GL_FRONT_LEFT	support/GLFW/deps/glad/glad.h	180;"	d
GL_FRONT_LEFT	support/glad/glad.h	175;"	d
GL_FRONT_RIGHT	support/GLFW/deps/glad/glad.h	181;"	d
GL_FRONT_RIGHT	support/glad/glad.h	176;"	d
GL_FUNC_ADD	support/GLFW/deps/glad/glad.h	851;"	d
GL_FUNC_ADD	support/glad/glad.h	852;"	d
GL_FUNC_REVERSE_SUBTRACT	support/GLFW/deps/glad/glad.h	853;"	d
GL_FUNC_REVERSE_SUBTRACT	support/glad/glad.h	853;"	d
GL_FUNC_SUBTRACT	support/GLFW/deps/glad/glad.h	852;"	d
GL_FUNC_SUBTRACT	support/glad/glad.h	854;"	d
GL_GENERATE_MIPMAP	support/GLFW/deps/glad/glad.h	831;"	d
GL_GENERATE_MIPMAP	support/glad/glad.h	826;"	d
GL_GENERATE_MIPMAP_HINT	support/GLFW/deps/glad/glad.h	832;"	d
GL_GENERATE_MIPMAP_HINT	support/glad/glad.h	827;"	d
GL_GEOMETRY_INPUT_TYPE	support/GLFW/deps/glad/glad.h	1327;"	d
GL_GEOMETRY_INPUT_TYPE	support/glad/glad.h	1324;"	d
GL_GEOMETRY_OUTPUT_TYPE	support/GLFW/deps/glad/glad.h	1328;"	d
GL_GEOMETRY_OUTPUT_TYPE	support/glad/glad.h	1325;"	d
GL_GEOMETRY_SHADER	support/GLFW/deps/glad/glad.h	1325;"	d
GL_GEOMETRY_SHADER	support/glad/glad.h	1322;"	d
GL_GEOMETRY_VERTICES_OUT	support/GLFW/deps/glad/glad.h	1326;"	d
GL_GEOMETRY_VERTICES_OUT	support/glad/glad.h	1323;"	d
GL_GEQUAL	support/GLFW/deps/glad/glad.h	166;"	d
GL_GEQUAL	support/glad/glad.h	161;"	d
GL_GLEXT_LEGACY	support/GLFW/include/GLFW/glfw3.h	138;"	d
GL_GREATER	support/GLFW/deps/glad/glad.h	164;"	d
GL_GREATER	support/glad/glad.h	159;"	d
GL_GREEN	support/GLFW/deps/glad/glad.h	307;"	d
GL_GREEN	support/glad/glad.h	288;"	d
GL_GREEN_BIAS	support/GLFW/deps/glad/glad.h	501;"	d
GL_GREEN_BIAS	support/glad/glad.h	453;"	d
GL_GREEN_BITS	support/GLFW/deps/glad/glad.h	520;"	d
GL_GREEN_BITS	support/glad/glad.h	471;"	d
GL_GREEN_INTEGER	support/GLFW/deps/glad/glad.h	1084;"	d
GL_GREEN_INTEGER	support/glad/glad.h	1081;"	d
GL_GREEN_SCALE	support/GLFW/deps/glad/glad.h	500;"	d
GL_GREEN_SCALE	support/glad/glad.h	452;"	d
GL_GUILTY_CONTEXT_RESET_ARB	support/GLFW/deps/glad/glad.h	3435;"	d
GL_HALF_FLOAT	support/GLFW/deps/glad/glad.h	1217;"	d
GL_HALF_FLOAT	support/glad/glad.h	1214;"	d
GL_HINT_BIT	support/GLFW/deps/glad/glad.h	362;"	d
GL_HINT_BIT	support/glad/glad.h	327;"	d
GL_INCR	support/GLFW/deps/glad/glad.h	317;"	d
GL_INCR	support/glad/glad.h	298;"	d
GL_INCR_WRAP	support/GLFW/deps/glad/glad.h	823;"	d
GL_INCR_WRAP	support/glad/glad.h	818;"	d
GL_INDEX	support/GLFW/deps/glad/glad.h	1213;"	d
GL_INDEX	support/glad/glad.h	1210;"	d
GL_INDEX_ARRAY	support/GLFW/deps/glad/glad.h	559;"	d
GL_INDEX_ARRAY	support/glad/glad.h	616;"	d
GL_INDEX_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	891;"	d
GL_INDEX_ARRAY_BUFFER_BINDING	support/glad/glad.h	888;"	d
GL_INDEX_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	413;"	d
GL_INDEX_ARRAY_POINTER	support/glad/glad.h	602;"	d
GL_INDEX_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	571;"	d
GL_INDEX_ARRAY_STRIDE	support/glad/glad.h	628;"	d
GL_INDEX_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	570;"	d
GL_INDEX_ARRAY_TYPE	support/glad/glad.h	627;"	d
GL_INDEX_BITS	support/GLFW/deps/glad/glad.h	518;"	d
GL_INDEX_BITS	support/glad/glad.h	469;"	d
GL_INDEX_CLEAR_VALUE	support/GLFW/deps/glad/glad.h	470;"	d
GL_INDEX_CLEAR_VALUE	support/glad/glad.h	422;"	d
GL_INDEX_LOGIC_OP	support/GLFW/deps/glad/glad.h	467;"	d
GL_INDEX_LOGIC_OP	support/glad/glad.h	608;"	d
GL_INDEX_MODE	support/GLFW/deps/glad/glad.h	472;"	d
GL_INDEX_MODE	support/glad/glad.h	424;"	d
GL_INDEX_OFFSET	support/GLFW/deps/glad/glad.h	495;"	d
GL_INDEX_OFFSET	support/glad/glad.h	447;"	d
GL_INDEX_SHIFT	support/GLFW/deps/glad/glad.h	494;"	d
GL_INDEX_SHIFT	support/glad/glad.h	446;"	d
GL_INDEX_WRITEMASK	support/GLFW/deps/glad/glad.h	471;"	d
GL_INDEX_WRITEMASK	support/glad/glad.h	423;"	d
GL_INFO_LOG_LENGTH	support/GLFW/deps/glad/glad.h	974;"	d
GL_INFO_LOG_LENGTH	support/glad/glad.h	971;"	d
GL_INNOCENT_CONTEXT_RESET_ARB	support/GLFW/deps/glad/glad.h	3436;"	d
GL_INT	support/GLFW/deps/glad/glad.h	278;"	d
GL_INT	support/glad/glad.h	260;"	d
GL_INTENSITY	support/GLFW/deps/glad/glad.h	642;"	d
GL_INTENSITY	support/glad/glad.h	651;"	d
GL_INTENSITY12	support/GLFW/deps/glad/glad.h	645;"	d
GL_INTENSITY12	support/glad/glad.h	654;"	d
GL_INTENSITY16	support/GLFW/deps/glad/glad.h	646;"	d
GL_INTENSITY16	support/glad/glad.h	655;"	d
GL_INTENSITY4	support/GLFW/deps/glad/glad.h	643;"	d
GL_INTENSITY4	support/glad/glad.h	652;"	d
GL_INTENSITY8	support/GLFW/deps/glad/glad.h	644;"	d
GL_INTENSITY8	support/glad/glad.h	653;"	d
GL_INTERLEAVED_ATTRIBS	support/GLFW/deps/glad/glad.h	1067;"	d
GL_INTERLEAVED_ATTRIBS	support/glad/glad.h	1064;"	d
GL_INTEROP	sutil/CUDAOutputBuffer.h	/^    GL_INTEROP  = 1, \/\/ single device only, preferred for single device$/;"	m	class:sutil::CUDAOutputBufferType
GL_INTERPOLATE	support/GLFW/deps/glad/glad.h	805;"	d
GL_INTERPOLATE	support/glad/glad.h	800;"	d
GL_INT_2_10_10_10_REV	support/glad/glad.h	1391;"	d
GL_INT_SAMPLER_1D	support/GLFW/deps/glad/glad.h	1098;"	d
GL_INT_SAMPLER_1D	support/glad/glad.h	1095;"	d
GL_INT_SAMPLER_1D_ARRAY	support/GLFW/deps/glad/glad.h	1102;"	d
GL_INT_SAMPLER_1D_ARRAY	support/glad/glad.h	1099;"	d
GL_INT_SAMPLER_2D	support/GLFW/deps/glad/glad.h	1099;"	d
GL_INT_SAMPLER_2D	support/glad/glad.h	1096;"	d
GL_INT_SAMPLER_2D_ARRAY	support/GLFW/deps/glad/glad.h	1103;"	d
GL_INT_SAMPLER_2D_ARRAY	support/glad/glad.h	1100;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1371;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	support/glad/glad.h	1368;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1374;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1371;"	d
GL_INT_SAMPLER_2D_RECT	support/GLFW/deps/glad/glad.h	1257;"	d
GL_INT_SAMPLER_2D_RECT	support/glad/glad.h	1254;"	d
GL_INT_SAMPLER_3D	support/GLFW/deps/glad/glad.h	1100;"	d
GL_INT_SAMPLER_3D	support/glad/glad.h	1097;"	d
GL_INT_SAMPLER_BUFFER	support/GLFW/deps/glad/glad.h	1258;"	d
GL_INT_SAMPLER_BUFFER	support/glad/glad.h	1255;"	d
GL_INT_SAMPLER_CUBE	support/GLFW/deps/glad/glad.h	1101;"	d
GL_INT_SAMPLER_CUBE	support/glad/glad.h	1098;"	d
GL_INT_VEC2	support/GLFW/deps/glad/glad.h	954;"	d
GL_INT_VEC2	support/glad/glad.h	951;"	d
GL_INT_VEC3	support/GLFW/deps/glad/glad.h	955;"	d
GL_INT_VEC3	support/glad/glad.h	952;"	d
GL_INT_VEC4	support/GLFW/deps/glad/glad.h	956;"	d
GL_INT_VEC4	support/glad/glad.h	953;"	d
GL_INVALID_ENUM	support/GLFW/deps/glad/glad.h	190;"	d
GL_INVALID_ENUM	support/glad/glad.h	185;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	support/GLFW/deps/glad/glad.h	1120;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	support/glad/glad.h	1117;"	d
GL_INVALID_INDEX	support/GLFW/deps/glad/glad.h	1314;"	d
GL_INVALID_INDEX	support/glad/glad.h	1311;"	d
GL_INVALID_OPERATION	support/GLFW/deps/glad/glad.h	192;"	d
GL_INVALID_OPERATION	support/glad/glad.h	187;"	d
GL_INVALID_VALUE	support/GLFW/deps/glad/glad.h	191;"	d
GL_INVALID_VALUE	support/glad/glad.h	186;"	d
GL_INVERT	support/GLFW/deps/glad/glad.h	294;"	d
GL_INVERT	support/glad/glad.h	275;"	d
GL_KEEP	support/GLFW/deps/glad/glad.h	315;"	d
GL_KEEP	support/glad/glad.h	296;"	d
GL_LAST_VERTEX_CONVENTION	support/GLFW/deps/glad/glad.h	1340;"	d
GL_LAST_VERTEX_CONVENTION	support/glad/glad.h	1337;"	d
GL_LEFT	support/GLFW/deps/glad/glad.h	186;"	d
GL_LEFT	support/glad/glad.h	181;"	d
GL_LEQUAL	support/GLFW/deps/glad/glad.h	163;"	d
GL_LEQUAL	support/glad/glad.h	158;"	d
GL_LESS	support/GLFW/deps/glad/glad.h	161;"	d
GL_LESS	support/glad/glad.h	156;"	d
GL_LIGHT0	support/GLFW/deps/glad/glad.h	667;"	d
GL_LIGHT0	support/glad/glad.h	558;"	d
GL_LIGHT1	support/GLFW/deps/glad/glad.h	668;"	d
GL_LIGHT1	support/glad/glad.h	559;"	d
GL_LIGHT2	support/GLFW/deps/glad/glad.h	669;"	d
GL_LIGHT2	support/glad/glad.h	560;"	d
GL_LIGHT3	support/GLFW/deps/glad/glad.h	670;"	d
GL_LIGHT3	support/glad/glad.h	561;"	d
GL_LIGHT4	support/GLFW/deps/glad/glad.h	671;"	d
GL_LIGHT4	support/glad/glad.h	562;"	d
GL_LIGHT5	support/GLFW/deps/glad/glad.h	672;"	d
GL_LIGHT5	support/glad/glad.h	563;"	d
GL_LIGHT6	support/GLFW/deps/glad/glad.h	673;"	d
GL_LIGHT6	support/glad/glad.h	564;"	d
GL_LIGHT7	support/GLFW/deps/glad/glad.h	674;"	d
GL_LIGHT7	support/glad/glad.h	565;"	d
GL_LIGHTING	support/GLFW/deps/glad/glad.h	438;"	d
GL_LIGHTING	support/glad/glad.h	392;"	d
GL_LIGHTING_BIT	support/GLFW/deps/glad/glad.h	356;"	d
GL_LIGHTING_BIT	support/glad/glad.h	321;"	d
GL_LIGHT_MODEL_AMBIENT	support/GLFW/deps/glad/glad.h	441;"	d
GL_LIGHT_MODEL_AMBIENT	support/glad/glad.h	395;"	d
GL_LIGHT_MODEL_COLOR_CONTROL	support/GLFW/deps/glad/glad.h	712;"	d
GL_LIGHT_MODEL_COLOR_CONTROL	support/glad/glad.h	707;"	d
GL_LIGHT_MODEL_COLOR_CONTROL_EXT	support/GLFW/deps/glad/glad.h	3421;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	support/GLFW/deps/glad/glad.h	439;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	support/glad/glad.h	393;"	d
GL_LIGHT_MODEL_TWO_SIDE	support/GLFW/deps/glad/glad.h	440;"	d
GL_LIGHT_MODEL_TWO_SIDE	support/glad/glad.h	394;"	d
GL_LINE	support/GLFW/deps/glad/glad.h	313;"	d
GL_LINE	support/glad/glad.h	294;"	d
GL_LINEAR	support/GLFW/deps/glad/glad.h	324;"	d
GL_LINEAR	support/glad/glad.h	305;"	d
GL_LINEAR_ATTENUATION	support/GLFW/deps/glad/glad.h	590;"	d
GL_LINEAR_ATTENUATION	support/glad/glad.h	514;"	d
GL_LINEAR_MIPMAP_LINEAR	support/GLFW/deps/glad/glad.h	328;"	d
GL_LINEAR_MIPMAP_LINEAR	support/glad/glad.h	309;"	d
GL_LINEAR_MIPMAP_NEAREST	support/GLFW/deps/glad/glad.h	326;"	d
GL_LINEAR_MIPMAP_NEAREST	support/glad/glad.h	307;"	d
GL_LINES	support/GLFW/deps/glad/glad.h	153;"	d
GL_LINES	support/glad/glad.h	148;"	d
GL_LINES_ADJACENCY	support/GLFW/deps/glad/glad.h	1317;"	d
GL_LINES_ADJACENCY	support/glad/glad.h	1314;"	d
GL_LINE_BIT	support/GLFW/deps/glad/glad.h	352;"	d
GL_LINE_BIT	support/glad/glad.h	317;"	d
GL_LINE_LOOP	support/GLFW/deps/glad/glad.h	154;"	d
GL_LINE_LOOP	support/glad/glad.h	149;"	d
GL_LINE_RESET_TOKEN	support/GLFW/deps/glad/glad.h	394;"	d
GL_LINE_RESET_TOKEN	support/glad/glad.h	356;"	d
GL_LINE_SMOOTH	support/GLFW/deps/glad/glad.h	199;"	d
GL_LINE_SMOOTH	support/glad/glad.h	194;"	d
GL_LINE_SMOOTH_HINT	support/GLFW/deps/glad/glad.h	237;"	d
GL_LINE_SMOOTH_HINT	support/glad/glad.h	231;"	d
GL_LINE_STIPPLE	support/GLFW/deps/glad/glad.h	429;"	d
GL_LINE_STIPPLE	support/glad/glad.h	383;"	d
GL_LINE_STIPPLE_PATTERN	support/GLFW/deps/glad/glad.h	430;"	d
GL_LINE_STIPPLE_PATTERN	support/glad/glad.h	384;"	d
GL_LINE_STIPPLE_REPEAT	support/GLFW/deps/glad/glad.h	431;"	d
GL_LINE_STIPPLE_REPEAT	support/glad/glad.h	385;"	d
GL_LINE_STRIP	support/GLFW/deps/glad/glad.h	155;"	d
GL_LINE_STRIP	support/glad/glad.h	150;"	d
GL_LINE_STRIP_ADJACENCY	support/GLFW/deps/glad/glad.h	1318;"	d
GL_LINE_STRIP_ADJACENCY	support/glad/glad.h	1315;"	d
GL_LINE_TOKEN	support/GLFW/deps/glad/glad.h	389;"	d
GL_LINE_TOKEN	support/glad/glad.h	351;"	d
GL_LINE_WIDTH	support/GLFW/deps/glad/glad.h	200;"	d
GL_LINE_WIDTH	support/glad/glad.h	195;"	d
GL_LINE_WIDTH_GRANULARITY	support/GLFW/deps/glad/glad.h	202;"	d
GL_LINE_WIDTH_GRANULARITY	support/glad/glad.h	197;"	d
GL_LINE_WIDTH_RANGE	support/GLFW/deps/glad/glad.h	201;"	d
GL_LINE_WIDTH_RANGE	support/glad/glad.h	196;"	d
GL_LINK_STATUS	support/GLFW/deps/glad/glad.h	972;"	d
GL_LINK_STATUS	support/glad/glad.h	969;"	d
GL_LIST_BASE	support/GLFW/deps/glad/glad.h	434;"	d
GL_LIST_BASE	support/glad/glad.h	388;"	d
GL_LIST_BIT	support/GLFW/deps/glad/glad.h	364;"	d
GL_LIST_BIT	support/glad/glad.h	329;"	d
GL_LIST_INDEX	support/GLFW/deps/glad/glad.h	435;"	d
GL_LIST_INDEX	support/glad/glad.h	389;"	d
GL_LIST_MODE	support/GLFW/deps/glad/glad.h	432;"	d
GL_LIST_MODE	support/glad/glad.h	386;"	d
GL_LOAD	support/GLFW/deps/glad/glad.h	374;"	d
GL_LOAD	support/glad/glad.h	336;"	d
GL_LOGIC_OP	support/GLFW/deps/glad/glad.h	468;"	d
GL_LOGIC_OP	support/glad/glad.h	420;"	d
GL_LOGIC_OP_MODE	support/GLFW/deps/glad/glad.h	227;"	d
GL_LOGIC_OP_MODE	support/glad/glad.h	222;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	support/GLFW/deps/glad/glad.h	3434;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	support/GLFW/src/internal.h	81;"	d
GL_LOWER_LEFT	support/GLFW/deps/glad/glad.h	985;"	d
GL_LOWER_LEFT	support/glad/glad.h	982;"	d
GL_LUMINANCE	support/GLFW/deps/glad/glad.h	604;"	d
GL_LUMINANCE	support/glad/glad.h	528;"	d
GL_LUMINANCE12	support/GLFW/deps/glad/glad.h	634;"	d
GL_LUMINANCE12	support/glad/glad.h	643;"	d
GL_LUMINANCE12_ALPHA12	support/GLFW/deps/glad/glad.h	640;"	d
GL_LUMINANCE12_ALPHA12	support/glad/glad.h	649;"	d
GL_LUMINANCE12_ALPHA4	support/GLFW/deps/glad/glad.h	639;"	d
GL_LUMINANCE12_ALPHA4	support/glad/glad.h	648;"	d
GL_LUMINANCE16	support/GLFW/deps/glad/glad.h	635;"	d
GL_LUMINANCE16	support/glad/glad.h	644;"	d
GL_LUMINANCE16_ALPHA16	support/GLFW/deps/glad/glad.h	641;"	d
GL_LUMINANCE16_ALPHA16	support/glad/glad.h	650;"	d
GL_LUMINANCE4	support/GLFW/deps/glad/glad.h	632;"	d
GL_LUMINANCE4	support/glad/glad.h	641;"	d
GL_LUMINANCE4_ALPHA4	support/GLFW/deps/glad/glad.h	636;"	d
GL_LUMINANCE4_ALPHA4	support/glad/glad.h	645;"	d
GL_LUMINANCE6_ALPHA2	support/GLFW/deps/glad/glad.h	637;"	d
GL_LUMINANCE6_ALPHA2	support/glad/glad.h	646;"	d
GL_LUMINANCE8	support/GLFW/deps/glad/glad.h	633;"	d
GL_LUMINANCE8	support/glad/glad.h	642;"	d
GL_LUMINANCE8_ALPHA8	support/GLFW/deps/glad/glad.h	638;"	d
GL_LUMINANCE8_ALPHA8	support/glad/glad.h	647;"	d
GL_LUMINANCE_ALPHA	support/GLFW/deps/glad/glad.h	605;"	d
GL_LUMINANCE_ALPHA	support/glad/glad.h	529;"	d
GL_MAJOR_VERSION	support/GLFW/deps/glad/glad.h	1027;"	d
GL_MAJOR_VERSION	support/glad/glad.h	1024;"	d
GL_MAP1_COLOR_4	support/GLFW/deps/glad/glad.h	531;"	d
GL_MAP1_COLOR_4	support/glad/glad.h	482;"	d
GL_MAP1_GRID_DOMAIN	support/GLFW/deps/glad/glad.h	549;"	d
GL_MAP1_GRID_DOMAIN	support/glad/glad.h	500;"	d
GL_MAP1_GRID_SEGMENTS	support/GLFW/deps/glad/glad.h	550;"	d
GL_MAP1_GRID_SEGMENTS	support/glad/glad.h	501;"	d
GL_MAP1_INDEX	support/GLFW/deps/glad/glad.h	532;"	d
GL_MAP1_INDEX	support/glad/glad.h	483;"	d
GL_MAP1_NORMAL	support/GLFW/deps/glad/glad.h	533;"	d
GL_MAP1_NORMAL	support/glad/glad.h	484;"	d
GL_MAP1_TEXTURE_COORD_1	support/GLFW/deps/glad/glad.h	534;"	d
GL_MAP1_TEXTURE_COORD_1	support/glad/glad.h	485;"	d
GL_MAP1_TEXTURE_COORD_2	support/GLFW/deps/glad/glad.h	535;"	d
GL_MAP1_TEXTURE_COORD_2	support/glad/glad.h	486;"	d
GL_MAP1_TEXTURE_COORD_3	support/GLFW/deps/glad/glad.h	536;"	d
GL_MAP1_TEXTURE_COORD_3	support/glad/glad.h	487;"	d
GL_MAP1_TEXTURE_COORD_4	support/GLFW/deps/glad/glad.h	537;"	d
GL_MAP1_TEXTURE_COORD_4	support/glad/glad.h	488;"	d
GL_MAP1_VERTEX_3	support/GLFW/deps/glad/glad.h	538;"	d
GL_MAP1_VERTEX_3	support/glad/glad.h	489;"	d
GL_MAP1_VERTEX_4	support/GLFW/deps/glad/glad.h	539;"	d
GL_MAP1_VERTEX_4	support/glad/glad.h	490;"	d
GL_MAP2_COLOR_4	support/GLFW/deps/glad/glad.h	540;"	d
GL_MAP2_COLOR_4	support/glad/glad.h	491;"	d
GL_MAP2_GRID_DOMAIN	support/GLFW/deps/glad/glad.h	551;"	d
GL_MAP2_GRID_DOMAIN	support/glad/glad.h	502;"	d
GL_MAP2_GRID_SEGMENTS	support/GLFW/deps/glad/glad.h	552;"	d
GL_MAP2_GRID_SEGMENTS	support/glad/glad.h	503;"	d
GL_MAP2_INDEX	support/GLFW/deps/glad/glad.h	541;"	d
GL_MAP2_INDEX	support/glad/glad.h	492;"	d
GL_MAP2_NORMAL	support/GLFW/deps/glad/glad.h	542;"	d
GL_MAP2_NORMAL	support/glad/glad.h	493;"	d
GL_MAP2_TEXTURE_COORD_1	support/GLFW/deps/glad/glad.h	543;"	d
GL_MAP2_TEXTURE_COORD_1	support/glad/glad.h	494;"	d
GL_MAP2_TEXTURE_COORD_2	support/GLFW/deps/glad/glad.h	544;"	d
GL_MAP2_TEXTURE_COORD_2	support/glad/glad.h	495;"	d
GL_MAP2_TEXTURE_COORD_3	support/GLFW/deps/glad/glad.h	545;"	d
GL_MAP2_TEXTURE_COORD_3	support/glad/glad.h	496;"	d
GL_MAP2_TEXTURE_COORD_4	support/GLFW/deps/glad/glad.h	546;"	d
GL_MAP2_TEXTURE_COORD_4	support/glad/glad.h	497;"	d
GL_MAP2_VERTEX_3	support/GLFW/deps/glad/glad.h	547;"	d
GL_MAP2_VERTEX_3	support/glad/glad.h	498;"	d
GL_MAP2_VERTEX_4	support/GLFW/deps/glad/glad.h	548;"	d
GL_MAP2_VERTEX_4	support/glad/glad.h	499;"	d
GL_MAP_COLOR	support/GLFW/deps/glad/glad.h	492;"	d
GL_MAP_COLOR	support/glad/glad.h	444;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	support/GLFW/deps/glad/glad.h	1222;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	support/glad/glad.h	1219;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	support/GLFW/deps/glad/glad.h	1221;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	support/glad/glad.h	1218;"	d
GL_MAP_INVALIDATE_RANGE_BIT	support/GLFW/deps/glad/glad.h	1220;"	d
GL_MAP_INVALIDATE_RANGE_BIT	support/glad/glad.h	1217;"	d
GL_MAP_READ_BIT	support/GLFW/deps/glad/glad.h	1218;"	d
GL_MAP_READ_BIT	support/glad/glad.h	1215;"	d
GL_MAP_STENCIL	support/GLFW/deps/glad/glad.h	493;"	d
GL_MAP_STENCIL	support/glad/glad.h	445;"	d
GL_MAP_UNSYNCHRONIZED_BIT	support/GLFW/deps/glad/glad.h	1223;"	d
GL_MAP_UNSYNCHRONIZED_BIT	support/glad/glad.h	1220;"	d
GL_MAP_WRITE_BIT	support/GLFW/deps/glad/glad.h	1219;"	d
GL_MAP_WRITE_BIT	support/glad/glad.h	1216;"	d
GL_MATRIX_MODE	support/GLFW/deps/glad/glad.h	454;"	d
GL_MATRIX_MODE	support/glad/glad.h	408;"	d
GL_MAX	support/GLFW/deps/glad/glad.h	855;"	d
GL_MAX	support/glad/glad.h	856;"	d
GL_MAX_3D_TEXTURE_SIZE	support/GLFW/deps/glad/glad.h	689;"	d
GL_MAX_3D_TEXTURE_SIZE	support/glad/glad.h	684;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	support/GLFW/deps/glad/glad.h	1039;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	support/glad/glad.h	1036;"	d
GL_MAX_ATTRIB_STACK_DEPTH	support/GLFW/deps/glad/glad.h	512;"	d
GL_MAX_ATTRIB_STACK_DEPTH	support/glad/glad.h	464;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	support/GLFW/deps/glad/glad.h	517;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	support/glad/glad.h	609;"	d
GL_MAX_CLIP_DISTANCES	support/GLFW/deps/glad/glad.h	1026;"	d
GL_MAX_CLIP_DISTANCES	support/glad/glad.h	1023;"	d
GL_MAX_CLIP_PLANES	support/GLFW/deps/glad/glad.h	510;"	d
GL_MAX_CLIP_PLANES	support/glad/glad.h	462;"	d
GL_MAX_COLOR_ATTACHMENTS	support/GLFW/deps/glad/glad.h	1161;"	d
GL_MAX_COLOR_ATTACHMENTS	support/glad/glad.h	1158;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	support/GLFW/deps/glad/glad.h	1376;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	support/glad/glad.h	1373;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	1294;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	support/glad/glad.h	1291;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	1293;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	support/glad/glad.h	1290;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	support/GLFW/deps/glad/glad.h	949;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	support/glad/glad.h	946;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	support/GLFW/deps/glad/glad.h	1289;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	support/glad/glad.h	1286;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	1292;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	support/glad/glad.h	1289;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	support/GLFW/deps/glad/glad.h	766;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	support/glad/glad.h	761;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	support/GLFW/deps/glad/glad.h	1377;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	support/glad/glad.h	1374;"	d
GL_MAX_DRAW_BUFFERS	support/GLFW/deps/glad/glad.h	922;"	d
GL_MAX_DRAW_BUFFERS	support/glad/glad.h	919;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	support/glad/glad.h	1380;"	d
GL_MAX_ELEMENTS_INDICES	support/GLFW/deps/glad/glad.h	700;"	d
GL_MAX_ELEMENTS_INDICES	support/glad/glad.h	695;"	d
GL_MAX_ELEMENTS_VERTICES	support/GLFW/deps/glad/glad.h	699;"	d
GL_MAX_ELEMENTS_VERTICES	support/glad/glad.h	694;"	d
GL_MAX_EVAL_ORDER	support/GLFW/deps/glad/glad.h	508;"	d
GL_MAX_EVAL_ORDER	support/glad/glad.h	460;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	support/GLFW/deps/glad/glad.h	1335;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	support/glad/glad.h	1332;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	support/GLFW/deps/glad/glad.h	1288;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	support/glad/glad.h	1285;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	945;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	support/glad/glad.h	942;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	support/GLFW/deps/glad/glad.h	1333;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	support/glad/glad.h	1330;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	support/GLFW/deps/glad/glad.h	1334;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	support/glad/glad.h	1331;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	support/GLFW/deps/glad/glad.h	1330;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	support/glad/glad.h	1327;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	support/GLFW/deps/glad/glad.h	1322;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	support/glad/glad.h	1319;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	support/GLFW/deps/glad/glad.h	1331;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	support/glad/glad.h	1328;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	support/GLFW/deps/glad/glad.h	1287;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	support/glad/glad.h	1284;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	1329;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	support/glad/glad.h	1326;"	d
GL_MAX_INTEGER_SAMPLES	support/GLFW/deps/glad/glad.h	1378;"	d
GL_MAX_INTEGER_SAMPLES	support/glad/glad.h	1375;"	d
GL_MAX_LIGHTS	support/GLFW/deps/glad/glad.h	509;"	d
GL_MAX_LIGHTS	support/glad/glad.h	461;"	d
GL_MAX_LIST_NESTING	support/GLFW/deps/glad/glad.h	433;"	d
GL_MAX_LIST_NESTING	support/glad/glad.h	387;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	support/GLFW/deps/glad/glad.h	513;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	support/glad/glad.h	465;"	d
GL_MAX_NAME_STACK_DEPTH	support/GLFW/deps/glad/glad.h	514;"	d
GL_MAX_NAME_STACK_DEPTH	support/glad/glad.h	466;"	d
GL_MAX_PIXEL_MAP_TABLE	support/GLFW/deps/glad/glad.h	511;"	d
GL_MAX_PIXEL_MAP_TABLE	support/glad/glad.h	463;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	support/GLFW/deps/glad/glad.h	1041;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	support/glad/glad.h	1038;"	d
GL_MAX_PROJECTION_STACK_DEPTH	support/GLFW/deps/glad/glad.h	515;"	d
GL_MAX_PROJECTION_STACK_DEPTH	support/glad/glad.h	467;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	support/GLFW/deps/glad/glad.h	1268;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	support/glad/glad.h	1265;"	d
GL_MAX_RENDERBUFFER_SIZE	support/GLFW/deps/glad/glad.h	1132;"	d
GL_MAX_RENDERBUFFER_SIZE	support/glad/glad.h	1129;"	d
GL_MAX_SAMPLES	support/GLFW/deps/glad/glad.h	1212;"	d
GL_MAX_SAMPLES	support/glad/glad.h	1209;"	d
GL_MAX_SAMPLE_MASK_WORDS	support/GLFW/deps/glad/glad.h	1361;"	d
GL_MAX_SAMPLE_MASK_WORDS	support/glad/glad.h	1358;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	support/GLFW/deps/glad/glad.h	1343;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	support/glad/glad.h	1340;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	1262;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	support/glad/glad.h	1259;"	d
GL_MAX_TEXTURE_COORDS	support/GLFW/deps/glad/glad.h	993;"	d
GL_MAX_TEXTURE_COORDS	support/glad/glad.h	990;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	support/GLFW/deps/glad/glad.h	942;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	support/glad/glad.h	939;"	d
GL_MAX_TEXTURE_LOD_BIAS	support/GLFW/deps/glad/glad.h	821;"	d
GL_MAX_TEXTURE_LOD_BIAS	support/glad/glad.h	816;"	d
GL_MAX_TEXTURE_SIZE	support/GLFW/deps/glad/glad.h	251;"	d
GL_MAX_TEXTURE_SIZE	support/glad/glad.h	245;"	d
GL_MAX_TEXTURE_STACK_DEPTH	support/GLFW/deps/glad/glad.h	516;"	d
GL_MAX_TEXTURE_STACK_DEPTH	support/glad/glad.h	468;"	d
GL_MAX_TEXTURE_UNITS	support/GLFW/deps/glad/glad.h	776;"	d
GL_MAX_TEXTURE_UNITS	support/glad/glad.h	771;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	support/GLFW/deps/glad/glad.h	1065;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	support/glad/glad.h	1062;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	support/GLFW/deps/glad/glad.h	1066;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	support/glad/glad.h	1063;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	support/GLFW/deps/glad/glad.h	1058;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	support/glad/glad.h	1055;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	support/GLFW/deps/glad/glad.h	1291;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	support/glad/glad.h	1288;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	support/GLFW/deps/glad/glad.h	1290;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	support/glad/glad.h	1287;"	d
GL_MAX_VARYING_COMPONENTS	support/GLFW/deps/glad/glad.h	1044;"	d
GL_MAX_VARYING_COMPONENTS	support/glad/glad.h	1041;"	d
GL_MAX_VARYING_FLOATS	support/GLFW/deps/glad/glad.h	947;"	d
GL_MAX_VARYING_FLOATS	support/glad/glad.h	944;"	d
GL_MAX_VERTEX_ATTRIBS	support/GLFW/deps/glad/glad.h	940;"	d
GL_MAX_VERTEX_ATTRIBS	support/glad/glad.h	937;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	support/GLFW/deps/glad/glad.h	1332;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	support/glad/glad.h	1329;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	support/GLFW/deps/glad/glad.h	948;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	support/glad/glad.h	945;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	support/GLFW/deps/glad/glad.h	1286;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	support/glad/glad.h	1283;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	support/GLFW/deps/glad/glad.h	946;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	support/glad/glad.h	943;"	d
GL_MAX_VIEWPORT_DIMS	support/GLFW/deps/glad/glad.h	252;"	d
GL_MAX_VIEWPORT_DIMS	support/glad/glad.h	246;"	d
GL_MIN	support/GLFW/deps/glad/glad.h	854;"	d
GL_MIN	support/glad/glad.h	855;"	d
GL_MINOR_VERSION	support/GLFW/deps/glad/glad.h	1028;"	d
GL_MINOR_VERSION	support/glad/glad.h	1025;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	support/GLFW/deps/glad/glad.h	1040;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	support/glad/glad.h	1037;"	d
GL_MIRRORED_REPEAT	support/GLFW/deps/glad/glad.h	820;"	d
GL_MIRRORED_REPEAT	support/glad/glad.h	815;"	d
GL_MODELVIEW	support/GLFW/deps/glad/glad.h	601;"	d
GL_MODELVIEW	support/glad/glad.h	525;"	d
GL_MODELVIEW_MATRIX	support/GLFW/deps/glad/glad.h	459;"	d
GL_MODELVIEW_MATRIX	support/glad/glad.h	413;"	d
GL_MODELVIEW_STACK_DEPTH	support/GLFW/deps/glad/glad.h	456;"	d
GL_MODELVIEW_STACK_DEPTH	support/glad/glad.h	410;"	d
GL_MODULATE	support/GLFW/deps/glad/glad.h	616;"	d
GL_MODULATE	support/glad/glad.h	540;"	d
GL_MULT	support/GLFW/deps/glad/glad.h	376;"	d
GL_MULT	support/glad/glad.h	338;"	d
GL_MULTISAMPLE	support/GLFW/deps/glad/glad.h	749;"	d
GL_MULTISAMPLE	support/glad/glad.h	744;"	d
GL_MULTISAMPLE_ARB	support/GLFW/deps/glad/glad.h	3424;"	d
GL_MULTISAMPLE_BIT	support/GLFW/deps/glad/glad.h	781;"	d
GL_MULTISAMPLE_BIT	support/glad/glad.h	776;"	d
GL_MULTISAMPLE_BIT_ARB	support/GLFW/deps/glad/glad.h	3432;"	d
GL_N3F_V3F	support/GLFW/deps/glad/glad.h	652;"	d
GL_N3F_V3F	support/glad/glad.h	661;"	d
GL_NAME_STACK_DEPTH	support/GLFW/deps/glad/glad.h	529;"	d
GL_NAME_STACK_DEPTH	support/glad/glad.h	480;"	d
GL_NAND	support/GLFW/deps/glad/glad.h	298;"	d
GL_NAND	support/glad/glad.h	279;"	d
GL_NEAREST	support/GLFW/deps/glad/glad.h	323;"	d
GL_NEAREST	support/glad/glad.h	304;"	d
GL_NEAREST_MIPMAP_LINEAR	support/GLFW/deps/glad/glad.h	327;"	d
GL_NEAREST_MIPMAP_LINEAR	support/glad/glad.h	308;"	d
GL_NEAREST_MIPMAP_NEAREST	support/GLFW/deps/glad/glad.h	325;"	d
GL_NEAREST_MIPMAP_NEAREST	support/glad/glad.h	306;"	d
GL_NEVER	support/GLFW/deps/glad/glad.h	160;"	d
GL_NEVER	support/glad/glad.h	155;"	d
GL_NICEST	support/GLFW/deps/glad/glad.h	273;"	d
GL_NICEST	support/glad/glad.h	255;"	d
GL_NONE	support/GLFW/deps/glad/glad.h	179;"	d
GL_NONE	support/GLFW/src/internal.h	70;"	d
GL_NONE	support/glad/glad.h	174;"	d
GL_NOOP	support/GLFW/deps/glad/glad.h	289;"	d
GL_NOOP	support/glad/glad.h	270;"	d
GL_NOR	support/GLFW/deps/glad/glad.h	292;"	d
GL_NOR	support/glad/glad.h	273;"	d
GL_NORMALIZE	support/GLFW/deps/glad/glad.h	455;"	d
GL_NORMALIZE	support/glad/glad.h	409;"	d
GL_NORMAL_ARRAY	support/GLFW/deps/glad/glad.h	557;"	d
GL_NORMAL_ARRAY	support/glad/glad.h	614;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	889;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	support/glad/glad.h	886;"	d
GL_NORMAL_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	411;"	d
GL_NORMAL_ARRAY_POINTER	support/glad/glad.h	600;"	d
GL_NORMAL_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	566;"	d
GL_NORMAL_ARRAY_STRIDE	support/glad/glad.h	623;"	d
GL_NORMAL_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	565;"	d
GL_NORMAL_ARRAY_TYPE	support/glad/glad.h	622;"	d
GL_NORMAL_MAP	support/GLFW/deps/glad/glad.h	782;"	d
GL_NORMAL_MAP	support/glad/glad.h	777;"	d
GL_NOTEQUAL	support/GLFW/deps/glad/glad.h	165;"	d
GL_NOTEQUAL	support/glad/glad.h	160;"	d
GL_NO_ERROR	support/GLFW/deps/glad/glad.h	189;"	d
GL_NO_ERROR	support/glad/glad.h	184;"	d
GL_NO_RESET_NOTIFICATION_ARB	support/GLFW/deps/glad/glad.h	3439;"	d
GL_NO_RESET_NOTIFICATION_ARB	support/GLFW/src/internal.h	82;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	support/GLFW/deps/glad/glad.h	772;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	support/glad/glad.h	767;"	d
GL_NUM_EXTENSIONS	support/GLFW/deps/glad/glad.h	1029;"	d
GL_NUM_EXTENSIONS	support/GLFW/src/internal.h	73;"	d
GL_NUM_EXTENSIONS	support/glad/glad.h	1026;"	d
GL_OBJECT_LINEAR	support/GLFW/deps/glad/glad.h	622;"	d
GL_OBJECT_LINEAR	support/glad/glad.h	546;"	d
GL_OBJECT_PLANE	support/GLFW/deps/glad/glad.h	625;"	d
GL_OBJECT_PLANE	support/glad/glad.h	549;"	d
GL_OBJECT_TYPE	support/GLFW/deps/glad/glad.h	1344;"	d
GL_OBJECT_TYPE	support/glad/glad.h	1341;"	d
GL_ONE	support/GLFW/deps/glad/glad.h	169;"	d
GL_ONE	support/glad/glad.h	164;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	support/GLFW/deps/glad/glad.h	859;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	support/glad/glad.h	851;"	d
GL_ONE_MINUS_CONSTANT_COLOR	support/GLFW/deps/glad/glad.h	857;"	d
GL_ONE_MINUS_CONSTANT_COLOR	support/glad/glad.h	849;"	d
GL_ONE_MINUS_DST_ALPHA	support/GLFW/deps/glad/glad.h	175;"	d
GL_ONE_MINUS_DST_ALPHA	support/glad/glad.h	170;"	d
GL_ONE_MINUS_DST_COLOR	support/GLFW/deps/glad/glad.h	177;"	d
GL_ONE_MINUS_DST_COLOR	support/glad/glad.h	172;"	d
GL_ONE_MINUS_SRC1_ALPHA	support/glad/glad.h	1379;"	d
GL_ONE_MINUS_SRC1_COLOR	support/glad/glad.h	1378;"	d
GL_ONE_MINUS_SRC_ALPHA	support/GLFW/deps/glad/glad.h	173;"	d
GL_ONE_MINUS_SRC_ALPHA	support/glad/glad.h	168;"	d
GL_ONE_MINUS_SRC_COLOR	support/GLFW/deps/glad/glad.h	171;"	d
GL_ONE_MINUS_SRC_COLOR	support/glad/glad.h	166;"	d
GL_OPERAND0_ALPHA	support/GLFW/deps/glad/glad.h	800;"	d
GL_OPERAND0_ALPHA	support/glad/glad.h	795;"	d
GL_OPERAND0_RGB	support/GLFW/deps/glad/glad.h	797;"	d
GL_OPERAND0_RGB	support/glad/glad.h	792;"	d
GL_OPERAND1_ALPHA	support/GLFW/deps/glad/glad.h	801;"	d
GL_OPERAND1_ALPHA	support/glad/glad.h	796;"	d
GL_OPERAND1_RGB	support/GLFW/deps/glad/glad.h	798;"	d
GL_OPERAND1_RGB	support/glad/glad.h	793;"	d
GL_OPERAND2_ALPHA	support/GLFW/deps/glad/glad.h	802;"	d
GL_OPERAND2_ALPHA	support/glad/glad.h	797;"	d
GL_OPERAND2_RGB	support/GLFW/deps/glad/glad.h	799;"	d
GL_OPERAND2_RGB	support/glad/glad.h	794;"	d
GL_OR	support/GLFW/deps/glad/glad.h	291;"	d
GL_OR	support/glad/glad.h	272;"	d
GL_ORDER	support/GLFW/deps/glad/glad.h	398;"	d
GL_ORDER	support/glad/glad.h	360;"	d
GL_OR_INVERTED	support/GLFW/deps/glad/glad.h	297;"	d
GL_OR_INVERTED	support/glad/glad.h	278;"	d
GL_OR_REVERSE	support/GLFW/deps/glad/glad.h	295;"	d
GL_OR_REVERSE	support/glad/glad.h	276;"	d
GL_OUT_OF_MEMORY	support/GLFW/deps/glad/glad.h	193;"	d
GL_OUT_OF_MEMORY	support/glad/glad.h	188;"	d
GL_PACK_ALIGNMENT	support/GLFW/deps/glad/glad.h	250;"	d
GL_PACK_ALIGNMENT	support/glad/glad.h	244;"	d
GL_PACK_IMAGE_HEIGHT	support/GLFW/deps/glad/glad.h	682;"	d
GL_PACK_IMAGE_HEIGHT	support/glad/glad.h	677;"	d
GL_PACK_LSB_FIRST	support/GLFW/deps/glad/glad.h	246;"	d
GL_PACK_LSB_FIRST	support/glad/glad.h	240;"	d
GL_PACK_ROW_LENGTH	support/GLFW/deps/glad/glad.h	247;"	d
GL_PACK_ROW_LENGTH	support/glad/glad.h	241;"	d
GL_PACK_SKIP_IMAGES	support/GLFW/deps/glad/glad.h	681;"	d
GL_PACK_SKIP_IMAGES	support/glad/glad.h	676;"	d
GL_PACK_SKIP_PIXELS	support/GLFW/deps/glad/glad.h	249;"	d
GL_PACK_SKIP_PIXELS	support/glad/glad.h	243;"	d
GL_PACK_SKIP_ROWS	support/GLFW/deps/glad/glad.h	248;"	d
GL_PACK_SKIP_ROWS	support/glad/glad.h	242;"	d
GL_PACK_SWAP_BYTES	support/GLFW/deps/glad/glad.h	245;"	d
GL_PACK_SWAP_BYTES	support/glad/glad.h	239;"	d
GL_PASS_THROUGH_TOKEN	support/GLFW/deps/glad/glad.h	387;"	d
GL_PASS_THROUGH_TOKEN	support/glad/glad.h	349;"	d
GL_PERSPECTIVE_CORRECTION_HINT	support/GLFW/deps/glad/glad.h	475;"	d
GL_PERSPECTIVE_CORRECTION_HINT	support/glad/glad.h	427;"	d
GL_PIXEL_MAP_A_TO_A	support/GLFW/deps/glad/glad.h	409;"	d
GL_PIXEL_MAP_A_TO_A	support/glad/glad.h	371;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	support/GLFW/deps/glad/glad.h	491;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	support/glad/glad.h	443;"	d
GL_PIXEL_MAP_B_TO_B	support/GLFW/deps/glad/glad.h	408;"	d
GL_PIXEL_MAP_B_TO_B	support/glad/glad.h	370;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	support/GLFW/deps/glad/glad.h	490;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	support/glad/glad.h	442;"	d
GL_PIXEL_MAP_G_TO_G	support/GLFW/deps/glad/glad.h	407;"	d
GL_PIXEL_MAP_G_TO_G	support/glad/glad.h	369;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	support/GLFW/deps/glad/glad.h	489;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	support/glad/glad.h	441;"	d
GL_PIXEL_MAP_I_TO_A	support/GLFW/deps/glad/glad.h	405;"	d
GL_PIXEL_MAP_I_TO_A	support/glad/glad.h	367;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	support/GLFW/deps/glad/glad.h	487;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	support/glad/glad.h	439;"	d
GL_PIXEL_MAP_I_TO_B	support/GLFW/deps/glad/glad.h	404;"	d
GL_PIXEL_MAP_I_TO_B	support/glad/glad.h	366;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	support/GLFW/deps/glad/glad.h	486;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	support/glad/glad.h	438;"	d
GL_PIXEL_MAP_I_TO_G	support/GLFW/deps/glad/glad.h	403;"	d
GL_PIXEL_MAP_I_TO_G	support/glad/glad.h	365;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	support/GLFW/deps/glad/glad.h	485;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	support/glad/glad.h	437;"	d
GL_PIXEL_MAP_I_TO_I	support/GLFW/deps/glad/glad.h	400;"	d
GL_PIXEL_MAP_I_TO_I	support/glad/glad.h	362;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	support/GLFW/deps/glad/glad.h	482;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	support/glad/glad.h	434;"	d
GL_PIXEL_MAP_I_TO_R	support/GLFW/deps/glad/glad.h	402;"	d
GL_PIXEL_MAP_I_TO_R	support/glad/glad.h	364;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	support/GLFW/deps/glad/glad.h	484;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	support/glad/glad.h	436;"	d
GL_PIXEL_MAP_R_TO_R	support/GLFW/deps/glad/glad.h	406;"	d
GL_PIXEL_MAP_R_TO_R	support/glad/glad.h	368;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	support/GLFW/deps/glad/glad.h	488;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	support/glad/glad.h	440;"	d
GL_PIXEL_MAP_S_TO_S	support/GLFW/deps/glad/glad.h	401;"	d
GL_PIXEL_MAP_S_TO_S	support/glad/glad.h	363;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	support/GLFW/deps/glad/glad.h	483;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	support/glad/glad.h	435;"	d
GL_PIXEL_MODE_BIT	support/GLFW/deps/glad/glad.h	355;"	d
GL_PIXEL_MODE_BIT	support/glad/glad.h	320;"	d
GL_PIXEL_PACK_BUFFER	support/GLFW/deps/glad/glad.h	994;"	d
GL_PIXEL_PACK_BUFFER	support/glad/glad.h	991;"	d
GL_PIXEL_PACK_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	996;"	d
GL_PIXEL_PACK_BUFFER_BINDING	support/glad/glad.h	993;"	d
GL_PIXEL_UNPACK_BUFFER	support/GLFW/deps/glad/glad.h	995;"	d
GL_PIXEL_UNPACK_BUFFER	support/glad/glad.h	992;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	997;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	support/glad/glad.h	994;"	d
GL_POINT	support/GLFW/deps/glad/glad.h	312;"	d
GL_POINT	support/glad/glad.h	293;"	d
GL_POINTS	support/GLFW/deps/glad/glad.h	152;"	d
GL_POINTS	support/glad/glad.h	147;"	d
GL_POINT_BIT	support/GLFW/deps/glad/glad.h	351;"	d
GL_POINT_BIT	support/glad/glad.h	316;"	d
GL_POINT_DISTANCE_ATTENUATION	support/GLFW/deps/glad/glad.h	830;"	d
GL_POINT_DISTANCE_ATTENUATION	support/glad/glad.h	825;"	d
GL_POINT_FADE_THRESHOLD_SIZE	support/GLFW/deps/glad/glad.h	816;"	d
GL_POINT_FADE_THRESHOLD_SIZE	support/glad/glad.h	811;"	d
GL_POINT_SIZE	support/GLFW/deps/glad/glad.h	196;"	d
GL_POINT_SIZE	support/glad/glad.h	191;"	d
GL_POINT_SIZE_GRANULARITY	support/GLFW/deps/glad/glad.h	198;"	d
GL_POINT_SIZE_GRANULARITY	support/glad/glad.h	193;"	d
GL_POINT_SIZE_MAX	support/GLFW/deps/glad/glad.h	829;"	d
GL_POINT_SIZE_MAX	support/glad/glad.h	824;"	d
GL_POINT_SIZE_MIN	support/GLFW/deps/glad/glad.h	828;"	d
GL_POINT_SIZE_MIN	support/glad/glad.h	823;"	d
GL_POINT_SIZE_RANGE	support/GLFW/deps/glad/glad.h	197;"	d
GL_POINT_SIZE_RANGE	support/glad/glad.h	192;"	d
GL_POINT_SMOOTH	support/GLFW/deps/glad/glad.h	428;"	d
GL_POINT_SMOOTH	support/glad/glad.h	382;"	d
GL_POINT_SMOOTH_HINT	support/GLFW/deps/glad/glad.h	476;"	d
GL_POINT_SMOOTH_HINT	support/glad/glad.h	428;"	d
GL_POINT_SPRITE	support/GLFW/deps/glad/glad.h	991;"	d
GL_POINT_SPRITE	support/glad/glad.h	988;"	d
GL_POINT_SPRITE_COORD_ORIGIN	support/GLFW/deps/glad/glad.h	984;"	d
GL_POINT_SPRITE_COORD_ORIGIN	support/glad/glad.h	981;"	d
GL_POINT_TOKEN	support/GLFW/deps/glad/glad.h	388;"	d
GL_POINT_TOKEN	support/glad/glad.h	350;"	d
GL_POLYGON	support/GLFW/deps/glad/glad.h	372;"	d
GL_POLYGON	support/glad/glad.h	334;"	d
GL_POLYGON_BIT	support/GLFW/deps/glad/glad.h	353;"	d
GL_POLYGON_BIT	support/glad/glad.h	318;"	d
GL_POLYGON_MODE	support/GLFW/deps/glad/glad.h	203;"	d
GL_POLYGON_MODE	support/glad/glad.h	198;"	d
GL_POLYGON_OFFSET_FACTOR	support/GLFW/deps/glad/glad.h	260;"	d
GL_POLYGON_OFFSET_FACTOR	support/glad/glad.h	571;"	d
GL_POLYGON_OFFSET_FILL	support/GLFW/deps/glad/glad.h	259;"	d
GL_POLYGON_OFFSET_FILL	support/glad/glad.h	570;"	d
GL_POLYGON_OFFSET_LINE	support/GLFW/deps/glad/glad.h	258;"	d
GL_POLYGON_OFFSET_LINE	support/glad/glad.h	569;"	d
GL_POLYGON_OFFSET_POINT	support/GLFW/deps/glad/glad.h	257;"	d
GL_POLYGON_OFFSET_POINT	support/glad/glad.h	568;"	d
GL_POLYGON_OFFSET_UNITS	support/GLFW/deps/glad/glad.h	256;"	d
GL_POLYGON_OFFSET_UNITS	support/glad/glad.h	567;"	d
GL_POLYGON_SMOOTH	support/GLFW/deps/glad/glad.h	204;"	d
GL_POLYGON_SMOOTH	support/glad/glad.h	199;"	d
GL_POLYGON_SMOOTH_HINT	support/GLFW/deps/glad/glad.h	238;"	d
GL_POLYGON_SMOOTH_HINT	support/glad/glad.h	232;"	d
GL_POLYGON_STIPPLE	support/GLFW/deps/glad/glad.h	436;"	d
GL_POLYGON_STIPPLE	support/glad/glad.h	390;"	d
GL_POLYGON_STIPPLE_BIT	support/GLFW/deps/glad/glad.h	354;"	d
GL_POLYGON_STIPPLE_BIT	support/glad/glad.h	319;"	d
GL_POLYGON_TOKEN	support/GLFW/deps/glad/glad.h	390;"	d
GL_POLYGON_TOKEN	support/glad/glad.h	352;"	d
GL_POSITION	support/GLFW/deps/glad/glad.h	585;"	d
GL_POSITION	support/glad/glad.h	509;"	d
GL_PREVIOUS	support/GLFW/deps/glad/glad.h	809;"	d
GL_PREVIOUS	support/glad/glad.h	804;"	d
GL_PRIMARY_COLOR	support/GLFW/deps/glad/glad.h	808;"	d
GL_PRIMARY_COLOR	support/glad/glad.h	803;"	d
GL_PRIMITIVES_GENERATED	support/GLFW/deps/glad/glad.h	1062;"	d
GL_PRIMITIVES_GENERATED	support/glad/glad.h	1059;"	d
GL_PRIMITIVE_RESTART	support/GLFW/deps/glad/glad.h	1278;"	d
GL_PRIMITIVE_RESTART	support/glad/glad.h	1275;"	d
GL_PRIMITIVE_RESTART_INDEX	support/GLFW/deps/glad/glad.h	1279;"	d
GL_PRIMITIVE_RESTART_INDEX	support/glad/glad.h	1276;"	d
GL_PROGRAM_POINT_SIZE	support/GLFW/deps/glad/glad.h	1321;"	d
GL_PROGRAM_POINT_SIZE	support/glad/glad.h	1318;"	d
GL_PROJECTION	support/GLFW/deps/glad/glad.h	602;"	d
GL_PROJECTION	support/glad/glad.h	526;"	d
GL_PROJECTION_MATRIX	support/GLFW/deps/glad/glad.h	460;"	d
GL_PROJECTION_MATRIX	support/glad/glad.h	414;"	d
GL_PROJECTION_STACK_DEPTH	support/GLFW/deps/glad/glad.h	457;"	d
GL_PROJECTION_STACK_DEPTH	support/glad/glad.h	411;"	d
GL_PROVOKING_VERTEX	support/GLFW/deps/glad/glad.h	1341;"	d
GL_PROVOKING_VERTEX	support/glad/glad.h	1338;"	d
GL_PROXY_TEXTURE_1D	support/GLFW/deps/glad/glad.h	333;"	d
GL_PROXY_TEXTURE_1D	support/glad/glad.h	580;"	d
GL_PROXY_TEXTURE_1D_ARRAY	support/GLFW/deps/glad/glad.h	1046;"	d
GL_PROXY_TEXTURE_1D_ARRAY	support/glad/glad.h	1043;"	d
GL_PROXY_TEXTURE_2D	support/GLFW/deps/glad/glad.h	334;"	d
GL_PROXY_TEXTURE_2D	support/glad/glad.h	581;"	d
GL_PROXY_TEXTURE_2D_ARRAY	support/GLFW/deps/glad/glad.h	1048;"	d
GL_PROXY_TEXTURE_2D_ARRAY	support/glad/glad.h	1045;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1363;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	support/glad/glad.h	1360;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1365;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1362;"	d
GL_PROXY_TEXTURE_3D	support/GLFW/deps/glad/glad.h	686;"	d
GL_PROXY_TEXTURE_3D	support/glad/glad.h	681;"	d
GL_PROXY_TEXTURE_CUBE_MAP	support/GLFW/deps/glad/glad.h	765;"	d
GL_PROXY_TEXTURE_CUBE_MAP	support/glad/glad.h	760;"	d
GL_PROXY_TEXTURE_RECTANGLE	support/GLFW/deps/glad/glad.h	1267;"	d
GL_PROXY_TEXTURE_RECTANGLE	support/glad/glad.h	1264;"	d
GL_Q	support/GLFW/deps/glad/glad.h	615;"	d
GL_Q	support/glad/glad.h	539;"	d
GL_QUADRATIC_ATTENUATION	support/GLFW/deps/glad/glad.h	591;"	d
GL_QUADRATIC_ATTENUATION	support/glad/glad.h	515;"	d
GL_QUADS	support/GLFW/deps/glad/glad.h	159;"	d
GL_QUADS	support/glad/glad.h	154;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	support/GLFW/deps/glad/glad.h	1338;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	support/glad/glad.h	1335;"	d
GL_QUAD_STRIP	support/GLFW/deps/glad/glad.h	371;"	d
GL_QUAD_STRIP	support/glad/glad.h	333;"	d
GL_QUERY_BY_REGION_NO_WAIT	support/GLFW/deps/glad/glad.h	1113;"	d
GL_QUERY_BY_REGION_NO_WAIT	support/glad/glad.h	1110;"	d
GL_QUERY_BY_REGION_WAIT	support/GLFW/deps/glad/glad.h	1112;"	d
GL_QUERY_BY_REGION_WAIT	support/glad/glad.h	1109;"	d
GL_QUERY_COUNTER_BITS	support/GLFW/deps/glad/glad.h	862;"	d
GL_QUERY_COUNTER_BITS	support/glad/glad.h	859;"	d
GL_QUERY_NO_WAIT	support/GLFW/deps/glad/glad.h	1111;"	d
GL_QUERY_NO_WAIT	support/glad/glad.h	1108;"	d
GL_QUERY_RESULT	support/GLFW/deps/glad/glad.h	864;"	d
GL_QUERY_RESULT	support/glad/glad.h	861;"	d
GL_QUERY_RESULT_AVAILABLE	support/GLFW/deps/glad/glad.h	865;"	d
GL_QUERY_RESULT_AVAILABLE	support/glad/glad.h	862;"	d
GL_QUERY_WAIT	support/GLFW/deps/glad/glad.h	1110;"	d
GL_QUERY_WAIT	support/glad/glad.h	1107;"	d
GL_R	support/GLFW/deps/glad/glad.h	614;"	d
GL_R	support/glad/glad.h	538;"	d
GL_R11F_G11F_B10F	support/GLFW/deps/glad/glad.h	1051;"	d
GL_R11F_G11F_B10F	support/glad/glad.h	1048;"	d
GL_R16	support/GLFW/deps/glad/glad.h	1231;"	d
GL_R16	support/glad/glad.h	1228;"	d
GL_R16F	support/GLFW/deps/glad/glad.h	1234;"	d
GL_R16F	support/glad/glad.h	1231;"	d
GL_R16I	support/GLFW/deps/glad/glad.h	1240;"	d
GL_R16I	support/glad/glad.h	1237;"	d
GL_R16UI	support/GLFW/deps/glad/glad.h	1241;"	d
GL_R16UI	support/glad/glad.h	1238;"	d
GL_R16_SNORM	support/GLFW/deps/glad/glad.h	1273;"	d
GL_R16_SNORM	support/glad/glad.h	1270;"	d
GL_R32F	support/GLFW/deps/glad/glad.h	1235;"	d
GL_R32F	support/glad/glad.h	1232;"	d
GL_R32I	support/GLFW/deps/glad/glad.h	1242;"	d
GL_R32I	support/glad/glad.h	1239;"	d
GL_R32UI	support/GLFW/deps/glad/glad.h	1243;"	d
GL_R32UI	support/glad/glad.h	1240;"	d
GL_R3_G3_B2	support/GLFW/deps/glad/glad.h	336;"	d
GL_R3_G3_B2	support/glad/glad.h	582;"	d
GL_R8	support/GLFW/deps/glad/glad.h	1230;"	d
GL_R8	support/glad/glad.h	1227;"	d
GL_R8I	support/GLFW/deps/glad/glad.h	1238;"	d
GL_R8I	support/glad/glad.h	1235;"	d
GL_R8UI	support/GLFW/deps/glad/glad.h	1239;"	d
GL_R8UI	support/glad/glad.h	1236;"	d
GL_R8_SNORM	support/GLFW/deps/glad/glad.h	1269;"	d
GL_R8_SNORM	support/glad/glad.h	1266;"	d
GL_RASTERIZER_DISCARD	support/GLFW/deps/glad/glad.h	1064;"	d
GL_RASTERIZER_DISCARD	support/glad/glad.h	1061;"	d
GL_READ_BUFFER	support/GLFW/deps/glad/glad.h	230;"	d
GL_READ_BUFFER	support/glad/glad.h	224;"	d
GL_READ_FRAMEBUFFER	support/GLFW/deps/glad/glad.h	1146;"	d
GL_READ_FRAMEBUFFER	support/glad/glad.h	1143;"	d
GL_READ_FRAMEBUFFER_BINDING	support/GLFW/deps/glad/glad.h	1148;"	d
GL_READ_FRAMEBUFFER_BINDING	support/glad/glad.h	1145;"	d
GL_READ_ONLY	support/GLFW/deps/glad/glad.h	871;"	d
GL_READ_ONLY	support/glad/glad.h	868;"	d
GL_READ_WRITE	support/GLFW/deps/glad/glad.h	873;"	d
GL_READ_WRITE	support/glad/glad.h	870;"	d
GL_RED	support/GLFW/deps/glad/glad.h	306;"	d
GL_RED	support/glad/glad.h	287;"	d
GL_RED_BIAS	support/GLFW/deps/glad/glad.h	497;"	d
GL_RED_BIAS	support/glad/glad.h	449;"	d
GL_RED_BITS	support/GLFW/deps/glad/glad.h	519;"	d
GL_RED_BITS	support/glad/glad.h	470;"	d
GL_RED_INTEGER	support/GLFW/deps/glad/glad.h	1083;"	d
GL_RED_INTEGER	support/glad/glad.h	1080;"	d
GL_RED_SCALE	support/GLFW/deps/glad/glad.h	496;"	d
GL_RED_SCALE	support/glad/glad.h	448;"	d
GL_REFLECTION_MAP	support/GLFW/deps/glad/glad.h	783;"	d
GL_REFLECTION_MAP	support/glad/glad.h	778;"	d
GL_RENDER	support/GLFW/deps/glad/glad.h	607;"	d
GL_RENDER	support/glad/glad.h	531;"	d
GL_RENDERBUFFER	support/GLFW/deps/glad/glad.h	1197;"	d
GL_RENDERBUFFER	support/glad/glad.h	1194;"	d
GL_RENDERBUFFER_ALPHA_SIZE	support/GLFW/deps/glad/glad.h	1208;"	d
GL_RENDERBUFFER_ALPHA_SIZE	support/glad/glad.h	1205;"	d
GL_RENDERBUFFER_BINDING	support/GLFW/deps/glad/glad.h	1145;"	d
GL_RENDERBUFFER_BINDING	support/glad/glad.h	1142;"	d
GL_RENDERBUFFER_BLUE_SIZE	support/GLFW/deps/glad/glad.h	1207;"	d
GL_RENDERBUFFER_BLUE_SIZE	support/glad/glad.h	1204;"	d
GL_RENDERBUFFER_DEPTH_SIZE	support/GLFW/deps/glad/glad.h	1209;"	d
GL_RENDERBUFFER_DEPTH_SIZE	support/glad/glad.h	1206;"	d
GL_RENDERBUFFER_GREEN_SIZE	support/GLFW/deps/glad/glad.h	1206;"	d
GL_RENDERBUFFER_GREEN_SIZE	support/glad/glad.h	1203;"	d
GL_RENDERBUFFER_HEIGHT	support/GLFW/deps/glad/glad.h	1199;"	d
GL_RENDERBUFFER_HEIGHT	support/glad/glad.h	1196;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	support/GLFW/deps/glad/glad.h	1200;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	support/glad/glad.h	1197;"	d
GL_RENDERBUFFER_RED_SIZE	support/GLFW/deps/glad/glad.h	1205;"	d
GL_RENDERBUFFER_RED_SIZE	support/glad/glad.h	1202;"	d
GL_RENDERBUFFER_SAMPLES	support/GLFW/deps/glad/glad.h	1149;"	d
GL_RENDERBUFFER_SAMPLES	support/glad/glad.h	1146;"	d
GL_RENDERBUFFER_STENCIL_SIZE	support/GLFW/deps/glad/glad.h	1210;"	d
GL_RENDERBUFFER_STENCIL_SIZE	support/glad/glad.h	1207;"	d
GL_RENDERBUFFER_WIDTH	support/GLFW/deps/glad/glad.h	1198;"	d
GL_RENDERBUFFER_WIDTH	support/glad/glad.h	1195;"	d
GL_RENDERER	support/GLFW/deps/glad/glad.h	320;"	d
GL_RENDERER	support/glad/glad.h	301;"	d
GL_RENDER_MODE	support/GLFW/deps/glad/glad.h	474;"	d
GL_RENDER_MODE	support/glad/glad.h	426;"	d
GL_REPEAT	support/GLFW/deps/glad/glad.h	335;"	d
GL_REPEAT	support/glad/glad.h	314;"	d
GL_REPLACE	support/GLFW/deps/glad/glad.h	316;"	d
GL_REPLACE	support/glad/glad.h	297;"	d
GL_RESCALE_NORMAL	support/GLFW/deps/glad/glad.h	711;"	d
GL_RESCALE_NORMAL	support/glad/glad.h	706;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	support/GLFW/deps/glad/glad.h	3438;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	support/GLFW/src/internal.h	80;"	d
GL_RETURN	support/GLFW/deps/glad/glad.h	375;"	d
GL_RETURN	support/glad/glad.h	337;"	d
GL_RG	support/GLFW/deps/glad/glad.h	1228;"	d
GL_RG	support/glad/glad.h	1225;"	d
GL_RG16	support/GLFW/deps/glad/glad.h	1233;"	d
GL_RG16	support/glad/glad.h	1230;"	d
GL_RG16F	support/GLFW/deps/glad/glad.h	1236;"	d
GL_RG16F	support/glad/glad.h	1233;"	d
GL_RG16I	support/GLFW/deps/glad/glad.h	1246;"	d
GL_RG16I	support/glad/glad.h	1243;"	d
GL_RG16UI	support/GLFW/deps/glad/glad.h	1247;"	d
GL_RG16UI	support/glad/glad.h	1244;"	d
GL_RG16_SNORM	support/GLFW/deps/glad/glad.h	1274;"	d
GL_RG16_SNORM	support/glad/glad.h	1271;"	d
GL_RG32F	support/GLFW/deps/glad/glad.h	1237;"	d
GL_RG32F	support/glad/glad.h	1234;"	d
GL_RG32I	support/GLFW/deps/glad/glad.h	1248;"	d
GL_RG32I	support/glad/glad.h	1245;"	d
GL_RG32UI	support/GLFW/deps/glad/glad.h	1249;"	d
GL_RG32UI	support/glad/glad.h	1246;"	d
GL_RG8	support/GLFW/deps/glad/glad.h	1232;"	d
GL_RG8	support/glad/glad.h	1229;"	d
GL_RG8I	support/GLFW/deps/glad/glad.h	1244;"	d
GL_RG8I	support/glad/glad.h	1241;"	d
GL_RG8UI	support/GLFW/deps/glad/glad.h	1245;"	d
GL_RG8UI	support/glad/glad.h	1242;"	d
GL_RG8_SNORM	support/GLFW/deps/glad/glad.h	1270;"	d
GL_RG8_SNORM	support/glad/glad.h	1267;"	d
GL_RGB	support/GLFW/deps/glad/glad.h	310;"	d
GL_RGB	support/glad/glad.h	291;"	d
GL_RGB10	support/GLFW/deps/glad/glad.h	340;"	d
GL_RGB10	support/glad/glad.h	586;"	d
GL_RGB10_A2	support/GLFW/deps/glad/glad.h	347;"	d
GL_RGB10_A2	support/glad/glad.h	593;"	d
GL_RGB10_A2UI	support/glad/glad.h	1383;"	d
GL_RGB12	support/GLFW/deps/glad/glad.h	341;"	d
GL_RGB12	support/glad/glad.h	587;"	d
GL_RGB16	support/GLFW/deps/glad/glad.h	342;"	d
GL_RGB16	support/glad/glad.h	588;"	d
GL_RGB16F	support/GLFW/deps/glad/glad.h	1037;"	d
GL_RGB16F	support/glad/glad.h	1034;"	d
GL_RGB16I	support/GLFW/deps/glad/glad.h	1080;"	d
GL_RGB16I	support/glad/glad.h	1077;"	d
GL_RGB16UI	support/GLFW/deps/glad/glad.h	1074;"	d
GL_RGB16UI	support/glad/glad.h	1071;"	d
GL_RGB16_SNORM	support/GLFW/deps/glad/glad.h	1275;"	d
GL_RGB16_SNORM	support/glad/glad.h	1272;"	d
GL_RGB32F	support/GLFW/deps/glad/glad.h	1035;"	d
GL_RGB32F	support/glad/glad.h	1032;"	d
GL_RGB32I	support/GLFW/deps/glad/glad.h	1078;"	d
GL_RGB32I	support/glad/glad.h	1075;"	d
GL_RGB32UI	support/GLFW/deps/glad/glad.h	1072;"	d
GL_RGB32UI	support/glad/glad.h	1069;"	d
GL_RGB4	support/GLFW/deps/glad/glad.h	337;"	d
GL_RGB4	support/glad/glad.h	583;"	d
GL_RGB5	support/GLFW/deps/glad/glad.h	338;"	d
GL_RGB5	support/glad/glad.h	584;"	d
GL_RGB5_A1	support/GLFW/deps/glad/glad.h	345;"	d
GL_RGB5_A1	support/glad/glad.h	591;"	d
GL_RGB8	support/GLFW/deps/glad/glad.h	339;"	d
GL_RGB8	support/glad/glad.h	585;"	d
GL_RGB8I	support/GLFW/deps/glad/glad.h	1082;"	d
GL_RGB8I	support/glad/glad.h	1079;"	d
GL_RGB8UI	support/GLFW/deps/glad/glad.h	1076;"	d
GL_RGB8UI	support/glad/glad.h	1073;"	d
GL_RGB8_SNORM	support/GLFW/deps/glad/glad.h	1271;"	d
GL_RGB8_SNORM	support/glad/glad.h	1268;"	d
GL_RGB9_E5	support/GLFW/deps/glad/glad.h	1053;"	d
GL_RGB9_E5	support/glad/glad.h	1050;"	d
GL_RGBA	support/GLFW/deps/glad/glad.h	311;"	d
GL_RGBA	support/glad/glad.h	292;"	d
GL_RGBA12	support/GLFW/deps/glad/glad.h	348;"	d
GL_RGBA12	support/glad/glad.h	594;"	d
GL_RGBA16	support/GLFW/deps/glad/glad.h	349;"	d
GL_RGBA16	support/glad/glad.h	595;"	d
GL_RGBA16F	support/GLFW/deps/glad/glad.h	1036;"	d
GL_RGBA16F	support/glad/glad.h	1033;"	d
GL_RGBA16I	support/GLFW/deps/glad/glad.h	1079;"	d
GL_RGBA16I	support/glad/glad.h	1076;"	d
GL_RGBA16UI	support/GLFW/deps/glad/glad.h	1073;"	d
GL_RGBA16UI	support/glad/glad.h	1070;"	d
GL_RGBA16_SNORM	support/GLFW/deps/glad/glad.h	1276;"	d
GL_RGBA16_SNORM	support/glad/glad.h	1273;"	d
GL_RGBA2	support/GLFW/deps/glad/glad.h	343;"	d
GL_RGBA2	support/glad/glad.h	589;"	d
GL_RGBA32F	support/GLFW/deps/glad/glad.h	1034;"	d
GL_RGBA32F	support/glad/glad.h	1031;"	d
GL_RGBA32I	support/GLFW/deps/glad/glad.h	1077;"	d
GL_RGBA32I	support/glad/glad.h	1074;"	d
GL_RGBA32UI	support/GLFW/deps/glad/glad.h	1071;"	d
GL_RGBA32UI	support/glad/glad.h	1068;"	d
GL_RGBA4	support/GLFW/deps/glad/glad.h	344;"	d
GL_RGBA4	support/glad/glad.h	590;"	d
GL_RGBA8	support/GLFW/deps/glad/glad.h	346;"	d
GL_RGBA8	support/glad/glad.h	592;"	d
GL_RGBA8I	support/GLFW/deps/glad/glad.h	1081;"	d
GL_RGBA8I	support/glad/glad.h	1078;"	d
GL_RGBA8UI	support/GLFW/deps/glad/glad.h	1075;"	d
GL_RGBA8UI	support/glad/glad.h	1072;"	d
GL_RGBA8_SNORM	support/GLFW/deps/glad/glad.h	1272;"	d
GL_RGBA8_SNORM	support/glad/glad.h	1269;"	d
GL_RGBA_INTEGER	support/GLFW/deps/glad/glad.h	1087;"	d
GL_RGBA_INTEGER	support/glad/glad.h	1084;"	d
GL_RGBA_MODE	support/GLFW/deps/glad/glad.h	473;"	d
GL_RGBA_MODE	support/glad/glad.h	425;"	d
GL_RGB_INTEGER	support/GLFW/deps/glad/glad.h	1086;"	d
GL_RGB_INTEGER	support/glad/glad.h	1083;"	d
GL_RGB_SCALE	support/GLFW/deps/glad/glad.h	803;"	d
GL_RGB_SCALE	support/glad/glad.h	798;"	d
GL_RG_INTEGER	support/GLFW/deps/glad/glad.h	1229;"	d
GL_RG_INTEGER	support/glad/glad.h	1226;"	d
GL_RIGHT	support/GLFW/deps/glad/glad.h	187;"	d
GL_RIGHT	support/glad/glad.h	182;"	d
GL_S	support/GLFW/deps/glad/glad.h	612;"	d
GL_S	support/glad/glad.h	536;"	d
GL_SAMPLER_1D	support/GLFW/deps/glad/glad.h	964;"	d
GL_SAMPLER_1D	support/glad/glad.h	961;"	d
GL_SAMPLER_1D_ARRAY	support/GLFW/deps/glad/glad.h	1090;"	d
GL_SAMPLER_1D_ARRAY	support/glad/glad.h	1087;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	support/GLFW/deps/glad/glad.h	1092;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	support/glad/glad.h	1089;"	d
GL_SAMPLER_1D_SHADOW	support/GLFW/deps/glad/glad.h	968;"	d
GL_SAMPLER_1D_SHADOW	support/glad/glad.h	965;"	d
GL_SAMPLER_2D	support/GLFW/deps/glad/glad.h	965;"	d
GL_SAMPLER_2D	support/glad/glad.h	962;"	d
GL_SAMPLER_2D_ARRAY	support/GLFW/deps/glad/glad.h	1091;"	d
GL_SAMPLER_2D_ARRAY	support/glad/glad.h	1088;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	support/GLFW/deps/glad/glad.h	1093;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	support/glad/glad.h	1090;"	d
GL_SAMPLER_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1370;"	d
GL_SAMPLER_2D_MULTISAMPLE	support/glad/glad.h	1367;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1373;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1370;"	d
GL_SAMPLER_2D_RECT	support/GLFW/deps/glad/glad.h	1254;"	d
GL_SAMPLER_2D_RECT	support/glad/glad.h	1251;"	d
GL_SAMPLER_2D_RECT_SHADOW	support/GLFW/deps/glad/glad.h	1255;"	d
GL_SAMPLER_2D_RECT_SHADOW	support/glad/glad.h	1252;"	d
GL_SAMPLER_2D_SHADOW	support/GLFW/deps/glad/glad.h	969;"	d
GL_SAMPLER_2D_SHADOW	support/glad/glad.h	966;"	d
GL_SAMPLER_3D	support/GLFW/deps/glad/glad.h	966;"	d
GL_SAMPLER_3D	support/glad/glad.h	963;"	d
GL_SAMPLER_BINDING	support/glad/glad.h	1382;"	d
GL_SAMPLER_BUFFER	support/GLFW/deps/glad/glad.h	1256;"	d
GL_SAMPLER_BUFFER	support/glad/glad.h	1253;"	d
GL_SAMPLER_CUBE	support/GLFW/deps/glad/glad.h	967;"	d
GL_SAMPLER_CUBE	support/glad/glad.h	964;"	d
GL_SAMPLER_CUBE_SHADOW	support/GLFW/deps/glad/glad.h	1094;"	d
GL_SAMPLER_CUBE_SHADOW	support/glad/glad.h	1091;"	d
GL_SAMPLES	support/GLFW/deps/glad/glad.h	754;"	d
GL_SAMPLES	support/glad/glad.h	749;"	d
GL_SAMPLES_ARB	support/GLFW/deps/glad/glad.h	3429;"	d
GL_SAMPLES_PASSED	support/GLFW/deps/glad/glad.h	886;"	d
GL_SAMPLES_PASSED	support/glad/glad.h	883;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	support/GLFW/deps/glad/glad.h	750;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	support/glad/glad.h	745;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE_ARB	support/GLFW/deps/glad/glad.h	3425;"	d
GL_SAMPLE_ALPHA_TO_ONE	support/GLFW/deps/glad/glad.h	751;"	d
GL_SAMPLE_ALPHA_TO_ONE	support/glad/glad.h	746;"	d
GL_SAMPLE_ALPHA_TO_ONE_ARB	support/GLFW/deps/glad/glad.h	3426;"	d
GL_SAMPLE_BUFFERS	support/GLFW/deps/glad/glad.h	753;"	d
GL_SAMPLE_BUFFERS	support/glad/glad.h	748;"	d
GL_SAMPLE_BUFFERS_ARB	support/GLFW/deps/glad/glad.h	3428;"	d
GL_SAMPLE_COVERAGE	support/GLFW/deps/glad/glad.h	752;"	d
GL_SAMPLE_COVERAGE	support/glad/glad.h	747;"	d
GL_SAMPLE_COVERAGE_ARB	support/GLFW/deps/glad/glad.h	3427;"	d
GL_SAMPLE_COVERAGE_INVERT	support/GLFW/deps/glad/glad.h	756;"	d
GL_SAMPLE_COVERAGE_INVERT	support/glad/glad.h	751;"	d
GL_SAMPLE_COVERAGE_INVERT_ARB	support/GLFW/deps/glad/glad.h	3431;"	d
GL_SAMPLE_COVERAGE_VALUE	support/GLFW/deps/glad/glad.h	755;"	d
GL_SAMPLE_COVERAGE_VALUE	support/glad/glad.h	750;"	d
GL_SAMPLE_COVERAGE_VALUE_ARB	support/GLFW/deps/glad/glad.h	3430;"	d
GL_SAMPLE_MASK	support/GLFW/deps/glad/glad.h	1359;"	d
GL_SAMPLE_MASK	support/glad/glad.h	1356;"	d
GL_SAMPLE_MASK_VALUE	support/GLFW/deps/glad/glad.h	1360;"	d
GL_SAMPLE_MASK_VALUE	support/glad/glad.h	1357;"	d
GL_SAMPLE_POSITION	support/GLFW/deps/glad/glad.h	1358;"	d
GL_SAMPLE_POSITION	support/glad/glad.h	1355;"	d
GL_SCISSOR_BIT	support/GLFW/deps/glad/glad.h	366;"	d
GL_SCISSOR_BIT	support/glad/glad.h	331;"	d
GL_SCISSOR_BOX	support/GLFW/deps/glad/glad.h	231;"	d
GL_SCISSOR_BOX	support/glad/glad.h	225;"	d
GL_SCISSOR_TEST	support/GLFW/deps/glad/glad.h	232;"	d
GL_SCISSOR_TEST	support/glad/glad.h	226;"	d
GL_SECONDARY_COLOR_ARRAY	support/GLFW/deps/glad/glad.h	847;"	d
GL_SECONDARY_COLOR_ARRAY	support/glad/glad.h	842;"	d
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	894;"	d
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING	support/glad/glad.h	891;"	d
GL_SECONDARY_COLOR_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	846;"	d
GL_SECONDARY_COLOR_ARRAY_POINTER	support/glad/glad.h	841;"	d
GL_SECONDARY_COLOR_ARRAY_SIZE	support/GLFW/deps/glad/glad.h	843;"	d
GL_SECONDARY_COLOR_ARRAY_SIZE	support/glad/glad.h	838;"	d
GL_SECONDARY_COLOR_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	845;"	d
GL_SECONDARY_COLOR_ARRAY_STRIDE	support/glad/glad.h	840;"	d
GL_SECONDARY_COLOR_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	844;"	d
GL_SECONDARY_COLOR_ARRAY_TYPE	support/glad/glad.h	839;"	d
GL_SELECT	support/GLFW/deps/glad/glad.h	609;"	d
GL_SELECT	support/glad/glad.h	533;"	d
GL_SELECTION_BUFFER_POINTER	support/GLFW/deps/glad/glad.h	417;"	d
GL_SELECTION_BUFFER_POINTER	support/glad/glad.h	606;"	d
GL_SELECTION_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	555;"	d
GL_SELECTION_BUFFER_SIZE	support/glad/glad.h	612;"	d
GL_SEPARATE_ATTRIBS	support/GLFW/deps/glad/glad.h	1068;"	d
GL_SEPARATE_ATTRIBS	support/glad/glad.h	1065;"	d
GL_SEPARATE_SPECULAR_COLOR	support/GLFW/deps/glad/glad.h	714;"	d
GL_SEPARATE_SPECULAR_COLOR	support/glad/glad.h	709;"	d
GL_SEPARATE_SPECULAR_COLOR_EXT	support/GLFW/deps/glad/glad.h	3423;"	d
GL_SET	support/GLFW/deps/glad/glad.h	299;"	d
GL_SET	support/glad/glad.h	280;"	d
GL_SHADER_SOURCE_LENGTH	support/GLFW/deps/glad/glad.h	978;"	d
GL_SHADER_SOURCE_LENGTH	support/glad/glad.h	975;"	d
GL_SHADER_TYPE	support/GLFW/deps/glad/glad.h	950;"	d
GL_SHADER_TYPE	support/glad/glad.h	947;"	d
GL_SHADE_MODEL	support/GLFW/deps/glad/glad.h	442;"	d
GL_SHADE_MODEL	support/glad/glad.h	396;"	d
GL_SHADING_LANGUAGE_VERSION	support/GLFW/deps/glad/glad.h	982;"	d
GL_SHADING_LANGUAGE_VERSION	support/glad/glad.h	979;"	d
GL_SHININESS	support/GLFW/deps/glad/glad.h	598;"	d
GL_SHININESS	support/glad/glad.h	522;"	d
GL_SHORT	support/GLFW/deps/glad/glad.h	276;"	d
GL_SHORT	support/glad/glad.h	258;"	d
GL_SIGNALED	support/GLFW/deps/glad/glad.h	1351;"	d
GL_SIGNALED	support/glad/glad.h	1348;"	d
GL_SIGNED_NORMALIZED	support/GLFW/deps/glad/glad.h	1277;"	d
GL_SIGNED_NORMALIZED	support/glad/glad.h	1274;"	d
GL_SINGLE_COLOR	support/GLFW/deps/glad/glad.h	713;"	d
GL_SINGLE_COLOR	support/glad/glad.h	708;"	d
GL_SINGLE_COLOR_EXT	support/GLFW/deps/glad/glad.h	3422;"	d
GL_SLUMINANCE	support/GLFW/deps/glad/glad.h	1013;"	d
GL_SLUMINANCE	support/glad/glad.h	1010;"	d
GL_SLUMINANCE8	support/GLFW/deps/glad/glad.h	1014;"	d
GL_SLUMINANCE8	support/glad/glad.h	1011;"	d
GL_SLUMINANCE8_ALPHA8	support/GLFW/deps/glad/glad.h	1012;"	d
GL_SLUMINANCE8_ALPHA8	support/glad/glad.h	1009;"	d
GL_SLUMINANCE_ALPHA	support/GLFW/deps/glad/glad.h	1011;"	d
GL_SLUMINANCE_ALPHA	support/glad/glad.h	1008;"	d
GL_SMOOTH	support/GLFW/deps/glad/glad.h	611;"	d
GL_SMOOTH	support/glad/glad.h	535;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	support/GLFW/deps/glad/glad.h	709;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	support/glad/glad.h	704;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	support/GLFW/deps/glad/glad.h	708;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	support/glad/glad.h	703;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	support/GLFW/deps/glad/glad.h	707;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	support/glad/glad.h	702;"	d
GL_SMOOTH_POINT_SIZE_RANGE	support/GLFW/deps/glad/glad.h	706;"	d
GL_SMOOTH_POINT_SIZE_RANGE	support/glad/glad.h	701;"	d
GL_SOURCE0_ALPHA	support/GLFW/deps/glad/glad.h	794;"	d
GL_SOURCE0_ALPHA	support/glad/glad.h	789;"	d
GL_SOURCE0_RGB	support/GLFW/deps/glad/glad.h	791;"	d
GL_SOURCE0_RGB	support/glad/glad.h	786;"	d
GL_SOURCE1_ALPHA	support/GLFW/deps/glad/glad.h	795;"	d
GL_SOURCE1_ALPHA	support/glad/glad.h	790;"	d
GL_SOURCE1_RGB	support/GLFW/deps/glad/glad.h	792;"	d
GL_SOURCE1_RGB	support/glad/glad.h	787;"	d
GL_SOURCE2_ALPHA	support/GLFW/deps/glad/glad.h	796;"	d
GL_SOURCE2_ALPHA	support/glad/glad.h	791;"	d
GL_SOURCE2_RGB	support/GLFW/deps/glad/glad.h	793;"	d
GL_SOURCE2_RGB	support/glad/glad.h	788;"	d
GL_SPECULAR	support/GLFW/deps/glad/glad.h	584;"	d
GL_SPECULAR	support/glad/glad.h	508;"	d
GL_SPHERE_MAP	support/GLFW/deps/glad/glad.h	623;"	d
GL_SPHERE_MAP	support/glad/glad.h	547;"	d
GL_SPOT_CUTOFF	support/GLFW/deps/glad/glad.h	588;"	d
GL_SPOT_CUTOFF	support/glad/glad.h	512;"	d
GL_SPOT_DIRECTION	support/GLFW/deps/glad/glad.h	586;"	d
GL_SPOT_DIRECTION	support/glad/glad.h	510;"	d
GL_SPOT_EXPONENT	support/GLFW/deps/glad/glad.h	587;"	d
GL_SPOT_EXPONENT	support/glad/glad.h	511;"	d
GL_SRC0_ALPHA	support/GLFW/deps/glad/glad.h	908;"	d
GL_SRC0_ALPHA	support/glad/glad.h	905;"	d
GL_SRC0_RGB	support/GLFW/deps/glad/glad.h	905;"	d
GL_SRC0_RGB	support/glad/glad.h	902;"	d
GL_SRC1_ALPHA	support/GLFW/deps/glad/glad.h	887;"	d
GL_SRC1_ALPHA	support/glad/glad.h	884;"	d
GL_SRC1_COLOR	support/glad/glad.h	1377;"	d
GL_SRC1_RGB	support/GLFW/deps/glad/glad.h	906;"	d
GL_SRC1_RGB	support/glad/glad.h	903;"	d
GL_SRC2_ALPHA	support/GLFW/deps/glad/glad.h	909;"	d
GL_SRC2_ALPHA	support/glad/glad.h	906;"	d
GL_SRC2_RGB	support/GLFW/deps/glad/glad.h	907;"	d
GL_SRC2_RGB	support/glad/glad.h	904;"	d
GL_SRC_ALPHA	support/GLFW/deps/glad/glad.h	172;"	d
GL_SRC_ALPHA	support/glad/glad.h	167;"	d
GL_SRC_ALPHA_SATURATE	support/GLFW/deps/glad/glad.h	178;"	d
GL_SRC_ALPHA_SATURATE	support/glad/glad.h	173;"	d
GL_SRC_COLOR	support/GLFW/deps/glad/glad.h	170;"	d
GL_SRC_COLOR	support/glad/glad.h	165;"	d
GL_SRGB	support/GLFW/deps/glad/glad.h	1004;"	d
GL_SRGB	support/glad/glad.h	1001;"	d
GL_SRGB8	support/GLFW/deps/glad/glad.h	1005;"	d
GL_SRGB8	support/glad/glad.h	1002;"	d
GL_SRGB8_ALPHA8	support/GLFW/deps/glad/glad.h	1007;"	d
GL_SRGB8_ALPHA8	support/glad/glad.h	1004;"	d
GL_SRGB_ALPHA	support/GLFW/deps/glad/glad.h	1006;"	d
GL_SRGB_ALPHA	support/glad/glad.h	1003;"	d
GL_STACK_OVERFLOW	support/GLFW/deps/glad/glad.h	282;"	d
GL_STACK_OVERFLOW	support/glad/glad.h	263;"	d
GL_STACK_UNDERFLOW	support/GLFW/deps/glad/glad.h	283;"	d
GL_STACK_UNDERFLOW	support/glad/glad.h	264;"	d
GL_STATIC_COPY	support/GLFW/deps/glad/glad.h	882;"	d
GL_STATIC_COPY	support/glad/glad.h	879;"	d
GL_STATIC_DRAW	support/GLFW/deps/glad/glad.h	880;"	d
GL_STATIC_DRAW	support/glad/glad.h	877;"	d
GL_STATIC_READ	support/GLFW/deps/glad/glad.h	881;"	d
GL_STATIC_READ	support/glad/glad.h	878;"	d
GL_STENCIL	support/GLFW/deps/glad/glad.h	303;"	d
GL_STENCIL	support/glad/glad.h	284;"	d
GL_STENCIL_ATTACHMENT	support/GLFW/deps/glad/glad.h	1195;"	d
GL_STENCIL_ATTACHMENT	support/glad/glad.h	1192;"	d
GL_STENCIL_BACK_FAIL	support/GLFW/deps/glad/glad.h	919;"	d
GL_STENCIL_BACK_FAIL	support/glad/glad.h	916;"	d
GL_STENCIL_BACK_FUNC	support/GLFW/deps/glad/glad.h	918;"	d
GL_STENCIL_BACK_FUNC	support/glad/glad.h	915;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	support/GLFW/deps/glad/glad.h	920;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	support/glad/glad.h	917;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	support/GLFW/deps/glad/glad.h	921;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	support/glad/glad.h	918;"	d
GL_STENCIL_BACK_REF	support/GLFW/deps/glad/glad.h	987;"	d
GL_STENCIL_BACK_REF	support/glad/glad.h	984;"	d
GL_STENCIL_BACK_VALUE_MASK	support/GLFW/deps/glad/glad.h	988;"	d
GL_STENCIL_BACK_VALUE_MASK	support/glad/glad.h	985;"	d
GL_STENCIL_BACK_WRITEMASK	support/GLFW/deps/glad/glad.h	989;"	d
GL_STENCIL_BACK_WRITEMASK	support/glad/glad.h	986;"	d
GL_STENCIL_BITS	support/GLFW/deps/glad/glad.h	524;"	d
GL_STENCIL_BITS	support/glad/glad.h	475;"	d
GL_STENCIL_BUFFER_BIT	support/GLFW/deps/glad/glad.h	148;"	d
GL_STENCIL_BUFFER_BIT	support/glad/glad.h	143;"	d
GL_STENCIL_CLEAR_VALUE	support/GLFW/deps/glad/glad.h	214;"	d
GL_STENCIL_CLEAR_VALUE	support/glad/glad.h	209;"	d
GL_STENCIL_FAIL	support/GLFW/deps/glad/glad.h	217;"	d
GL_STENCIL_FAIL	support/glad/glad.h	212;"	d
GL_STENCIL_FUNC	support/GLFW/deps/glad/glad.h	215;"	d
GL_STENCIL_FUNC	support/glad/glad.h	210;"	d
GL_STENCIL_INDEX	support/GLFW/deps/glad/glad.h	304;"	d
GL_STENCIL_INDEX	support/glad/glad.h	285;"	d
GL_STENCIL_INDEX1	support/GLFW/deps/glad/glad.h	1201;"	d
GL_STENCIL_INDEX1	support/glad/glad.h	1198;"	d
GL_STENCIL_INDEX16	support/GLFW/deps/glad/glad.h	1204;"	d
GL_STENCIL_INDEX16	support/glad/glad.h	1201;"	d
GL_STENCIL_INDEX4	support/GLFW/deps/glad/glad.h	1202;"	d
GL_STENCIL_INDEX4	support/glad/glad.h	1199;"	d
GL_STENCIL_INDEX8	support/GLFW/deps/glad/glad.h	1203;"	d
GL_STENCIL_INDEX8	support/glad/glad.h	1200;"	d
GL_STENCIL_PASS_DEPTH_FAIL	support/GLFW/deps/glad/glad.h	218;"	d
GL_STENCIL_PASS_DEPTH_FAIL	support/glad/glad.h	213;"	d
GL_STENCIL_PASS_DEPTH_PASS	support/GLFW/deps/glad/glad.h	219;"	d
GL_STENCIL_PASS_DEPTH_PASS	support/glad/glad.h	214;"	d
GL_STENCIL_REF	support/GLFW/deps/glad/glad.h	220;"	d
GL_STENCIL_REF	support/glad/glad.h	215;"	d
GL_STENCIL_TEST	support/GLFW/deps/glad/glad.h	213;"	d
GL_STENCIL_TEST	support/glad/glad.h	208;"	d
GL_STENCIL_VALUE_MASK	support/GLFW/deps/glad/glad.h	216;"	d
GL_STENCIL_VALUE_MASK	support/glad/glad.h	211;"	d
GL_STENCIL_WRITEMASK	support/GLFW/deps/glad/glad.h	221;"	d
GL_STENCIL_WRITEMASK	support/glad/glad.h	216;"	d
GL_STEREO	support/GLFW/deps/glad/glad.h	236;"	d
GL_STEREO	support/glad/glad.h	230;"	d
GL_STREAM_COPY	support/GLFW/deps/glad/glad.h	879;"	d
GL_STREAM_COPY	support/glad/glad.h	876;"	d
GL_STREAM_DRAW	support/GLFW/deps/glad/glad.h	877;"	d
GL_STREAM_DRAW	support/glad/glad.h	874;"	d
GL_STREAM_READ	support/GLFW/deps/glad/glad.h	878;"	d
GL_STREAM_READ	support/glad/glad.h	875;"	d
GL_SUBPIXEL_BITS	support/GLFW/deps/glad/glad.h	253;"	d
GL_SUBPIXEL_BITS	support/glad/glad.h	247;"	d
GL_SUBTRACT	support/GLFW/deps/glad/glad.h	806;"	d
GL_SUBTRACT	support/glad/glad.h	801;"	d
GL_SYNC_CONDITION	support/GLFW/deps/glad/glad.h	1345;"	d
GL_SYNC_CONDITION	support/glad/glad.h	1342;"	d
GL_SYNC_FENCE	support/GLFW/deps/glad/glad.h	1348;"	d
GL_SYNC_FENCE	support/glad/glad.h	1345;"	d
GL_SYNC_FLAGS	support/GLFW/deps/glad/glad.h	1347;"	d
GL_SYNC_FLAGS	support/glad/glad.h	1344;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	support/GLFW/deps/glad/glad.h	1357;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	support/glad/glad.h	1354;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	support/GLFW/deps/glad/glad.h	1349;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	support/glad/glad.h	1346;"	d
GL_SYNC_STATUS	support/GLFW/deps/glad/glad.h	1346;"	d
GL_SYNC_STATUS	support/glad/glad.h	1343;"	d
GL_T	support/GLFW/deps/glad/glad.h	613;"	d
GL_T	support/glad/glad.h	537;"	d
GL_T2F_C3F_V3F	support/GLFW/deps/glad/glad.h	657;"	d
GL_T2F_C3F_V3F	support/glad/glad.h	666;"	d
GL_T2F_C4F_N3F_V3F	support/GLFW/deps/glad/glad.h	659;"	d
GL_T2F_C4F_N3F_V3F	support/glad/glad.h	668;"	d
GL_T2F_C4UB_V3F	support/GLFW/deps/glad/glad.h	656;"	d
GL_T2F_C4UB_V3F	support/glad/glad.h	665;"	d
GL_T2F_N3F_V3F	support/GLFW/deps/glad/glad.h	658;"	d
GL_T2F_N3F_V3F	support/glad/glad.h	667;"	d
GL_T2F_V3F	support/GLFW/deps/glad/glad.h	654;"	d
GL_T2F_V3F	support/glad/glad.h	663;"	d
GL_T4F_C4F_N3F_V4F	support/GLFW/deps/glad/glad.h	660;"	d
GL_T4F_C4F_N3F_V4F	support/glad/glad.h	669;"	d
GL_T4F_V4F	support/GLFW/deps/glad/glad.h	655;"	d
GL_T4F_V4F	support/glad/glad.h	664;"	d
GL_TEXTURE	support/GLFW/deps/glad/glad.h	300;"	d
GL_TEXTURE	support/glad/glad.h	281;"	d
GL_TEXTURE0	support/GLFW/deps/glad/glad.h	716;"	d
GL_TEXTURE0	support/glad/glad.h	711;"	d
GL_TEXTURE1	support/GLFW/deps/glad/glad.h	717;"	d
GL_TEXTURE1	support/glad/glad.h	712;"	d
GL_TEXTURE10	support/GLFW/deps/glad/glad.h	726;"	d
GL_TEXTURE10	support/glad/glad.h	721;"	d
GL_TEXTURE11	support/GLFW/deps/glad/glad.h	727;"	d
GL_TEXTURE11	support/glad/glad.h	722;"	d
GL_TEXTURE12	support/GLFW/deps/glad/glad.h	728;"	d
GL_TEXTURE12	support/glad/glad.h	723;"	d
GL_TEXTURE13	support/GLFW/deps/glad/glad.h	729;"	d
GL_TEXTURE13	support/glad/glad.h	724;"	d
GL_TEXTURE14	support/GLFW/deps/glad/glad.h	730;"	d
GL_TEXTURE14	support/glad/glad.h	725;"	d
GL_TEXTURE15	support/GLFW/deps/glad/glad.h	731;"	d
GL_TEXTURE15	support/glad/glad.h	726;"	d
GL_TEXTURE16	support/GLFW/deps/glad/glad.h	732;"	d
GL_TEXTURE16	support/glad/glad.h	727;"	d
GL_TEXTURE17	support/GLFW/deps/glad/glad.h	733;"	d
GL_TEXTURE17	support/glad/glad.h	728;"	d
GL_TEXTURE18	support/GLFW/deps/glad/glad.h	734;"	d
GL_TEXTURE18	support/glad/glad.h	729;"	d
GL_TEXTURE19	support/GLFW/deps/glad/glad.h	735;"	d
GL_TEXTURE19	support/glad/glad.h	730;"	d
GL_TEXTURE2	support/GLFW/deps/glad/glad.h	718;"	d
GL_TEXTURE2	support/glad/glad.h	713;"	d
GL_TEXTURE20	support/GLFW/deps/glad/glad.h	736;"	d
GL_TEXTURE20	support/glad/glad.h	731;"	d
GL_TEXTURE21	support/GLFW/deps/glad/glad.h	737;"	d
GL_TEXTURE21	support/glad/glad.h	732;"	d
GL_TEXTURE22	support/GLFW/deps/glad/glad.h	738;"	d
GL_TEXTURE22	support/glad/glad.h	733;"	d
GL_TEXTURE23	support/GLFW/deps/glad/glad.h	739;"	d
GL_TEXTURE23	support/glad/glad.h	734;"	d
GL_TEXTURE24	support/GLFW/deps/glad/glad.h	740;"	d
GL_TEXTURE24	support/glad/glad.h	735;"	d
GL_TEXTURE25	support/GLFW/deps/glad/glad.h	741;"	d
GL_TEXTURE25	support/glad/glad.h	736;"	d
GL_TEXTURE26	support/GLFW/deps/glad/glad.h	742;"	d
GL_TEXTURE26	support/glad/glad.h	737;"	d
GL_TEXTURE27	support/GLFW/deps/glad/glad.h	743;"	d
GL_TEXTURE27	support/glad/glad.h	738;"	d
GL_TEXTURE28	support/GLFW/deps/glad/glad.h	744;"	d
GL_TEXTURE28	support/glad/glad.h	739;"	d
GL_TEXTURE29	support/GLFW/deps/glad/glad.h	745;"	d
GL_TEXTURE29	support/glad/glad.h	740;"	d
GL_TEXTURE3	support/GLFW/deps/glad/glad.h	719;"	d
GL_TEXTURE3	support/glad/glad.h	714;"	d
GL_TEXTURE30	support/GLFW/deps/glad/glad.h	746;"	d
GL_TEXTURE30	support/glad/glad.h	741;"	d
GL_TEXTURE31	support/GLFW/deps/glad/glad.h	747;"	d
GL_TEXTURE31	support/glad/glad.h	742;"	d
GL_TEXTURE4	support/GLFW/deps/glad/glad.h	720;"	d
GL_TEXTURE4	support/glad/glad.h	715;"	d
GL_TEXTURE5	support/GLFW/deps/glad/glad.h	721;"	d
GL_TEXTURE5	support/glad/glad.h	716;"	d
GL_TEXTURE6	support/GLFW/deps/glad/glad.h	722;"	d
GL_TEXTURE6	support/glad/glad.h	717;"	d
GL_TEXTURE7	support/GLFW/deps/glad/glad.h	723;"	d
GL_TEXTURE7	support/glad/glad.h	718;"	d
GL_TEXTURE8	support/GLFW/deps/glad/glad.h	724;"	d
GL_TEXTURE8	support/glad/glad.h	719;"	d
GL_TEXTURE9	support/GLFW/deps/glad/glad.h	725;"	d
GL_TEXTURE9	support/glad/glad.h	720;"	d
GL_TEXTURE_1D	support/GLFW/deps/glad/glad.h	254;"	d
GL_TEXTURE_1D	support/glad/glad.h	248;"	d
GL_TEXTURE_1D_ARRAY	support/GLFW/deps/glad/glad.h	1045;"	d
GL_TEXTURE_1D_ARRAY	support/glad/glad.h	1042;"	d
GL_TEXTURE_2D	support/GLFW/deps/glad/glad.h	255;"	d
GL_TEXTURE_2D	support/glad/glad.h	249;"	d
GL_TEXTURE_2D_ARRAY	support/GLFW/deps/glad/glad.h	1047;"	d
GL_TEXTURE_2D_ARRAY	support/glad/glad.h	1044;"	d
GL_TEXTURE_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1362;"	d
GL_TEXTURE_2D_MULTISAMPLE	support/glad/glad.h	1359;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1364;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1361;"	d
GL_TEXTURE_3D	support/GLFW/deps/glad/glad.h	685;"	d
GL_TEXTURE_3D	support/glad/glad.h	680;"	d
GL_TEXTURE_ALPHA_SIZE	support/GLFW/deps/glad/glad.h	270;"	d
GL_TEXTURE_ALPHA_SIZE	support/glad/glad.h	578;"	d
GL_TEXTURE_ALPHA_TYPE	support/GLFW/deps/glad/glad.h	1140;"	d
GL_TEXTURE_ALPHA_TYPE	support/glad/glad.h	1137;"	d
GL_TEXTURE_BASE_LEVEL	support/GLFW/deps/glad/glad.h	704;"	d
GL_TEXTURE_BASE_LEVEL	support/glad/glad.h	699;"	d
GL_TEXTURE_BINDING_1D	support/GLFW/deps/glad/glad.h	261;"	d
GL_TEXTURE_BINDING_1D	support/glad/glad.h	572;"	d
GL_TEXTURE_BINDING_1D_ARRAY	support/GLFW/deps/glad/glad.h	1049;"	d
GL_TEXTURE_BINDING_1D_ARRAY	support/glad/glad.h	1046;"	d
GL_TEXTURE_BINDING_2D	support/GLFW/deps/glad/glad.h	262;"	d
GL_TEXTURE_BINDING_2D	support/glad/glad.h	573;"	d
GL_TEXTURE_BINDING_2D_ARRAY	support/GLFW/deps/glad/glad.h	1050;"	d
GL_TEXTURE_BINDING_2D_ARRAY	support/glad/glad.h	1047;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1366;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	support/glad/glad.h	1363;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1367;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1364;"	d
GL_TEXTURE_BINDING_3D	support/GLFW/deps/glad/glad.h	680;"	d
GL_TEXTURE_BINDING_3D	support/glad/glad.h	675;"	d
GL_TEXTURE_BINDING_BUFFER	support/GLFW/deps/glad/glad.h	1263;"	d
GL_TEXTURE_BINDING_BUFFER	support/glad/glad.h	1260;"	d
GL_TEXTURE_BINDING_CUBE_MAP	support/GLFW/deps/glad/glad.h	758;"	d
GL_TEXTURE_BINDING_CUBE_MAP	support/glad/glad.h	753;"	d
GL_TEXTURE_BINDING_RECTANGLE	support/GLFW/deps/glad/glad.h	1266;"	d
GL_TEXTURE_BINDING_RECTANGLE	support/glad/glad.h	1263;"	d
GL_TEXTURE_BIT	support/GLFW/deps/glad/glad.h	365;"	d
GL_TEXTURE_BIT	support/glad/glad.h	330;"	d
GL_TEXTURE_BLUE_SIZE	support/GLFW/deps/glad/glad.h	269;"	d
GL_TEXTURE_BLUE_SIZE	support/glad/glad.h	577;"	d
GL_TEXTURE_BLUE_TYPE	support/GLFW/deps/glad/glad.h	1139;"	d
GL_TEXTURE_BLUE_TYPE	support/glad/glad.h	1136;"	d
GL_TEXTURE_BORDER	support/GLFW/deps/glad/glad.h	577;"	d
GL_TEXTURE_BORDER	support/glad/glad.h	505;"	d
GL_TEXTURE_BORDER_COLOR	support/GLFW/deps/glad/glad.h	266;"	d
GL_TEXTURE_BORDER_COLOR	support/glad/glad.h	252;"	d
GL_TEXTURE_BUFFER	support/GLFW/deps/glad/glad.h	1261;"	d
GL_TEXTURE_BUFFER	support/glad/glad.h	1258;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	support/GLFW/deps/glad/glad.h	1264;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	support/glad/glad.h	1261;"	d
GL_TEXTURE_COMPARE_FUNC	support/GLFW/deps/glad/glad.h	827;"	d
GL_TEXTURE_COMPARE_FUNC	support/glad/glad.h	822;"	d
GL_TEXTURE_COMPARE_MODE	support/GLFW/deps/glad/glad.h	826;"	d
GL_TEXTURE_COMPARE_MODE	support/glad/glad.h	821;"	d
GL_TEXTURE_COMPONENTS	support/GLFW/deps/glad/glad.h	576;"	d
GL_TEXTURE_COMPONENTS	support/glad/glad.h	504;"	d
GL_TEXTURE_COMPRESSED	support/GLFW/deps/glad/glad.h	771;"	d
GL_TEXTURE_COMPRESSED	support/glad/glad.h	766;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	support/GLFW/deps/glad/glad.h	770;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	support/glad/glad.h	765;"	d
GL_TEXTURE_COMPRESSION_HINT	support/GLFW/deps/glad/glad.h	769;"	d
GL_TEXTURE_COMPRESSION_HINT	support/glad/glad.h	764;"	d
GL_TEXTURE_COORD_ARRAY	support/GLFW/deps/glad/glad.h	560;"	d
GL_TEXTURE_COORD_ARRAY	support/glad/glad.h	617;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	892;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	support/glad/glad.h	889;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	414;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	support/glad/glad.h	603;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	support/GLFW/deps/glad/glad.h	572;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	support/glad/glad.h	629;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	574;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	support/glad/glad.h	631;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	573;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	support/glad/glad.h	630;"	d
GL_TEXTURE_CUBE_MAP	support/GLFW/deps/glad/glad.h	757;"	d
GL_TEXTURE_CUBE_MAP	support/glad/glad.h	752;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	support/GLFW/deps/glad/glad.h	760;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	support/glad/glad.h	755;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	support/GLFW/deps/glad/glad.h	762;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	support/glad/glad.h	757;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	support/GLFW/deps/glad/glad.h	764;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	support/glad/glad.h	759;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	support/GLFW/deps/glad/glad.h	759;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	support/glad/glad.h	754;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	support/GLFW/deps/glad/glad.h	761;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	support/glad/glad.h	756;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	support/GLFW/deps/glad/glad.h	763;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	support/glad/glad.h	758;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	support/GLFW/deps/glad/glad.h	1342;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	support/glad/glad.h	1339;"	d
GL_TEXTURE_DEPTH	support/GLFW/deps/glad/glad.h	687;"	d
GL_TEXTURE_DEPTH	support/glad/glad.h	682;"	d
GL_TEXTURE_DEPTH_SIZE	support/GLFW/deps/glad/glad.h	825;"	d
GL_TEXTURE_DEPTH_SIZE	support/glad/glad.h	820;"	d
GL_TEXTURE_DEPTH_TYPE	support/GLFW/deps/glad/glad.h	1141;"	d
GL_TEXTURE_DEPTH_TYPE	support/glad/glad.h	1138;"	d
GL_TEXTURE_ENV	support/GLFW/deps/glad/glad.h	620;"	d
GL_TEXTURE_ENV	support/glad/glad.h	544;"	d
GL_TEXTURE_ENV_COLOR	support/GLFW/deps/glad/glad.h	619;"	d
GL_TEXTURE_ENV_COLOR	support/glad/glad.h	543;"	d
GL_TEXTURE_ENV_MODE	support/GLFW/deps/glad/glad.h	618;"	d
GL_TEXTURE_ENV_MODE	support/glad/glad.h	542;"	d
GL_TEXTURE_FILTER_CONTROL	support/GLFW/deps/glad/glad.h	848;"	d
GL_TEXTURE_FILTER_CONTROL	support/glad/glad.h	843;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	support/GLFW/deps/glad/glad.h	1369;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	support/glad/glad.h	1366;"	d
GL_TEXTURE_GEN_MODE	support/GLFW/deps/glad/glad.h	624;"	d
GL_TEXTURE_GEN_MODE	support/glad/glad.h	548;"	d
GL_TEXTURE_GEN_Q	support/GLFW/deps/glad/glad.h	481;"	d
GL_TEXTURE_GEN_Q	support/glad/glad.h	433;"	d
GL_TEXTURE_GEN_R	support/GLFW/deps/glad/glad.h	480;"	d
GL_TEXTURE_GEN_R	support/glad/glad.h	432;"	d
GL_TEXTURE_GEN_S	support/GLFW/deps/glad/glad.h	478;"	d
GL_TEXTURE_GEN_S	support/glad/glad.h	430;"	d
GL_TEXTURE_GEN_T	support/GLFW/deps/glad/glad.h	479;"	d
GL_TEXTURE_GEN_T	support/glad/glad.h	431;"	d
GL_TEXTURE_GREEN_SIZE	support/GLFW/deps/glad/glad.h	268;"	d
GL_TEXTURE_GREEN_SIZE	support/glad/glad.h	576;"	d
GL_TEXTURE_GREEN_TYPE	support/GLFW/deps/glad/glad.h	1138;"	d
GL_TEXTURE_GREEN_TYPE	support/glad/glad.h	1135;"	d
GL_TEXTURE_HEIGHT	support/GLFW/deps/glad/glad.h	264;"	d
GL_TEXTURE_HEIGHT	support/glad/glad.h	251;"	d
GL_TEXTURE_INTENSITY_SIZE	support/GLFW/deps/glad/glad.h	579;"	d
GL_TEXTURE_INTENSITY_SIZE	support/glad/glad.h	634;"	d
GL_TEXTURE_INTENSITY_TYPE	support/GLFW/deps/glad/glad.h	1215;"	d
GL_TEXTURE_INTENSITY_TYPE	support/glad/glad.h	1212;"	d
GL_TEXTURE_INTERNAL_FORMAT	support/GLFW/deps/glad/glad.h	265;"	d
GL_TEXTURE_INTERNAL_FORMAT	support/glad/glad.h	574;"	d
GL_TEXTURE_LOD_BIAS	support/GLFW/deps/glad/glad.h	822;"	d
GL_TEXTURE_LOD_BIAS	support/glad/glad.h	817;"	d
GL_TEXTURE_LUMINANCE_SIZE	support/GLFW/deps/glad/glad.h	578;"	d
GL_TEXTURE_LUMINANCE_SIZE	support/glad/glad.h	633;"	d
GL_TEXTURE_LUMINANCE_TYPE	support/GLFW/deps/glad/glad.h	1214;"	d
GL_TEXTURE_LUMINANCE_TYPE	support/glad/glad.h	1211;"	d
GL_TEXTURE_MAG_FILTER	support/GLFW/deps/glad/glad.h	329;"	d
GL_TEXTURE_MAG_FILTER	support/glad/glad.h	310;"	d
GL_TEXTURE_MATRIX	support/GLFW/deps/glad/glad.h	461;"	d
GL_TEXTURE_MATRIX	support/glad/glad.h	415;"	d
GL_TEXTURE_MAX_LEVEL	support/GLFW/deps/glad/glad.h	705;"	d
GL_TEXTURE_MAX_LEVEL	support/glad/glad.h	700;"	d
GL_TEXTURE_MAX_LOD	support/GLFW/deps/glad/glad.h	703;"	d
GL_TEXTURE_MAX_LOD	support/glad/glad.h	698;"	d
GL_TEXTURE_MIN_FILTER	support/GLFW/deps/glad/glad.h	330;"	d
GL_TEXTURE_MIN_FILTER	support/glad/glad.h	311;"	d
GL_TEXTURE_MIN_LOD	support/GLFW/deps/glad/glad.h	702;"	d
GL_TEXTURE_MIN_LOD	support/glad/glad.h	697;"	d
GL_TEXTURE_PRIORITY	support/GLFW/deps/glad/glad.h	580;"	d
GL_TEXTURE_PRIORITY	support/glad/glad.h	635;"	d
GL_TEXTURE_RECTANGLE	support/GLFW/deps/glad/glad.h	1265;"	d
GL_TEXTURE_RECTANGLE	support/glad/glad.h	1262;"	d
GL_TEXTURE_RED_SIZE	support/GLFW/deps/glad/glad.h	267;"	d
GL_TEXTURE_RED_SIZE	support/glad/glad.h	575;"	d
GL_TEXTURE_RED_TYPE	support/GLFW/deps/glad/glad.h	1137;"	d
GL_TEXTURE_RED_TYPE	support/glad/glad.h	1134;"	d
GL_TEXTURE_RESIDENT	support/GLFW/deps/glad/glad.h	581;"	d
GL_TEXTURE_RESIDENT	support/glad/glad.h	636;"	d
GL_TEXTURE_SAMPLES	support/GLFW/deps/glad/glad.h	1368;"	d
GL_TEXTURE_SAMPLES	support/glad/glad.h	1365;"	d
GL_TEXTURE_SHARED_SIZE	support/GLFW/deps/glad/glad.h	1055;"	d
GL_TEXTURE_SHARED_SIZE	support/glad/glad.h	1052;"	d
GL_TEXTURE_STACK_DEPTH	support/GLFW/deps/glad/glad.h	458;"	d
GL_TEXTURE_STACK_DEPTH	support/glad/glad.h	412;"	d
GL_TEXTURE_STENCIL_SIZE	support/GLFW/deps/glad/glad.h	1136;"	d
GL_TEXTURE_STENCIL_SIZE	support/glad/glad.h	1133;"	d
GL_TEXTURE_SWIZZLE_A	support/glad/glad.h	1387;"	d
GL_TEXTURE_SWIZZLE_B	support/glad/glad.h	1386;"	d
GL_TEXTURE_SWIZZLE_G	support/glad/glad.h	1385;"	d
GL_TEXTURE_SWIZZLE_R	support/glad/glad.h	1384;"	d
GL_TEXTURE_SWIZZLE_RGBA	support/glad/glad.h	1388;"	d
GL_TEXTURE_WIDTH	support/GLFW/deps/glad/glad.h	263;"	d
GL_TEXTURE_WIDTH	support/glad/glad.h	250;"	d
GL_TEXTURE_WRAP_R	support/GLFW/deps/glad/glad.h	688;"	d
GL_TEXTURE_WRAP_R	support/glad/glad.h	683;"	d
GL_TEXTURE_WRAP_S	support/GLFW/deps/glad/glad.h	331;"	d
GL_TEXTURE_WRAP_S	support/glad/glad.h	312;"	d
GL_TEXTURE_WRAP_T	support/GLFW/deps/glad/glad.h	332;"	d
GL_TEXTURE_WRAP_T	support/glad/glad.h	313;"	d
GL_TIMEOUT_EXPIRED	support/GLFW/deps/glad/glad.h	1353;"	d
GL_TIMEOUT_EXPIRED	support/glad/glad.h	1350;"	d
GL_TIMEOUT_IGNORED	support/GLFW/deps/glad/glad.h	1356;"	d
GL_TIMEOUT_IGNORED	support/glad/glad.h	1353;"	d
GL_TIMESTAMP	support/glad/glad.h	1390;"	d
GL_TIME_ELAPSED	support/glad/glad.h	1389;"	d
GL_TRANSFORM_BIT	support/GLFW/deps/glad/glad.h	360;"	d
GL_TRANSFORM_BIT	support/glad/glad.h	325;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	support/GLFW/deps/glad/glad.h	1069;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	support/glad/glad.h	1066;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	1070;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	support/glad/glad.h	1067;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	support/GLFW/deps/glad/glad.h	1057;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	support/glad/glad.h	1054;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	1061;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	support/glad/glad.h	1058;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	support/GLFW/deps/glad/glad.h	1060;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	support/glad/glad.h	1057;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	support/GLFW/deps/glad/glad.h	1063;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	support/glad/glad.h	1060;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	support/GLFW/deps/glad/glad.h	1059;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	support/glad/glad.h	1056;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	support/GLFW/deps/glad/glad.h	1056;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	support/glad/glad.h	1053;"	d
GL_TRANSPOSE_COLOR_MATRIX	support/GLFW/deps/glad/glad.h	780;"	d
GL_TRANSPOSE_COLOR_MATRIX	support/glad/glad.h	775;"	d
GL_TRANSPOSE_MODELVIEW_MATRIX	support/GLFW/deps/glad/glad.h	777;"	d
GL_TRANSPOSE_MODELVIEW_MATRIX	support/glad/glad.h	772;"	d
GL_TRANSPOSE_PROJECTION_MATRIX	support/GLFW/deps/glad/glad.h	778;"	d
GL_TRANSPOSE_PROJECTION_MATRIX	support/glad/glad.h	773;"	d
GL_TRANSPOSE_TEXTURE_MATRIX	support/GLFW/deps/glad/glad.h	779;"	d
GL_TRANSPOSE_TEXTURE_MATRIX	support/glad/glad.h	774;"	d
GL_TRIANGLES	support/GLFW/deps/glad/glad.h	156;"	d
GL_TRIANGLES	support/glad/glad.h	151;"	d
GL_TRIANGLES_ADJACENCY	support/GLFW/deps/glad/glad.h	1319;"	d
GL_TRIANGLES_ADJACENCY	support/glad/glad.h	1316;"	d
GL_TRIANGLE_FAN	support/GLFW/deps/glad/glad.h	158;"	d
GL_TRIANGLE_FAN	support/glad/glad.h	153;"	d
GL_TRIANGLE_STRIP	support/GLFW/deps/glad/glad.h	157;"	d
GL_TRIANGLE_STRIP	support/glad/glad.h	152;"	d
GL_TRIANGLE_STRIP_ADJACENCY	support/GLFW/deps/glad/glad.h	1320;"	d
GL_TRIANGLE_STRIP_ADJACENCY	support/glad/glad.h	1317;"	d
GL_TRUE	support/GLFW/deps/glad/glad.h	151;"	d
GL_TRUE	support/glad/glad.h	146;"	d
GL_UNIFORM_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	1303;"	d
GL_UNIFORM_ARRAY_STRIDE	support/glad/glad.h	1300;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	support/GLFW/deps/glad/glad.h	1309;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	support/glad/glad.h	1306;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	support/GLFW/deps/glad/glad.h	1310;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	support/glad/glad.h	1307;"	d
GL_UNIFORM_BLOCK_BINDING	support/GLFW/deps/glad/glad.h	1306;"	d
GL_UNIFORM_BLOCK_BINDING	support/glad/glad.h	1303;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	support/GLFW/deps/glad/glad.h	1307;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	support/glad/glad.h	1304;"	d
GL_UNIFORM_BLOCK_INDEX	support/GLFW/deps/glad/glad.h	1301;"	d
GL_UNIFORM_BLOCK_INDEX	support/glad/glad.h	1298;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	support/GLFW/deps/glad/glad.h	1308;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	support/glad/glad.h	1305;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	support/GLFW/deps/glad/glad.h	1313;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	support/glad/glad.h	1310;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	support/GLFW/deps/glad/glad.h	1312;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	support/glad/glad.h	1309;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	support/GLFW/deps/glad/glad.h	1311;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	support/glad/glad.h	1308;"	d
GL_UNIFORM_BUFFER	support/GLFW/deps/glad/glad.h	1282;"	d
GL_UNIFORM_BUFFER	support/glad/glad.h	1279;"	d
GL_UNIFORM_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	1283;"	d
GL_UNIFORM_BUFFER_BINDING	support/glad/glad.h	1280;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	support/GLFW/deps/glad/glad.h	1295;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	support/glad/glad.h	1292;"	d
GL_UNIFORM_BUFFER_SIZE	support/GLFW/deps/glad/glad.h	1285;"	d
GL_UNIFORM_BUFFER_SIZE	support/glad/glad.h	1282;"	d
GL_UNIFORM_BUFFER_START	support/GLFW/deps/glad/glad.h	1284;"	d
GL_UNIFORM_BUFFER_START	support/glad/glad.h	1281;"	d
GL_UNIFORM_IS_ROW_MAJOR	support/GLFW/deps/glad/glad.h	1305;"	d
GL_UNIFORM_IS_ROW_MAJOR	support/glad/glad.h	1302;"	d
GL_UNIFORM_MATRIX_STRIDE	support/GLFW/deps/glad/glad.h	1304;"	d
GL_UNIFORM_MATRIX_STRIDE	support/glad/glad.h	1301;"	d
GL_UNIFORM_NAME_LENGTH	support/GLFW/deps/glad/glad.h	1300;"	d
GL_UNIFORM_NAME_LENGTH	support/glad/glad.h	1297;"	d
GL_UNIFORM_OFFSET	support/GLFW/deps/glad/glad.h	1302;"	d
GL_UNIFORM_OFFSET	support/glad/glad.h	1299;"	d
GL_UNIFORM_SIZE	support/GLFW/deps/glad/glad.h	1299;"	d
GL_UNIFORM_SIZE	support/glad/glad.h	1296;"	d
GL_UNIFORM_TYPE	support/GLFW/deps/glad/glad.h	1298;"	d
GL_UNIFORM_TYPE	support/glad/glad.h	1295;"	d
GL_UNKNOWN_CONTEXT_RESET_ARB	support/GLFW/deps/glad/glad.h	3437;"	d
GL_UNPACK_ALIGNMENT	support/GLFW/deps/glad/glad.h	244;"	d
GL_UNPACK_ALIGNMENT	support/glad/glad.h	238;"	d
GL_UNPACK_IMAGE_HEIGHT	support/GLFW/deps/glad/glad.h	684;"	d
GL_UNPACK_IMAGE_HEIGHT	support/glad/glad.h	679;"	d
GL_UNPACK_LSB_FIRST	support/GLFW/deps/glad/glad.h	240;"	d
GL_UNPACK_LSB_FIRST	support/glad/glad.h	234;"	d
GL_UNPACK_ROW_LENGTH	support/GLFW/deps/glad/glad.h	241;"	d
GL_UNPACK_ROW_LENGTH	support/glad/glad.h	235;"	d
GL_UNPACK_SKIP_IMAGES	support/GLFW/deps/glad/glad.h	683;"	d
GL_UNPACK_SKIP_IMAGES	support/glad/glad.h	678;"	d
GL_UNPACK_SKIP_PIXELS	support/GLFW/deps/glad/glad.h	243;"	d
GL_UNPACK_SKIP_PIXELS	support/glad/glad.h	237;"	d
GL_UNPACK_SKIP_ROWS	support/GLFW/deps/glad/glad.h	242;"	d
GL_UNPACK_SKIP_ROWS	support/glad/glad.h	236;"	d
GL_UNPACK_SWAP_BYTES	support/GLFW/deps/glad/glad.h	239;"	d
GL_UNPACK_SWAP_BYTES	support/glad/glad.h	233;"	d
GL_UNSIGNALED	support/GLFW/deps/glad/glad.h	1350;"	d
GL_UNSIGNALED	support/glad/glad.h	1347;"	d
GL_UNSIGNED_BYTE	support/GLFW/deps/glad/glad.h	275;"	d
GL_UNSIGNED_BYTE	support/glad/glad.h	257;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	support/GLFW/deps/glad/glad.h	690;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	support/glad/glad.h	685;"	d
GL_UNSIGNED_BYTE_3_3_2	support/GLFW/deps/glad/glad.h	675;"	d
GL_UNSIGNED_BYTE_3_3_2	support/glad/glad.h	670;"	d
GL_UNSIGNED_INT	support/GLFW/deps/glad/glad.h	279;"	d
GL_UNSIGNED_INT	support/glad/glad.h	261;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	support/GLFW/deps/glad/glad.h	1052;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	support/glad/glad.h	1049;"	d
GL_UNSIGNED_INT_10_10_10_2	support/GLFW/deps/glad/glad.h	679;"	d
GL_UNSIGNED_INT_10_10_10_2	support/glad/glad.h	674;"	d
GL_UNSIGNED_INT_24_8	support/GLFW/deps/glad/glad.h	1134;"	d
GL_UNSIGNED_INT_24_8	support/glad/glad.h	1131;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	support/GLFW/deps/glad/glad.h	696;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	support/glad/glad.h	691;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	support/GLFW/deps/glad/glad.h	1054;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	support/glad/glad.h	1051;"	d
GL_UNSIGNED_INT_8_8_8_8	support/GLFW/deps/glad/glad.h	678;"	d
GL_UNSIGNED_INT_8_8_8_8	support/glad/glad.h	673;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	support/GLFW/deps/glad/glad.h	695;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	support/glad/glad.h	690;"	d
GL_UNSIGNED_INT_SAMPLER_1D	support/GLFW/deps/glad/glad.h	1104;"	d
GL_UNSIGNED_INT_SAMPLER_1D	support/glad/glad.h	1101;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	support/GLFW/deps/glad/glad.h	1108;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	support/glad/glad.h	1105;"	d
GL_UNSIGNED_INT_SAMPLER_2D	support/GLFW/deps/glad/glad.h	1105;"	d
GL_UNSIGNED_INT_SAMPLER_2D	support/glad/glad.h	1102;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	support/GLFW/deps/glad/glad.h	1109;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	support/glad/glad.h	1106;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	support/GLFW/deps/glad/glad.h	1372;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	support/glad/glad.h	1369;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	support/GLFW/deps/glad/glad.h	1375;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	support/glad/glad.h	1372;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	support/GLFW/deps/glad/glad.h	1259;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	support/glad/glad.h	1256;"	d
GL_UNSIGNED_INT_SAMPLER_3D	support/GLFW/deps/glad/glad.h	1106;"	d
GL_UNSIGNED_INT_SAMPLER_3D	support/glad/glad.h	1103;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	support/GLFW/deps/glad/glad.h	1260;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	support/glad/glad.h	1257;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	support/GLFW/deps/glad/glad.h	1107;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	support/glad/glad.h	1104;"	d
GL_UNSIGNED_INT_VEC2	support/GLFW/deps/glad/glad.h	1095;"	d
GL_UNSIGNED_INT_VEC2	support/glad/glad.h	1092;"	d
GL_UNSIGNED_INT_VEC3	support/GLFW/deps/glad/glad.h	1096;"	d
GL_UNSIGNED_INT_VEC3	support/glad/glad.h	1093;"	d
GL_UNSIGNED_INT_VEC4	support/GLFW/deps/glad/glad.h	1097;"	d
GL_UNSIGNED_INT_VEC4	support/glad/glad.h	1094;"	d
GL_UNSIGNED_NORMALIZED	support/GLFW/deps/glad/glad.h	1142;"	d
GL_UNSIGNED_NORMALIZED	support/glad/glad.h	1139;"	d
GL_UNSIGNED_SHORT	support/GLFW/deps/glad/glad.h	277;"	d
GL_UNSIGNED_SHORT	support/glad/glad.h	259;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	support/GLFW/deps/glad/glad.h	694;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	support/glad/glad.h	689;"	d
GL_UNSIGNED_SHORT_4_4_4_4	support/GLFW/deps/glad/glad.h	676;"	d
GL_UNSIGNED_SHORT_4_4_4_4	support/glad/glad.h	671;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	support/GLFW/deps/glad/glad.h	693;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	support/glad/glad.h	688;"	d
GL_UNSIGNED_SHORT_5_5_5_1	support/GLFW/deps/glad/glad.h	677;"	d
GL_UNSIGNED_SHORT_5_5_5_1	support/glad/glad.h	672;"	d
GL_UNSIGNED_SHORT_5_6_5	support/GLFW/deps/glad/glad.h	691;"	d
GL_UNSIGNED_SHORT_5_6_5	support/glad/glad.h	686;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	support/GLFW/deps/glad/glad.h	692;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	support/glad/glad.h	687;"	d
GL_UPPER_LEFT	support/GLFW/deps/glad/glad.h	986;"	d
GL_UPPER_LEFT	support/glad/glad.h	983;"	d
GL_V2F	support/GLFW/deps/glad/glad.h	647;"	d
GL_V2F	support/glad/glad.h	656;"	d
GL_V3F	support/GLFW/deps/glad/glad.h	648;"	d
GL_V3F	support/glad/glad.h	657;"	d
GL_VALIDATE_STATUS	support/GLFW/deps/glad/glad.h	973;"	d
GL_VALIDATE_STATUS	support/glad/glad.h	970;"	d
GL_VENDOR	support/GLFW/deps/glad/glad.h	319;"	d
GL_VENDOR	support/glad/glad.h	300;"	d
GL_VERSION	support/GLFW/deps/glad/glad.h	321;"	d
GL_VERSION	support/GLFW/src/internal.h	69;"	d
GL_VERSION	support/glad/glad.h	302;"	d
GL_VERSION_1_0	support/GLFW/deps/glad/glad.h	1380;"	d
GL_VERSION_1_0	support/glad/glad.h	1393;"	d
GL_VERSION_1_1	support/GLFW/deps/glad/glad.h	2302;"	d
GL_VERSION_1_1	support/glad/glad.h	2315;"	d
GL_VERSION_1_2	support/GLFW/deps/glad/glad.h	2396;"	d
GL_VERSION_1_2	support/glad/glad.h	2409;"	d
GL_VERSION_1_3	support/GLFW/deps/glad/glad.h	2412;"	d
GL_VERSION_1_3	support/glad/glad.h	2425;"	d
GL_VERSION_1_4	support/GLFW/deps/glad/glad.h	2554;"	d
GL_VERSION_1_4	support/glad/glad.h	2567;"	d
GL_VERSION_1_5	support/GLFW/deps/glad/glad.h	2699;"	d
GL_VERSION_1_5	support/glad/glad.h	2712;"	d
GL_VERSION_2_0	support/GLFW/deps/glad/glad.h	2760;"	d
GL_VERSION_2_0	support/glad/glad.h	2773;"	d
GL_VERSION_2_1	support/GLFW/deps/glad/glad.h	3043;"	d
GL_VERSION_2_1	support/glad/glad.h	3056;"	d
GL_VERSION_3_0	support/GLFW/deps/glad/glad.h	3065;"	d
GL_VERSION_3_0	support/glad/glad.h	3078;"	d
GL_VERSION_3_1	support/GLFW/deps/glad/glad.h	3321;"	d
GL_VERSION_3_1	support/glad/glad.h	3334;"	d
GL_VERSION_3_2	support/GLFW/deps/glad/glad.h	3361;"	d
GL_VERSION_3_2	support/glad/glad.h	3374;"	d
GL_VERSION_3_3	support/glad/glad.h	3435;"	d
GL_VERTEX_ARRAY	support/GLFW/deps/glad/glad.h	556;"	d
GL_VERTEX_ARRAY	support/glad/glad.h	613;"	d
GL_VERTEX_ARRAY_BINDING	support/GLFW/deps/glad/glad.h	1250;"	d
GL_VERTEX_ARRAY_BINDING	support/glad/glad.h	1247;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	888;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	support/glad/glad.h	885;"	d
GL_VERTEX_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	410;"	d
GL_VERTEX_ARRAY_POINTER	support/glad/glad.h	599;"	d
GL_VERTEX_ARRAY_SIZE	support/GLFW/deps/glad/glad.h	562;"	d
GL_VERTEX_ARRAY_SIZE	support/glad/glad.h	619;"	d
GL_VERTEX_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	564;"	d
GL_VERTEX_ARRAY_STRIDE	support/glad/glad.h	621;"	d
GL_VERTEX_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	563;"	d
GL_VERTEX_ARRAY_TYPE	support/glad/glad.h	620;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	870;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	support/glad/glad.h	867;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	support/glad/glad.h	1376;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	support/GLFW/deps/glad/glad.h	911;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	support/glad/glad.h	908;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	support/GLFW/deps/glad/glad.h	1038;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	support/glad/glad.h	1035;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	support/GLFW/deps/glad/glad.h	941;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	support/glad/glad.h	938;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	support/GLFW/deps/glad/glad.h	917;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	support/glad/glad.h	914;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	support/GLFW/deps/glad/glad.h	912;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	support/glad/glad.h	909;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	support/GLFW/deps/glad/glad.h	913;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	support/glad/glad.h	910;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	support/GLFW/deps/glad/glad.h	914;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	support/glad/glad.h	911;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	support/GLFW/deps/glad/glad.h	916;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	support/glad/glad.h	913;"	d
GL_VERTEX_PROGRAM_TWO_SIDE	support/GLFW/deps/glad/glad.h	990;"	d
GL_VERTEX_PROGRAM_TWO_SIDE	support/glad/glad.h	987;"	d
GL_VERTEX_SHADER	support/GLFW/deps/glad/glad.h	944;"	d
GL_VERTEX_SHADER	support/glad/glad.h	941;"	d
GL_VIEWPORT	support/GLFW/deps/glad/glad.h	222;"	d
GL_VIEWPORT	support/glad/glad.h	217;"	d
GL_VIEWPORT_BIT	support/GLFW/deps/glad/glad.h	359;"	d
GL_VIEWPORT_BIT	support/glad/glad.h	324;"	d
GL_WAIT_FAILED	support/GLFW/deps/glad/glad.h	1355;"	d
GL_WAIT_FAILED	support/glad/glad.h	1352;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING	support/GLFW/deps/glad/glad.h	896;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING	support/glad/glad.h	893;"	d
GL_WRITE_ONLY	support/GLFW/deps/glad/glad.h	872;"	d
GL_WRITE_ONLY	support/glad/glad.h	869;"	d
GL_XOR	support/GLFW/deps/glad/glad.h	290;"	d
GL_XOR	support/glad/glad.h	271;"	d
GL_ZERO	support/GLFW/deps/glad/glad.h	168;"	d
GL_ZERO	support/glad/glad.h	163;"	d
GL_ZOOM_X	support/GLFW/deps/glad/glad.h	498;"	d
GL_ZOOM_X	support/glad/glad.h	450;"	d
GL_ZOOM_Y	support/GLFW/deps/glad/glad.h	499;"	d
GL_ZOOM_Y	support/glad/glad.h	451;"	d
GLbitfield	support/GLFW/deps/glad/glad.h	/^typedef unsigned int GLbitfield;$/;"	t
GLbitfield	support/GLFW/src/internal.h	/^typedef unsigned int GLbitfield;$/;"	t
GLbitfield	support/glad/glad.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	support/GLFW/deps/glad/glad.h	/^typedef unsigned char GLboolean;$/;"	t
GLboolean	support/glad/glad.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	support/GLFW/deps/glad/glad.h	/^typedef signed char GLbyte;$/;"	t
GLbyte	support/glad/glad.h	/^typedef khronos_int8_t GLbyte;$/;"	t
GLchar	support/GLFW/deps/glad/glad.h	/^typedef char GLchar;$/;"	t
GLchar	support/glad/glad.h	/^typedef char GLchar;$/;"	t
GLcharARB	support/GLFW/deps/glad/glad.h	/^typedef char GLcharARB;$/;"	t
GLcharARB	support/glad/glad.h	/^typedef char GLcharARB;$/;"	t
GLclampd	support/GLFW/deps/glad/glad.h	/^typedef double GLclampd;$/;"	t
GLclampd	support/glad/glad.h	/^typedef double GLclampd;$/;"	t
GLclampf	support/GLFW/deps/glad/glad.h	/^typedef float GLclampf;$/;"	t
GLclampf	support/glad/glad.h	/^typedef khronos_float_t GLclampf;$/;"	t
GLclampx	support/GLFW/deps/glad/glad.h	/^typedef int GLclampx;$/;"	t
GLclampx	support/glad/glad.h	/^typedef khronos_int32_t GLclampx;$/;"	t
GLdouble	support/GLFW/deps/glad/glad.h	/^typedef double GLdouble;$/;"	t
GLdouble	support/glad/glad.h	/^typedef double GLdouble;$/;"	t
GLeglClientBufferEXT	support/glad/glad.h	/^typedef void *GLeglClientBufferEXT;$/;"	t
GLeglImageOES	support/GLFW/deps/glad/glad.h	/^typedef void *GLeglImageOES;$/;"	t
GLeglImageOES	support/glad/glad.h	/^typedef void *GLeglImageOES;$/;"	t
GLenum	support/GLFW/deps/glad/glad.h	/^typedef unsigned int GLenum;$/;"	t
GLenum	support/GLFW/src/internal.h	/^typedef unsigned int GLenum;$/;"	t
GLenum	support/glad/glad.h	/^typedef unsigned int GLenum;$/;"	t
GLfixed	support/GLFW/deps/glad/glad.h	/^typedef GLint GLfixed;$/;"	t
GLfixed	support/glad/glad.h	/^typedef khronos_int32_t GLfixed;$/;"	t
GLfloat	support/GLFW/deps/glad/glad.h	/^typedef float GLfloat;$/;"	t
GLfloat	support/glad/glad.h	/^typedef khronos_float_t GLfloat;$/;"	t
GLhalf	support/GLFW/deps/glad/glad.h	/^typedef unsigned short GLhalf;$/;"	t
GLhalf	support/glad/glad.h	/^typedef khronos_uint16_t GLhalf;$/;"	t
GLhalfARB	support/GLFW/deps/glad/glad.h	/^typedef unsigned short GLhalfARB;$/;"	t
GLhalfARB	support/glad/glad.h	/^typedef khronos_uint16_t GLhalfARB;$/;"	t
GLhalfNV	support/GLFW/deps/glad/glad.h	/^typedef unsigned short GLhalfNV;$/;"	t
GLhalfNV	support/glad/glad.h	/^typedef unsigned short GLhalfNV;$/;"	t
GLhandleARB	support/GLFW/deps/glad/glad.h	/^typedef unsigned int GLhandleARB;$/;"	t
GLhandleARB	support/GLFW/deps/glad/glad.h	/^typedef void *GLhandleARB;$/;"	t
GLhandleARB	support/glad/glad.h	/^typedef unsigned int GLhandleARB;$/;"	t
GLhandleARB	support/glad/glad.h	/^typedef void *GLhandleARB;$/;"	t
GLint	support/GLFW/deps/glad/glad.h	/^typedef int GLint;$/;"	t
GLint	support/GLFW/src/internal.h	/^typedef int	GLint;$/;"	t
GLint	support/glad/glad.h	/^typedef int GLint;$/;"	t
GLint64	support/GLFW/deps/glad/glad.h	/^typedef int64_t GLint64;$/;"	t
GLint64	support/glad/glad.h	/^typedef khronos_int64_t GLint64;$/;"	t
GLint64EXT	support/GLFW/deps/glad/glad.h	/^typedef int64_t GLint64EXT;$/;"	t
GLint64EXT	support/glad/glad.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t
GLintptr	support/GLFW/deps/glad/glad.h	/^typedef ptrdiff_t GLintptr;$/;"	t
GLintptr	support/glad/glad.h	/^typedef khronos_intptr_t GLintptr;$/;"	t
GLintptrARB	support/GLFW/deps/glad/glad.h	/^typedef ptrdiff_t GLintptrARB;$/;"	t
GLintptrARB	support/glad/glad.h	/^typedef khronos_intptr_t GLintptrARB;$/;"	t
GLshort	support/GLFW/deps/glad/glad.h	/^typedef short GLshort;$/;"	t
GLshort	support/glad/glad.h	/^typedef khronos_int16_t GLshort;$/;"	t
GLsizei	support/GLFW/deps/glad/glad.h	/^typedef int GLsizei;$/;"	t
GLsizei	support/glad/glad.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	support/GLFW/deps/glad/glad.h	/^typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsizeiptr	support/glad/glad.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t
GLsizeiptrARB	support/GLFW/deps/glad/glad.h	/^typedef ptrdiff_t GLsizeiptrARB;$/;"	t
GLsizeiptrARB	support/glad/glad.h	/^typedef khronos_ssize_t GLsizeiptrARB;$/;"	t
GLsync	support/GLFW/deps/glad/glad.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLsync	support/glad/glad.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	support/GLFW/deps/glad/glad.h	/^typedef unsigned char GLubyte;$/;"	t
GLubyte	support/GLFW/src/internal.h	/^typedef unsigned char GLubyte;$/;"	t
GLubyte	support/glad/glad.h	/^typedef khronos_uint8_t GLubyte;$/;"	t
GLuint	support/GLFW/deps/glad/glad.h	/^typedef unsigned int GLuint;$/;"	t
GLuint	support/GLFW/src/internal.h	/^typedef unsigned int GLuint;$/;"	t
GLuint	support/glad/glad.h	/^typedef unsigned int GLuint;$/;"	t
GLuint64	support/GLFW/deps/glad/glad.h	/^typedef uint64_t GLuint64;$/;"	t
GLuint64	support/glad/glad.h	/^typedef khronos_uint64_t GLuint64;$/;"	t
GLuint64EXT	support/GLFW/deps/glad/glad.h	/^typedef uint64_t GLuint64EXT;$/;"	t
GLuint64EXT	support/glad/glad.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t
GLushort	support/GLFW/deps/glad/glad.h	/^typedef unsigned short GLushort;$/;"	t
GLushort	support/glad/glad.h	/^typedef khronos_uint16_t GLushort;$/;"	t
GLvdpauSurfaceNV	support/GLFW/deps/glad/glad.h	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t
GLvdpauSurfaceNV	support/glad/glad.h	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t
GLvoid	support/GLFW/deps/glad/glad.h	/^typedef void GLvoid;$/;"	t
GLvoid	support/glad/glad.h	/^typedef void GLvoid;$/;"	t
GStyleVarInfo	support/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	file:
Gamepad	support/GLFW/deps/mingw/xinput.h	/^    XINPUT_GAMEPAD Gamepad;$/;"	m	struct:_XINPUT_CAPABILITIES
Gamepad	support/GLFW/deps/mingw/xinput.h	/^    XINPUT_GAMEPAD Gamepad;$/;"	m	struct:_XINPUT_STATE
GenericBufferView	cuda/BufferView.h	/^typedef BufferView<unsigned int> GenericBufferView;$/;"	t
GeometryData	cuda/GeometryData.h	/^    GeometryData() {};$/;"	f	struct:GeometryData
GeometryData	cuda/GeometryData.h	/^struct GeometryData$/;"	s
GeometryData	optixVolumeViewer/volume.h	/^struct GeometryData$/;"	s
Get	support/tinygltf/tiny_gltf.h	/^  const Value &Get(const std::string &key) const {$/;"	f	class:tinygltf::Value
Get	support/tinygltf/tiny_gltf.h	/^  const Value &Get(int idx) const {$/;"	f	class:tinygltf::Value
GetActiveID	support/imgui/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui
GetAllocator	support/tinygltf/tiny_gltf.h	/^rapidjson::CrtAllocator &GetAllocator() { return s_CrtAllocator; }$/;"	f	namespace:__anon118
GetAmbient	optixMotionGeometry/tiny_obj_loader.h	/^  std::array<double, 3> GetAmbient() {$/;"	f	struct:tinyobj::material_t
GetAttrib	optixMotionGeometry/tiny_obj_loader.h	/^  const attrib_t &GetAttrib() const { return attrib_; }$/;"	f	class:tinyobj::ObjReader
GetAttributeForAllPoints	support/tinygltf/tiny_gltf.h	/^static bool GetAttributeForAllPoints(draco::Mesh *mesh,$/;"	f	namespace:tinygltf
GetAttributeForAllPoints	support/tinygltf/tiny_gltf.h	/^static bool GetAttributeForAllPoints(uint32_t componentType, draco::Mesh *mesh,$/;"	f	namespace:tinygltf
GetBL	support/imgui/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Bottom-left$/;"	f	struct:ImRect
GetBR	support/imgui/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Bottom-right$/;"	f	struct:ImRect
GetBackgroundDrawList	support/imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui
GetBaseDir	support/tinygltf/tiny_gltf.h	/^static std::string GetBaseDir(const std::string &filepath) {$/;"	f	namespace:tinygltf
GetBaseFilename	support/tinygltf/tiny_gltf.h	/^static std::string GetBaseFilename(const std::string &filepath) {$/;"	f	namespace:tinygltf
GetBit	support/imgui/imgui.h	/^    bool            GetBit(int n) const { int off = (n >> 5); int mask = 1 << (n & 31); return (UsedChars[off] & mask) != 0; }  \/\/ Get bit n in the array$/;"	f	struct:ImFontGlyphRangesBuilder
GetBit	support/imgui/imgui_internal.h	/^    bool            GetBit(int n) const     { int off = (n >> 5); int mask = 1 << (n & 31); return (Storage[off] & mask) != 0; }$/;"	f	struct:ImBoolVector
GetBool	support/imgui/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage
GetBoolRef	support/imgui/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage
GetByIndex	support/imgui/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Data[n]; }$/;"	f	struct:ImPool
GetByKey	support/imgui/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx != -1) ? &Data[idx] : NULL; }$/;"	f	struct:ImPool
GetCenter	support/imgui/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min.y + Max.y) * 0.5f); }$/;"	f	struct:ImRect
GetCharAdvance	support/imgui/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }$/;"	f	struct:ImFont
GetClientString	support/GLFW/src/glx_context.h	/^    PFNGLXGETCLIENTSTRINGPROC           GetClientString;$/;"	m	struct:_GLFWlibraryGLX
GetClipRectMax	support/imgui/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }$/;"	f	struct:ImDrawList
GetClipRectMin	support/imgui/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }$/;"	f	struct:ImDrawList
GetClipboardText	support/imgui/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui
GetClipboardTextFn	support/imgui/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO
GetClipboardTextFn_DefaultImpl	support/imgui/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	file:
GetColorU32	support/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui
GetColorU32	support/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui
GetColorU32	support/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui
GetColumnIndex	support/imgui/imgui.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui
GetColumnOffset	support/imgui/imgui.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui
GetColumnWidth	support/imgui/imgui.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui
GetColumnWidthEx	support/imgui/imgui.cpp	/^static float GetColumnWidthEx(ImGuiColumnsSet* columns, int column_index, bool before_resize = false)$/;"	f	file:
GetColumnsCount	support/imgui/imgui.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui
GetColumnsRectHalfWidth	support/imgui/imgui.cpp	/^static inline float GetColumnsRectHalfWidth() { return 4.0f; }$/;"	f	file:
GetComponentSizeInBytes	support/tinygltf/tiny_gltf.h	/^static inline int32_t GetComponentSizeInBytes(uint32_t componentType) {$/;"	f	namespace:tinygltf
GetConfigAttrib	support/GLFW/src/egl_context.h	/^    PFNEGLGETCONFIGATTRIBPROC       GetConfigAttrib;$/;"	m	struct:_GLFWlibraryEGL
GetConfigs	support/GLFW/src/egl_context.h	/^    PFNEGLGETCONFIGSPROC            GetConfigs;$/;"	m	struct:_GLFWlibraryEGL
GetContentRegionAvail	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui
GetContentRegionAvailWidth	support/imgui/imgui.cpp	/^float ImGui::GetContentRegionAvailWidth()$/;"	f	class:ImGui
GetContentRegionMax	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui
GetCurrentClipRect	support/imgui/imgui_draw.cpp	409;"	d	file:
GetCurrentClipRect	support/imgui/imgui_draw.cpp	476;"	d	file:
GetCurrentContext	support/imgui/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui
GetCurrentDC	support/GLFW/src/wgl_context.h	/^    WGLGETCURRENTDC_T                   GetCurrentDC;$/;"	m	struct:_GLFWlibraryWGL
GetCurrentTextureId	support/imgui/imgui_draw.cpp	410;"	d	file:
GetCurrentTextureId	support/imgui/imgui_draw.cpp	477;"	d	file:
GetCurrentWindow	support/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWindow->WriteAccessed = true; return g.CurrentWindow; }$/;"	f	namespace:ImGui
GetCurrentWindowRead	support/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.CurrentWindow; }$/;"	f	namespace:ImGui
GetCursorPos	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui
GetCursorPosX	support/imgui/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui
GetCursorPosY	support/imgui/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui
GetCursorScreenPos	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui
GetCursorStartPos	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui
GetCustomParameter	optixMotionGeometry/tiny_obj_loader.h	/^  std::string GetCustomParameter(const std::string &key) {$/;"	f	struct:tinyobj::material_t
GetCustomRectByIndex	support/imgui/imgui.h	/^    const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }$/;"	f	struct:ImFontAtlas
GetDebugName	support/imgui/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }$/;"	f	struct:ImFont
GetDefaultCompressedFontDataTTFBase85	support/imgui/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	file:
GetDefaultFont	support/imgui/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0]; }$/;"	f	namespace:ImGui
GetDiffuse	optixMotionGeometry/tiny_obj_loader.h	/^  std::array<double, 3> GetDiffuse() {$/;"	f	struct:tinyobj::material_t
GetDisplay	support/GLFW/src/egl_context.h	/^    PFNEGLGETDISPLAYPROC            GetDisplay;$/;"	m	struct:_GLFWlibraryEGL
GetDouble	support/tinygltf/tiny_gltf.h	/^bool GetDouble(const json &o, double &val) {$/;"	f	namespace:tinygltf::__anon119
GetDragDropPayload	support/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui
GetDraggedColumnOffset	support/imgui/imgui.cpp	/^static float GetDraggedColumnOffset(ImGuiColumnsSet* columns, int column_index)$/;"	f	file:
GetDrawData	support/imgui/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui
GetDrawListSharedData	support/imgui/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui
GetEmission	optixMotionGeometry/tiny_obj_loader.h	/^  std::array<double, 3> GetEmission() {$/;"	f	struct:tinyobj::material_t
GetError	support/GLFW/src/egl_context.h	/^    PFNEGLGETERRORPROC              GetError;$/;"	m	struct:_GLFWlibraryEGL
GetExtensionsStringARB	support/GLFW/src/wgl_context.h	/^    PFNWGLGETEXTENSIONSSTRINGARBPROC    GetExtensionsStringARB;$/;"	m	struct:_GLFWlibraryWGL
GetExtensionsStringEXT	support/GLFW/src/wgl_context.h	/^    PFNWGLGETEXTENSIONSSTRINGEXTPROC    GetExtensionsStringEXT;$/;"	m	struct:_GLFWlibraryWGL
GetFBConfigAttrib	support/GLFW/src/glx_context.h	/^    PFNGLXGETFBCONFIGATTRIBPROC         GetFBConfigAttrib;$/;"	m	struct:_GLFWlibraryGLX
GetFBConfigs	support/GLFW/src/glx_context.h	/^    PFNGLXGETFBCONFIGSPROC              GetFBConfigs;$/;"	m	struct:_GLFWlibraryGLX
GetFallbackWindowNameForWindowingList	support/imgui/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	file:
GetFilePathExtension	support/tinygltf/tiny_gltf.h	/^static std::string GetFilePathExtension(const std::string &FileName) {$/;"	f	namespace:tinygltf
GetFloat	support/imgui/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage
GetFloatRef	support/imgui/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage
GetFocusID	support/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui
GetFont	support/imgui/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui
GetFontSize	support/imgui/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui
GetFontTexUvWhitePixel	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui
GetForegroundDrawList	support/imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui
GetForegroundDrawList	support/imgui/imgui.cpp	/^static ImDrawList* GetForegroundDrawList(ImGuiWindow*)$/;"	f	file:
GetFrameCount	support/imgui/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui
GetFrameHeight	support/imgui/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui
GetFrameHeightWithSpacing	support/imgui/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui
GetFrontMostPopupModal	support/imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetFrontMostPopupModal()$/;"	f	class:ImGui
GetGlyphRangesChineseFull	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas
GetGlyphRangesChineseSimplifiedCommon	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas
GetGlyphRangesCyrillic	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas
GetGlyphRangesDefault	support/imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas
GetGlyphRangesJapanese	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas
GetGlyphRangesKorean	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas
GetGlyphRangesThai	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas
GetGlyphRangesVietnamese	support/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas
GetHeight	support/imgui/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect
GetHoveredID	support/imgui/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui
GetID	support/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui
GetID	support/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui
GetID	support/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui
GetID	support/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow
GetID	support/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow
GetIDFromRectangle	support/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow
GetIDNoKeepAlive	support/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow
GetIDNoKeepAlive	support/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)$/;"	f	class:ImGuiWindow
GetIO	support/imgui/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui
GetIndex	support/imgui/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Data.Data && p < Data.Data + Data.Size); return (ImPoolIdx)(p - Data.Data); }$/;"	f	struct:ImPool
GetInputSourceProperty	support/GLFW/src/cocoa_platform.h	/^        PFN_TISGetInputSourceProperty GetInputSourceProperty;$/;"	m	struct:_GLFWlibraryNS::__anon27
GetInstanceProcAddr	support/GLFW/src/internal.h	/^        PFN_vkGetInstanceProcAddr GetInstanceProcAddr;$/;"	m	struct:_GLFWlibrary::__anon10
GetInt	support/imgui/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage
GetInt	support/tinygltf/tiny_gltf.h	/^bool GetInt(const json &o, int &val) {$/;"	f	namespace:tinygltf::__anon119
GetIntRef	support/imgui/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage
GetIntegerv	support/GLFW/src/internal.h	/^    PFNGLGETINTEGERVPROC GetIntegerv;$/;"	m	struct:_GLFWcontext
GetItemID	support/imgui/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.CurrentWindow->DC.LastItemId; }$/;"	f	namespace:ImGui
GetItemRectMax	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui
GetItemRectMin	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui
GetItemRectSize	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui
GetItemsLineHeightWithSpacing	support/imgui/imgui.h	/^    static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing(); }$/;"	f	namespace:ImGui
GetKbdType	support/GLFW/src/cocoa_platform.h	/^        PFN_LMGetKbdType GetKbdType;$/;"	m	struct:_GLFWlibraryNS::__anon27
GetKey	support/tinygltf/tiny_gltf.h	/^std::string GetKey(json_const_iterator &it) {$/;"	f	namespace:tinygltf::__anon119
GetKeyIndex	support/imgui/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey imgui_key)$/;"	f	class:ImGui
GetKeyPressedAmount	support/imgui/imgui.cpp	/^int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui
GetMaterials	optixMotionGeometry/tiny_obj_loader.h	/^  const std::vector<material_t> &GetMaterials() const { return materials_; }$/;"	f	class:tinyobj::ObjReader
GetMinimumStepAtDecimalPrecision	support/imgui/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	file:
GetMouseCursor	support/imgui/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui
GetMouseCursorTexData	support/imgui/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])$/;"	f	class:ImFontAtlas
GetMouseDragDelta	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)$/;"	f	class:ImGui
GetMousePos	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui
GetMousePosOnOpeningCurrentPopup	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui
GetNavInputAmount	support/imgui/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)$/;"	f	class:ImGui
GetNavInputAmount2d	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, float slow_factor, float fast_factor)$/;"	f	class:ImGui
GetNumComponentsInType	support/tinygltf/tiny_gltf.h	/^static inline int32_t GetNumComponentsInType(uint32_t ty) {$/;"	f	namespace:tinygltf
GetNumber	support/tinygltf/tiny_gltf.h	/^bool GetNumber(const json &o, double &val) {$/;"	f	namespace:tinygltf::__anon119
GetNumberAsDouble	support/tinygltf/tiny_gltf.h	/^  double GetNumberAsDouble() const {$/;"	f	class:tinygltf::Value
GetNumberAsInt	support/tinygltf/tiny_gltf.h	/^  int GetNumberAsInt() const {$/;"	f	class:tinygltf::Value
GetOrAddByKey	support/imgui/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*p_idx != -1) return &Data[*p_idx]; *p_idx = FreeIdx; return Add(); }$/;"	f	struct:ImPool
GetOverlayDrawList	support/imgui/imgui.h	/^    static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); }$/;"	f	namespace:ImGui
GetPixelFormatAttribivARB	support/GLFW/src/wgl_context.h	/^    PFNWGLGETPIXELFORMATATTRIBIVARBPROC GetPixelFormatAttribivARB;$/;"	m	struct:_GLFWlibraryWGL
GetPreserveImageChannels	support/tinygltf/tiny_gltf.h	/^  bool GetPreserveImageChannels() const {$/;"	f	class:tinygltf::TinyGLTF
GetProcAddress	support/GLFW/src/egl_context.h	/^    PFNEGLGETPROCADDRESSPROC        GetProcAddress;$/;"	m	struct:_GLFWlibraryEGL
GetProcAddress	support/GLFW/src/glx_context.h	/^    PFNGLXGETPROCADDRESSPROC            GetProcAddress;$/;"	m	struct:_GLFWlibraryGLX
GetProcAddress	support/GLFW/src/wgl_context.h	/^    WGLGETPROCADDRESS_T                 GetProcAddress;$/;"	m	struct:_GLFWlibraryWGL
GetProcAddressARB	support/GLFW/src/glx_context.h	/^    PFNGLXGETPROCADDRESSPROC            GetProcAddressARB;$/;"	m	struct:_GLFWlibraryGLX
GetRedoAvailCount	support/imgui/imgui_internal.h	/^    int                 GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate.redo_point; }$/;"	f	struct:ImGuiInputTextState
GetRenderer	optixHair/Renderers.cpp	/^WindowRenderer* WindowRenderer::GetRenderer( GLFWwindow* window )$/;"	f	class:WindowRenderer
GetResizeBorderRect	support/imgui/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float thickness)$/;"	f	file:
GetScrollMaxX	support/imgui/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui
GetScrollMaxY	support/imgui/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui
GetScrollX	support/imgui/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui
GetScrollY	support/imgui/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui
GetScrollbarID	support/imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui
GetSerializeDefaultValues	support/tinygltf/tiny_gltf.h	/^  bool GetSerializeDefaultValues() const { return serialize_default_values_; }$/;"	f	class:tinygltf::TinyGLTF
GetShapes	optixMotionGeometry/tiny_obj_loader.h	/^  const std::vector<shape_t> &GetShapes() const { return shapes_; }$/;"	f	class:tinyobj::ObjReader
GetSize	support/imgui/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y); }$/;"	f	struct:ImRect
GetSize	support/imgui/imgui_internal.h	/^    int         GetSize() const                     { return Data.Size; }$/;"	f	struct:ImPool
GetSpecular	optixMotionGeometry/tiny_obj_loader.h	/^  std::array<double, 3> GetSpecular() {$/;"	f	struct:tinyobj::material_t
GetStateStorage	support/imgui/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui
GetStoreOriginalJSONForExtrasAndExtensions	support/tinygltf/tiny_gltf.h	/^  bool GetStoreOriginalJSONForExtrasAndExtensions() const {$/;"	f	class:tinygltf::TinyGLTF
GetString	support/GLFW/src/internal.h	/^    PFNGLGETSTRINGPROC  GetString;$/;"	m	struct:_GLFWcontext
GetString	support/tinygltf/tiny_gltf.h	/^bool GetString(const json &o, std::string &val) {$/;"	f	namespace:tinygltf::__anon119
GetStringi	support/GLFW/src/internal.h	/^    PFNGLGETSTRINGIPROC GetStringi;$/;"	m	struct:_GLFWcontext
GetStyle	support/imgui/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui
GetStyleColorName	support/imgui/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui
GetStyleColorVec4	support/imgui/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui
GetStyleVarInfo	support/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	file:
GetTL	support/imgui/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-left$/;"	f	struct:ImRect
GetTR	support/imgui/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-right$/;"	f	struct:ImRect
GetTabBarFromTabBarRef	support/imgui/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiTabBarRef& ref)$/;"	f	file:
GetTabBarRefFromTabBar	support/imgui/imgui_widgets.cpp	/^static ImGuiTabBarRef GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	file:
GetTabName	support/imgui/imgui_internal.h	/^    const char*         GetTabName(const ImGuiTabItem* tab) const $/;"	f	struct:ImGuiTabBar
GetTabOrder	support/imgui/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const  { return Tabs.index_from_ptr(tab); }$/;"	f	struct:ImGuiTabBar
GetTexDataAsAlpha8	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)$/;"	f	class:ImFontAtlas
GetTexDataAsRGBA32	support/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)$/;"	f	class:ImFontAtlas
GetTextLineHeight	support/imgui/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui
GetTextLineHeightWithSpacing	support/imgui/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui
GetTime	support/imgui/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui
GetTransmittance	optixMotionGeometry/tiny_obj_loader.h	/^  std::array<double, 3> GetTransmittance() {$/;"	f	struct:tinyobj::material_t
GetTreeNodeToLabelSpacing	support/imgui/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui
GetUndoAvailCount	support/imgui/imgui_internal.h	/^    int                 GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState
GetValue	support/tinygltf/tiny_gltf.h	/^const json &GetValue(json_const_iterator &it) {$/;"	f	namespace:tinygltf::__anon119
GetVarPtr	support/imgui/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + Offset); }$/;"	f	struct:ImGuiStyleVarInfo
GetVersion	support/imgui/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui
GetVertexWeights	optixMotionGeometry/tiny_obj_loader.h	/^  const std::vector<real_t> &GetVertexWeights() const { return vertex_weights; }$/;"	f	struct:tinyobj::attrib_t
GetVertices	optixMotionGeometry/tiny_obj_loader.h	/^  const std::vector<real_t> &GetVertices() const { return vertices; }$/;"	f	struct:tinyobj::attrib_t
GetViewportRect	support/imgui/imgui.cpp	/^static ImRect GetViewportRect()$/;"	f	file:
GetVisualFromFBConfig	support/GLFW/src/glx_context.h	/^    PFNGLXGETVISUALFROMFBCONFIGPROC     GetVisualFromFBConfig;$/;"	m	struct:_GLFWlibraryGLX
GetVoidPtr	support/imgui/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage
GetVoidPtrRef	support/imgui/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage
GetWidth	support/imgui/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect
GetWindowAllowedExtentRect	support/imgui/imgui.cpp	/^ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow*)$/;"	f	class:ImGui
GetWindowBgColorIdxFromFlags	support/imgui/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)$/;"	f	file:
GetWindowContentRegionMax	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui
GetWindowContentRegionMin	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui
GetWindowContentRegionWidth	support/imgui/imgui.cpp	/^float ImGui::GetWindowContentRegionWidth()$/;"	f	class:ImGui
GetWindowDrawList	support/imgui/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui
GetWindowHeight	support/imgui/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui
GetWindowPos	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui
GetWindowScrollMaxX	support/imgui/imgui.cpp	/^float ImGui::GetWindowScrollMaxX(ImGuiWindow* window)$/;"	f	class:ImGui
GetWindowScrollMaxY	support/imgui/imgui.cpp	/^float ImGui::GetWindowScrollMaxY(ImGuiWindow* window)$/;"	f	class:ImGui
GetWindowSize	support/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui
GetWindowWidth	support/imgui/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui
Glass	cuda/MaterialData.h	/^    struct Glass$/;"	s	struct:MaterialData
GlfwClientApi	support/imgui/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	support/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	support/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	support/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
Globals	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^struct Globals$/;"	s
Glyph	support/imgui/imgui.h	/^    typedef ImFontGlyph Glyph; \/\/ OBSOLETE 1.52+$/;"	t	struct:ImFont
GlyphAdvanceX	support/imgui/imgui.h	/^        float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): glyph xadvance$/;"	m	struct:ImFontAtlas::CustomRect
GlyphExtraSpacing	support/imgui/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between glyphs. Only X axis is supported for now.$/;"	m	struct:ImFontConfig
GlyphMaxAdvanceX	support/imgui/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig
GlyphMinAdvanceX	support/imgui/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set Min to align font icons, set both Min\/Max to enforce mono-space font$/;"	m	struct:ImFontConfig
GlyphOffset	support/imgui/imgui.h	/^        ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): glyph display offset$/;"	m	struct:ImFontAtlas::CustomRect
GlyphOffset	support/imgui/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font input.$/;"	m	struct:ImFontConfig
GlyphRanges	support/imgui/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.$/;"	m	struct:ImFontConfig
GlyphRangesBuilder	support/imgui/imgui.h	/^    typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; \/\/ OBSOLETE 1.67+$/;"	t	struct:ImFontAtlas
Glyphs	support/imgui/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All glyphs.$/;"	m	struct:ImFont
GlyphsCount	support/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyphs already set by an earlier source font)$/;"	m	struct:ImFontBuildSrcData	file:
GlyphsCount	support/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	file:
GlyphsHighest	support/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	file:
GlyphsHighest	support/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	file:
GlyphsList	support/imgui/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of GlyphsMap)$/;"	m	struct:ImFontBuildSrcData	file:
GlyphsSet	support/imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoint. This will be a maximum of 8KB)$/;"	m	struct:ImFontBuildSrcData	file:
GlyphsSet	support/imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ This is used to resolve collision when multiple sources are merged into a same destination font.$/;"	m	struct:ImFontBuildDstData	file:
GrabMinSize	support/imgui/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\/scrollbar.$/;"	m	struct:ImGuiStyle
GrabRounding	support/imgui/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.$/;"	m	struct:ImGuiStyle
Grid	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Grid : private GridData$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
GridBlindDataClass	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridBlindDataClass : uint32_t { Unknown = 0,$/;"	c	class:nanovdb::GridType::GridClass
GridBlindDataSemantic	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridBlindDataSemantic : uint32_t { Unknown = 0,$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass
GridClass	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridClass : uint32_t { Unknown = 0,$/;"	c	class:nanovdb::GridType
GridFlags	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridFlags : uint32_t {$/;"	c	class:nanovdb::GridType::GridClass
GridHandle	optixVolumeViewer/nanovdb/util/GridHandle.h	/^GridHandle<BufferT>::GridHandle(BufferT&& resources)$/;"	f	class:nanovdb::GridHandle
GridHandle	optixVolumeViewer/nanovdb/util/GridHandle.h	/^class GridHandle : public GridHandleBase$/;"	c	namespace:nanovdb
GridHandleBase	optixVolumeViewer/nanovdb/util/GridHandle.h	/^class GridHandleBase$/;"	c	namespace:nanovdb
GridMetaData	optixVolumeViewer/nanovdb/NanoVDB.h	/^class GridMetaData$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
GridMetaData	optixVolumeViewer/nanovdb/util/IO.h	/^    GridMetaData() {}$/;"	f	struct:nanovdb::io::Codec::GridMetaData
GridMetaData	optixVolumeViewer/nanovdb/util/IO.h	/^inline GridMetaData::GridMetaData(uint64_t size, Codec c, const NanoGrid<ValueT>& grid)$/;"	f	class:nanovdb::io::Codec::GridMetaData
GridMetaData	optixVolumeViewer/nanovdb/util/IO.h	/^struct GridMetaData : public MetaData$/;"	s	class:nanovdb::io::Codec
GridName	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                           GridName = 3,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass
GridType	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridType : uint32_t { Unknown = 0,$/;"	c	namespace:nanovdb
GroupOffset	support/imgui/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData
GroupStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;$/;"	m	struct:ImGuiWindowTempData
GrowIndex	support/imgui/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont
GuidEffect	support/GLFW/deps/mingw/dinput.h	/^  GUID        GuidEffect;$/;"	m	struct:DIFILEEFFECT
HAVE_WINAPIFAMILY	support/glad/glad.c	39;"	d	file:
HAVE_WINAPIFAMILY	support/glad/glad.c	42;"	d	file:
HDDA	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ HDDA(const RayT& ray, int dim) { this->init(ray, dim); }$/;"	f	class:nanovdb::HDDA
HDDA	optixVolumeViewer/nanovdb/util/HDDA.h	/^class HDDA$/;"	c	namespace:nanovdb
HEX	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	731;"	d	file:
HEX	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	716;"	d	file:
HIT_INSIDE_FROM_INSIDE	cuda/GeometryData.h	/^            HIT_INSIDE_FROM_INSIDE   = 1u << 3$/;"	e	enum:GeometryData::SphereShell::HitType
HIT_INSIDE_FROM_OUTSIDE	cuda/GeometryData.h	/^            HIT_INSIDE_FROM_OUTSIDE  = 1u << 2,$/;"	e	enum:GeometryData::SphereShell::HitType
HIT_OUTSIDE_FROM_INSIDE	cuda/GeometryData.h	/^            HIT_OUTSIDE_FROM_INSIDE  = 1u << 1,$/;"	e	enum:GeometryData::SphereShell::HitType
HIT_OUTSIDE_FROM_OUTSIDE	cuda/GeometryData.h	/^            HIT_OUTSIDE_FROM_OUTSIDE = 1u << 0,$/;"	e	enum:GeometryData::SphereShell::HitType
HSV	support/imgui/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }$/;"	f	struct:ImColor
HUF_DECBITS	support/tinyexr/tinyexr.h	/^const int HUF_DECBITS = 14;  \/\/ decoding bit size (>= 8)$/;"	m	namespace:tinyexr
HUF_DECMASK	support/tinyexr/tinyexr.h	/^const int HUF_DECMASK = HUF_DECSIZE - 1;$/;"	m	namespace:tinyexr
HUF_DECSIZE	support/tinyexr/tinyexr.h	/^const int HUF_DECSIZE = 1 << HUF_DECBITS;        \/\/ decoding table size$/;"	m	namespace:tinyexr
HUF_ENCBITS	support/tinyexr/tinyexr.h	/^const int HUF_ENCBITS = 16;  \/\/ literal (value) bit length$/;"	m	namespace:tinyexr
HUF_ENCSIZE	support/tinyexr/tinyexr.h	/^const int HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;  \/\/ encoding table size$/;"	m	namespace:tinyexr
Hair	optixHair/Hair.cpp	/^Hair::Hair( const OptixDeviceContext context, const std::string& fileName )$/;"	f	class:Hair
Hair	optixHair/Hair.h	/^class Hair$/;"	c
HairProgramGroups	optixHair/ProgramGroups.cpp	/^HairProgramGroups::HairProgramGroups( const OptixDeviceContext context, OptixPipelineCompileOptions pipeOptions, unsigned int buildFlags )$/;"	f	class:HairProgramGroups
HairProgramGroups	optixHair/ProgramGroups.h	/^class HairProgramGroups : public ProgramGroups$/;"	c
HairState	optixHair/optixHair.h	/^struct HairState$/;"	s
Has	support/tinygltf/tiny_gltf.h	/^  bool Has(const std::string &key) const {$/;"	f	class:tinygltf::Value
HasAverage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    HasAverage = 1 << 3,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
HasBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    HasBBox = 1 << 1,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
HasCloseButton	support/imgui/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a close button (p_open != NULL)$/;"	m	struct:ImGuiWindow
HasMinMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^    HasMinMax = 1 << 2,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
HasSelection	support/imgui/imgui.h	/^    bool                HasSelection() const { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData
HasSelection	support/imgui/imgui_internal.h	/^    bool                HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState
HasStdDeviation	optixVolumeViewer/nanovdb/NanoVDB.h	/^    HasStdDeviation = 1 << 4,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
HasTruncatedGridname	optixVolumeViewer/nanovdb/NanoVDB.h	/^    HasTruncatedGridname = 1 << 0,$/;"	m	class:nanovdb::GridType::GridClass::GridFlags
Head	optixHair/Head.cpp	/^Head::Head( const OptixDeviceContext context, const std::string& fileName )$/;"	f	class:Head
Head	optixHair/Head.h	/^class Head$/;"	c
Header	optixVolumeViewer/nanovdb/util/IO.h	/^    Header(Codec c = Codec::NONE)$/;"	f	struct:nanovdb::io::Codec::Header
Header	optixVolumeViewer/nanovdb/util/IO.h	/^struct Header$/;"	s	class:nanovdb::io::Codec
HeaderInfo	support/tinyexr/tinyexr.h	/^typedef struct HeaderInfo {$/;"	s	namespace:tinyexr
HeaderInfo	support/tinyexr/tinyexr.h	/^} HeaderInfo;$/;"	t	namespace:tinyexr	typeref:struct:tinyexr::HeaderInfo
Height	support/imgui/imgui.h	/^        unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlas::CustomRect
HelpMarker	support/imgui/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	file:
HidCode	support/GLFW/deps/mingw/xinput.h	/^    BYTE HidCode;$/;"	m	struct:_XINPUT_KEYSTROKE
Hidden	support/imgui/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== (HiddenFramesForResize > 0) ||$/;"	m	struct:ImGuiWindow
HiddenFramesForResize	support/imgui/imgui_internal.h	/^    int                     HiddenFramesForResize;              \/\/ Hide the window for N frames while allowing items to be submitted so we can measure their size$/;"	m	struct:ImGuiWindow
HiddenFramesRegular	support/imgui/imgui_internal.h	/^    int                     HiddenFramesRegular;                \/\/ Hide the window for N frames$/;"	m	struct:ImGuiWindow
History	support/imgui/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	file:
HistoryPos	support/imgui/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	file:
Hit	optixRaycasting/optixRaycastingKernels.h	/^struct Hit$/;"	s
HitGroupData	cuda/whitted.h	/^struct HitGroupData$/;"	s	namespace:whitted
HitGroupData	optixBoundValues/optixBoundValues.h	/^struct HitGroupData$/;"	s
HitGroupData	optixCurves/optixCurves.h	/^struct HitGroupData$/;"	s
HitGroupData	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^struct HitGroupData$/;"	s
HitGroupData	optixDynamicGeometry/optixDynamicGeometry.h	/^struct HitGroupData$/;"	s
HitGroupData	optixDynamicMaterials/optixDynamicMaterials.h	/^struct HitGroupData$/;"	s
HitGroupData	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct HitGroupData$/;"	s
HitGroupData	optixMotionGeometry/optixMotionGeometry.h	/^struct HitGroupData$/;"	s
HitGroupData	optixMultiGPU/optixMultiGPU.h	/^struct HitGroupData$/;"	s
HitGroupData	optixNVLink/optixNVLink.h	/^struct HitGroupData$/;"	s
HitGroupData	optixOpacityMicromap/optixOpacityMicromap.h	/^struct HitGroupData$/;"	s
HitGroupData	optixPathTracer/optixPathTracer.h	/^struct HitGroupData$/;"	s
HitGroupData	optixRibbons/optixRibbons.h	/^struct HitGroupData$/;"	s
HitGroupData	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^struct HitGroupData$/;"	s
HitGroupData	optixSphere/optixSphere.h	/^struct HitGroupData$/;"	s
HitGroupData	optixTriangle/optixTriangle.h	/^struct HitGroupData$/;"	s
HitGroupData	optixVolumeViewer/volume.h	/^struct HitGroupData$/;"	s
HitGroupRecord	optixBoundValues/optixBoundValues.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixCallablePrograms/optixCallablePrograms.cpp	/^typedef Record<CallableProgramsHitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixConsole/optixConsole.cpp	/^typedef sutil::Record<whitted::HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixCutouts/optixCutouts.cpp	/^typedef Record<CutoutsHitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixDynamicGeometry/optixDynamicGeometry.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixMotionGeometry/optixMotionGeometry.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixMultiGPU/optixMultiGPU.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixNVLink/optixNVLink.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixPathTracer/optixPathTracer.cpp	/^typedef Record<HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixRaycasting/optixRaycasting.cpp	/^typedef sutil::Record<whitted::HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^typedef Record<HitGroupData>       HitGroupRecord;$/;"	t	file:
HitGroupRecord	optixVolumeViewer/optixVolumeViewer.h	/^typedef sutil::Record<HitGroupData> HitGroupRecord;$/;"	t
HitGroupRecord	optixWhitted/optixWhitted.cpp	/^typedef sutil::Record<whitted::HitGroupData> HitGroupRecord;$/;"	t	file:
HitGroupRecord	sutil/Scene.cpp	/^typedef Record<whitted::HitGroupData> HitGroupRecord;$/;"	t	namespace:sutil::__anon123	file:
HitGroupSbtRecord	optixCurves/optixCurves.cpp	/^typedef SbtRecord<HitGroupData> HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixCustomPrimitive/optixCustomPrimitive.cpp	/^typedef SbtRecord<whitted::HitGroupData> HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixDynamicMaterials/optixDynamicMaterials.cpp	/^typedef SbtRecord<HitGroupData> HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixOpacityMicromap/optixOpacityMicromap.cpp	/^typedef SbtRecord<HitGroupData>   HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixRibbons/optixRibbons.cpp	/^typedef SbtRecord<HitGroupData> HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixSphere/optixSphere.cpp	/^typedef SbtRecord<HitGroupData> HitGroupSbtRecord;$/;"	t	file:
HitGroupSbtRecord	optixTriangle/optixTriangle.cpp	/^typedef SbtRecord<HitGroupData>   HitGroupSbtRecord;$/;"	t	file:
HitRecord	optixHair/optixHair.h	/^typedef sutil::Record<whitted::HitGroupData> HitRecord;$/;"	t
HitType	cuda/GeometryData.h	/^        enum HitType$/;"	g	struct:GeometryData::SphereShell
HostBuffer	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    HostBuffer(uint64_t size = 0)$/;"	f	class:nanovdb::HostBuffer
HostBuffer	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^class HostBuffer$/;"	c	namespace:nanovdb
HoveredId	support/imgui/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget$/;"	m	struct:ImGuiContext
HoveredIdAllowOverlap	support/imgui/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext
HoveredIdNotActiveTimer	support/imgui/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering time where the item has not been active$/;"	m	struct:ImGuiContext
HoveredIdPreviousFrame	support/imgui/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext
HoveredIdTimer	support/imgui/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering time$/;"	m	struct:ImGuiContext
HoveredRootWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredRootWindow;                  \/\/ Will catch mouse inputs (for focus\/move only)$/;"	m	struct:ImGuiContext
HoveredWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Will catch mouse inputs$/;"	m	struct:ImGuiContext
HufDec	support/tinyexr/tinyexr.h	/^struct HufDec {  \/\/ short code    long code$/;"	s	namespace:tinyexr
IAS	optixVolumeViewer/optixVolumeViewer.h	/^struct IAS$/;"	s
ID	support/imgui/imgui.h	/^        unsigned int    ID;             \/\/ Input    \/\/ User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other\/internal\/custom texture data.$/;"	m	struct:ImFontAtlas::CustomRect
ID	support/imgui/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHash(Name)$/;"	m	struct:ImGuiWindow
ID	support/imgui/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState
ID	support/imgui/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar
ID	support/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiColumnsSet
ID	support/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem
ID	support/imgui/imgui_internal.h	/^    ImGuiID       ID;           \/\/ Best candidate$/;"	m	struct:ImGuiNavMoveResult
ID	support/imgui/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings
IDStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes seeded with the value at the top of the stack$/;"	m	struct:ImGuiWindow
ID_VOID_MAIN	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IDirectInput	support/GLFW/deps/mingw/dinput.h	123;"	d
IDirectInput2	support/GLFW/deps/mingw/dinput.h	126;"	d
IDirectInput2_AddRef	support/GLFW/deps/mingw/dinput.h	2265;"	d
IDirectInput2_AddRef	support/GLFW/deps/mingw/dinput.h	2278;"	d
IDirectInput2_CreateDevice	support/GLFW/deps/mingw/dinput.h	2268;"	d
IDirectInput2_CreateDevice	support/GLFW/deps/mingw/dinput.h	2281;"	d
IDirectInput2_EnumDevices	support/GLFW/deps/mingw/dinput.h	2269;"	d
IDirectInput2_EnumDevices	support/GLFW/deps/mingw/dinput.h	2282;"	d
IDirectInput2_FindDevice	support/GLFW/deps/mingw/dinput.h	2274;"	d
IDirectInput2_FindDevice	support/GLFW/deps/mingw/dinput.h	2287;"	d
IDirectInput2_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2270;"	d
IDirectInput2_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2283;"	d
IDirectInput2_Initialize	support/GLFW/deps/mingw/dinput.h	2272;"	d
IDirectInput2_Initialize	support/GLFW/deps/mingw/dinput.h	2285;"	d
IDirectInput2_QueryInterface	support/GLFW/deps/mingw/dinput.h	2264;"	d
IDirectInput2_QueryInterface	support/GLFW/deps/mingw/dinput.h	2277;"	d
IDirectInput2_Release	support/GLFW/deps/mingw/dinput.h	2266;"	d
IDirectInput2_Release	support/GLFW/deps/mingw/dinput.h	2279;"	d
IDirectInput2_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2271;"	d
IDirectInput2_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2284;"	d
IDirectInput7	support/GLFW/deps/mingw/dinput.h	129;"	d
IDirectInput7_AddRef	support/GLFW/deps/mingw/dinput.h	2339;"	d
IDirectInput7_AddRef	support/GLFW/deps/mingw/dinput.h	2354;"	d
IDirectInput7_CreateDevice	support/GLFW/deps/mingw/dinput.h	2342;"	d
IDirectInput7_CreateDevice	support/GLFW/deps/mingw/dinput.h	2357;"	d
IDirectInput7_CreateDeviceEx	support/GLFW/deps/mingw/dinput.h	2350;"	d
IDirectInput7_CreateDeviceEx	support/GLFW/deps/mingw/dinput.h	2365;"	d
IDirectInput7_EnumDevices	support/GLFW/deps/mingw/dinput.h	2343;"	d
IDirectInput7_EnumDevices	support/GLFW/deps/mingw/dinput.h	2358;"	d
IDirectInput7_FindDevice	support/GLFW/deps/mingw/dinput.h	2348;"	d
IDirectInput7_FindDevice	support/GLFW/deps/mingw/dinput.h	2363;"	d
IDirectInput7_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2344;"	d
IDirectInput7_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2359;"	d
IDirectInput7_Initialize	support/GLFW/deps/mingw/dinput.h	2346;"	d
IDirectInput7_Initialize	support/GLFW/deps/mingw/dinput.h	2361;"	d
IDirectInput7_QueryInterface	support/GLFW/deps/mingw/dinput.h	2338;"	d
IDirectInput7_QueryInterface	support/GLFW/deps/mingw/dinput.h	2353;"	d
IDirectInput7_Release	support/GLFW/deps/mingw/dinput.h	2340;"	d
IDirectInput7_Release	support/GLFW/deps/mingw/dinput.h	2355;"	d
IDirectInput7_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2345;"	d
IDirectInput7_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2360;"	d
IDirectInput8	support/GLFW/deps/mingw/dinput.h	133;"	d
IDirectInput8_AddRef	support/GLFW/deps/mingw/dinput.h	2418;"	d
IDirectInput8_AddRef	support/GLFW/deps/mingw/dinput.h	2432;"	d
IDirectInput8_ConfigureDevices	support/GLFW/deps/mingw/dinput.h	2428;"	d
IDirectInput8_ConfigureDevices	support/GLFW/deps/mingw/dinput.h	2442;"	d
IDirectInput8_CreateDevice	support/GLFW/deps/mingw/dinput.h	2421;"	d
IDirectInput8_CreateDevice	support/GLFW/deps/mingw/dinput.h	2435;"	d
IDirectInput8_EnumDevices	support/GLFW/deps/mingw/dinput.h	2422;"	d
IDirectInput8_EnumDevices	support/GLFW/deps/mingw/dinput.h	2436;"	d
IDirectInput8_EnumDevicesBySemantics	support/GLFW/deps/mingw/dinput.h	2427;"	d
IDirectInput8_EnumDevicesBySemantics	support/GLFW/deps/mingw/dinput.h	2441;"	d
IDirectInput8_FindDevice	support/GLFW/deps/mingw/dinput.h	2426;"	d
IDirectInput8_FindDevice	support/GLFW/deps/mingw/dinput.h	2440;"	d
IDirectInput8_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2423;"	d
IDirectInput8_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2437;"	d
IDirectInput8_Initialize	support/GLFW/deps/mingw/dinput.h	2425;"	d
IDirectInput8_Initialize	support/GLFW/deps/mingw/dinput.h	2439;"	d
IDirectInput8_QueryInterface	support/GLFW/deps/mingw/dinput.h	2417;"	d
IDirectInput8_QueryInterface	support/GLFW/deps/mingw/dinput.h	2431;"	d
IDirectInput8_Release	support/GLFW/deps/mingw/dinput.h	2419;"	d
IDirectInput8_Release	support/GLFW/deps/mingw/dinput.h	2433;"	d
IDirectInput8_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2424;"	d
IDirectInput8_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2438;"	d
IDirectInputDevice	support/GLFW/deps/mingw/dinput.h	137;"	d
IDirectInputDevice2	support/GLFW/deps/mingw/dinput.h	141;"	d
IDirectInputDevice2_Acquire	support/GLFW/deps/mingw/dinput.h	1725;"	d
IDirectInputDevice2_Acquire	support/GLFW/deps/mingw/dinput.h	1756;"	d
IDirectInputDevice2_AddRef	support/GLFW/deps/mingw/dinput.h	1718;"	d
IDirectInputDevice2_AddRef	support/GLFW/deps/mingw/dinput.h	1749;"	d
IDirectInputDevice2_CreateEffect	support/GLFW/deps/mingw/dinput.h	1737;"	d
IDirectInputDevice2_CreateEffect	support/GLFW/deps/mingw/dinput.h	1768;"	d
IDirectInputDevice2_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	1742;"	d
IDirectInputDevice2_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	1773;"	d
IDirectInputDevice2_EnumEffects	support/GLFW/deps/mingw/dinput.h	1738;"	d
IDirectInputDevice2_EnumEffects	support/GLFW/deps/mingw/dinput.h	1769;"	d
IDirectInputDevice2_EnumObjects	support/GLFW/deps/mingw/dinput.h	1722;"	d
IDirectInputDevice2_EnumObjects	support/GLFW/deps/mingw/dinput.h	1753;"	d
IDirectInputDevice2_Escape	support/GLFW/deps/mingw/dinput.h	1743;"	d
IDirectInputDevice2_Escape	support/GLFW/deps/mingw/dinput.h	1774;"	d
IDirectInputDevice2_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1721;"	d
IDirectInputDevice2_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1752;"	d
IDirectInputDevice2_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1728;"	d
IDirectInputDevice2_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1759;"	d
IDirectInputDevice2_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1733;"	d
IDirectInputDevice2_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1764;"	d
IDirectInputDevice2_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1727;"	d
IDirectInputDevice2_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1758;"	d
IDirectInputDevice2_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	1739;"	d
IDirectInputDevice2_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	1770;"	d
IDirectInputDevice2_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	1740;"	d
IDirectInputDevice2_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	1771;"	d
IDirectInputDevice2_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1732;"	d
IDirectInputDevice2_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1763;"	d
IDirectInputDevice2_GetProperty	support/GLFW/deps/mingw/dinput.h	1723;"	d
IDirectInputDevice2_GetProperty	support/GLFW/deps/mingw/dinput.h	1754;"	d
IDirectInputDevice2_Initialize	support/GLFW/deps/mingw/dinput.h	1735;"	d
IDirectInputDevice2_Initialize	support/GLFW/deps/mingw/dinput.h	1766;"	d
IDirectInputDevice2_Poll	support/GLFW/deps/mingw/dinput.h	1744;"	d
IDirectInputDevice2_Poll	support/GLFW/deps/mingw/dinput.h	1775;"	d
IDirectInputDevice2_QueryInterface	support/GLFW/deps/mingw/dinput.h	1717;"	d
IDirectInputDevice2_QueryInterface	support/GLFW/deps/mingw/dinput.h	1748;"	d
IDirectInputDevice2_Release	support/GLFW/deps/mingw/dinput.h	1719;"	d
IDirectInputDevice2_Release	support/GLFW/deps/mingw/dinput.h	1750;"	d
IDirectInputDevice2_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1734;"	d
IDirectInputDevice2_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1765;"	d
IDirectInputDevice2_SendDeviceData	support/GLFW/deps/mingw/dinput.h	1745;"	d
IDirectInputDevice2_SendDeviceData	support/GLFW/deps/mingw/dinput.h	1776;"	d
IDirectInputDevice2_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	1741;"	d
IDirectInputDevice2_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	1772;"	d
IDirectInputDevice2_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1731;"	d
IDirectInputDevice2_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1762;"	d
IDirectInputDevice2_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1729;"	d
IDirectInputDevice2_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1760;"	d
IDirectInputDevice2_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1730;"	d
IDirectInputDevice2_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1761;"	d
IDirectInputDevice2_SetProperty	support/GLFW/deps/mingw/dinput.h	1724;"	d
IDirectInputDevice2_SetProperty	support/GLFW/deps/mingw/dinput.h	1755;"	d
IDirectInputDevice2_Unacquire	support/GLFW/deps/mingw/dinput.h	1726;"	d
IDirectInputDevice2_Unacquire	support/GLFW/deps/mingw/dinput.h	1757;"	d
IDirectInputDevice7	support/GLFW/deps/mingw/dinput.h	146;"	d
IDirectInputDevice7_Acquire	support/GLFW/deps/mingw/dinput.h	1875;"	d
IDirectInputDevice7_Acquire	support/GLFW/deps/mingw/dinput.h	1909;"	d
IDirectInputDevice7_AddRef	support/GLFW/deps/mingw/dinput.h	1868;"	d
IDirectInputDevice7_AddRef	support/GLFW/deps/mingw/dinput.h	1902;"	d
IDirectInputDevice7_CreateEffect	support/GLFW/deps/mingw/dinput.h	1887;"	d
IDirectInputDevice7_CreateEffect	support/GLFW/deps/mingw/dinput.h	1921;"	d
IDirectInputDevice7_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	1892;"	d
IDirectInputDevice7_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	1926;"	d
IDirectInputDevice7_EnumEffects	support/GLFW/deps/mingw/dinput.h	1888;"	d
IDirectInputDevice7_EnumEffects	support/GLFW/deps/mingw/dinput.h	1922;"	d
IDirectInputDevice7_EnumEffectsInFile	support/GLFW/deps/mingw/dinput.h	1897;"	d
IDirectInputDevice7_EnumEffectsInFile	support/GLFW/deps/mingw/dinput.h	1931;"	d
IDirectInputDevice7_EnumObjects	support/GLFW/deps/mingw/dinput.h	1872;"	d
IDirectInputDevice7_EnumObjects	support/GLFW/deps/mingw/dinput.h	1906;"	d
IDirectInputDevice7_Escape	support/GLFW/deps/mingw/dinput.h	1893;"	d
IDirectInputDevice7_Escape	support/GLFW/deps/mingw/dinput.h	1927;"	d
IDirectInputDevice7_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1871;"	d
IDirectInputDevice7_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1905;"	d
IDirectInputDevice7_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1878;"	d
IDirectInputDevice7_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1912;"	d
IDirectInputDevice7_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1883;"	d
IDirectInputDevice7_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1917;"	d
IDirectInputDevice7_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1877;"	d
IDirectInputDevice7_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1911;"	d
IDirectInputDevice7_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	1889;"	d
IDirectInputDevice7_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	1923;"	d
IDirectInputDevice7_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	1890;"	d
IDirectInputDevice7_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	1924;"	d
IDirectInputDevice7_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1882;"	d
IDirectInputDevice7_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1916;"	d
IDirectInputDevice7_GetProperty	support/GLFW/deps/mingw/dinput.h	1873;"	d
IDirectInputDevice7_GetProperty	support/GLFW/deps/mingw/dinput.h	1907;"	d
IDirectInputDevice7_Initialize	support/GLFW/deps/mingw/dinput.h	1885;"	d
IDirectInputDevice7_Initialize	support/GLFW/deps/mingw/dinput.h	1919;"	d
IDirectInputDevice7_Poll	support/GLFW/deps/mingw/dinput.h	1894;"	d
IDirectInputDevice7_Poll	support/GLFW/deps/mingw/dinput.h	1928;"	d
IDirectInputDevice7_QueryInterface	support/GLFW/deps/mingw/dinput.h	1867;"	d
IDirectInputDevice7_QueryInterface	support/GLFW/deps/mingw/dinput.h	1901;"	d
IDirectInputDevice7_Release	support/GLFW/deps/mingw/dinput.h	1869;"	d
IDirectInputDevice7_Release	support/GLFW/deps/mingw/dinput.h	1903;"	d
IDirectInputDevice7_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1884;"	d
IDirectInputDevice7_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1918;"	d
IDirectInputDevice7_SendDeviceData	support/GLFW/deps/mingw/dinput.h	1895;"	d
IDirectInputDevice7_SendDeviceData	support/GLFW/deps/mingw/dinput.h	1929;"	d
IDirectInputDevice7_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	1891;"	d
IDirectInputDevice7_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	1925;"	d
IDirectInputDevice7_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1881;"	d
IDirectInputDevice7_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1915;"	d
IDirectInputDevice7_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1879;"	d
IDirectInputDevice7_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1913;"	d
IDirectInputDevice7_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1880;"	d
IDirectInputDevice7_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1914;"	d
IDirectInputDevice7_SetProperty	support/GLFW/deps/mingw/dinput.h	1874;"	d
IDirectInputDevice7_SetProperty	support/GLFW/deps/mingw/dinput.h	1908;"	d
IDirectInputDevice7_Unacquire	support/GLFW/deps/mingw/dinput.h	1876;"	d
IDirectInputDevice7_Unacquire	support/GLFW/deps/mingw/dinput.h	1910;"	d
IDirectInputDevice7_WriteEffectToFile	support/GLFW/deps/mingw/dinput.h	1898;"	d
IDirectInputDevice7_WriteEffectToFile	support/GLFW/deps/mingw/dinput.h	1932;"	d
IDirectInputDevice8	support/GLFW/deps/mingw/dinput.h	151;"	d
IDirectInputDevice8_Acquire	support/GLFW/deps/mingw/dinput.h	2040;"	d
IDirectInputDevice8_Acquire	support/GLFW/deps/mingw/dinput.h	2078;"	d
IDirectInputDevice8_AddRef	support/GLFW/deps/mingw/dinput.h	2033;"	d
IDirectInputDevice8_AddRef	support/GLFW/deps/mingw/dinput.h	2071;"	d
IDirectInputDevice8_BuildActionMap	support/GLFW/deps/mingw/dinput.h	2065;"	d
IDirectInputDevice8_BuildActionMap	support/GLFW/deps/mingw/dinput.h	2103;"	d
IDirectInputDevice8_CreateEffect	support/GLFW/deps/mingw/dinput.h	2052;"	d
IDirectInputDevice8_CreateEffect	support/GLFW/deps/mingw/dinput.h	2090;"	d
IDirectInputDevice8_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	2057;"	d
IDirectInputDevice8_EnumCreatedEffectObjects	support/GLFW/deps/mingw/dinput.h	2095;"	d
IDirectInputDevice8_EnumEffects	support/GLFW/deps/mingw/dinput.h	2053;"	d
IDirectInputDevice8_EnumEffects	support/GLFW/deps/mingw/dinput.h	2091;"	d
IDirectInputDevice8_EnumEffectsInFile	support/GLFW/deps/mingw/dinput.h	2062;"	d
IDirectInputDevice8_EnumEffectsInFile	support/GLFW/deps/mingw/dinput.h	2100;"	d
IDirectInputDevice8_EnumObjects	support/GLFW/deps/mingw/dinput.h	2037;"	d
IDirectInputDevice8_EnumObjects	support/GLFW/deps/mingw/dinput.h	2075;"	d
IDirectInputDevice8_Escape	support/GLFW/deps/mingw/dinput.h	2058;"	d
IDirectInputDevice8_Escape	support/GLFW/deps/mingw/dinput.h	2096;"	d
IDirectInputDevice8_GetCapabilities	support/GLFW/deps/mingw/dinput.h	2036;"	d
IDirectInputDevice8_GetCapabilities	support/GLFW/deps/mingw/dinput.h	2074;"	d
IDirectInputDevice8_GetDeviceData	support/GLFW/deps/mingw/dinput.h	2043;"	d
IDirectInputDevice8_GetDeviceData	support/GLFW/deps/mingw/dinput.h	2081;"	d
IDirectInputDevice8_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	2048;"	d
IDirectInputDevice8_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	2086;"	d
IDirectInputDevice8_GetDeviceState	support/GLFW/deps/mingw/dinput.h	2042;"	d
IDirectInputDevice8_GetDeviceState	support/GLFW/deps/mingw/dinput.h	2080;"	d
IDirectInputDevice8_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	2054;"	d
IDirectInputDevice8_GetEffectInfo	support/GLFW/deps/mingw/dinput.h	2092;"	d
IDirectInputDevice8_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	2055;"	d
IDirectInputDevice8_GetForceFeedbackState	support/GLFW/deps/mingw/dinput.h	2093;"	d
IDirectInputDevice8_GetImageInfo	support/GLFW/deps/mingw/dinput.h	2067;"	d
IDirectInputDevice8_GetImageInfo	support/GLFW/deps/mingw/dinput.h	2105;"	d
IDirectInputDevice8_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	2047;"	d
IDirectInputDevice8_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	2085;"	d
IDirectInputDevice8_GetProperty	support/GLFW/deps/mingw/dinput.h	2038;"	d
IDirectInputDevice8_GetProperty	support/GLFW/deps/mingw/dinput.h	2076;"	d
IDirectInputDevice8_Initialize	support/GLFW/deps/mingw/dinput.h	2050;"	d
IDirectInputDevice8_Initialize	support/GLFW/deps/mingw/dinput.h	2088;"	d
IDirectInputDevice8_Poll	support/GLFW/deps/mingw/dinput.h	2059;"	d
IDirectInputDevice8_Poll	support/GLFW/deps/mingw/dinput.h	2097;"	d
IDirectInputDevice8_QueryInterface	support/GLFW/deps/mingw/dinput.h	2032;"	d
IDirectInputDevice8_QueryInterface	support/GLFW/deps/mingw/dinput.h	2070;"	d
IDirectInputDevice8_Release	support/GLFW/deps/mingw/dinput.h	2034;"	d
IDirectInputDevice8_Release	support/GLFW/deps/mingw/dinput.h	2072;"	d
IDirectInputDevice8_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2049;"	d
IDirectInputDevice8_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2087;"	d
IDirectInputDevice8_SendDeviceData	support/GLFW/deps/mingw/dinput.h	2060;"	d
IDirectInputDevice8_SendDeviceData	support/GLFW/deps/mingw/dinput.h	2098;"	d
IDirectInputDevice8_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	2056;"	d
IDirectInputDevice8_SendForceFeedbackCommand	support/GLFW/deps/mingw/dinput.h	2094;"	d
IDirectInputDevice8_SetActionMap	support/GLFW/deps/mingw/dinput.h	2066;"	d
IDirectInputDevice8_SetActionMap	support/GLFW/deps/mingw/dinput.h	2104;"	d
IDirectInputDevice8_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	2046;"	d
IDirectInputDevice8_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	2084;"	d
IDirectInputDevice8_SetDataFormat	support/GLFW/deps/mingw/dinput.h	2044;"	d
IDirectInputDevice8_SetDataFormat	support/GLFW/deps/mingw/dinput.h	2082;"	d
IDirectInputDevice8_SetEventNotification	support/GLFW/deps/mingw/dinput.h	2045;"	d
IDirectInputDevice8_SetEventNotification	support/GLFW/deps/mingw/dinput.h	2083;"	d
IDirectInputDevice8_SetProperty	support/GLFW/deps/mingw/dinput.h	2039;"	d
IDirectInputDevice8_SetProperty	support/GLFW/deps/mingw/dinput.h	2077;"	d
IDirectInputDevice8_Unacquire	support/GLFW/deps/mingw/dinput.h	2041;"	d
IDirectInputDevice8_Unacquire	support/GLFW/deps/mingw/dinput.h	2079;"	d
IDirectInputDevice8_WriteEffectToFile	support/GLFW/deps/mingw/dinput.h	2063;"	d
IDirectInputDevice8_WriteEffectToFile	support/GLFW/deps/mingw/dinput.h	2101;"	d
IDirectInputDevice_Acquire	support/GLFW/deps/mingw/dinput.h	1601;"	d
IDirectInputDevice_Acquire	support/GLFW/deps/mingw/dinput.h	1622;"	d
IDirectInputDevice_AddRef	support/GLFW/deps/mingw/dinput.h	1594;"	d
IDirectInputDevice_AddRef	support/GLFW/deps/mingw/dinput.h	1615;"	d
IDirectInputDevice_EnumObjects	support/GLFW/deps/mingw/dinput.h	1598;"	d
IDirectInputDevice_EnumObjects	support/GLFW/deps/mingw/dinput.h	1619;"	d
IDirectInputDevice_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1597;"	d
IDirectInputDevice_GetCapabilities	support/GLFW/deps/mingw/dinput.h	1618;"	d
IDirectInputDevice_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1604;"	d
IDirectInputDevice_GetDeviceData	support/GLFW/deps/mingw/dinput.h	1625;"	d
IDirectInputDevice_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1609;"	d
IDirectInputDevice_GetDeviceInfo	support/GLFW/deps/mingw/dinput.h	1630;"	d
IDirectInputDevice_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1603;"	d
IDirectInputDevice_GetDeviceState	support/GLFW/deps/mingw/dinput.h	1624;"	d
IDirectInputDevice_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1608;"	d
IDirectInputDevice_GetObjectInfo	support/GLFW/deps/mingw/dinput.h	1629;"	d
IDirectInputDevice_GetProperty	support/GLFW/deps/mingw/dinput.h	1599;"	d
IDirectInputDevice_GetProperty	support/GLFW/deps/mingw/dinput.h	1620;"	d
IDirectInputDevice_Initialize	support/GLFW/deps/mingw/dinput.h	1611;"	d
IDirectInputDevice_Initialize	support/GLFW/deps/mingw/dinput.h	1632;"	d
IDirectInputDevice_QueryInterface	support/GLFW/deps/mingw/dinput.h	1593;"	d
IDirectInputDevice_QueryInterface	support/GLFW/deps/mingw/dinput.h	1614;"	d
IDirectInputDevice_Release	support/GLFW/deps/mingw/dinput.h	1595;"	d
IDirectInputDevice_Release	support/GLFW/deps/mingw/dinput.h	1616;"	d
IDirectInputDevice_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1610;"	d
IDirectInputDevice_RunControlPanel	support/GLFW/deps/mingw/dinput.h	1631;"	d
IDirectInputDevice_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1607;"	d
IDirectInputDevice_SetCooperativeLevel	support/GLFW/deps/mingw/dinput.h	1628;"	d
IDirectInputDevice_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1605;"	d
IDirectInputDevice_SetDataFormat	support/GLFW/deps/mingw/dinput.h	1626;"	d
IDirectInputDevice_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1606;"	d
IDirectInputDevice_SetEventNotification	support/GLFW/deps/mingw/dinput.h	1627;"	d
IDirectInputDevice_SetProperty	support/GLFW/deps/mingw/dinput.h	1600;"	d
IDirectInputDevice_SetProperty	support/GLFW/deps/mingw/dinput.h	1621;"	d
IDirectInputDevice_Unacquire	support/GLFW/deps/mingw/dinput.h	1602;"	d
IDirectInputDevice_Unacquire	support/GLFW/deps/mingw/dinput.h	1623;"	d
IDirectInputEffect_AddRef	support/GLFW/deps/mingw/dinput.h	1499;"	d
IDirectInputEffect_AddRef	support/GLFW/deps/mingw/dinput.h	1515;"	d
IDirectInputEffect_Download	support/GLFW/deps/mingw/dinput.h	1509;"	d
IDirectInputEffect_Download	support/GLFW/deps/mingw/dinput.h	1525;"	d
IDirectInputEffect_Escape	support/GLFW/deps/mingw/dinput.h	1511;"	d
IDirectInputEffect_Escape	support/GLFW/deps/mingw/dinput.h	1527;"	d
IDirectInputEffect_GetEffectGuid	support/GLFW/deps/mingw/dinput.h	1503;"	d
IDirectInputEffect_GetEffectGuid	support/GLFW/deps/mingw/dinput.h	1519;"	d
IDirectInputEffect_GetEffectStatus	support/GLFW/deps/mingw/dinput.h	1508;"	d
IDirectInputEffect_GetEffectStatus	support/GLFW/deps/mingw/dinput.h	1524;"	d
IDirectInputEffect_GetParameters	support/GLFW/deps/mingw/dinput.h	1504;"	d
IDirectInputEffect_GetParameters	support/GLFW/deps/mingw/dinput.h	1520;"	d
IDirectInputEffect_Initialize	support/GLFW/deps/mingw/dinput.h	1502;"	d
IDirectInputEffect_Initialize	support/GLFW/deps/mingw/dinput.h	1518;"	d
IDirectInputEffect_QueryInterface	support/GLFW/deps/mingw/dinput.h	1498;"	d
IDirectInputEffect_QueryInterface	support/GLFW/deps/mingw/dinput.h	1514;"	d
IDirectInputEffect_Release	support/GLFW/deps/mingw/dinput.h	1500;"	d
IDirectInputEffect_Release	support/GLFW/deps/mingw/dinput.h	1516;"	d
IDirectInputEffect_SetParameters	support/GLFW/deps/mingw/dinput.h	1505;"	d
IDirectInputEffect_SetParameters	support/GLFW/deps/mingw/dinput.h	1521;"	d
IDirectInputEffect_Start	support/GLFW/deps/mingw/dinput.h	1506;"	d
IDirectInputEffect_Start	support/GLFW/deps/mingw/dinput.h	1522;"	d
IDirectInputEffect_Stop	support/GLFW/deps/mingw/dinput.h	1507;"	d
IDirectInputEffect_Stop	support/GLFW/deps/mingw/dinput.h	1523;"	d
IDirectInputEffect_Unload	support/GLFW/deps/mingw/dinput.h	1510;"	d
IDirectInputEffect_Unload	support/GLFW/deps/mingw/dinput.h	1526;"	d
IDirectInput_AddRef	support/GLFW/deps/mingw/dinput.h	2199;"	d
IDirectInput_AddRef	support/GLFW/deps/mingw/dinput.h	2210;"	d
IDirectInput_CreateDevice	support/GLFW/deps/mingw/dinput.h	2202;"	d
IDirectInput_CreateDevice	support/GLFW/deps/mingw/dinput.h	2213;"	d
IDirectInput_EnumDevices	support/GLFW/deps/mingw/dinput.h	2203;"	d
IDirectInput_EnumDevices	support/GLFW/deps/mingw/dinput.h	2214;"	d
IDirectInput_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2204;"	d
IDirectInput_GetDeviceStatus	support/GLFW/deps/mingw/dinput.h	2215;"	d
IDirectInput_Initialize	support/GLFW/deps/mingw/dinput.h	2206;"	d
IDirectInput_Initialize	support/GLFW/deps/mingw/dinput.h	2217;"	d
IDirectInput_QueryInterface	support/GLFW/deps/mingw/dinput.h	2198;"	d
IDirectInput_QueryInterface	support/GLFW/deps/mingw/dinput.h	2209;"	d
IDirectInput_Release	support/GLFW/deps/mingw/dinput.h	2200;"	d
IDirectInput_Release	support/GLFW/deps/mingw/dinput.h	2211;"	d
IDirectInput_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2205;"	d
IDirectInput_RunControlPanel	support/GLFW/deps/mingw/dinput.h	2216;"	d
IID_IDirectInput	support/GLFW/deps/mingw/dinput.h	122;"	d
IID_IDirectInput2	support/GLFW/deps/mingw/dinput.h	125;"	d
IID_IDirectInput7	support/GLFW/deps/mingw/dinput.h	128;"	d
IID_IDirectInput8	support/GLFW/deps/mingw/dinput.h	132;"	d
IID_IDirectInputDevice	support/GLFW/deps/mingw/dinput.h	136;"	d
IID_IDirectInputDevice2	support/GLFW/deps/mingw/dinput.h	140;"	d
IID_IDirectInputDevice7	support/GLFW/deps/mingw/dinput.h	145;"	d
IID_IDirectInputDevice8	support/GLFW/deps/mingw/dinput.h	150;"	d
IMGUI_API	support/imgui/imgui.h	55;"	d
IMGUI_CDECL	support/imgui/imgui_internal.h	140;"	d
IMGUI_CDECL	support/imgui/imgui_internal.h	142;"	d
IMGUI_CHECKVERSION	support/imgui/imgui.h	50;"	d
IMGUI_DEBUG_LOG	support/imgui/imgui_internal.h	133;"	d
IMGUI_DEBUG_NAV_RECTS	support/imgui/imgui.cpp	946;"	d	file:
IMGUI_DEBUG_NAV_SCORING	support/imgui/imgui.cpp	945;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	support/imgui/imgui.cpp	932;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	support/imgui/imgui_draw.cpp	30;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	support/imgui/imgui_widgets.cpp	36;"	d	file:
IMGUI_DISABLE_DEMO_WINDOWS	support/imgui/imgui_demo.cpp	108;"	d	file:
IMGUI_IMPL_API	support/imgui/imgui.h	58;"	d
IMGUI_IMPL_OPENGL_ES2	support/imgui/imgui_impl_opengl3.cpp	78;"	d	file:
IMGUI_IMPL_OPENGL_ES3	support/imgui/imgui_impl_opengl3.cpp	76;"	d	file:
IMGUI_IMPL_OPENGL_LOADER_GL3W	support/imgui/imgui_impl_opengl3.h	34;"	d
IMGUI_ONCE_UPON_A_FRAME	support/imgui/imgui.h	1572;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	support/imgui/imgui.h	888;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	support/imgui/imgui.h	889;"	d
IMGUI_STB_NAMESPACE	support/imgui/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TEST_ENGINE_ITEM_INFO	support/imgui/imgui_internal.h	1582;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	support/imgui/imgui_internal.h	1584;"	d
IMGUI_VERSION	support/imgui/imgui.h	48;"	d
IMGUI_VERSION_NUM	support/imgui/imgui.h	49;"	d
IM_ARRAYSIZE	support/imgui/imgui.h	73;"	d
IM_ASSERT	support/imgui/imgui.h	64;"	d
IM_COL32	support/imgui/imgui.h	1717;"	d
IM_COL32_A_MASK	support/imgui/imgui.h	1709;"	d
IM_COL32_A_MASK	support/imgui/imgui.h	1715;"	d
IM_COL32_A_SHIFT	support/imgui/imgui.h	1708;"	d
IM_COL32_A_SHIFT	support/imgui/imgui.h	1714;"	d
IM_COL32_BLACK	support/imgui/imgui.h	1719;"	d
IM_COL32_BLACK_TRANS	support/imgui/imgui.h	1720;"	d
IM_COL32_B_SHIFT	support/imgui/imgui.h	1707;"	d
IM_COL32_B_SHIFT	support/imgui/imgui.h	1713;"	d
IM_COL32_G_SHIFT	support/imgui/imgui.h	1706;"	d
IM_COL32_G_SHIFT	support/imgui/imgui.h	1712;"	d
IM_COL32_R_SHIFT	support/imgui/imgui.h	1705;"	d
IM_COL32_R_SHIFT	support/imgui/imgui.h	1711;"	d
IM_COL32_WHITE	support/imgui/imgui.h	1718;"	d
IM_DELETE	support/imgui/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f
IM_F32_TO_INT8_SAT	support/imgui/imgui_internal.h	136;"	d
IM_F32_TO_INT8_UNBOUND	support/imgui/imgui_internal.h	135;"	d
IM_FMTARGS	support/imgui/imgui.h	67;"	d
IM_FMTARGS	support/imgui/imgui.h	70;"	d
IM_FMTLIST	support/imgui/imgui.h	68;"	d
IM_FMTLIST	support/imgui/imgui.h	71;"	d
IM_MAX	support/imgui/imgui_demo.cpp	101;"	d	file:
IM_NEW	support/imgui/imgui.h	1558;"	d
IM_NEWLINE	support/imgui/imgui_demo.cpp	94;"	d	file:
IM_NEWLINE	support/imgui/imgui_demo.cpp	98;"	d	file:
IM_NEWLINE	support/imgui/imgui_internal.h	128;"	d
IM_NEWLINE	support/imgui/imgui_internal.h	130;"	d
IM_NORMALIZE2F_OVER_EPSILON_CLAMP	support/imgui/imgui_draw.cpp	665;"	d	file:
IM_NORMALIZE2F_OVER_ZERO	support/imgui/imgui_draw.cpp	664;"	d	file:
IM_OFFSETOF	support/imgui/imgui.h	74;"	d
IM_PI	support/imgui/imgui_internal.h	126;"	d
IM_PLACEMENT_NEW	support/imgui/imgui.h	1557;"	d
IM_S16_MAX	support/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	file:
IM_S16_MIN	support/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	file:
IM_S32_MAX	support/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	file:
IM_S32_MIN	support/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	file:
IM_S64_MAX	support/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	file:
IM_S64_MAX	support/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	file:
IM_S64_MIN	support/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	file:
IM_S64_MIN	support/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	file:
IM_S8_MAX	support/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	file:
IM_S8_MIN	support/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	file:
IM_STATIC_ASSERT	support/imgui/imgui_internal.h	134;"	d
IM_U16_MAX	support/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	file:
IM_U16_MIN	support/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	file:
IM_U32_MAX	support/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	file:
IM_U32_MIN	support/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	file:
IM_U64_MAX	support/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	file:
IM_U64_MAX	support/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	file:
IM_U64_MIN	support/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	file:
IM_U8_MAX	support/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	file:
IM_U8_MIN	support/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	file:
IM_UNUSED	support/imgui/imgui.h	75;"	d
INCLUDED_GETOPT_PORT_H	support/GLFW/deps/getopt.h	28;"	d
INCLUDE_STB_IMAGE_WRITE_H	support/tinygltf/stb_image_write.h	156;"	d
INCLUDE_STB_TEXTEDIT_H	support/imgui/imstb_textedit.h	277;"	d
INST_COUNT	optixDynamicGeometry/optixDynamicGeometry.cpp	/^const int32_t INST_COUNT = 4;$/;"	v
INTERFACE	support/GLFW/deps/mingw/dinput.h	1475;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1476;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1536;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1537;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1565;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1566;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1640;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1641;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1679;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1680;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1784;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1785;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1826;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1827;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1941;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1942;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1987;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	1988;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2161;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2162;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2180;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2181;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2223;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2224;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2244;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2245;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2293;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2294;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2316;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2317;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2373;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2374;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2395;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2396;"	d
INTERFACE	support/GLFW/deps/mingw/dinput.h	2413;"	d
INT_TYPE	support/tinygltf/tiny_gltf.h	/^  INT_TYPE = 2,$/;"	e	enum:tinygltf::__anon114
IO	support/imgui/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext
IS_DIGIT	optixMotionGeometry/tiny_obj_loader.h	745;"	d
IS_NEW_LINE	optixMotionGeometry/tiny_obj_loader.h	747;"	d
IS_SPACE	optixMotionGeometry/tiny_obj_loader.h	744;"	d
IS_UWP	support/glad/glad.c	49;"	d	file:
Identity	optixMotionGeometry/motionHelper.hpp	/^    inline static const Matrix3x4& Identity()$/;"	f	struct:__anon4::Matrix3x4
IdxBuffer	support/imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCmd::ElemCount of those$/;"	m	struct:ImDrawList
IdxBuffer	support/imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;$/;"	m	struct:ImDrawChannel
ImAcos	support/imgui/imgui_internal.h	/^static inline float  ImAcos(float x)                                            { return acosf(x); }$/;"	f
ImAcos01	support/imgui/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	file:
ImAddClampOverflow	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (a < mn - b)) return mn; if (b > 0 && (a > mx - b)) return mx; return a + b; }$/;"	f
ImAlphaBlendColor	support/imgui/imgui_widgets.cpp	/^static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)$/;"	f	file:
ImAtan2	support/imgui/imgui_internal.h	/^static inline float  ImAtan2(float y, float x)                                  { return atan2f(y, x); }$/;"	f
ImAtof	support/imgui/imgui_internal.h	/^static inline double ImAtof(const char* s)                                      { return atof(s); }$/;"	f
ImAtoi	support/imgui/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	file:
ImBoolVector	support/imgui/imgui_internal.h	/^    ImBoolVector()  { }$/;"	f	struct:ImBoolVector
ImBoolVector	support/imgui/imgui_internal.h	/^struct ImBoolVector$/;"	s
ImCeil	support/imgui/imgui_internal.h	/^static inline float  ImCeil(float x)                                            { return ceilf(x); }$/;"	f
ImCharIsBlankA	support/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f
ImCharIsBlankW	support/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == 0x3000; }$/;"	f
ImClamp	support/imgui/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2((v.x < mn.x) ? mn.x : (v.x > mx.x) ? mx.x : v.x, (v.y < mn.y) ? mn.y : (v.y > mx.y) ? mx.y : v.y); }$/;"	f
ImClamp	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn) ? mn : (v > mx) ? mx : v; }$/;"	f
ImColor	support/imgui/imgui.h	/^    ImColor()                                                       { Value.x = Value.y = Value.z = Value.w = 0.0f; }$/;"	f	struct:ImColor
ImColor	support/imgui/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f\/255.0f; Value.x = (float)((rgba>>IM_COL32_R_SHIFT)&0xFF) * sc; Value.y = (float)((rgba>>IM_COL32_G_SHIFT)&0xFF) * sc; Value.z = (float)((rgba>>IM_COL32_B_SHIFT)&0xFF) * sc; Value.w = (float)((rgba>>IM_COL32_A_SHIFT)&0xFF) * sc; }$/;"	f	struct:ImColor
ImColor	support/imgui/imgui.h	/^    ImColor(const ImVec4& col)                                      { Value = col; }$/;"	f	struct:ImColor
ImColor	support/imgui/imgui.h	/^    ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }$/;"	f	struct:ImColor
ImColor	support/imgui/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f\/255.0f; Value.x = (float)r * sc; Value.y = (float)g * sc; Value.z = (float)b * sc; Value.w = (float)a * sc; }$/;"	f	struct:ImColor
ImColor	support/imgui/imgui.h	/^struct ImColor$/;"	s
ImCos	support/imgui/imgui_internal.h	/^static inline float  ImCos(float x)                                             { return cosf(x); }$/;"	f
ImDot	support/imgui/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b.x + a.y * b.y; }$/;"	f
ImDrawCallback	support/imgui/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t
ImDrawChannel	support/imgui/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	support/imgui/imgui.h	/^    ImDrawCmd() { ElemCount = 0; ClipRect.x = ClipRect.y = ClipRect.z = ClipRect.w = 0.0f; TextureId = (ImTextureID)NULL; UserCallback = NULL; UserCallbackData = NULL; }$/;"	f	struct:ImDrawCmd
ImDrawCmd	support/imgui/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCornerFlags	support/imgui/imgui.h	/^typedef int ImDrawCornerFlags;      \/\/ -> enum ImDrawCornerFlags_    \/\/ Flags: for ImDrawList::AddRect*() etc.$/;"	t
ImDrawCornerFlags_	support/imgui/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	support/imgui/imgui.h	/^    ImDrawCornerFlags_All       = 0xF     \/\/ In your function calls you may use ~0 (= all bits sets) instead of ImDrawCornerFlags_All, as a convenience$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	support/imgui/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   \/\/ 0xC$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	support/imgui/imgui.h	/^    ImDrawCornerFlags_BotLeft   = 1 << 2, \/\/ 0x4$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	support/imgui/imgui.h	/^    ImDrawCornerFlags_BotRight  = 1 << 3, \/\/ 0x8$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	support/imgui/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    \/\/ 0x5$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	support/imgui/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  \/\/ 0xA$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	support/imgui/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   \/\/ 0x3$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	support/imgui/imgui.h	/^    ImDrawCornerFlags_TopLeft   = 1 << 0, \/\/ 0x1$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	support/imgui/imgui.h	/^    ImDrawCornerFlags_TopRight  = 1 << 1, \/\/ 0x2$/;"	e	enum:ImDrawCornerFlags_
ImDrawData	support/imgui/imgui.h	/^    ImDrawData()    { Valid = false; Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	support/imgui/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	support/imgui/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawIdx	support/imgui/imgui.h	/^typedef unsigned short ImDrawIdx;$/;"	t
ImDrawList	support/imgui/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }$/;"	f	struct:ImDrawList
ImDrawList	support/imgui/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	support/imgui/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawList$/;"	t
ImDrawListFlags_	support/imgui/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AntiAliasedFill	support/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedFill  = 1 << 1   \/\/ Filled shapes have anti-aliased edges (*2 the number of vertices)$/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	support/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLines = 1 << 0,  \/\/ Lines are anti-aliased (*2 the number of triangles for 1.0f wide line, otherwise *3 the number of triangles)$/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	support/imgui/imgui.h	/^    ImDrawListFlags_None             = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	support/imgui/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	support/imgui/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawVert	support/imgui/imgui.h	/^struct ImDrawVert$/;"	s
ImFabs	support/imgui/imgui_internal.h	/^static inline float  ImFabs(float x)                                            { return fabsf(x); }$/;"	f
ImFileLoadToMemory	support/imgui/imgui.cpp	/^void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, size_t* out_file_size, int padding_bytes)$/;"	f
ImFileOpen	support/imgui/imgui.cpp	/^FILE* ImFileOpen(const char* filename, const char* mode)$/;"	f
ImFloor	support/imgui/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2((float)(int)v.x, (float)(int)v.y); }$/;"	f
ImFloor	support/imgui/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)(int)f; }$/;"	f
ImFloorStd	support/imgui/imgui_internal.h	/^static inline float  ImFloorStd(float x)                                        { return floorf(x); }   \/\/ we already uses our own ImFloor() { return (float)(int)v } internally so the standard one wrapper is named differently (it's used by stb_truetype)$/;"	f
ImFmod	support/imgui/imgui_internal.h	/^static inline double ImFmod(double x, double y)                                 { return fmod(x, y); }$/;"	f
ImFmod	support/imgui/imgui_internal.h	/^static inline float  ImFmod(float x, float y)                                   { return fmodf(x, y); }$/;"	f
ImFont	support/imgui/imgui.h	/^struct ImFont$/;"	s
ImFont	support/imgui/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	support/imgui/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	support/imgui/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	support/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f
ImFontAtlasBuildMultiplyCalcLookupTable	support/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_factor)$/;"	f
ImFontAtlasBuildMultiplyRectAlpha8	support/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels, int x, int y, int w, int h, int stride)$/;"	f
ImFontAtlasBuildPackCustomRects	support/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f
ImFontAtlasBuildRegisterDefaultCustomRects	support/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRegisterDefaultCustomRects(ImFontAtlas* atlas)$/;"	f
ImFontAtlasBuildRenderDefaultTexData	support/imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	file:
ImFontAtlasBuildSetupFont	support/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent)$/;"	f
ImFontAtlasBuildWithStbTruetype	support/imgui/imgui_draw.cpp	/^bool    ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f
ImFontAtlasFlags	support/imgui/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtlas$/;"	t
ImFontAtlasFlags_	support/imgui/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoMouseCursors	support/imgui/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1    \/\/ Don't build software mouse cursors into the atlas$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	support/imgui/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of two$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	support/imgui/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontBuildDstData	support/imgui/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	support/imgui/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontConfig	support/imgui/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	support/imgui/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	support/imgui/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	support/imgui/imgui.h	/^    ImFontGlyphRangesBuilder()          { UsedChars.resize(0x10000 \/ sizeof(int)); memset(UsedChars.Data, 0, 0x10000 \/ sizeof(int)); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	support/imgui/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	support/imgui/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f
ImFormatStringV	support/imgui/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f
ImGetDirQuadrantFromDelta	support/imgui/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f
ImGui	support/imgui/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	support/imgui/imgui.h	/^namespace ImGui$/;"	n
ImGui	support/imgui/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	support/imgui/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGuiAxis	support/imgui/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	support/imgui/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	support/imgui/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	support/imgui/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	support/imgui/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.BackendFlags$/;"	t
ImGuiBackendFlags_	support/imgui/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	support/imgui/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Back-end supports gamepad and currently has one connected.$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	support/imgui/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Back-end supports honoring GetMouseCursor() value to change the OS cursor shape.$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	support/imgui/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2    \/\/ Back-end supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	support/imgui/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_       \/\/ Flags: for ButtonEx(), ButtonBehavior()$/;"	t
ImGuiButtonFlags_	support/imgui/imgui_internal.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 9,   \/\/ vertically align button to match text baseline - ButtonEx() only \/\/ FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_AllowItemOverlap	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 6,   \/\/ require previous frame HoveredId to either match id or be null before being usable, use along with SetItemAllowOverlap()$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Disabled	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Disabled               = 1 << 8,   \/\/ disable interactions$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_DontClosePopups	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 7,   \/\/ disable automatically closing parent popup on press \/\/ [UNUSED]$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_FlattenChildren	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 5,   \/\/ allow interactions even if a child window is overlapping$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveID	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveID      = 1 << 11,  \/\/ don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoKeyModifiers	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 10,  \/\/ disable interaction if a key modifier is held$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoNavFocus	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 13   \/\/ don't override navigation focus when activated$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_None	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 2,   \/\/ return true on click (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClickRelease	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 1,   \/\/ return true on click + release on same item [DEFAULT if no PressedOn* flag is set]$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDoubleClick	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 4,   \/\/ return true on double-click (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDragDropHold	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 12,  \/\/ press when held into while we are drag and dropping another item (used by e.g. tree nodes, collapsing headers)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnRelease	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 3,   \/\/ return true on release (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Repeat	support/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 0,   \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlags_
ImGuiCol	support/imgui/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identifier for styling$/;"	t
ImGuiCol_	support/imgui/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	support/imgui/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	support/imgui/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	support/imgui/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	support/imgui/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	support/imgui/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	support/imgui/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	support/imgui/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	support/imgui/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildWindowBg	support/imgui/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg                                      \/\/ [renamed in 1.53]$/;"	e	enum:ImGuiCol_
ImGuiCol_Column	support/imgui/imgui.h	/^    , ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive  \/\/ [renamed in 1.51]$/;"	e	enum:ImGuiCol_
ImGuiCol_ColumnActive	support/imgui/imgui.h	/^    , ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive  \/\/ [renamed in 1.51]$/;"	e	enum:ImGuiCol_
ImGuiCol_ColumnHovered	support/imgui/imgui.h	/^    , ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive  \/\/ [renamed in 1.51]$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	support/imgui/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	support/imgui/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, text input$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	support/imgui/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	support/imgui/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	support/imgui/imgui.h	/^    ImGuiCol_Header,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	support/imgui/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	support/imgui/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	support/imgui/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDarkening	support/imgui/imgui.h	/^    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg                      \/\/ [renamed in 1.63]$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	support/imgui/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, when one is active$/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	support/imgui/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	support/imgui/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB window list, when active$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	support/imgui/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	support/imgui/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	support/imgui/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	support/imgui/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	support/imgui/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	support/imgui/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	support/imgui/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	support/imgui/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	support/imgui/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	support/imgui/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	support/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	support/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	support/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	support/imgui/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	support/imgui/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	support/imgui/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	support/imgui/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	support/imgui/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	support/imgui/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	support/imgui/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	support/imgui/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	support/imgui/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	support/imgui/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	support/imgui/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	support/imgui/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	support/imgui/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	support/imgui/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	support/imgui/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	support/imgui/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	support/imgui/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	support/imgui/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit*(), ColorPicker*()$/;"	t
ImGuiColorEditFlags_	support/imgui/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	support/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicker: show vertical alpha bar\/gradient in picker.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	support/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	support/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: display half opaque \/ half checkerboard, instead of opaque.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	support/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	support/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	support/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _display_ type among RGB\/HSV\/Hex. ColorPicker: select any combination using one or more of RGB\/HSV\/Hex.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	support/imgui/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	support/imgui/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HEX	support/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HSV	support/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	support/imgui/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicker: input and output data in HSV format.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	support/imgui/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicker: input and output data in RGB format.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicker: disable inputs sliders\/text widgets (e.g. to show only the small preview colored square).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable toggling options menu when right-clicking on inputs\/small preview.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable picker when clicking on colored square.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable bigger color preview on right side of the picker, use small colored square preview instead.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicker: disable colored square preview next to the inputs. (e.g. to show only the inputs)$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	support/imgui/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	support/imgui/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	support/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for Hue, rectangle for Sat\/Value.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	support/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel for Hue, triangle for Sat\/Value.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_RGB	support/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	support/imgui/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DataTypeMask	support/imgui/imgui.h	/^    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DisplayMask	support/imgui/imgui.h	/^    ImGuiColorEditFlags__DisplayMask    = ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_DisplayHSV|ImGuiColorEditFlags_DisplayHex,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__InputMask	support/imgui/imgui.h	/^    ImGuiColorEditFlags__InputMask      = ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_InputHSV$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__OptionsDefault	support/imgui/imgui.h	/^    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_PickerHueBar,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__PickerMask	support/imgui/imgui.h	/^    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	support/imgui/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnData	support/imgui/imgui_internal.h	/^    ImGuiColumnData()   { OffsetNorm = OffsetNormBeforeResize = 0.0f; Flags = 0; }$/;"	f	struct:ImGuiColumnData
ImGuiColumnData	support/imgui/imgui_internal.h	/^struct ImGuiColumnData$/;"	s
ImGuiColumnsFlags	support/imgui/imgui.h	/^typedef int ImGuiColumnsFlags;      \/\/ -> enum ImGuiColumnsFlags_    \/\/ Flags: for Columns(), BeginColumns()$/;"	t
ImGuiColumnsFlags_	support/imgui/imgui_internal.h	/^enum ImGuiColumnsFlags_$/;"	g
ImGuiColumnsFlags_GrowParentContentsSize	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize= 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior of extending the parent window contents size but _without affecting the columns width at all_. Will eventually remove.$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoBorder	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder              = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoForceWithinWindow	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow   = 1 << 3,   \/\/ Disable forcing columns to fit within window$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoPreserveWidths	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths      = 1 << 2,   \/\/ Disable column width preservation when adjusting columns$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoResize	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize              = 1 << 1,   \/\/ Disable resizing columns when clicking on the dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_None	support/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_None                  = 0,$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsSet	support/imgui/imgui_internal.h	/^    ImGuiColumnsSet()   { Clear(); }$/;"	f	struct:ImGuiColumnsSet
ImGuiColumnsSet	support/imgui/imgui_internal.h	/^struct ImGuiColumnsSet$/;"	s
ImGuiComboFlags	support/imgui/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginCombo()$/;"	t
ImGuiComboFlags_	support/imgui/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	support/imgui/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	support/imgui/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	support/imgui/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	support/imgui/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	support/imgui/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	support/imgui/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without the square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	support/imgui/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	support/imgui/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	support/imgui/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by default$/;"	e	enum:ImGuiComboFlags_
ImGuiCond	support/imgui/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition for Set*()$/;"	t
ImGuiCond_	support/imgui/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	support/imgui/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ Set the variable$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	support/imgui/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing after being hidden\/inactive (or the first time)$/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	support/imgui/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persistently saved data (no entry in .ini file)$/;"	e	enum:ImGuiCond_
ImGuiCond_Once	support/imgui/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the first call with succeed)$/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	support/imgui/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.ConfigFlags$/;"	t
ImGuiConfigFlags_	support/imgui/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	support/imgui/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	support/imgui/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen instead of a mouse.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	support/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[]. Back-end also needs to set ImGuiBackendFlags_HasGamepad.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	support/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[].$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	support/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mouse cursor. May be useful on TV\/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	support/imgui/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	support/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse position\/buttons in NewFrame(). This allows ignoring the mouse information set by the back-end.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	support/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct back-end to not alter mouse cursor shape and visibility. Use if the back-end cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	support/imgui/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	support/imgui/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas) : BackgroundDrawList(NULL), ForegroundDrawList(NULL)$/;"	f	struct:ImGuiContext
ImGuiContext	support/imgui/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiDataType	support/imgui/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data type$/;"	t
ImGuiDataTypeInfo	support/imgui/imgui_widgets.cpp	/^struct ImGuiDataTypeInfo$/;"	s	file:
ImGuiDataType_	support/imgui/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	support/imgui/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_COUNT	support/imgui/imgui_widgets.cpp	/^IM_STATIC_ASSERT(IM_ARRAYSIZE(GDataTypeInfo) == ImGuiDataType_COUNT);$/;"	v
ImGuiDataType_Double	support/imgui/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	support/imgui/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S16	support/imgui/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	support/imgui/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	support/imgui/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	support/imgui/imgui.h	/^    ImGuiDataType_S8,       \/\/ char$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U16	support/imgui/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	support/imgui/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	support/imgui/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	support/imgui/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDir	support/imgui/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal direction$/;"	t
ImGuiDir_	support/imgui/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	support/imgui/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	support/imgui/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	support/imgui/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	support/imgui/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	support/imgui/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	support/imgui/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	support/imgui/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for *DragDrop*()$/;"	t
ImGuiDragDropFlags_	support/imgui/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	support/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	support/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default highlight rectangle when hovering over target.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	support/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	support/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect  \/\/ For peeking ahead and inspecting the payload before delivery.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	support/imgui/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outside of imgui), won't attempt to read current item\/window info. Will always return true. Only one Extern source can be active simultaneously.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	support/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiDragFlags;         \/\/ -> enum ImGuiDragFlags_         \/\/ Flags: for DragBehavior()$/;"	t
ImGuiDragFlags_	support/imgui/imgui_internal.h	/^enum ImGuiDragFlags_$/;"	g
ImGuiDragFlags_None	support/imgui/imgui_internal.h	/^    ImGuiDragFlags_None                     = 0,$/;"	e	enum:ImGuiDragFlags_
ImGuiDragFlags_Vertical	support/imgui/imgui_internal.h	/^    ImGuiDragFlags_Vertical                 = 1 << 0$/;"	e	enum:ImGuiDragFlags_
ImGuiFocusedFlags	support/imgui/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowFocused()$/;"	t
ImGuiFocusedFlags_	support/imgui/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	support/imgui/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowFocused(): Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use ImGui::GetIO().WantCaptureMouse instead.$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	support/imgui/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowFocused(): Return true if any children of the window is focused$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	support/imgui/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	support/imgui/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	support/imgui/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowFocused(): Test from root window (top most parent of the current hierarchy)$/;"	e	enum:ImGuiFocusedFlags_
ImGuiGroupData	support/imgui/imgui_internal.h	/^struct ImGuiGroupData$/;"	s
ImGuiHoveredFlags	support/imgui/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHovered(), IsWindowHovered() etc.$/;"	t
ImGuiHoveredFlags_	support/imgui/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	support/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   \/\/ Return true even if an active item is blocking access to this item\/window. Useful for Drag and Drop patterns.$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	support/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   \/\/ Return true even if a popup window is normally blocking access to this item\/window$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	support/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,   \/\/ Return true even if the item is disabled$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	support/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   \/\/ Return true even if the position is overlapped by another window$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	support/imgui/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Return true if any window is hovered$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	support/imgui/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Return true if any children of the window is hovered$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	support/imgui/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly over the item\/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	support/imgui/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	support/imgui/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	support/imgui/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)$/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	support/imgui/imgui.h	/^typedef unsigned int ImGuiID;       \/\/ Unique ID used by widgets (typically hashed from a stack of string)$/;"	t
ImGuiIO	support/imgui/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	support/imgui/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputReadMode	support/imgui/imgui_internal.h	/^enum ImGuiInputReadMode$/;"	g
ImGuiInputReadMode_Down	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Down,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Pressed	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Pressed,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Released	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Released,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Repeat	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Repeat,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatFast	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatFast$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatSlow	support/imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatSlow,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputSource	support/imgui/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	support/imgui/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	support/imgui/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	support/imgui/imgui_internal.h	/^    ImGuiInputSource_Nav,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavGamepad	support/imgui/imgui_internal.h	/^    ImGuiInputSource_NavGamepad,    \/\/ "$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavKeyboard	support/imgui/imgui_internal.h	/^    ImGuiInputSource_NavKeyboard,   \/\/ Only used occasionally for storage, not tested\/handled by most code$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	support/imgui/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	support/imgui/imgui.h	/^typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData *data);$/;"	t
ImGuiInputTextCallbackData	support/imgui/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	support/imgui/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlags	support/imgui/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText*()$/;"	t
ImGuiInputTextFlags_	support/imgui/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	support/imgui/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' character into the text field$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	support/imgui/imgui.h	/^    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  \/\/ Insert mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	support/imgui/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first taking mouse focus$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User code may query cursor position, modify text buffer.$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for completion handling)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrows (for history handling)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc\/cpp\/imgui_stdlib.h for an example of using this)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientific notation input)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	support/imgui/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	support/imgui/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Multiline	support/imgui/imgui.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 20   \/\/ For internal use by InputTextMultiline()$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	support/imgui/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizontally$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	support/imgui/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input text owns the text data while active, if you want to provide your own undo\/redo stack you need e.g. to call ClearActiveID().$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	support/imgui/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	support/imgui/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characters as '*'$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	support/imgui/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	support/imgui/imgui_internal.h	/^    ImGuiInputTextState()                           { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	support/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiItemFlags;         \/\/ -> enum ImGuiItemFlags_         \/\/ Flags: for PushItemFlag()$/;"	t
ImGuiItemFlags_	support/imgui/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false    \/\/ Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_Default_                 = 0$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false    \/\/ [BETA] Disable interactions but doesn't affect visuals yet. See github.com\/ocornut\/imgui\/issues\/211$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	support/imgui/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false    \/\/ MenuItem\/Selectable() automatically closes current Popup window$/;"	e	enum:ImGuiItemFlags_
ImGuiItemHoveredDataBackup	support/imgui/imgui_internal.h	/^    ImGuiItemHoveredDataBackup() { Backup(); }$/;"	f	struct:ImGuiItemHoveredDataBackup
ImGuiItemHoveredDataBackup	support/imgui/imgui_internal.h	/^struct ImGuiItemHoveredDataBackup$/;"	s
ImGuiItemStatusFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;   \/\/ -> enum ImGuiItemStatusFlags_   \/\/ Flags: for DC.LastItemStatusFlags$/;"	t
ImGuiItemStatusFlags_	support/imgui/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 12,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 13   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2    \/\/ Value exposed by item was edited in the current frame (should match the bool return value of most widgets)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 10,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 11,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	support/imgui/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifier (ImGui-side enum)$/;"	t
ImGuiKey_	support/imgui/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_A	support/imgui/imgui.h	/^    ImGuiKey_A,         \/\/ for text edit CTRL+A: select all$/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	support/imgui/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	support/imgui/imgui.h	/^    ImGuiKey_C,         \/\/ for text edit CTRL+C: copy$/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	support/imgui/imgui.h	/^    ImGuiKey_COUNT$/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	support/imgui/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	support/imgui/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_End	support/imgui/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	support/imgui/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	support/imgui/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_Home	support/imgui/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	support/imgui/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	support/imgui/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	support/imgui/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	support/imgui/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	support/imgui/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	support/imgui/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	support/imgui/imgui.h	/^    ImGuiKey_Tab,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	support/imgui/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	support/imgui/imgui.h	/^    ImGuiKey_V,         \/\/ for text edit CTRL+V: paste$/;"	e	enum:ImGuiKey_
ImGuiKey_X	support/imgui/imgui.h	/^    ImGuiKey_X,         \/\/ for text edit CTRL+X: cut$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	support/imgui/imgui.h	/^    ImGuiKey_Y,         \/\/ for text edit CTRL+Y: redo$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	support/imgui/imgui.h	/^    ImGuiKey_Z,         \/\/ for text edit CTRL+Z: undo$/;"	e	enum:ImGuiKey_
ImGuiLayoutType	support/imgui/imgui_internal.h	/^typedef int ImGuiLayoutType;        \/\/ -> enum ImGuiLayoutType_        \/\/ Enum: Horizontal or vertical$/;"	t
ImGuiLayoutType_	support/imgui/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	support/imgui/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	support/imgui/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	support/imgui/imgui.h	/^    ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } \/\/ NB: Begin() initialize every fields (as we allow user to call Begin\/End multiple times on a same instance if they want).$/;"	f	struct:ImGuiListClipper
ImGuiListClipper	support/imgui/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiLogType	support/imgui/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	support/imgui/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	support/imgui/imgui_internal.h	/^    ImGuiLogType_Clipboard$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	support/imgui/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	support/imgui/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	support/imgui/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMenuColumns	support/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMenuColumns	support/imgui/imgui_widgets.cpp	/^ImGuiMenuColumns::ImGuiMenuColumns()$/;"	f	class:ImGuiMenuColumns
ImGuiMouseCursor	support/imgui/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor identifier$/;"	t
ImGuiMouseCursor_	support/imgui/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	support/imgui/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	support/imgui/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Count_	support/imgui/imgui.h	/^    , ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	support/imgui/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by imgui functions. Use for e.g. hyperlinks)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	support/imgui/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	support/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by imgui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	support/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	support/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a window$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	support/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	support/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a window$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	support/imgui/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavDirSourceFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags; \/\/ -> enum ImGuiNavDirSourceFlags_ \/\/ Flags: for GetNavInputAmount2d()$/;"	t
ImGuiNavDirSourceFlags_	support/imgui/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	support/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	support/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None         = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	support/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	support/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavForward	support/imgui/imgui_internal.h	/^enum ImGuiNavForward$/;"	g
ImGuiNavForward_ForwardActive	support/imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardActive$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_ForwardQueued	support/imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardQueued,$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_None	support/imgui/imgui_internal.h	/^    ImGuiNavForward_None,$/;"	e	enum:ImGuiNavForward
ImGuiNavHighlightFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags; \/\/ -> enum ImGuiNavHighlightFlags_ \/\/ Flags: for RenderNavHighlight()$/;"	t
ImGuiNavHighlightFlags_	support/imgui/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	support/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,       \/\/ Draw rectangular highlight if (g.NavId == id) _even_ when using the mouse.$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	support/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding   = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	support/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_None         = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	support/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	support/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	support/imgui/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input identifier for navigation$/;"	t
ImGuiNavInput_	support/imgui/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	support/imgui/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ activate \/ open \/ toggle \/ tweak value       \/\/ e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	support/imgui/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	support/imgui/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ cancel \/ close \/ exit                        \/\/ e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	support/imgui/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	support/imgui/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ move \/ tweak \/ resize window (w\/ PadMenu)    \/\/ e.g. D-pad Left\/Right\/Up\/Down (Gamepads), Arrow keys (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	support/imgui/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	support/imgui/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	support/imgui/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ prev window (w\/ PadMenu)                     \/\/ e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	support/imgui/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ next window (w\/ PadMenu)                     \/\/ e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	support/imgui/imgui.h	/^    ImGuiNavInput_Input,         \/\/ text input \/ on-screen keyboard              \/\/ e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_InternalStart_	support/imgui/imgui.h	/^    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ move left                                    \/\/ = Arrow keys$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyMenu_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyMenu_,      \/\/ toggle menu                                  \/\/ = io.KeyAlt$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyTab_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyTab_,       \/\/ tab                                          \/\/ = Tab key$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	support/imgui/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	support/imgui/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	support/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ scroll \/ move window (w\/ PadMenu)            \/\/ e.g. Left Analog Stick Left\/Right\/Up\/Down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	support/imgui/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	support/imgui/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	support/imgui/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ tap: toggle menu \/ hold: focus, move, resize \/\/ e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	support/imgui/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ faster tweaks                                \/\/ e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	support/imgui/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ slower tweaks                                \/\/ e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavLayer	support/imgui/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	support/imgui/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	support/imgui/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	support/imgui/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;      \/\/ -> enum ImGuiNavMoveFlags_      \/\/ Flags: for navigation requests$/;"	t
ImGuiNavMoveFlags_	support/imgui/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_AllowCurrentNavId	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the current NavId as a move target candidate. This is used when the move source is offset (e.g. pressing PageDown actually needs to send a Up move request, if we are pressing PageDown from the bottom-most item we need to stay in place)$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5    \/\/ Store alternate result in NavMoveResultLocalVisibleSet that only comprise elements that are already fully visible.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opposite side$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opposite side one line down (when NavDir==right) or one line up (when NavDir==left)$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful for provided for completeness$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveResult	support/imgui/imgui_internal.h	/^    ImGuiNavMoveResult() { Clear(); }$/;"	f	struct:ImGuiNavMoveResult
ImGuiNavMoveResult	support/imgui/imgui_internal.h	/^struct ImGuiNavMoveResult$/;"	s
ImGuiNextWindowData	support/imgui/imgui_internal.h	/^    ImGuiNextWindowData()$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	support/imgui/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiOnceUponAFrame	support/imgui/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	support/imgui/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	support/imgui/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	support/imgui/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlotArrayGetterData	support/imgui/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }$/;"	f	struct:ImGuiPlotArrayGetterData
ImGuiPlotArrayGetterData	support/imgui/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	support/imgui/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	support/imgui/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	support/imgui/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupPositionPolicy	support/imgui/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	support/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	support/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupRef	support/imgui/imgui_internal.h	/^struct ImGuiPopupRef$/;"	s
ImGuiResizeGripDef	support/imgui/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiSelectableFlags	support/imgui/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectable()$/;"	t
ImGuiSelectableFlagsPrivate_	support/imgui/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	support/imgui/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	support/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double clicks too$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	support/imgui/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3    \/\/ Cannot be selected, display greyed out text$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	support/imgui/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent popup window$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DrawFillAvailWidth	support/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawFillAvailWidth = 1 << 13$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	support/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID  = 1 << 10,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	support/imgui/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_PressedOnClick	support/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnClick     = 1 << 11,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_PressedOnRelease	support/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnRelease   = 1 << 12,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	support/imgui/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all columns (text will still fit in current column)$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSeparatorFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;    \/\/ -> enum ImGuiSeparatorFlags_    \/\/ Flags: for Separator() - internal$/;"	t
ImGuiSeparatorFlags_	support/imgui/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	support/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	support/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	support/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSetCond_Always	support/imgui/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_Appearing	support/imgui/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_FirstUseEver	support/imgui/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_Once	support/imgui/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSettingsHandler	support/imgui/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	support/imgui/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiSizeCallback	support/imgui/imgui.h	/^typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);$/;"	t
ImGuiSizeCallbackData	support/imgui/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_       \/\/ Flags: for SliderBehavior()$/;"	t
ImGuiSliderFlags_	support/imgui/imgui_internal.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_None	support/imgui/imgui_internal.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Vertical	support/imgui/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 0$/;"	e	enum:ImGuiSliderFlags_
ImGuiStorage	support/imgui/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStyle	support/imgui/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	support/imgui/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	support/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloat[1] = v.y; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	support/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	support/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	support/imgui/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	support/imgui/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable identifier for styling$/;"	t
ImGuiStyleVarInfo	support/imgui/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiStyleVar_	support/imgui/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	support/imgui/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	support/imgui/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	support/imgui/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	support/imgui/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildWindowRounding	support/imgui/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT, ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_Count_	support/imgui/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT, ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	support/imgui/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	support/imgui/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	support/imgui/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	support/imgui/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	support/imgui/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	support/imgui/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	support/imgui/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	support/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	support/imgui/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	support/imgui/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	support/imgui/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	support/imgui/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	support/imgui/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	support/imgui/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	support/imgui/imgui_internal.h	/^struct ImGuiTabBar$/;"	s
ImGuiTabBar	support/imgui/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	support/imgui/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabBar()$/;"	t
ImGuiTabBarFlagsPrivate_	support/imgui/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	support/imgui/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	support/imgui/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new tabs when they appear$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	support/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't use this in the master branch but it facilitate branch syncing to keep this around]$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	support/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	support/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	support/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't fit$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	support/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tabs don't fit$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	support/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	support/imgui/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	support/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	support/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hovering a tab$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	support/imgui/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	support/imgui/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tabs to re-order them + New tabs are appended at the end of list$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	support/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22   \/\/ FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	support/imgui/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarRef	support/imgui/imgui_internal.h	/^    ImGuiTabBarRef(ImGuiTabBar* ptr)        { Ptr = ptr; IndexInMainPool = -1; }$/;"	f	struct:ImGuiTabBarRef
ImGuiTabBarRef	support/imgui/imgui_internal.h	/^    ImGuiTabBarRef(int index_in_main_pool)  { Ptr = NULL; IndexInMainPool = index_in_main_pool; }$/;"	f	struct:ImGuiTabBarRef
ImGuiTabBarRef	support/imgui/imgui_internal.h	/^struct ImGuiTabBarRef$/;"	s
ImGuiTabBarSortItem	support/imgui/imgui_internal.h	/^struct ImGuiTabBarSortItem$/;"	s
ImGuiTabItem	support/imgui/imgui_internal.h	/^    ImGuiTabItem()      { ID = Flags = 0; LastFrameVisible = LastFrameSelected = -1; NameOffset = -1; Offset = Width = WidthContents = 0.0f; }$/;"	f	struct:ImGuiTabItem
ImGuiTabItem	support/imgui/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	support/imgui/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabItem()$/;"	t
ImGuiTabItemFlagsPrivate_	support/imgui/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	support/imgui/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_NoCloseButton	support/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20   \/\/ Store whether p_open is set or not, which we need to recompute WidthContents during layout.$/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	support/imgui/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	support/imgui/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3    \/\/ Don't call PushID(tab->ID)\/PopID() on BeginTabItem()\/EndTabItem()$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	support/imgui/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	support/imgui/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmatically make the tab selected when calling BeginTabItem()$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	support/imgui/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTextBuffer	support/imgui/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	support/imgui/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextEditCallback	support/imgui/imgui.h	/^typedef ImGuiInputTextCallback      ImGuiTextEditCallback;    \/\/ OBSOLETE in 1.63 (from Aug 2018): made the names consistent$/;"	t
ImGuiTextEditCallbackData	support/imgui/imgui.h	/^typedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;$/;"	t
ImGuiTextFilter	support/imgui/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	support/imgui/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	support/imgui/imgui_internal.h	/^typedef int ImGuiTextFlags;         \/\/ -> enum ImGuiTextFlags_         \/\/ Flags: for TextEx()$/;"	t
ImGuiTextFlags_	support/imgui/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	support/imgui/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	support/imgui/imgui_internal.h	/^    ImGuiTextFlags_None = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTreeNodeFlags	support/imgui/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode*(),CollapsingHeader()$/;"	t
ImGuiTreeNodeFlags_	support/imgui/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent widgets to overlap this one$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlapMode	support/imgui/imgui.h	/^    , ImGuiTreeNodeFlags_AllowOverlapMode = ImGuiTreeNodeFlags_AllowItemOverlap$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_CollapsingHeader	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Full colored frame (e.g. for CollapsingHeader)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a convenience for leaf nodes).$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	support/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiWindow	support/imgui/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)$/;"	f	class:ImGuiWindow
ImGuiWindow	support/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	support/imgui/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin*()$/;"	t
ImGuiWindowFlags_	support/imgui/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	support/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content every frame$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	support/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (even if ContentSize.x < Size.x)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	support/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	support/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (even if ContentSize.y < Size.y)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	support/imgui/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by BeginMenu()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	support/imgui/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by BeginChild()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	support/imgui/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	support/imgui/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	support/imgui/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by BeginPopupModal()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	support/imgui/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] Allow gamepad\/keyboard navigation to cross over parent border to this child (only use on child that have no scrolling!)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by double-clicking on it$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitioning from hidden to visible state$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering test with pass through.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with gamepad\/keyboard navigation (e.g. skipped by CTRL+TAB)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation within the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lower-right grip$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini file$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can still scroll with mouse or programmatically)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	support/imgui/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	support/imgui/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	support/imgui/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by BeginPopup()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	support/imgui/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by BeginTooltip()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	support/imgui/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab\/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	support/imgui/imgui_internal.h	/^    ImGuiWindowSettings() { Name = NULL; ID = 0; Pos = Size = ImVec2(0,0); Collapsed = false; }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	support/imgui/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowTempData	support/imgui/imgui_internal.h	/^    ImGuiWindowTempData()$/;"	f	struct:ImGuiWindowTempData
ImGuiWindowTempData	support/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplGlfw_CharCallback	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f
ImGui_ImplGlfw_GetClipboardText	support/imgui/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	file:
ImGui_ImplGlfw_Init	support/imgui/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client_api)$/;"	f	file:
ImGui_ImplGlfw_InitForOpenGL	support/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f
ImGui_ImplGlfw_InitForVulkan	support/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f
ImGui_ImplGlfw_KeyCallback	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f
ImGui_ImplGlfw_MouseButtonCallback	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f
ImGui_ImplGlfw_NewFrame	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f
ImGui_ImplGlfw_ScrollCallback	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f
ImGui_ImplGlfw_SetClipboardText	support/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	file:
ImGui_ImplGlfw_Shutdown	support/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f
ImGui_ImplGlfw_UpdateGamepads	support/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	file:
ImGui_ImplGlfw_UpdateMouseCursor	support/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	file:
ImGui_ImplGlfw_UpdateMousePosAndButtons	support/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMousePosAndButtons()$/;"	f	file:
ImGui_ImplOpenGL3_CreateDeviceObjects	support/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f
ImGui_ImplOpenGL3_CreateFontsTexture	support/imgui/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f
ImGui_ImplOpenGL3_DestroyDeviceObjects	support/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f
ImGui_ImplOpenGL3_DestroyFontsTexture	support/imgui/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f
ImGui_ImplOpenGL3_Init	support/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f
ImGui_ImplOpenGL3_NewFrame	support/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f
ImGui_ImplOpenGL3_RenderDrawData	support/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplOpenGL3_Shutdown	support/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f
ImHash	support/imgui/imgui_internal.h	/^static inline ImU32     ImHash(const void* data, int size, ImU32 seed = 0) { return size ? ImHashData(data, (size_t)size, seed) : ImHashStr((const char*)data, 0, seed); } \/\/ [moved to ImHashStr\/ImHashData in 1.68]$/;"	f
ImHashData	support/imgui/imgui.cpp	/^ImU32 ImHashData(const void* data_p, size_t data_size, ImU32 seed)$/;"	f
ImHashStr	support/imgui/imgui.cpp	/^ImU32 ImHashStr(const char* data_p, size_t data_size, ImU32 seed)$/;"	f
ImInvLength	support/imgui/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = lhs.x*lhs.x + lhs.y*lhs.y; if (d > 0.0f) return 1.0f \/ ImSqrt(d); return fail_value; }$/;"	f
ImIsPowerOfTwo	support/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f
ImLengthSqr	support/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return lhs.x*lhs.x + lhs.y*lhs.y; }$/;"	f
ImLengthSqr	support/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return lhs.x*lhs.x + lhs.y*lhs.y + lhs.z*lhs.z + lhs.w*lhs.w; }$/;"	f
ImLerp	support/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(a.x + (b.x - a.x) * t.x, a.y + (b.y - a.y) * t.y); }$/;"	f
ImLerp	support/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t); }$/;"	f
ImLerp	support/imgui/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t, a.w + (b.w - a.w) * t); }$/;"	f
ImLerp	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a + (b - a) * t); }$/;"	f
ImLineClosestPoint	support/imgui/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f
ImLinearSweep	support/imgui/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < target) return ImMin(current + speed, target); if (current > target) return ImMax(current - speed, target); return current; }$/;"	f
ImMax	support/imgui/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x >= rhs.x ? lhs.x : rhs.x, lhs.y >= rhs.y ? lhs.y : rhs.y); }$/;"	f
ImMax	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= rhs ? lhs : rhs; }$/;"	f
ImMin	support/imgui/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x < rhs.x ? lhs.x : rhs.x, lhs.y < rhs.y ? lhs.y : rhs.y); }$/;"	f
ImMin	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < rhs ? lhs : rhs; }$/;"	f
ImModPositive	support/imgui/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b) % b; }$/;"	f
ImMul	support/imgui/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x * rhs.x, lhs.y * rhs.y); }$/;"	f
ImNewDummy	support/imgui/imgui.h	/^struct ImNewDummy {};$/;"	s
ImParseFormatFindEnd	support/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f
ImParseFormatFindStart	support/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f
ImParseFormatPrecision	support/imgui/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f
ImParseFormatTrimDecorations	support/imgui/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f
ImPool	support/imgui/imgui_internal.h	/^    ImPool()    { FreeIdx = 0; }$/;"	f	struct:ImPool
ImPool	support/imgui/imgui_internal.h	/^struct IMGUI_API ImPool$/;"	s
ImPoolIdx	support/imgui/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t
ImPow	support/imgui/imgui_internal.h	/^static inline double ImPow(double x, double y)                                  { return pow(x, y); }$/;"	f
ImPow	support/imgui/imgui_internal.h	/^static inline float  ImPow(float x, float y)                                    { return powf(x, y); }$/;"	f
ImQsort	support/imgui/imgui_internal.h	162;"	d
ImRect	support/imgui/imgui_internal.h	/^    ImRect()                                        : Min(FLT_MAX,FLT_MAX), Max(-FLT_MAX,-FLT_MAX)  {}$/;"	f	struct:ImRect
ImRect	support/imgui/imgui_internal.h	/^    ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                            {}$/;"	f	struct:ImRect
ImRect	support/imgui/imgui_internal.h	/^    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)                  {}$/;"	f	struct:ImRect
ImRect	support/imgui/imgui_internal.h	/^    ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)                      {}$/;"	f	struct:ImRect
ImRect	support/imgui/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	support/imgui/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(v.x * cos_a - v.y * sin_a, v.x * sin_a + v.y * cos_a); }$/;"	f
ImS16	support/imgui/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t
ImS32	support/imgui/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t
ImS64	support/imgui/imgui.h	/^typedef int64_t             ImS64;  \/\/ 64-bit signed integer (pre C++11)$/;"	t
ImS64	support/imgui/imgui.h	/^typedef signed   __int64    ImS64;  \/\/ 64-bit signed integer (pre and post C++11 with Visual Studio)$/;"	t
ImS64	support/imgui/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer (post C++11)$/;"	t
ImS8	support/imgui/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer == char$/;"	t
ImSaturate	support/imgui/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0.0f) ? 0.0f : (f > 1.0f) ? 1.0f : f; }$/;"	f
ImSin	support/imgui/imgui_internal.h	/^static inline float  ImSin(float x)                                             { return sinf(x); }$/;"	f
ImSqrt	support/imgui/imgui_internal.h	/^static inline float  ImSqrt(float x)                                            { return sqrtf(x); }$/;"	f
ImStb	support/imgui/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	support/imgui/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrTrimBlanks	support/imgui/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f
ImStrbolW	support/imgui/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginning-of-line$/;"	f
ImStrchrRange	support/imgui/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f
ImStrdup	support/imgui/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f
ImStrdupcpy	support/imgui/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f
ImStreolRange	support/imgui/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f
ImStricmp	support/imgui/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f
ImStristr	support/imgui/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)$/;"	f
ImStrlenW	support/imgui/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f
ImStrncpy	support/imgui/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f
ImStrnicmp	support/imgui/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f
ImSubClampOverflow	support/imgui/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (a < mn + b)) return mn; if (b < 0 && (a > mx + b)) return mx; return a - b; }$/;"	f
ImSwap	support/imgui/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a = b; b = tmp; }$/;"	f
ImTextCharFromUtf8	support/imgui/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f
ImTextCharToUtf8	support/imgui/imgui.cpp	/^static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)$/;"	f	file:
ImTextCountCharsFromUtf8	support/imgui/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f
ImTextCountUtf8BytesFromChar	support/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f
ImTextCountUtf8BytesFromChar	support/imgui/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	file:
ImTextCountUtf8BytesFromStr	support/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f
ImTextStrFromUtf8	support/imgui/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)$/;"	f
ImTextStrToUtf8	support/imgui/imgui.cpp	/^int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f
ImTextureID	support/imgui/imgui.h	/^typedef void* ImTextureID;          \/\/ User data to identify a texture (this is whatever to you want it to be! read the FAQ about ImTextureID in imgui.cpp)$/;"	t
ImTriangleBarycentricCoords	support/imgui/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p, float& out_u, float& out_v, float& out_w)$/;"	f
ImTriangleClosestPoint	support/imgui/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f
ImTriangleContainsPoint	support/imgui/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f
ImU16	support/imgui/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t
ImU32	support/imgui/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed colors)$/;"	t
ImU64	support/imgui/imgui.h	/^typedef uint64_t            ImU64;  \/\/ 64-bit unsigned integer (pre C++11)$/;"	t
ImU64	support/imgui/imgui.h	/^typedef unsigned __int64    ImU64;  \/\/ 64-bit unsigned integer (pre and post C++11 with Visual Studio)$/;"	t
ImU64	support/imgui/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer (post C++11)$/;"	t
ImU8	support/imgui/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t
ImUpperPowerOfTwo	support/imgui/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v >> 4; v |= v >> 8; v |= v >> 16; v++; return v; }$/;"	f
ImVec1	support/imgui/imgui_internal.h	/^    ImVec1()         { x = 0.0f; }$/;"	f	struct:ImVec1
ImVec1	support/imgui/imgui_internal.h	/^    ImVec1(float _x) { x = _x; }$/;"	f	struct:ImVec1
ImVec1	support/imgui/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	support/imgui/imgui.h	/^    ImVec2()  { x = y = 0.0f; }$/;"	f	struct:ImVec2
ImVec2	support/imgui/imgui.h	/^    ImVec2(float _x, float _y) { x = _x; y = _y; }$/;"	f	struct:ImVec2
ImVec2	support/imgui/imgui.h	/^struct ImVec2$/;"	s
ImVec4	support/imgui/imgui.h	/^    ImVec4()  { x = y = z = w = 0.0f; }$/;"	f	struct:ImVec4
ImVec4	support/imgui/imgui.h	/^    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }$/;"	f	struct:ImVec4
ImVec4	support/imgui/imgui.h	/^struct ImVec4$/;"	s
ImVector	support/imgui/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }$/;"	f	struct:ImVector
ImVector	support/imgui/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; operator=(src); }$/;"	f	struct:ImVector
ImVector	support/imgui/imgui.h	/^struct ImVector$/;"	s
ImWchar	support/imgui/imgui.h	/^typedef unsigned short ImWchar;     \/\/ A single U16 character for keyboard input\/display. We encode them as multi bytes UTF-8 when used in strings.$/;"	t
Image	support/imgui/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)$/;"	f	class:ImGui
Image	support/tinygltf/tiny_gltf.h	/^  Image() : as_is(false) {$/;"	f	struct:tinygltf::Image
Image	support/tinygltf/tiny_gltf.h	/^struct Image {$/;"	s	namespace:tinygltf
ImageBuffer	sutil/sutil.h	/^struct ImageBuffer$/;"	s	namespace:sutil
ImageButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)$/;"	f	class:ImGui
ImeSetInputScreenPosFn	support/imgui/imgui.h	/^    void        (*ImeSetInputScreenPosFn)(int x, int y);$/;"	m	struct:ImGuiIO
ImeSetInputScreenPosFn_DefaultImpl	support/imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)$/;"	f	file:
ImeSetInputScreenPosFn_DefaultImpl	support/imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}$/;"	f	file:
ImeWindowHandle	support/imgui/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ (Windows) Set this to your HWND to get automatic IME cursor positioning.$/;"	m	struct:ImGuiIO
Indent	support/imgui/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui
Indent	support/imgui/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left of window (increased by TreePush\/TreePop, etc.)$/;"	m	struct:ImGuiWindowTempData
IndentSpacing	support/imgui/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).$/;"	m	struct:ImGuiStyle
Index	support/imgui/imgui_internal.h	/^    int             Index;$/;"	m	struct:ImGuiTabBarSortItem
IndexAdvanceX	support/imgui/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).$/;"	m	struct:ImFont
IndexArray	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                           IndexArray = 1,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass
IndexInMainPool	support/imgui/imgui_internal.h	/^    int             IndexInMainPool;$/;"	m	struct:ImGuiTabBarRef
IndexLookup	support/imgui/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Sparse. Index glyphs by Unicode code-point.$/;"	m	struct:ImFont
IndexedTriangle	optixBoundValues/optixBoundValues.cpp	/^struct IndexedTriangle$/;"	s	file:
IndexedTriangle	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct IndexedTriangle$/;"	s	file:
IndexedTriangle	optixMultiGPU/optixMultiGPU.cpp	/^struct IndexedTriangle$/;"	s	file:
IndexedTriangle	optixNVLink/optixNVLink.cpp	/^struct IndexedTriangle$/;"	s	file:
IndexedTriangle	optixPathTracer/optixPathTracer.cpp	/^struct IndexedTriangle$/;"	s	file:
IndexedTriangle	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^struct IndexedTriangle$/;"	s	file:
IniFilename	support/imgui/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file. Set NULL to disable automatic .ini loading\/saving, if e.g. you want to manually load\/save from memory.$/;"	m	struct:ImGuiIO
IniSavingRate	support/imgui/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between saving positions\/sizes to .ini file, in seconds.$/;"	m	struct:ImGuiIO
InitEXRHeader	support/tinyexr/tinyexr.h	/^void InitEXRHeader(EXRHeader *exr_header) {$/;"	f
InitEXRImage	support/tinyexr/tinyexr.h	/^void InitEXRImage(EXRImage *exr_image) {$/;"	f
InitMaterial	optixMotionGeometry/tiny_obj_loader.h	/^static void InitMaterial(material_t *material) {$/;"	f	namespace:tinyobj
InitTexOpt	optixMotionGeometry/tiny_obj_loader.h	/^static void InitTexOpt(texture_option_t *texopt, const bool is_bump) {$/;"	f	namespace:tinyobj
InitialTextA	support/imgui/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time of focus (in UTF-8, unaltered)$/;"	m	struct:ImGuiInputTextState
Initialize	support/GLFW/src/egl_context.h	/^    PFNEGLINITIALIZEPROC            Initialize;$/;"	m	struct:_GLFWlibraryEGL
Initialize	support/imgui/imgui.cpp	/^void ImGui::Initialize(ImGuiContext* context)$/;"	f	class:ImGui
Initialized	support/imgui/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext
InnerClipRect	support/imgui/imgui_internal.h	/^    ImRect                  InnerMainRect, InnerClipRect;$/;"	m	struct:ImGuiWindow
InnerDir	support/imgui/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	file:
InnerMainRect	support/imgui/imgui_internal.h	/^    ImRect                  InnerMainRect, InnerClipRect;$/;"	m	struct:ImGuiWindow
InputBuf	support/imgui/imgui.h	/^    char                InputBuf[256];$/;"	m	struct:ImGuiTextFilter
InputBuf	support/imgui/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	file:
InputDouble	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat2	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat2	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat3	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat3	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat4	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputFloat4	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputInt	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputInt2	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputInt3	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputInt4	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputQueueCharacters	support/imgui/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;     \/\/ Queue of _characters_ input (obtained by platform back-end). Fill using AddInputCharacter() helper.$/;"	m	struct:ImGuiIO
InputScalar	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* data_ptr, const void* step, const void* step_fast, const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputScalarAsWidgetReplacement	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarAsWidgetReplacement(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* data_ptr, const char* format)$/;"	f	class:ImGui
InputScalarN	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step, const void* step_fast, const char* format, ImGuiInputTextFlags flags)$/;"	f	class:ImGui
InputText	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputTextCalcTextLenAndLineCount	support/imgui/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	file:
InputTextCalcTextSizeW	support/imgui/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)$/;"	f	file:
InputTextEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)$/;"	f	class:ImGui
InputTextFilterCharacter	support/imgui/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	file:
InputTextMultiline	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputTextPasswordFont	support/imgui/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext
InputTextState	support/imgui/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext
InputTextWithHint	support/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InsertChars	support/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)$/;"	f	class:ImGuiInputTextCallbackData
Instance	optixBoundValues/optixBoundValues.cpp	/^struct Instance$/;"	s	file:
Instance	optixCutouts/optixCutouts.cpp	/^struct Instance$/;"	s	file:
Instance	optixDynamicGeometry/optixDynamicGeometry.cpp	/^struct Instance$/;"	s	file:
Instance	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct Instance$/;"	s	file:
Instance	optixMultiGPU/optixMultiGPU.cpp	/^struct Instance$/;"	s	file:
Instance	optixNVLink/optixNVLink.cpp	/^struct Instance$/;"	s	file:
Instance	optixPathTracer/optixPathTracer.cpp	/^struct Instance$/;"	s	file:
Instance	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^struct Instance$/;"	s	file:
Instance	sutil/Scene.h	/^    struct Instance$/;"	s	class:sutil::Scene
InstanceType	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^enum InstanceType$/;"	g	file:
Int16	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Int16 = 3,$/;"	m	class:nanovdb::GridType
Int32	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Int32 = 4,$/;"	m	class:nanovdb::GridType
Int64	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Int64 = 5,$/;"	m	class:nanovdb::GridType
Internal	optixVolumeViewer/nanovdb/util/IO.h	/^namespace Internal {$/;"	n	class:nanovdb::io::Codec
InternalNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^class InternalNode : private InternalData<ChildT, Log2Dim>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
InvisibleButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)$/;"	f	class:ImGui
IsActive	support/imgui/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter
IsAnyItemActive	support/imgui/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui
IsAnyItemFocused	support/imgui/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui
IsAnyItemHovered	support/imgui/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui
IsAnyMouseDown	support/imgui/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui
IsAnyWindowFocused	support/imgui/imgui.h	/^    static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsAnyWindowHovered	support/imgui/imgui.h	/^    static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsArray	support/tinygltf/tiny_gltf.h	/^  bool IsArray() const { return (type_ == ARRAY_TYPE); }$/;"	f	class:tinygltf::Value
IsArray	support/tinygltf/tiny_gltf.h	/^bool IsArray(const json &o) {$/;"	f	namespace:tinygltf::__anon119
IsBeingResized	support/imgui/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiColumnsSet
IsBinary	support/tinygltf/tiny_gltf.h	/^  bool IsBinary() const { return (type_ == BINARY_TYPE); }$/;"	f	class:tinygltf::Value
IsBool	support/tinygltf/tiny_gltf.h	/^  bool IsBool() const { return (type_ == BOOL_TYPE); }$/;"	f	class:tinygltf::Value
IsBuilt	support/imgui/imgui.h	/^    bool                        IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }$/;"	f	struct:ImFontAtlas
IsClippedEx	support/imgui/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)$/;"	f	class:ImGui
IsDataType	support/imgui/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }$/;"	f	struct:ImGuiPayload
IsDataURI	support/tinygltf/tiny_gltf.h	/^bool IsDataURI(const std::string &in) {$/;"	f	namespace:tinygltf
IsDelivery	support/imgui/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload
IsDragDropPayloadBeingAccepted	support/imgui/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui
IsEXR	support/tinyexr/tinyexr.h	/^int IsEXR(const char *filename) {$/;"	f
IsEmpty	optixMotionGeometry/tiny_obj_loader.h	/^  bool IsEmpty() const {$/;"	f	struct:tinyobj::PrimGroup
IsFirstFrame	support/imgui/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiColumnsSet
IsInt	support/tinygltf/tiny_gltf.h	/^  bool IsInt() const { return (type_ == INT_TYPE); }$/;"	f	class:tinygltf::Value
IsInverted	support/imgui/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect
IsItemActivated	support/imgui/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui
IsItemActive	support/imgui/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui
IsItemClicked	support/imgui/imgui.cpp	/^bool ImGui::IsItemClicked(int mouse_button)$/;"	f	class:ImGui
IsItemDeactivated	support/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui
IsItemDeactivatedAfterChange	support/imgui/imgui.h	/^    static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdit(); }$/;"	f	namespace:ImGui
IsItemDeactivatedAfterEdit	support/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui
IsItemEdited	support/imgui/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui
IsItemFocused	support/imgui/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui
IsItemHovered	support/imgui/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui
IsItemHoveredRect	support/imgui/imgui.h	/^    static inline bool  IsItemHoveredRect()                   { return IsItemHovered(ImGuiHoveredFlags_RectOnly); }$/;"	f	namespace:ImGui
IsItemVisible	support/imgui/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui
IsKeyDown	support/imgui/imgui.cpp	/^bool ImGui::IsKeyDown(int user_key_index)$/;"	f	class:ImGui
IsKeyPressed	support/imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(int user_key_index, bool repeat)$/;"	f	class:ImGui
IsKeyPressedMap	support/imgui/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { const int key_index = GImGui->IO.KeyMap[key]; return (key_index >= 0) ? IsKeyPressed(key_index, repeat) : false; }$/;"	f	namespace:ImGui
IsKeyReleased	support/imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(int user_key_index)$/;"	f	class:ImGui
IsLoaded	support/imgui/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }$/;"	f	struct:ImFont
IsMouseClicked	support/imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(int button, bool repeat)$/;"	f	class:ImGui
IsMouseDoubleClicked	support/imgui/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(int button)$/;"	f	class:ImGui
IsMouseDown	support/imgui/imgui.cpp	/^bool ImGui::IsMouseDown(int button)$/;"	f	class:ImGui
IsMouseDragging	support/imgui/imgui.cpp	/^bool ImGui::IsMouseDragging(int button, float lock_threshold)$/;"	f	class:ImGui
IsMouseHoveringAnyWindow	support/imgui/imgui.h	/^    static inline bool  IsMouseHoveringAnyWindow()            { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsMouseHoveringRect	support/imgui/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui
IsMouseHoveringWindow	support/imgui/imgui.h	/^    static inline bool  IsMouseHoveringWindow()               { return IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); }$/;"	f	namespace:ImGui
IsMousePosValid	support/imgui/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui
IsMouseReleased	support/imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(int button)$/;"	f	class:ImGui
IsNavInputDown	support/imgui/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { return GImGui->IO.NavInputs[n] > 0.0f; }$/;"	f	namespace:ImGui
IsNavInputPressed	support/imgui/imgui_internal.h	/^    inline bool             IsNavInputPressed(ImGuiNavInput n, ImGuiInputReadMode mode) { return GetNavInputAmount(n, mode) > 0.0f; }$/;"	f	namespace:ImGui
IsNavInputPressedAnyOfTwo	support/imgui/imgui_internal.h	/^    inline bool             IsNavInputPressedAnyOfTwo(ImGuiNavInput n1, ImGuiNavInput n2, ImGuiInputReadMode mode) { return (GetNavInputAmount(n1, mode) + GetNavInputAmount(n2, mode)) > 0.0f; }$/;"	f	namespace:ImGui
IsNumber	support/tinygltf/tiny_gltf.h	/^  bool IsNumber() const { return (type_ == REAL_TYPE) || (type_ == INT_TYPE); }$/;"	f	class:tinygltf::Value
IsObject	support/tinygltf/tiny_gltf.h	/^  bool IsObject() const { return (type_ == OBJECT_TYPE); }$/;"	f	class:tinygltf::Value
IsObject	support/tinygltf/tiny_gltf.h	/^bool IsObject(const json &o) {$/;"	f	namespace:tinygltf::__anon119
IsPacked	support/imgui/imgui.h	/^        bool IsPacked() const   { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlas::CustomRect
IsPopupOpen	support/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id)$/;"	f	class:ImGui
IsPopupOpen	support/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id)$/;"	f	class:ImGui
IsPosHoveringAnyWindow	support/imgui/imgui.h	/^    static inline bool  IsPosHoveringAnyWindow(const ImVec2&) { IM_ASSERT(0); return false; } \/\/ This was misleading and partly broken. You probably want to use the ImGui::GetIO().WantCaptureMouse flag instead.$/;"	f	namespace:ImGui
IsPreview	support/imgui/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload
IsReal	support/tinygltf/tiny_gltf.h	/^  bool IsReal() const { return (type_ == REAL_TYPE); }$/;"	f	class:tinygltf::Value
IsRectVisible	support/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui
IsRectVisible	support/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui
IsRootWindowFocused	support/imgui/imgui.h	/^    static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocusedFlags_RootWindow); }$/;"	f	namespace:ImGui
IsRootWindowOrAnyChildFocused	support/imgui/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows); }$/;"	f	namespace:ImGui
IsRootWindowOrAnyChildHovered	support/imgui/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildHovered()       { return IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows); }$/;"	f	namespace:ImGui
IsScalar	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool IsScalar = false;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
IsScalar	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool IsScalar = true;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
IsString	support/tinygltf/tiny_gltf.h	/^  bool IsString() const { return (type_ == STRING_TYPE); }$/;"	f	class:tinygltf::Value
IsVector	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool IsVector = false;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
IsVector	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool IsVector = true;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
IsWindowActiveAndVisible	support/imgui/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	file:
IsWindowAppearing	support/imgui/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui
IsWindowChildOf	support/imgui/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui
IsWindowCollapsed	support/imgui/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui
IsWindowContentHoverable	support/imgui/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	file:
IsWindowFocused	support/imgui/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui
IsWindowHovered	support/imgui/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui
IsWindowNavFocusable	support/imgui/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui
ItemAdd	support/imgui/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)$/;"	f	class:ImGui
ItemFlags	support/imgui/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;              \/\/ == ItemFlagsStack.back() [empty == ImGuiItemFlags_Default]$/;"	m	struct:ImGuiWindowTempData
ItemFlagsStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;$/;"	m	struct:ImGuiWindowTempData
ItemHoverable	support/imgui/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui
ItemInnerSpacing	support/imgui/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).$/;"	m	struct:ImGuiStyle
ItemSize	support/imgui/imgui.cpp	/^void ImGui::ItemSize(const ImRect& bb, float text_offset_y)$/;"	f	class:ImGui
ItemSize	support/imgui/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_offset_y)$/;"	f	class:ImGui
ItemSpacing	support/imgui/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets\/lines.$/;"	m	struct:ImGuiStyle
ItemWidth	support/imgui/imgui_internal.h	/^    float                   ItemWidth;              \/\/ == ItemWidthStack.back(). 0.0: default, >0.0: width in pixels, <0.0: align xx pixels to the right of window$/;"	m	struct:ImGuiWindowTempData
ItemWidthDefault	support/imgui/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow
ItemWidthStack	support/imgui/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;$/;"	m	struct:ImGuiWindowTempData
Items	support/imgui/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	file:
ItemsCount	support/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
ItemsHeight	support/imgui/imgui.h	/^    float   ItemsHeight;$/;"	m	struct:ImGuiListClipper
Items_ArrayGetter	support/imgui/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	file:
Items_SingleStringGetter	support/imgui/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	file:
Iterator	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
Iterator	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator(const BBox& b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
Iterator	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator(uint32_t pos, const Mask* parent)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
Iterator	optixVolumeViewer/nanovdb/NanoVDB.h	/^    class Iterator$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
Iterator	optixVolumeViewer/nanovdb/NanoVDB.h	/^    class Iterator$/;"	c	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
JSON_CATCH	support/tinygltf/json.hpp	159;"	d
JSON_CATCH	support/tinygltf/json.hpp	178;"	d
JSON_CATCH	support/tinygltf/json.hpp	179;"	d
JSON_CATCH	support/tinygltf/json.hpp	20394;"	d
JSON_DEPRECATED	support/tinygltf/json.hpp	148;"	d
JSON_DEPRECATED	support/tinygltf/json.hpp	20399;"	d
JSON_HAS_CPP_14	support/tinygltf/json.hpp	200;"	d
JSON_HAS_CPP_14	support/tinygltf/json.hpp	20400;"	d
JSON_HAS_CPP_17	support/tinygltf/json.hpp	199;"	d
JSON_HAS_CPP_17	support/tinygltf/json.hpp	20401;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	160;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	180;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	181;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	184;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	185;"	d
JSON_INTERNAL_CATCH	support/tinygltf/json.hpp	20393;"	d
JSON_LIKELY	support/tinygltf/json.hpp	190;"	d
JSON_LIKELY	support/tinygltf/json.hpp	20397;"	d
JSON_THROW	support/tinygltf/json.hpp	157;"	d
JSON_THROW	support/tinygltf/json.hpp	170;"	d
JSON_THROW	support/tinygltf/json.hpp	171;"	d
JSON_THROW	support/tinygltf/json.hpp	20395;"	d
JSON_TRY	support/tinygltf/json.hpp	158;"	d
JSON_TRY	support/tinygltf/json.hpp	174;"	d
JSON_TRY	support/tinygltf/json.hpp	175;"	d
JSON_TRY	support/tinygltf/json.hpp	20396;"	d
JSON_UNLIKELY	support/tinygltf/json.hpp	191;"	d
JSON_UNLIKELY	support/tinygltf/json.hpp	20398;"	d
JoinPath	optixMotionGeometry/tiny_obj_loader.h	/^static std::string JoinPath(const std::string &dir,$/;"	f	namespace:tinyobj
JoinPath	support/tinygltf/tiny_gltf.h	/^static std::string JoinPath(const std::string &path0,$/;"	f	namespace:tinygltf
JsonAddMember	support/tinygltf/tiny_gltf.h	/^void JsonAddMember(json &o, const char *key, json &&value) {$/;"	f	namespace:tinygltf::__anon120
JsonAssign	support/tinygltf/tiny_gltf.h	/^void JsonAssign(json &dest, const json &src) {$/;"	f	namespace:tinygltf::__anon120
JsonFromString	support/tinygltf/tiny_gltf.h	/^json JsonFromString(const char *s) {$/;"	f	namespace:tinygltf::__anon120
JsonIsNull	support/tinygltf/tiny_gltf.h	/^bool JsonIsNull(const json &o) {$/;"	f	namespace:tinygltf::__anon120
JsonParse	support/tinygltf/tiny_gltf.h	/^void JsonParse(JsonDocument &doc, const char *str, size_t length,$/;"	f	namespace:__anon118
JsonPushBack	support/tinygltf/tiny_gltf.h	/^void JsonPushBack(json &o, json &&value) {$/;"	f	namespace:tinygltf::__anon120
JsonReserveArray	support/tinygltf/tiny_gltf.h	/^void JsonReserveArray(json &o, size_t s) {$/;"	f	namespace:tinygltf::__anon120
JsonSetObject	support/tinygltf/tiny_gltf.h	/^void JsonSetObject(json &o) {$/;"	f	namespace:tinygltf::__anon120
JsonToString	support/tinygltf/tiny_gltf.h	/^std::string JsonToString(const json &o, int spacing = -1) {$/;"	f	namespace:tinygltf::__anon119
KHRONOS_APIATTRIBUTES	support/GLFW/deps/KHR/khrplatform.h	127;"	d
KHRONOS_APIATTRIBUTES	support/GLFW/deps/KHR/khrplatform.h	129;"	d
KHRONOS_APIATTRIBUTES	support/KHR/khrplatform.h	127;"	d
KHRONOS_APIATTRIBUTES	support/KHR/khrplatform.h	129;"	d
KHRONOS_APICALL	support/GLFW/deps/KHR/khrplatform.h	101;"	d
KHRONOS_APICALL	support/GLFW/deps/KHR/khrplatform.h	103;"	d
KHRONOS_APICALL	support/GLFW/deps/KHR/khrplatform.h	105;"	d
KHRONOS_APICALL	support/KHR/khrplatform.h	101;"	d
KHRONOS_APICALL	support/KHR/khrplatform.h	103;"	d
KHRONOS_APICALL	support/KHR/khrplatform.h	105;"	d
KHRONOS_APICALL	support/KHR/khrplatform.h	99;"	d
KHRONOS_APIENTRY	support/GLFW/deps/KHR/khrplatform.h	116;"	d
KHRONOS_APIENTRY	support/GLFW/deps/KHR/khrplatform.h	118;"	d
KHRONOS_APIENTRY	support/KHR/khrplatform.h	116;"	d
KHRONOS_APIENTRY	support/KHR/khrplatform.h	118;"	d
KHRONOS_BOOLEAN_ENUM_FORCE_SIZE	support/GLFW/deps/KHR/khrplatform.h	/^    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM$/;"	e	enum:__anon31
KHRONOS_BOOLEAN_ENUM_FORCE_SIZE	support/KHR/khrplatform.h	/^    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM$/;"	e	enum:__anon121
KHRONOS_FALSE	support/GLFW/deps/KHR/khrplatform.h	/^    KHRONOS_FALSE = 0,$/;"	e	enum:__anon31
KHRONOS_FALSE	support/KHR/khrplatform.h	/^    KHRONOS_FALSE = 0,$/;"	e	enum:__anon121
KHRONOS_MAX_ENUM	support/GLFW/deps/KHR/khrplatform.h	267;"	d
KHRONOS_MAX_ENUM	support/KHR/khrplatform.h	267;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	147;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	160;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	172;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	189;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	199;"	d
KHRONOS_SUPPORT_FLOAT	support/GLFW/deps/KHR/khrplatform.h	212;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	147;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	160;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	172;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	189;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	199;"	d
KHRONOS_SUPPORT_FLOAT	support/KHR/khrplatform.h	212;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	146;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	159;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	171;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	188;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	198;"	d
KHRONOS_SUPPORT_INT64	support/GLFW/deps/KHR/khrplatform.h	211;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	146;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	159;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	171;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	188;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	198;"	d
KHRONOS_SUPPORT_INT64	support/KHR/khrplatform.h	211;"	d
KHRONOS_TRUE	support/GLFW/deps/KHR/khrplatform.h	/^    KHRONOS_TRUE  = 1,$/;"	e	enum:__anon31
KHRONOS_TRUE	support/KHR/khrplatform.h	/^    KHRONOS_TRUE  = 1,$/;"	e	enum:__anon121
KHR_create_context	support/GLFW/src/egl_context.h	/^    GLFWbool        KHR_create_context;$/;"	m	struct:_GLFWlibraryEGL
KHR_create_context_no_error	support/GLFW/src/egl_context.h	/^    GLFWbool        KHR_create_context_no_error;$/;"	m	struct:_GLFWlibraryEGL
KHR_gl_colorspace	support/GLFW/src/egl_context.h	/^    GLFWbool        KHR_gl_colorspace;$/;"	m	struct:_GLFWlibraryEGL
KHR_mir_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_mir_surface;$/;"	m	struct:_GLFWlibrary::__anon10
KHR_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_surface;$/;"	m	struct:_GLFWlibrary::__anon10
KHR_wayland_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_wayland_surface;$/;"	m	struct:_GLFWlibrary::__anon10
KHR_win32_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_win32_surface;$/;"	m	struct:_GLFWlibrary::__anon10
KHR_xcb_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_xcb_surface;$/;"	m	struct:_GLFWlibrary::__anon10
KHR_xlib_surface	support/GLFW/src/internal.h	/^        GLFWbool        KHR_xlib_surface;$/;"	m	struct:_GLFWlibrary::__anon10
Ka	cuda/MaterialData.h	/^        float3 Ka;$/;"	m	struct:MaterialData::Phong
Ka1	cuda/MaterialData.h	/^        float3 Ka1, Ka2;$/;"	m	struct:MaterialData::CheckerPhong
Ka2	cuda/MaterialData.h	/^        float3 Ka1, Ka2;$/;"	m	struct:MaterialData::CheckerPhong
Kd	cuda/MaterialData.h	/^        float3 Kd;$/;"	m	struct:MaterialData::Phong
Kd1	cuda/MaterialData.h	/^        float3 Kd1, Kd2;$/;"	m	struct:MaterialData::CheckerPhong
Kd2	cuda/MaterialData.h	/^        float3 Kd1, Kd2;$/;"	m	struct:MaterialData::CheckerPhong
KeepAliveID	support/imgui/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui
KeyAlt	support/imgui/imgui.h	/^    bool        KeyAlt;                         \/\/ Keyboard modifier pressed: Alt$/;"	m	struct:ImGuiIO
KeyCtrl	support/imgui/imgui.h	/^    bool        KeyCtrl;                        \/\/ Keyboard modifier pressed: Control$/;"	m	struct:ImGuiIO
KeyMap	support/imgui/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];         \/\/ <unset>          \/\/ Map of indices into the KeysDown[512] entries array which represent your "native" keyboard state.$/;"	m	struct:ImGuiIO
KeyRepeatDelay	support/imgui/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).$/;"	m	struct:ImGuiIO
KeyRepeatRate	support/imgui/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/button, rate at which it repeats, in seconds.$/;"	m	struct:ImGuiIO
KeyShift	support/imgui/imgui.h	/^    bool        KeyShift;                       \/\/ Keyboard modifier pressed: Shift$/;"	m	struct:ImGuiIO
KeySuper	support/imgui/imgui.h	/^    bool        KeySuper;                       \/\/ Keyboard modifier pressed: Cmd\/Super\/Windows$/;"	m	struct:ImGuiIO
Keys	support/tinygltf/tiny_gltf.h	/^  std::vector<std::string> Keys() const {$/;"	f	class:tinygltf::Value
KeysDown	support/imgui/imgui.h	/^    bool        KeysDown[512];                  \/\/ Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines\/enums for keys).$/;"	m	struct:ImGuiIO
KeysDownDuration	support/imgui/imgui.h	/^    float       KeysDownDuration[512];          \/\/ Duration the keyboard key has been down (0.0f == just pressed)$/;"	m	struct:ImGuiIO
KeysDownDurationPrev	support/imgui/imgui.h	/^    float       KeysDownDurationPrev[512];      \/\/ Previous duration the key has been down$/;"	m	struct:ImGuiIO
Kr	cuda/MaterialData.h	/^        float3 Kr;$/;"	m	struct:MaterialData::Phong
Kr1	cuda/MaterialData.h	/^        float3 Kr1, Kr2;$/;"	m	struct:MaterialData::CheckerPhong
Kr2	cuda/MaterialData.h	/^        float3 Kr1, Kr2;$/;"	m	struct:MaterialData::CheckerPhong
Ks	cuda/MaterialData.h	/^        float3 Ks;$/;"	m	struct:MaterialData::Phong
Ks1	cuda/MaterialData.h	/^        float3 Ks1, Ks2;$/;"	m	struct:MaterialData::CheckerPhong
Ks2	cuda/MaterialData.h	/^        float3 Ks1, Ks2;$/;"	m	struct:MaterialData::CheckerPhong
LEVEL	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t LEVEL = 0; \/\/ level 0 = leaf$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
LEVEL	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t LEVEL = 1 + ChildT::LEVEL; \/\/ level 0 = leaf$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
LEVEL	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t LEVEL = 1 + ChildT::LEVEL; \/\/ level 0 = leaf$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
LINEAR	cuda/Light.h	/^        LINEAR,$/;"	m	class:Light::Falloff
LINEAR_BSPLINE	optixHair/Hair.h	/^        LINEAR_BSPLINE,$/;"	e	enum:Hair::SplineMode
LINEAR_CURVE_ARRAY	cuda/GeometryData.h	/^        LINEAR_CURVE_ARRAY    = 4,$/;"	e	enum:GeometryData::Type
LINE_STR	sutil/sutil.cpp	823;"	d	file:
LINMATH_H	support/GLFW/deps/linmath.h	2;"	d
LINMATH_H_DEFINE_VEC	support/GLFW/deps/linmath.h	10;"	d
LMGetKbdType	support/GLFW/src/cocoa_platform.h	67;"	d
LOG2DIM	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t LOG2DIM = Log2Dim;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
LOG2DIM	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t LOG2DIM = Log2Dim;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
LONGEST_LONG_RUN	support/tinyexr/tinyexr.h	/^const int LONGEST_LONG_RUN = 255 + SHORTEST_LONG_RUN;$/;"	m	namespace:tinyexr
LONG_ZEROCODE_RUN	support/tinyexr/tinyexr.h	/^const int LONG_ZEROCODE_RUN = 63;$/;"	m	namespace:tinyexr
LPCDIACTIONA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIACTIONA *LPCDIACTIONA;$/;"	t
LPCDIACTIONFORMATA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIACTIONFORMATA *LPCDIACTIONFORMATA;$/;"	t
LPCDIACTIONFORMATW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIACTIONFORMATW *LPCDIACTIONFORMATW;$/;"	t
LPCDIACTIONW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIACTIONW *LPCDIACTIONW;$/;"	t
LPCDICOLORSET	support/GLFW/deps/mingw/dinput.h	/^typedef const DICOLORSET *LPCDICOLORSET;$/;"	t
LPCDICONDITION	support/GLFW/deps/mingw/dinput.h	/^typedef const DICONDITION *LPCDICONDITION;$/;"	t
LPCDICONFIGUREDEVICESPARAMSA	support/GLFW/deps/mingw/dinput.h	/^typedef const DICONFIGUREDEVICESPARAMSA *LPCDICONFIGUREDEVICESPARAMSA;$/;"	t
LPCDICONFIGUREDEVICESPARAMSW	support/GLFW/deps/mingw/dinput.h	/^typedef const DICONFIGUREDEVICESPARAMSW *LPCDICONFIGUREDEVICESPARAMSW;$/;"	t
LPCDICONSTANTFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef const DICONSTANTFORCE *LPCDICONSTANTFORCE;$/;"	t
LPCDICUSTOMFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef const DICUSTOMFORCE *LPCDICUSTOMFORCE;$/;"	t
LPCDIDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDATAFORMAT *LPCDIDATAFORMAT;$/;"	t
LPCDIDEVICEIMAGEINFOA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEIMAGEINFOA *LPCDIDEVICEIMAGEINFOA;$/;"	t
LPCDIDEVICEIMAGEINFOHEADERA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEIMAGEINFOHEADERA *LPCDIDEVICEIMAGEINFOHEADERA;$/;"	t
LPCDIDEVICEIMAGEINFOHEADERW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEIMAGEINFOHEADERW *LPCDIDEVICEIMAGEINFOHEADERW;$/;"	t
LPCDIDEVICEIMAGEINFOW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEIMAGEINFOW *LPCDIDEVICEIMAGEINFOW;$/;"	t
LPCDIDEVICEINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;$/;"	t
LPCDIDEVICEINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEINSTANCEW *LPCDIDEVICEINSTANCEW;$/;"	t
LPCDIDEVICEINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEINSTANCE_DX3A *LPCDIDEVICEINSTANCE_DX3A;$/;"	t
LPCDIDEVICEINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEINSTANCE_DX3W *LPCDIDEVICEINSTANCE_DX3W;$/;"	t
LPCDIDEVICEOBJECTDATA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTDATA *LPCDIDEVICEOBJECTDATA;$/;"	t
LPCDIDEVICEOBJECTDATA_DX3	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTDATA_DX3 *LPCDIDEVICEOBJECTDATA_DX3;$/;"	t
LPCDIDEVICEOBJECTINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;$/;"	t
LPCDIDEVICEOBJECTINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCEW;$/;"	t
LPCDIDEVICEOBJECTINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTINSTANCE_DX3A *LPCDIDEVICEOBJECTINSTANCE_DX3A;$/;"	t
LPCDIDEVICEOBJECTINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^typedef const DIDEVICEOBJECTINSTANCE_DX3W *LPCDIDEVICEOBJECTINSTANCE_DX3W;$/;"	t
LPCDIEFFECT	support/GLFW/deps/mingw/dinput.h	/^typedef const DIEFFECT *LPCDIEFFECT;$/;"	t
LPCDIEFFECTINFOA	support/GLFW/deps/mingw/dinput.h	/^typedef const DIEFFECTINFOA *LPCDIEFFECTINFOA;$/;"	t
LPCDIEFFECTINFOW	support/GLFW/deps/mingw/dinput.h	/^typedef const DIEFFECTINFOW *LPCDIEFFECTINFOW;$/;"	t
LPCDIEFFECT_DX5	support/GLFW/deps/mingw/dinput.h	/^typedef const DIEFFECT_DX5 *LPCDIEFFECT_DX5;$/;"	t
LPCDIENVELOPE	support/GLFW/deps/mingw/dinput.h	/^typedef const DIENVELOPE *LPCDIENVELOPE;$/;"	t
LPCDIFILEEFFECT	support/GLFW/deps/mingw/dinput.h	/^typedef const DIFILEEFFECT *LPCDIFILEEFFECT;$/;"	t
LPCDIOBJECTDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^typedef const DIOBJECTDATAFORMAT *LPCDIOBJECTDATAFORMAT;$/;"	t
LPCDIPERIODIC	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPERIODIC *LPCDIPERIODIC;$/;"	t
LPCDIPROPCAL	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPCAL *LPCDIPROPCAL;$/;"	t
LPCDIPROPCALPOV	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPCALPOV *LPCDIPROPCALPOV;$/;"	t
LPCDIPROPCPOINTS	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPCPOINTS *LPCDIPROPCPOINTS;$/;"	t
LPCDIPROPDWORD	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPDWORD *LPCDIPROPDWORD;$/;"	t
LPCDIPROPGUIDANDPATH	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPGUIDANDPATH *LPCDIPROPGUIDANDPATH;$/;"	t
LPCDIPROPHEADER	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPHEADER *LPCDIPROPHEADER;$/;"	t
LPCDIPROPPOINTER	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPPOINTER *LPCDIPROPPOINTER;$/;"	t
LPCDIPROPRANGE	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPRANGE *LPCDIPROPRANGE;$/;"	t
LPCDIPROPSTRING	support/GLFW/deps/mingw/dinput.h	/^typedef const DIPROPSTRING *LPCDIPROPSTRING;$/;"	t
LPCDIRAMPFORCE	support/GLFW/deps/mingw/dinput.h	/^typedef const DIRAMPFORCE *LPCDIRAMPFORCE;$/;"	t
LPDIACTIONA	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONA, *LPDIACTIONA;$/;"	t	typeref:struct:_DIACTIONA
LPDIACTIONFORMATA	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONFORMATA, *LPDIACTIONFORMATA;$/;"	t	typeref:struct:_DIACTIONFORMATA
LPDIACTIONFORMATW	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONFORMATW, *LPDIACTIONFORMATW;$/;"	t	typeref:struct:_DIACTIONFORMATW
LPDIACTIONW	support/GLFW/deps/mingw/dinput.h	/^} DIACTIONW, *LPDIACTIONW;$/;"	t	typeref:struct:_DIACTIONW
LPDICOLORSET	support/GLFW/deps/mingw/dinput.h	/^} DICOLORSET, *LPDICOLORSET;$/;"	t	typeref:struct:_DICOLORSET
LPDICONDITION	support/GLFW/deps/mingw/dinput.h	/^} DICONDITION, *LPDICONDITION;$/;"	t	typeref:struct:DICONDITION
LPDICONFIGUREDEVICESCALLBACK	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDICONFIGUREDEVICESCALLBACK)(LPUNKNOWN,LPVOID);$/;"	t
LPDICONFIGUREDEVICESPARAMSA	support/GLFW/deps/mingw/dinput.h	/^} DICONFIGUREDEVICESPARAMSA, *LPDICONFIGUREDEVICESPARAMSA;$/;"	t	typeref:struct:_DICONFIGUREDEVICESPARAMSA
LPDICONFIGUREDEVICESPARAMSW	support/GLFW/deps/mingw/dinput.h	/^} DICONFIGUREDEVICESPARAMSW, *LPDICONFIGUREDEVICESPARAMSW;$/;"	t	typeref:struct:_DICONFIGUREDEVICESPARAMSW
LPDICONSTANTFORCE	support/GLFW/deps/mingw/dinput.h	/^} DICONSTANTFORCE, *LPDICONSTANTFORCE;$/;"	t	typeref:struct:DICONSTANTFORCE
LPDICUSTOMFORCE	support/GLFW/deps/mingw/dinput.h	/^} DICUSTOMFORCE, *LPDICUSTOMFORCE;$/;"	t	typeref:struct:DICUSTOMFORCE
LPDIDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^} DIDATAFORMAT, *LPDIDATAFORMAT;$/;"	t	typeref:struct:_DIDATAFORMAT
LPDIDEVCAPS	support/GLFW/deps/mingw/dinput.h	/^} DIDEVCAPS,*LPDIDEVCAPS;$/;"	t	typeref:struct:DIDEVCAPS
LPDIDEVCAPS_DX3	support/GLFW/deps/mingw/dinput.h	/^} DIDEVCAPS_DX3, *LPDIDEVCAPS_DX3;$/;"	t	typeref:struct:DIDEVCAPS_DX3
LPDIDEVICEIMAGEINFOA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOA, *LPDIDEVICEIMAGEINFOA;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOA
LPDIDEVICEIMAGEINFOHEADERA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOHEADERA, *LPDIDEVICEIMAGEINFOHEADERA;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOHEADERA
LPDIDEVICEIMAGEINFOHEADERW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOHEADERW, *LPDIDEVICEIMAGEINFOHEADERW;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOHEADERW
LPDIDEVICEIMAGEINFOW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEIMAGEINFOW, *LPDIDEVICEIMAGEINFOW;$/;"	t	typeref:struct:_DIDEVICEIMAGEINFOW
LPDIDEVICEINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCEA, *LPDIDEVICEINSTANCEA;$/;"	t	typeref:struct:DIDEVICEINSTANCEA
LPDIDEVICEINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCEW, *LPDIDEVICEINSTANCEW;$/;"	t	typeref:struct:DIDEVICEINSTANCEW
LPDIDEVICEINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCE_DX3A, *LPDIDEVICEINSTANCE_DX3A;$/;"	t	typeref:struct:DIDEVICEINSTANCE_DX3A
LPDIDEVICEINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEINSTANCE_DX3W, *LPDIDEVICEINSTANCE_DX3W;$/;"	t	typeref:struct:DIDEVICEINSTANCE_DX3W
LPDIDEVICEOBJECTDATA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTDATA, *LPDIDEVICEOBJECTDATA;$/;"	t	typeref:struct:DIDEVICEOBJECTDATA
LPDIDEVICEOBJECTDATA_DX3	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTDATA_DX3,*LPDIDEVICEOBJECTDATA_DX3;$/;"	t	typeref:struct:DIDEVICEOBJECTDATA_DX3
LPDIDEVICEOBJECTINSTANCEA	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCEA, *LPDIDEVICEOBJECTINSTANCEA;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCEA
LPDIDEVICEOBJECTINSTANCEW	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCEW, *LPDIDEVICEOBJECTINSTANCEW;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCEW
LPDIDEVICEOBJECTINSTANCE_DX3A	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCE_DX3A, *LPDIDEVICEOBJECTINSTANCE_DX3A;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCE_DX3A
LPDIDEVICEOBJECTINSTANCE_DX3W	support/GLFW/deps/mingw/dinput.h	/^} DIDEVICEOBJECTINSTANCE_DX3W, *LPDIDEVICEOBJECTINSTANCE_DX3W;$/;"	t	typeref:struct:DIDEVICEOBJECTINSTANCE_DX3W
LPDIEFFECT	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECT, *LPDIEFFECT;$/;"	t	typeref:struct:DIEFFECT
LPDIEFFECTINFOA	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECTINFOA, *LPDIEFFECTINFOA;$/;"	t	typeref:struct:DIEFFECTINFOA
LPDIEFFECTINFOW	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECTINFOW, *LPDIEFFECTINFOW;$/;"	t	typeref:struct:DIEFFECTINFOW
LPDIEFFECT_DX5	support/GLFW/deps/mingw/dinput.h	/^} DIEFFECT_DX5, *LPDIEFFECT_DX5;$/;"	t	typeref:struct:DIEFFECT_DX5
LPDIEFFECT_DX6	support/GLFW/deps/mingw/dinput.h	/^typedef LPDIEFFECT LPDIEFFECT_DX6;$/;"	t
LPDIEFFESCAPE	support/GLFW/deps/mingw/dinput.h	/^} DIEFFESCAPE, *LPDIEFFESCAPE;$/;"	t	typeref:struct:DIEFFESCAPE
LPDIENUMCREATEDEFFECTOBJECTSCALLBACK	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMCREATEDEFFECTOBJECTSCALLBACK)(LPDIRECTINPUTEFFECT, LPVOID);$/;"	t
LPDIENUMDEVICEOBJECTSCALLBACKA	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICEOBJECTSCALLBACKA)(LPCDIDEVICEOBJECTINSTANCEA,LPVOID);$/;"	t
LPDIENUMDEVICEOBJECTSCALLBACKW	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICEOBJECTSCALLBACKW)(LPCDIDEVICEOBJECTINSTANCEW,LPVOID);$/;"	t
LPDIENUMDEVICESBYSEMANTICSCBA	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICESBYSEMANTICSCBA)(LPCDIDEVICEINSTANCEA,LPDIRECTINPUTDEVICE8A,DWORD,DWORD,LPVOID);$/;"	t
LPDIENUMDEVICESBYSEMANTICSCBW	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICESBYSEMANTICSCBW)(LPCDIDEVICEINSTANCEW,LPDIRECTINPUTDEVICE8W,DWORD,DWORD,LPVOID);$/;"	t
LPDIENUMDEVICESCALLBACKA	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICESCALLBACKA)(LPCDIDEVICEINSTANCEA,LPVOID);$/;"	t
LPDIENUMDEVICESCALLBACKW	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMDEVICESCALLBACKW)(LPCDIDEVICEINSTANCEW,LPVOID);$/;"	t
LPDIENUMEFFECTSCALLBACKA	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMEFFECTSCALLBACKA)(LPCDIEFFECTINFOA, LPVOID);$/;"	t
LPDIENUMEFFECTSCALLBACKW	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMEFFECTSCALLBACKW)(LPCDIEFFECTINFOW, LPVOID);$/;"	t
LPDIENUMEFFECTSINFILECALLBACK	support/GLFW/deps/mingw/dinput.h	/^typedef BOOL (CALLBACK *LPDIENUMEFFECTSINFILECALLBACK)(LPCDIFILEEFFECT , LPVOID);$/;"	t
LPDIENVELOPE	support/GLFW/deps/mingw/dinput.h	/^} DIENVELOPE, *LPDIENVELOPE;$/;"	t	typeref:struct:DIENVELOPE
LPDIFILEEFFECT	support/GLFW/deps/mingw/dinput.h	/^} DIFILEEFFECT, *LPDIFILEEFFECT;$/;"	t	typeref:struct:DIFILEEFFECT
LPDIJOYSTATE	support/GLFW/deps/mingw/dinput.h	/^} DIJOYSTATE, *LPDIJOYSTATE;$/;"	t	typeref:struct:DIJOYSTATE
LPDIJOYSTATE2	support/GLFW/deps/mingw/dinput.h	/^} DIJOYSTATE2, *LPDIJOYSTATE2;$/;"	t	typeref:struct:DIJOYSTATE2
LPDIOBJECTDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^} DIOBJECTDATAFORMAT, *LPDIOBJECTDATAFORMAT;$/;"	t	typeref:struct:_DIOBJECTDATAFORMAT
LPDIPERIODIC	support/GLFW/deps/mingw/dinput.h	/^} DIPERIODIC, *LPDIPERIODIC;$/;"	t	typeref:struct:DIPERIODIC
LPDIPROPCAL	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCAL, *LPDIPROPCAL;$/;"	t	typeref:struct:DIPROPCAL
LPDIPROPCALPOV	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCALPOV, *LPDIPROPCALPOV;$/;"	t	typeref:struct:DIPROPCALPOV
LPDIPROPCPOINTS	support/GLFW/deps/mingw/dinput.h	/^} DIPROPCPOINTS, *LPDIPROPCPOINTS;$/;"	t	typeref:struct:DIPROPCPOINTS
LPDIPROPDWORD	support/GLFW/deps/mingw/dinput.h	/^} DIPROPDWORD, *LPDIPROPDWORD;$/;"	t	typeref:struct:DIPROPDWORD
LPDIPROPGUIDANDPATH	support/GLFW/deps/mingw/dinput.h	/^} DIPROPGUIDANDPATH, *LPDIPROPGUIDANDPATH;$/;"	t	typeref:struct:DIPROPGUIDANDPATH
LPDIPROPHEADER	support/GLFW/deps/mingw/dinput.h	/^} DIPROPHEADER,*LPDIPROPHEADER;$/;"	t	typeref:struct:DIPROPHEADER
LPDIPROPPOINTER	support/GLFW/deps/mingw/dinput.h	/^} DIPROPPOINTER, *LPDIPROPPOINTER;$/;"	t	typeref:struct:DIPROPPOINTER
LPDIPROPRANGE	support/GLFW/deps/mingw/dinput.h	/^} DIPROPRANGE, *LPDIPROPRANGE;$/;"	t	typeref:struct:DIPROPRANGE
LPDIPROPSTRING	support/GLFW/deps/mingw/dinput.h	/^} DIPROPSTRING, *LPDIPROPSTRING;$/;"	t	typeref:struct:DIPROPSTRING
LPDIRAMPFORCE	support/GLFW/deps/mingw/dinput.h	/^} DIRAMPFORCE, *LPDIRAMPFORCE;$/;"	t	typeref:struct:DIRAMPFORCE
LPDIRECTINPUT2A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput2A *LPDIRECTINPUT2A;$/;"	t	typeref:struct:IDirectInput2A
LPDIRECTINPUT2W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput2W *LPDIRECTINPUT2W;$/;"	t	typeref:struct:IDirectInput2W
LPDIRECTINPUT7A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput7A *LPDIRECTINPUT7A;$/;"	t	typeref:struct:IDirectInput7A
LPDIRECTINPUT7W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput7W *LPDIRECTINPUT7W;$/;"	t	typeref:struct:IDirectInput7W
LPDIRECTINPUT8A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput8A *LPDIRECTINPUT8A;$/;"	t	typeref:struct:IDirectInput8A
LPDIRECTINPUT8W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInput8W *LPDIRECTINPUT8W;$/;"	t	typeref:struct:IDirectInput8W
LPDIRECTINPUTA	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputA *LPDIRECTINPUTA;$/;"	t	typeref:struct:IDirectInputA
LPDIRECTINPUTDEVICE2A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice2A *LPDIRECTINPUTDEVICE2A;$/;"	t	typeref:struct:IDirectInputDevice2A
LPDIRECTINPUTDEVICE2W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice2W *LPDIRECTINPUTDEVICE2W;$/;"	t	typeref:struct:IDirectInputDevice2W
LPDIRECTINPUTDEVICE7A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice7A *LPDIRECTINPUTDEVICE7A;$/;"	t	typeref:struct:IDirectInputDevice7A
LPDIRECTINPUTDEVICE7W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice7W *LPDIRECTINPUTDEVICE7W;$/;"	t	typeref:struct:IDirectInputDevice7W
LPDIRECTINPUTDEVICE8A	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice8A *LPDIRECTINPUTDEVICE8A;$/;"	t	typeref:struct:IDirectInputDevice8A
LPDIRECTINPUTDEVICE8W	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDevice8W *LPDIRECTINPUTDEVICE8W;$/;"	t	typeref:struct:IDirectInputDevice8W
LPDIRECTINPUTDEVICEA	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;$/;"	t	typeref:struct:IDirectInputDeviceA
LPDIRECTINPUTDEVICEW	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputDeviceW *LPDIRECTINPUTDEVICEW;$/;"	t	typeref:struct:IDirectInputDeviceW
LPDIRECTINPUTEFFECT	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputEffect *LPDIRECTINPUTEFFECT;$/;"	t	typeref:struct:IDirectInputEffect
LPDIRECTINPUTW	support/GLFW/deps/mingw/dinput.h	/^typedef struct IDirectInputW *LPDIRECTINPUTW;$/;"	t	typeref:struct:IDirectInputW
LPSYSKEYBOARDA	support/GLFW/deps/mingw/dinput.h	/^typedef struct SysKeyboardA *LPSYSKEYBOARDA;$/;"	t	typeref:struct:SysKeyboardA
LPSYSMOUSEA	support/GLFW/deps/mingw/dinput.h	/^typedef struct SysMouseA *LPSYSMOUSEA;$/;"	t	typeref:struct:SysMouseA
LabelText	support/imgui/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui
LabelTextV	support/imgui/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui
Lambert	optixVolumeViewer/volume.h	/^    struct Lambert$/;"	s	struct:MaterialData
LastActiveId	support/imgui/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero ActiveId, useful for animation.$/;"	m	struct:ImGuiContext
LastActiveIdTimer	support/imgui/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero ActiveId timer since the beginning of activation, useful for animation.$/;"	m	struct:ImGuiContext
LastFrameActive	support/imgui/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the window was Active.$/;"	m	struct:ImGuiWindow
LastFrameSelected	support/imgui/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of the last activated tabs with little maintenance$/;"	m	struct:ImGuiTabItem
LastFrameVisible	support/imgui/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem
LastItemDisplayRect	support/imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;    \/\/ End-user display rect (only valid if LastItemStatusFlags & ImGuiItemStatusFlags_HasDisplayRect)$/;"	m	struct:ImGuiWindowTempData
LastItemDisplayRect	support/imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemId	support/imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemId	support/imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiWindowTempData
LastItemRect	support/imgui/imgui_internal.h	/^    ImRect                  LastItemRect;           \/\/ Interaction rect$/;"	m	struct:ImGuiWindowTempData
LastItemRect	support/imgui/imgui_internal.h	/^    ImRect                  LastItemRect;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemStatusFlags	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemStatusFlags	support/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiWindowTempData
LastTabItemIdx	support/imgui/imgui_internal.h	/^    short               LastTabItemIdx;         \/\/ For BeginTabItem()\/EndTabItem()$/;"	m	struct:ImGuiTabBar
LastValidMousePos	support/imgui/imgui_internal.h	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGuiContext
LaunchParams	cuda/whitted.h	/^struct LaunchParams$/;"	s	namespace:whitted
LaunchParams	optixVolumeViewer/volume.h	/^struct LaunchParams$/;"	s
Layers	support/imgui/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder
LayoutType	support/imgui/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData
LeafNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^class LeafNode : private LeafData<ValueT, CoordT, MaskT, Log2Dim>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
LevelSet	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  LevelSet = 1,$/;"	m	class:nanovdb::GridType::GridClass
Light	cuda/Light.h	/^    Light() {}$/;"	f	struct:Light
Light	cuda/Light.h	/^struct Light$/;"	s
Light	support/tinygltf/tiny_gltf.h	/^  Light() : intensity(1.0), range(0.0) {}$/;"	f	struct:tinygltf::Light
Light	support/tinygltf/tiny_gltf.h	/^struct Light {$/;"	s	namespace:tinygltf
LineMaxY	support/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumnsSet
LineMinY	support/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumnsSet
LineOffsets	support/imgui/imgui_demo.cpp	/^    ImVector<int>       LineOffsets;        \/\/ Index to lines offset. We maintain this with AddLog() calls, allowing us to have a random access on lines$/;"	m	struct:ExampleAppLog	file:
LinearInterpolator	cuda/curve.h	/^    __device__ __forceinline__ LinearInterpolator() {}$/;"	f	struct:LinearInterpolator
LinearInterpolator	cuda/curve.h	/^struct LinearInterpolator$/;"	s
ListBox	support/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)$/;"	f	class:ImGui
ListBox	support/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)$/;"	f	class:ImGui
ListBoxFooter	support/imgui/imgui_widgets.cpp	/^void ImGui::ListBoxFooter()$/;"	f	class:ImGui
ListBoxHeader	support/imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui
ListBoxHeader	support/imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui
LoadASCIIFromFile	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::LoadASCIIFromFile(Model *model, std::string *err,$/;"	f	class:tinygltf::TinyGLTF
LoadASCIIFromString	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::LoadASCIIFromString(Model *model, std::string *err,$/;"	f	class:tinygltf::TinyGLTF
LoadBinaryFromFile	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::LoadBinaryFromFile(Model *model, std::string *err,$/;"	f	class:tinygltf::TinyGLTF
LoadBinaryFromMemory	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::LoadBinaryFromMemory(Model *model, std::string *err,$/;"	f	class:tinygltf::TinyGLTF
LoadDeepEXR	support/tinyexr/tinyexr.h	/^int LoadDeepEXR(DeepImage *deep_image, const char *filename, const char **err) {$/;"	f
LoadEXR	support/tinyexr/tinyexr.h	/^int LoadEXR(float **out_rgba, int *width, int *height, const char *filename,$/;"	f
LoadEXRFromMemory	support/tinyexr/tinyexr.h	/^int LoadEXRFromMemory(float **out_rgba, int *width, int *height,$/;"	f
LoadEXRImageFromFile	support/tinyexr/tinyexr.h	/^int LoadEXRImageFromFile(EXRImage *exr_image, const EXRHeader *exr_header,$/;"	f
LoadEXRImageFromMemory	support/tinyexr/tinyexr.h	/^int LoadEXRImageFromMemory(EXRImage *exr_image, const EXRHeader *exr_header,$/;"	f
LoadEXRMultipartImageFromFile	support/tinyexr/tinyexr.h	/^int LoadEXRMultipartImageFromFile(EXRImage *exr_images,$/;"	f
LoadEXRMultipartImageFromMemory	support/tinyexr/tinyexr.h	/^int LoadEXRMultipartImageFromMemory(EXRImage *exr_images,$/;"	f
LoadExternalFile	support/tinygltf/tiny_gltf.h	/^static bool LoadExternalFile(std::vector<unsigned char> *out, std::string *err,$/;"	f	namespace:tinygltf
LoadFromString	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::LoadFromString(Model *model, std::string *err, std::string *warn,$/;"	f	class:tinygltf::TinyGLTF
LoadImageData	support/tinygltf/tiny_gltf.h	/^  LoadImageDataFunction LoadImageData =$/;"	m	class:tinygltf::TinyGLTF
LoadImageData	support/tinygltf/tiny_gltf.h	/^bool LoadImageData(Image *image, const int image_idx, std::string *err,$/;"	f	namespace:tinygltf
LoadImageDataFunction	support/tinygltf/tiny_gltf.h	/^typedef bool (*LoadImageDataFunction)(Image *, const int, std::string *,$/;"	t	namespace:tinygltf
LoadImageDataOption	support/tinygltf/tiny_gltf.h	/^struct LoadImageDataOption$/;"	s	namespace:tinygltf
LoadIniSettingsFromDisk	support/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui
LoadIniSettingsFromMemory	support/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui
LoadMtl	optixMotionGeometry/tiny_obj_loader.h	/^void LoadMtl(std::map<std::string, int> *material_map,$/;"	f	namespace:tinyobj
LoadObj	optixMotionGeometry/tiny_obj_loader.h	/^bool LoadObj(attrib_t *attrib, std::vector<shape_t> *shapes,$/;"	f	namespace:tinyobj
LoadObjWithCallback	optixMotionGeometry/tiny_obj_loader.h	/^bool LoadObjWithCallback(std::istream &inStream, const callback_t &callback,$/;"	f	namespace:tinyobj
LocalGeometry	cuda/LocalGeometry.h	/^struct LocalGeometry$/;"	s
Locked	support/imgui/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.$/;"	m	struct:ImFontAtlas
LogBegin	support/imgui/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui
LogBuffer	support/imgui/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when log to clipboard. This is pointer so our GImGui static constructor doesn't call heap allocators.$/;"	m	struct:ImGuiContext
LogButtons	support/imgui/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui
LogDepthRef	support/imgui/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext
LogDepthToExpand	support/imgui/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext
LogDepthToExpandDefault	support/imgui/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for LogDepthMaxExpand if not specified in the LogXXX function call.$/;"	m	struct:ImGuiContext
LogEnabled	support/imgui/imgui_internal.h	/^    bool                    LogEnabled;$/;"	m	struct:ImGuiContext
LogFile	support/imgui/imgui_internal.h	/^    FILE*                   LogFile;                            \/\/ If != NULL log to stdout\/ file$/;"	m	struct:ImGuiContext
LogFilename	support/imgui/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (default parameter to ImGui::LogToFile when no file is specified).$/;"	m	struct:ImGuiIO
LogFinish	support/imgui/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui
LogLineFirstItem	support/imgui/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext
LogLinePosY	support/imgui/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext
LogRenderedText	support/imgui/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui
LogText	support/imgui/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui
LogToBuffer	support/imgui/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui
LogToClipboard	support/imgui/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui
LogToFile	support/imgui/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui
LogToTTY	support/imgui/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui
LogType	support/imgui/imgui_internal.h	/^    ImGuiLogType            LogType;$/;"	m	struct:ImGuiContext
LookAtFixed	sutil/Trackball.h	/^        LookAtFixed$/;"	e	enum:sutil::Trackball::ViewMode
LowerBound	support/imgui/imgui.cpp	/^static ImGuiStorage::Pair* LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)$/;"	f	file:
MAKEDIPROP	support/GLFW/deps/mingw/dinput.h	829;"	d
MAKEDIPROP	support/GLFW/deps/mingw/dinput.h	831;"	d
MAP_ANALOG	support/imgui/imgui_impl_glfw.cpp	278;"	d	file:
MAP_ANALOG	support/imgui/imgui_impl_glfw.cpp	299;"	d	file:
MAP_BUTTON	support/imgui/imgui_impl_glfw.cpp	277;"	d	file:
MAP_BUTTON	support/imgui/imgui_impl_glfw.cpp	298;"	d	file:
MASK	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t MASK = (1u << LOG2DIM) - 1u; \/\/ mask for bit operations$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
MASK	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t MASK = (1u << TOTAL) - 1u;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
MAT_COUNT	optixBoundValues/optixBoundValues.cpp	/^const int32_t MAT_COUNT      = 4;$/;"	v
MAT_COUNT	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^const int32_t MAT_COUNT      = 4;$/;"	v
MAT_COUNT	optixMultiGPU/optixMultiGPU.cpp	/^const int32_t  MAT_COUNT       = 4;$/;"	v
MAT_COUNT	optixNVLink/optixNVLink.cpp	/^const int32_t  MAT_COUNT       = 4;$/;"	v
MAT_COUNT	optixPathTracer/optixPathTracer.cpp	/^const int32_t MAT_COUNT      = 4;$/;"	v
MAXCPOINTSNUM	support/GLFW/deps/mingw/dinput.h	881;"	d
MAX_MEM_LEVEL	support/tinyexr/tinyexr.h	1212;"	d
MAX_NUM_PLANES	optixOpticalFlow/nvOpticalFlowCuda.h	40;"	d
MAX_RUN_LENGTH	support/tinyexr/tinyexr.h	/^const int MAX_RUN_LENGTH = 127;$/;"	m	namespace:tinyexr
MAX_SIZE	optixVolumeViewer/nanovdb/util/IO.h	/^static constexpr fileSize_t MAX_SIZE = 1UL << 30; \/\/ size is 1 GB$/;"	m	namespace:nanovdb::io::Codec::Internal
MAX_TRACE_DEPTH	cuda/whitted.h	/^const unsigned int MAX_TRACE_DEPTH      = 8u;$/;"	m	namespace:whitted
MAX_WBITS	support/tinyexr/tinyexr.h	1211;"	d
MB	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	76;"	d	file:
MESA_swap_control	support/GLFW/src/glx_context.h	/^    GLFWbool        MESA_swap_control;$/;"	m	struct:_GLFWlibraryGLX
MINIZ_HAS_64BIT_REGISTERS	support/tinyexr/tinyexr.h	897;"	d
MINIZ_HEADER_INCLUDED	support/tinyexr/tinyexr.h	814;"	d
MINIZ_NO_ARCHIVE_APIS	support/tinyexr/tinyexr.h	834;"	d
MINIZ_NO_TIME	support/tinyexr/tinyexr.h	831;"	d
MINIZ_NO_TIME	support/tinyexr/tinyexr.h	860;"	d
MINIZ_USE_UNALIGNED_LOADS_AND_STORES	support/tinyexr/tinyexr.h	887;"	d
MINIZ_X86_OR_X64_CPU	support/tinyexr/tinyexr.h	871;"	d
MIN_ERROR_STRING_SIZE	optixOpticalFlow/nvOpticalFlowCommon.h	62;"	d
MIN_RUN_LENGTH	support/tinyexr/tinyexr.h	/^const int MIN_RUN_LENGTH = 3;$/;"	m	namespace:tinyexr
MOD_MASK	support/tinyexr/tinyexr.h	/^const int MOD_MASK = (1 << NBITS) - 1;$/;"	m	namespace:tinyexr
MOTIF_WM_HINTS	support/GLFW/src/x11_platform.h	/^    Atom            MOTIF_WM_HINTS;$/;"	m	struct:_GLFWlibraryX11
MSGFLT_ALLOW	support/GLFW/src/win32_platform.h	116;"	d
MULTIPLE	support/GLFW/src/x11_platform.h	/^    Atom            MULTIPLE;$/;"	m	struct:_GLFWlibraryX11
MZ_ADLER32_INIT	support/tinyexr/tinyexr.h	915;"	d
MZ_ASSERT	support/tinyexr/tinyexr.h	1888;"	d
MZ_BEST_COMPRESSION	support/tinyexr/tinyexr.h	/^  MZ_BEST_COMPRESSION = 9,$/;"	e	enum:tinyexr::miniz::__anon37
MZ_BEST_SPEED	support/tinyexr/tinyexr.h	/^  MZ_BEST_SPEED = 1,$/;"	e	enum:tinyexr::miniz::__anon37
MZ_BLOCK	support/tinyexr/tinyexr.h	/^  MZ_BLOCK = 5$/;"	e	enum:tinyexr::miniz::__anon35
MZ_BUF_ERROR	support/tinyexr/tinyexr.h	/^  MZ_BUF_ERROR = -5,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_CLEAR_OBJ	support/tinyexr/tinyexr.h	1902;"	d
MZ_CRC32_INIT	support/tinyexr/tinyexr.h	920;"	d
MZ_DATA_ERROR	support/tinyexr/tinyexr.h	/^  MZ_DATA_ERROR = -3,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_DEFAULT_COMPRESSION	support/tinyexr/tinyexr.h	/^  MZ_DEFAULT_COMPRESSION = -1$/;"	e	enum:tinyexr::miniz::__anon37
MZ_DEFAULT_LEVEL	support/tinyexr/tinyexr.h	/^  MZ_DEFAULT_LEVEL = 6,$/;"	e	enum:tinyexr::miniz::__anon37
MZ_DEFAULT_STRATEGY	support/tinyexr/tinyexr.h	/^  MZ_DEFAULT_STRATEGY = 0,$/;"	e	enum:tinyexr::miniz::__anon34
MZ_DEFAULT_WINDOW_BITS	support/tinyexr/tinyexr.h	992;"	d
MZ_DEFLATED	support/tinyexr/tinyexr.h	935;"	d
MZ_DELETE_FILE	support/tinyexr/tinyexr.h	4613;"	d
MZ_DELETE_FILE	support/tinyexr/tinyexr.h	4629;"	d
MZ_DELETE_FILE	support/tinyexr/tinyexr.h	4645;"	d
MZ_DELETE_FILE	support/tinyexr/tinyexr.h	4661;"	d
MZ_DELETE_FILE	support/tinyexr/tinyexr.h	4677;"	d
MZ_ERRNO	support/tinyexr/tinyexr.h	/^  MZ_ERRNO = -1,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_FALSE	support/tinyexr/tinyexr.h	1237;"	d
MZ_FCLOSE	support/tinyexr/tinyexr.h	4604;"	d
MZ_FCLOSE	support/tinyexr/tinyexr.h	4620;"	d
MZ_FCLOSE	support/tinyexr/tinyexr.h	4636;"	d
MZ_FCLOSE	support/tinyexr/tinyexr.h	4652;"	d
MZ_FCLOSE	support/tinyexr/tinyexr.h	4668;"	d
MZ_FFLUSH	support/tinyexr/tinyexr.h	4611;"	d
MZ_FFLUSH	support/tinyexr/tinyexr.h	4627;"	d
MZ_FFLUSH	support/tinyexr/tinyexr.h	4643;"	d
MZ_FFLUSH	support/tinyexr/tinyexr.h	4659;"	d
MZ_FFLUSH	support/tinyexr/tinyexr.h	4675;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4583;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4602;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4618;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4634;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4650;"	d
MZ_FILE	support/tinyexr/tinyexr.h	4666;"	d
MZ_FILE_STAT	support/tinyexr/tinyexr.h	4610;"	d
MZ_FILE_STAT	support/tinyexr/tinyexr.h	4626;"	d
MZ_FILE_STAT	support/tinyexr/tinyexr.h	4642;"	d
MZ_FILE_STAT	support/tinyexr/tinyexr.h	4658;"	d
MZ_FILE_STAT	support/tinyexr/tinyexr.h	4674;"	d
MZ_FILE_STAT_STRUCT	support/tinyexr/tinyexr.h	4609;"	d
MZ_FILE_STAT_STRUCT	support/tinyexr/tinyexr.h	4625;"	d
MZ_FILE_STAT_STRUCT	support/tinyexr/tinyexr.h	4641;"	d
MZ_FILE_STAT_STRUCT	support/tinyexr/tinyexr.h	4657;"	d
MZ_FILE_STAT_STRUCT	support/tinyexr/tinyexr.h	4673;"	d
MZ_FILTERED	support/tinyexr/tinyexr.h	/^  MZ_FILTERED = 1,$/;"	e	enum:tinyexr::miniz::__anon34
MZ_FINISH	support/tinyexr/tinyexr.h	/^  MZ_FINISH = 4,$/;"	e	enum:tinyexr::miniz::__anon35
MZ_FIXED	support/tinyexr/tinyexr.h	/^  MZ_FIXED = 4$/;"	e	enum:tinyexr::miniz::__anon34
MZ_FOPEN	support/tinyexr/tinyexr.h	4603;"	d
MZ_FOPEN	support/tinyexr/tinyexr.h	4619;"	d
MZ_FOPEN	support/tinyexr/tinyexr.h	4635;"	d
MZ_FOPEN	support/tinyexr/tinyexr.h	4651;"	d
MZ_FOPEN	support/tinyexr/tinyexr.h	4667;"	d
MZ_FORCEINLINE	support/tinyexr/tinyexr.h	1919;"	d
MZ_FORCEINLINE	support/tinyexr/tinyexr.h	1921;"	d
MZ_FORCEINLINE	support/tinyexr/tinyexr.h	1923;"	d
MZ_FREAD	support/tinyexr/tinyexr.h	4605;"	d
MZ_FREAD	support/tinyexr/tinyexr.h	4621;"	d
MZ_FREAD	support/tinyexr/tinyexr.h	4637;"	d
MZ_FREAD	support/tinyexr/tinyexr.h	4653;"	d
MZ_FREAD	support/tinyexr/tinyexr.h	4669;"	d
MZ_FREE	support/tinyexr/tinyexr.h	1892;"	d
MZ_FREE	support/tinyexr/tinyexr.h	1896;"	d
MZ_FREOPEN	support/tinyexr/tinyexr.h	4612;"	d
MZ_FREOPEN	support/tinyexr/tinyexr.h	4628;"	d
MZ_FREOPEN	support/tinyexr/tinyexr.h	4644;"	d
MZ_FREOPEN	support/tinyexr/tinyexr.h	4660;"	d
MZ_FREOPEN	support/tinyexr/tinyexr.h	4676;"	d
MZ_FSEEK64	support/tinyexr/tinyexr.h	4608;"	d
MZ_FSEEK64	support/tinyexr/tinyexr.h	4624;"	d
MZ_FSEEK64	support/tinyexr/tinyexr.h	4640;"	d
MZ_FSEEK64	support/tinyexr/tinyexr.h	4656;"	d
MZ_FSEEK64	support/tinyexr/tinyexr.h	4672;"	d
MZ_FTELL64	support/tinyexr/tinyexr.h	4607;"	d
MZ_FTELL64	support/tinyexr/tinyexr.h	4623;"	d
MZ_FTELL64	support/tinyexr/tinyexr.h	4639;"	d
MZ_FTELL64	support/tinyexr/tinyexr.h	4655;"	d
MZ_FTELL64	support/tinyexr/tinyexr.h	4671;"	d
MZ_FULL_FLUSH	support/tinyexr/tinyexr.h	/^  MZ_FULL_FLUSH = 3,$/;"	e	enum:tinyexr::miniz::__anon35
MZ_FWRITE	support/tinyexr/tinyexr.h	4606;"	d
MZ_FWRITE	support/tinyexr/tinyexr.h	4622;"	d
MZ_FWRITE	support/tinyexr/tinyexr.h	4638;"	d
MZ_FWRITE	support/tinyexr/tinyexr.h	4654;"	d
MZ_FWRITE	support/tinyexr/tinyexr.h	4670;"	d
MZ_HUFFMAN_ONLY	support/tinyexr/tinyexr.h	/^  MZ_HUFFMAN_ONLY = 2,$/;"	e	enum:tinyexr::miniz::__anon34
MZ_MACRO_END	support/tinyexr/tinyexr.h	1243;"	d
MZ_MACRO_END	support/tinyexr/tinyexr.h	1245;"	d
MZ_MALLOC	support/tinyexr/tinyexr.h	1891;"	d
MZ_MALLOC	support/tinyexr/tinyexr.h	1895;"	d
MZ_MAX	support/tinyexr/tinyexr.h	1900;"	d
MZ_MEM_ERROR	support/tinyexr/tinyexr.h	/^  MZ_MEM_ERROR = -4,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_MIN	support/tinyexr/tinyexr.h	1901;"	d
MZ_NEED_DICT	support/tinyexr/tinyexr.h	/^  MZ_NEED_DICT = 2,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_NO_COMPRESSION	support/tinyexr/tinyexr.h	/^  MZ_NO_COMPRESSION = 0,$/;"	e	enum:tinyexr::miniz::__anon37
MZ_NO_FLUSH	support/tinyexr/tinyexr.h	/^  MZ_NO_FLUSH = 0,$/;"	e	enum:tinyexr::miniz::__anon35
MZ_OK	support/tinyexr/tinyexr.h	/^  MZ_OK = 0,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_PARAM_ERROR	support/tinyexr/tinyexr.h	/^  MZ_PARAM_ERROR = -10000$/;"	e	enum:tinyexr::miniz::__anon36
MZ_PARTIAL_FLUSH	support/tinyexr/tinyexr.h	/^  MZ_PARTIAL_FLUSH = 1,$/;"	e	enum:tinyexr::miniz::__anon35
MZ_READ_LE16	support/tinyexr/tinyexr.h	1905;"	d
MZ_READ_LE16	support/tinyexr/tinyexr.h	1908;"	d
MZ_READ_LE32	support/tinyexr/tinyexr.h	1906;"	d
MZ_READ_LE32	support/tinyexr/tinyexr.h	1911;"	d
MZ_REALLOC	support/tinyexr/tinyexr.h	1893;"	d
MZ_REALLOC	support/tinyexr/tinyexr.h	1897;"	d
MZ_RLE	support/tinyexr/tinyexr.h	/^  MZ_RLE = 3,$/;"	e	enum:tinyexr::miniz::__anon34
MZ_STREAM_END	support/tinyexr/tinyexr.h	/^  MZ_STREAM_END = 1,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_STREAM_ERROR	support/tinyexr/tinyexr.h	/^  MZ_STREAM_ERROR = -2,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_SWAP_UINT32	support/tinyexr/tinyexr.h	4940;"	d
MZ_SYNC_FLUSH	support/tinyexr/tinyexr.h	/^  MZ_SYNC_FLUSH = 2,$/;"	e	enum:tinyexr::miniz::__anon35
MZ_TOLOWER	support/tinyexr/tinyexr.h	4681;"	d
MZ_TRUE	support/tinyexr/tinyexr.h	1238;"	d
MZ_UBER_COMPRESSION	support/tinyexr/tinyexr.h	/^  MZ_UBER_COMPRESSION = 10,$/;"	e	enum:tinyexr::miniz::__anon37
MZ_VERNUM	support/tinyexr/tinyexr.h	948;"	d
MZ_VERSION	support/tinyexr/tinyexr.h	947;"	d
MZ_VERSION_ERROR	support/tinyexr/tinyexr.h	/^  MZ_VERSION_ERROR = -6,$/;"	e	enum:tinyexr::miniz::__anon36
MZ_VER_MAJOR	support/tinyexr/tinyexr.h	949;"	d
MZ_VER_MINOR	support/tinyexr/tinyexr.h	950;"	d
MZ_VER_REVISION	support/tinyexr/tinyexr.h	951;"	d
MZ_VER_SUBREVISION	support/tinyexr/tinyexr.h	952;"	d
MZ_WRITE_LE16	support/tinyexr/tinyexr.h	5899;"	d
MZ_WRITE_LE32	support/tinyexr/tinyexr.h	5900;"	d
MZ_ZIP_ARRAY_ELEMENT	support/tinyexr/tinyexr.h	4753;"	d
MZ_ZIP_ARRAY_SET_ELEMENT_SIZE	support/tinyexr/tinyexr.h	4751;"	d
MZ_ZIP_CDH_BIT_FLAG_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_BIT_FLAG_OFS = 8,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_COMMENT_LEN_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_COMMENT_LEN_OFS = 32,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_COMPRESSED_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_COMPRESSED_SIZE_OFS = 20,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_CRC32_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_CRC32_OFS = 16,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS = 24,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_DISK_START_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_DISK_START_OFS = 34,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_EXTERNAL_ATTR_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_EXTERNAL_ATTR_OFS = 38,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_EXTRA_LEN_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_EXTRA_LEN_OFS = 30,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_FILENAME_LEN_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_FILENAME_LEN_OFS = 28,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_FILE_DATE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_FILE_DATE_OFS = 14,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_FILE_TIME_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_FILE_TIME_OFS = 12,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_INTERNAL_ATTR_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_INTERNAL_ATTR_OFS = 36,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_LOCAL_HEADER_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_LOCAL_HEADER_OFS = 42,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_METHOD_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_METHOD_OFS = 10,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_SIG_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_SIG_OFS = 0,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_VERSION_MADE_BY_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_VERSION_MADE_BY_OFS = 4,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CDH_VERSION_NEEDED_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CDH_VERSION_NEEDED_OFS = 6,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CENTRAL_DIR_HEADER_SIG	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CENTRAL_DIR_HEADER_SIG = 0x02014b50,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_CENTRAL_DIR_HEADER_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_CENTRAL_DIR_HEADER_SIZE = 46,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 8,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_CDIR_OFS_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_CDIR_OFS_OFS = 16,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_CDIR_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_CDIR_SIZE_OFS = 12,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS = 10,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_COMMENT_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_COMMENT_SIZE_OFS = 20,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS = 6,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_NUM_THIS_DISK_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_NUM_THIS_DISK_OFS = 4,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_ECDH_SIG_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_ECDH_SIG_OFS = 0,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG	support/tinyexr/tinyexr.h	/^  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG = 0x06054b50,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE = 22,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_FLAG_CASE_SENSITIVE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_FLAG_CASE_SENSITIVE = 0x0100,$/;"	e	enum:tinyexr::miniz::__anon41
MZ_ZIP_FLAG_COMPRESSED_DATA	support/tinyexr/tinyexr.h	/^  MZ_ZIP_FLAG_COMPRESSED_DATA = 0x0400,$/;"	e	enum:tinyexr::miniz::__anon41
MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY	support/tinyexr/tinyexr.h	/^  MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY = 0x0800$/;"	e	enum:tinyexr::miniz::__anon41
MZ_ZIP_FLAG_IGNORE_PATH	support/tinyexr/tinyexr.h	/^  MZ_ZIP_FLAG_IGNORE_PATH = 0x0200,$/;"	e	enum:tinyexr::miniz::__anon41
MZ_ZIP_LDH_BIT_FLAG_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_BIT_FLAG_OFS = 6,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_COMPRESSED_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_COMPRESSED_SIZE_OFS = 18,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_CRC32_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_CRC32_OFS = 14,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS = 22,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_EXTRA_LEN_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_EXTRA_LEN_OFS = 28,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_FILENAME_LEN_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_FILENAME_LEN_OFS = 26,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_FILE_DATE_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_FILE_DATE_OFS = 12,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_FILE_TIME_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_FILE_TIME_OFS = 10,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_METHOD_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_METHOD_OFS = 8,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_SIG_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_SIG_OFS = 0,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LDH_VERSION_NEEDED_OFS	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LDH_VERSION_NEEDED_OFS = 4,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LOCAL_DIR_HEADER_SIG	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LOCAL_DIR_HEADER_SIG = 0x04034b50,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_LOCAL_DIR_HEADER_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_LOCAL_DIR_HEADER_SIZE = 30,$/;"	e	enum:tinyexr::miniz::__anon58
MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE = 260,$/;"	e	enum:tinyexr::miniz::__anon38
MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE = 256$/;"	e	enum:tinyexr::miniz::__anon38
MZ_ZIP_MAX_IO_BUF_SIZE	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MAX_IO_BUF_SIZE = 64 * 1024,$/;"	e	enum:tinyexr::miniz::__anon38
MZ_ZIP_MODE_INVALID	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MODE_INVALID = 0,$/;"	e	enum:tinyexr::miniz::__anon40
MZ_ZIP_MODE_READING	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MODE_READING = 1,$/;"	e	enum:tinyexr::miniz::__anon40
MZ_ZIP_MODE_WRITING	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MODE_WRITING = 2,$/;"	e	enum:tinyexr::miniz::__anon40
MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED	support/tinyexr/tinyexr.h	/^  MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED = 3$/;"	e	enum:tinyexr::miniz::__anon40
M_1_PIf	sutil/vec_math.h	50;"	d
M_OFFSET	support/tinyexr/tinyexr.h	/^const int M_OFFSET = 1 << (NBITS - 1);$/;"	m	namespace:tinyexr
M_PI_2f	sutil/vec_math.h	47;"	d
M_PIf	sutil/vec_math.h	44;"	d
MakeCurrent	support/GLFW/src/egl_context.h	/^    PFNEGLMAKECURRENTPROC           MakeCurrent;$/;"	m	struct:_GLFWlibraryEGL
MakeCurrent	support/GLFW/src/glx_context.h	/^    PFNGLXMAKECURRENTPROC               MakeCurrent;$/;"	m	struct:_GLFWlibraryGLX
MakeCurrent	support/GLFW/src/wgl_context.h	/^    WGLMAKECURRENT_T                    MakeCurrent;$/;"	m	struct:_GLFWlibraryWGL
MallocWrapper	support/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(size); IM_ASSERT(0); return NULL; }$/;"	f	file:
MallocWrapper	support/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return malloc(size); }$/;"	f	file:
Mantissa	support/tinyexr/tinyexr.h	/^    unsigned int Mantissa : 10;$/;"	m	struct:tinyexr::FP16::__anon62
Mantissa	support/tinyexr/tinyexr.h	/^    unsigned int Mantissa : 23;$/;"	m	struct:tinyexr::FP32::__anon61
Map	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Map$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Map	support/imgui/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool
MarkIniSettingsDirty	support/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui
MarkIniSettingsDirty	support/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui
MarkItemEdited	support/imgui/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui
Mask	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Mask = 8,$/;"	m	class:nanovdb::GridType
Mask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Mask()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
Mask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Mask(bool on)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
Mask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Mask(const Mask& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
Mask	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Mask$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Material	support/tinygltf/tiny_gltf.h	/^  Material() : alphaMode("OPAQUE"), alphaCutoff(0.5), doubleSided(false) {}$/;"	f	struct:tinygltf::Material
Material	support/tinygltf/tiny_gltf.h	/^struct Material {$/;"	s	namespace:tinygltf
MaterialData	cuda/MaterialData.h	/^    MaterialData()$/;"	f	struct:MaterialData
MaterialData	cuda/MaterialData.h	/^struct MaterialData$/;"	s
MaterialData	optixVolumeViewer/volume.h	/^struct MaterialData $/;"	s
MaterialFileReader	optixMotionGeometry/tiny_obj_loader.h	/^  explicit MaterialFileReader(const std::string &mtl_basedir)$/;"	f	class:tinyobj::MaterialFileReader
MaterialFileReader	optixMotionGeometry/tiny_obj_loader.h	/^class MaterialFileReader : public MaterialReader {$/;"	c	namespace:tinyobj
MaterialIndex	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    MaterialIndex()$/;"	f	struct:MaterialIndex
MaterialIndex	optixDynamicMaterials/optixDynamicMaterials.cpp	/^struct MaterialIndex$/;"	s	file:
MaterialReader	optixMotionGeometry/tiny_obj_loader.h	/^  MaterialReader() {}$/;"	f	class:tinyobj::MaterialReader
MaterialReader	optixMotionGeometry/tiny_obj_loader.h	/^class MaterialReader {$/;"	c	namespace:tinyobj
MaterialStreamReader	optixMotionGeometry/tiny_obj_loader.h	/^  explicit MaterialStreamReader(std::istream &inStream)$/;"	f	class:tinyobj::MaterialStreamReader
MaterialStreamReader	optixMotionGeometry/tiny_obj_loader.h	/^class MaterialStreamReader : public MaterialReader {$/;"	c	namespace:tinyobj
Matrix	optixDynamicMaterials/optixDynamicMaterials.cpp	/^struct Matrix$/;"	s	file:
Matrix	sutil/Matrix.h	/^    SUTIL_HOSTDEVICE explicit     Matrix( const float data[M*N] ) { for(unsigned int i = 0; i < M*N; ++i) m_data[i] = data[i]; }$/;"	f	class:sutil::Matrix
Matrix	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<M,N>::Matrix( const Matrix<M,N>& m )$/;"	f	class:sutil::Matrix
Matrix	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<M,N>::Matrix( const std::initializer_list<float>& list )$/;"	f	class:sutil::Matrix
Matrix	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<M,N>::Matrix()$/;"	f	class:sutil::Matrix
Matrix	sutil/Matrix.h	/^  class Matrix$/;"	c	namespace:sutil
Matrix2x2	sutil/Matrix.h	/^  typedef Matrix<2, 2> Matrix2x2;$/;"	t	namespace:sutil
Matrix2x3	sutil/Matrix.h	/^  typedef Matrix<2, 3> Matrix2x3;$/;"	t	namespace:sutil
Matrix2x4	sutil/Matrix.h	/^  typedef Matrix<2, 4> Matrix2x4;$/;"	t	namespace:sutil
Matrix3x2	sutil/Matrix.h	/^  typedef Matrix<3, 2> Matrix3x2;$/;"	t	namespace:sutil
Matrix3x3	sutil/Matrix.h	/^  typedef Matrix<3, 3> Matrix3x3;$/;"	t	namespace:sutil
Matrix3x4	optixMotionGeometry/motionHelper.hpp	/^struct Matrix3x4$/;"	s	namespace:__anon4
Matrix3x4	sutil/Matrix.h	/^  typedef Matrix<3, 4> Matrix3x4;$/;"	t	namespace:sutil
Matrix4x2	sutil/Matrix.h	/^  typedef Matrix<4, 2> Matrix4x2;$/;"	t	namespace:sutil
Matrix4x3	sutil/Matrix.h	/^  typedef Matrix<4, 3> Matrix4x3;$/;"	t	namespace:sutil
Matrix4x4	sutil/Matrix.h	/^  typedef Matrix<4, 4> Matrix4x4;$/;"	t	namespace:sutil
MatrixMotionTransform	optixMotionGeometry/motionHelper.hpp	/^    MatrixMotionTransform( unsigned int numKeys = 2 )$/;"	f	class:__anon4::MatrixMotionTransform
MatrixMotionTransform	optixMotionGeometry/motionHelper.hpp	/^class MatrixMotionTransform : public MatrixMotionTransformArray$/;"	c	namespace:__anon4
MatrixMotionTransformArray	optixMotionGeometry/motionHelper.hpp	/^    MatrixMotionTransformArray( size_t numTransforms = 0, unsigned int numKeys = 2 )$/;"	f	class:__anon4::MatrixMotionTransformArray
MatrixMotionTransformArray	optixMotionGeometry/motionHelper.hpp	/^class MatrixMotionTransformArray : public MotionTransformArrayBase<MatrixMotionTransformArray, OptixMatrixMotionTransform>$/;"	c	namespace:__anon4
Max	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline Type Max(Type a, Type b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Max	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline double Max(double a, double b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Max	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline float Max(float a, float b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Max	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Max(int32_t a, int32_t b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Max	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline uint32_t Max(uint32_t a, uint32_t b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Max	support/imgui/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect
MaxIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int MaxIndex(const Vec3T& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
MaxX	support/imgui/imgui_internal.h	/^    float               MinX, MaxX;$/;"	m	struct:ImGuiColumnsSet
Maximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Maximum$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Maximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Maximum<double>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Maximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Maximum<float>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Maximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Maximum<int>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Maximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Maximum<uint32_t>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
MemAlloc	support/imgui/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui
MemFree	support/imgui/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui
MenuBarAppending	support/imgui/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData
MenuBarHeight	support/imgui/imgui_internal.h	/^    float       MenuBarHeight() const                   { return (Flags & ImGuiWindowFlags_MenuBar) ? DC.MenuBarOffset.y + CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f : 0.0f; }$/;"	f	struct:ImGuiWindow
MenuBarOffset	support/imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved\/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs.$/;"	m	struct:ImGuiWindowTempData
MenuBarOffsetMinVal	support/imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffsetMinVal;                \/\/ This is not exposed publicly, so we don't clear it.$/;"	m	struct:ImGuiNextWindowData
MenuBarRect	support/imgui/imgui_internal.h	/^    ImRect      MenuBarRect() const                     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos.x, y1, Pos.x + SizeFull.x, y1 + MenuBarHeight()); }$/;"	f	struct:ImGuiWindow
MenuColumns	support/imgui/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;                        \/\/ Simplified columns storage for menu items$/;"	m	struct:ImGuiWindow
MenuItem	support/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui
MenuItem	support/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui
MergeMode	support/imgui/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.$/;"	m	struct:ImFontConfig
Mesh	support/tinygltf/tiny_gltf.h	/^struct Mesh {$/;"	s	namespace:tinygltf
MeshData	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^struct MeshData$/;"	s	file:
MeshGroup	sutil/Scene.h	/^    struct MeshGroup$/;"	s	class:sutil::Scene
MetaData	optixVolumeViewer/nanovdb/util/IO.h	/^struct MetaData$/;"	s	class:nanovdb::io::Codec
MetricsActiveAllocations	support/imgui/imgui.h	/^    int         MetricsActiveAllocations;       \/\/ Number of active allocations, updated by MemAlloc\/MemFree based on current context. May be off if you have multiple imgui contexts.$/;"	m	struct:ImGuiIO
MetricsActiveWindows	support/imgui/imgui.h	/^    int         MetricsActiveWindows;           \/\/ Number of active windows$/;"	m	struct:ImGuiIO
MetricsRenderIndices	support/imgui/imgui.h	/^    int         MetricsRenderIndices;           \/\/ Indices output during last call to Render() = number of triangles * 3$/;"	m	struct:ImGuiIO
MetricsRenderVertices	support/imgui/imgui.h	/^    int         MetricsRenderVertices;          \/\/ Vertices output during last call to Render()$/;"	m	struct:ImGuiIO
MetricsRenderWindows	support/imgui/imgui.h	/^    int         MetricsRenderWindows;           \/\/ Number of visible windows$/;"	m	struct:ImGuiIO
MetricsTotalSurface	support/imgui/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Total surface in pixels to get an idea of the font rasterization\/texture cost (not exact, we approximate the cost of padding between glyphs)$/;"	m	struct:ImFont
MimeToExt	support/tinygltf/tiny_gltf.h	/^static std::string MimeToExt(const std::string &mimeType) {$/;"	f	namespace:tinygltf
Min	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline Type Min(Type a, Type b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Min	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline double Min(double a, double b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Min	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline float Min(float a, float b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Min	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int32_t Min(int32_t a, int32_t b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Min	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline uint32_t Min(uint32_t a, uint32_t b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Min	support/imgui/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect
MinIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline int MinIndex(const Vec3T& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
MinX	support/imgui/imgui_internal.h	/^    float               MinX, MaxX;$/;"	m	struct:ImGuiColumnsSet
MissData	optixBoundValues/optixBoundValues.h	/^struct MissData$/;"	s
MissData	optixCurves/optixCurves.h	/^struct MissData$/;"	s
MissData	optixCustomPrimitive/optixCustomPrimitive.h	/^struct MissData$/;"	s
MissData	optixCutouts/optixCutouts.h	/^struct MissData$/;"	s
MissData	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^struct MissData$/;"	s
MissData	optixDynamicGeometry/optixDynamicGeometry.h	/^struct MissData$/;"	s
MissData	optixDynamicMaterials/optixDynamicMaterials.h	/^struct MissData$/;"	s
MissData	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct MissData$/;"	s
MissData	optixMotionGeometry/optixMotionGeometry.h	/^struct MissData$/;"	s
MissData	optixMultiGPU/optixMultiGPU.h	/^struct MissData$/;"	s
MissData	optixNVLink/optixNVLink.h	/^struct MissData$/;"	s
MissData	optixOpacityMicromap/optixOpacityMicromap.h	/^struct MissData$/;"	s
MissData	optixPathTracer/optixPathTracer.h	/^struct MissData$/;"	s
MissData	optixRibbons/optixRibbons.h	/^struct MissData$/;"	s
MissData	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^struct MissData$/;"	s
MissData	optixSphere/optixSphere.h	/^struct MissData$/;"	s
MissData	optixTriangle/optixTriangle.h	/^struct MissData$/;"	s
MissRecord	optixBoundValues/optixBoundValues.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixCallablePrograms/optixCallablePrograms.cpp	/^typedef Record<EmptyData>                    MissRecord;$/;"	t	file:
MissRecord	optixCutouts/optixCutouts.cpp	/^typedef Record<MissData>            MissRecord;$/;"	t	file:
MissRecord	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixDynamicGeometry/optixDynamicGeometry.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixHair/optixHair.h	/^typedef sutil::EmptyRecord                   MissRecord;$/;"	t
MissRecord	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixMotionGeometry/optixMotionGeometry.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixMultiGPU/optixMultiGPU.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixNVLink/optixNVLink.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixPathTracer/optixPathTracer.cpp	/^typedef Record<MissData>     MissRecord;$/;"	t	file:
MissRecord	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^typedef Record<MissData>           MissRecord;$/;"	t	file:
MissSbtRecord	optixCurves/optixCurves.cpp	/^typedef SbtRecord<MissData>     MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixCustomPrimitive/optixCustomPrimitive.cpp	/^typedef SbtRecord<MissData>              MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixDynamicMaterials/optixDynamicMaterials.cpp	/^typedef SbtRecord<MissData>     MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixHello/optixHello.cpp	/^typedef SbtRecord<int>        MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixOpacityMicromap/optixOpacityMicromap.cpp	/^typedef SbtRecord<MissData>       MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixRibbons/optixRibbons.cpp	/^typedef SbtRecord<MissData>     MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixSphere/optixSphere.cpp	/^typedef SbtRecord<MissData>     MissSbtRecord;$/;"	t	file:
MissSbtRecord	optixTriangle/optixTriangle.cpp	/^typedef SbtRecord<MissData>       MissSbtRecord;$/;"	t	file:
Model	support/tinygltf/tiny_gltf.h	/^class Model {$/;"	c	namespace:tinygltf
MotionGeometryState	optixMotionGeometry/optixMotionGeometry.cpp	/^struct MotionGeometryState$/;"	s	file:
MotionTransformArrayBase	optixMotionGeometry/motionHelper.hpp	/^    MotionTransformArrayBase( const MotionTransformArrayBase& other )$/;"	f	class:__anon4::MotionTransformArrayBase
MotionTransformArrayBase	optixMotionGeometry/motionHelper.hpp	/^    MotionTransformArrayBase( size_t numTransforms, unsigned int numKeys )$/;"	f	class:__anon4::MotionTransformArrayBase
MotionTransformArrayBase	optixMotionGeometry/motionHelper.hpp	/^class MotionTransformArrayBase$/;"	c	namespace:__anon4
MouseClicked	support/imgui/imgui.h	/^    bool        MouseClicked[5];                \/\/ Mouse button went from !Down to Down$/;"	m	struct:ImGuiIO
MouseClickedPos	support/imgui/imgui.h	/^    ImVec2      MouseClickedPos[5];             \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO
MouseClickedTime	support/imgui/imgui.h	/^    double      MouseClickedTime[5];            \/\/ Time of last click (used to figure out double-click)$/;"	m	struct:ImGuiIO
MouseCursor	support/imgui/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext
MouseCursorScale	support/imgui/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.$/;"	m	struct:ImGuiStyle
MouseDelta	support/imgui/imgui.h	/^    ImVec2      MouseDelta;                     \/\/ Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing\/reappearing mouse won't have a huge delta.$/;"	m	struct:ImGuiIO
MouseDoubleClickMaxDist	support/imgui/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to stay in to validate a double-click, in pixels.$/;"	m	struct:ImGuiIO
MouseDoubleClickTime	support/imgui/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-click, in seconds.$/;"	m	struct:ImGuiIO
MouseDoubleClicked	support/imgui/imgui.h	/^    bool        MouseDoubleClicked[5];          \/\/ Has mouse button been double-clicked?$/;"	m	struct:ImGuiIO
MouseDown	support/imgui/imgui.h	/^    bool        MouseDown[5];                   \/\/ Mouse buttons: 0=left, 1=right, 2=middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.$/;"	m	struct:ImGuiIO
MouseDownDuration	support/imgui/imgui.h	/^    float       MouseDownDuration[5];           \/\/ Duration the mouse button has been down (0.0f == just clicked)$/;"	m	struct:ImGuiIO
MouseDownDurationPrev	support/imgui/imgui.h	/^    float       MouseDownDurationPrev[5];       \/\/ Previous time the mouse button has been down$/;"	m	struct:ImGuiIO
MouseDownOwned	support/imgui/imgui.h	/^    bool        MouseDownOwned[5];              \/\/ Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.$/;"	m	struct:ImGuiIO
MouseDragMaxDistanceAbs	support/imgui/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];     \/\/ Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point$/;"	m	struct:ImGuiIO
MouseDragMaxDistanceSqr	support/imgui/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];     \/\/ Squared maximum distance of how much mouse has traveled from the clicking point$/;"	m	struct:ImGuiIO
MouseDragThreshold	support/imgui/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold before considering we are dragging.$/;"	m	struct:ImGuiIO
MouseDrawCursor	support/imgui/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by back-end implementations.$/;"	m	struct:ImGuiIO
MousePos	support/imgui/imgui.h	/^    ImVec2      MousePos;                       \/\/ Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)$/;"	m	struct:ImGuiIO
MousePosPrev	support/imgui/imgui.h	/^    ImVec2      MousePosPrev;                   \/\/ Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)$/;"	m	struct:ImGuiIO
MouseReleased	support/imgui/imgui.h	/^    bool        MouseReleased[5];               \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO
MouseWheel	support/imgui/imgui.h	/^    float       MouseWheel;                     \/\/ Mouse wheel Vertical: 1 unit scrolls about 5 lines text.$/;"	m	struct:ImGuiIO
MouseWheelH	support/imgui/imgui.h	/^    float       MouseWheelH;                    \/\/ Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.$/;"	m	struct:ImGuiIO
MoveId	support/imgui/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow
MovingWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked on (in order to preserve focus). The actually window that is moved is generally MovingWindow->RootWindow.$/;"	m	struct:ImGuiContext
MultiSelectScopeId	support/imgui/imgui_internal.h	/^    ImGuiID                 MultiSelectScopeId;$/;"	m	struct:ImGuiContext
MyDocument	support/imgui/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1.0f))$/;"	f	struct:MyDocument
MyDocument	support/imgui/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
N	cuda/LocalGeometry.h	/^    float3 N;$/;"	m	struct:LocalGeometry
NANOVDB_ALIGN	optixVolumeViewer/nanovdb/NanoVDB.h	113;"	d
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(DataType) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(InternalData) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(DataType) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(LeafData) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(DataType) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(RootData) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(DataType) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(TreeData) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(GridData) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(GridData) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static_assert(sizeof(typename DataType::Tile) % NANOVDB_DATA_ALIGNMENT == 0, "sizeof(RootData::Tile) is misaligned");$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
NANOVDB_DATA_ALIGNMENT	optixVolumeViewer/nanovdb/NanoVDB.h	110;"	d
NANOVDB_GRID_HANDLE_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/util/GridHandle.h	18;"	d
NANOVDB_HDDA_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/util/HDDA.h	11;"	d
NANOVDB_HOSTBUFFER_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/util/HostBuffer.h	15;"	d
NANOVDB_IO_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/util/IO.h	19;"	d
NANOVDB_MAGIC_NUMBER	optixVolumeViewer/nanovdb/NanoVDB.h	98;"	d
NANOVDB_MAJOR_VERSION_NUMBER	optixVolumeViewer/nanovdb/NanoVDB.h	100;"	d
NANOVDB_MINOR_VERSION_NUMBER	optixVolumeViewer/nanovdb/NanoVDB.h	101;"	d
NANOVDB_NANOVDB_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/NanoVDB.h	96;"	d
NANOVDB_PATCH_VERSION_NUMBER	optixVolumeViewer/nanovdb/NanoVDB.h	102;"	d
NANOVDB_RAY_H_HAS_BEEN_INCLUDED	optixVolumeViewer/nanovdb/util/Ray.h	11;"	d
NAV_MAP_KEY	support/imgui/imgui.cpp	7626;"	d	file:
NAV_MAP_KEY	support/imgui/imgui.cpp	7641;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	support/imgui/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the highlight and screen dimming starts fading in$/;"	v	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	support/imgui/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the window list starts to appear$/;"	v	file:
NBITS	support/tinyexr/tinyexr.h	/^const int NBITS = 16;$/;"	m	namespace:tinyexr
NET_ACTIVE_WINDOW	support/GLFW/src/x11_platform.h	/^    Atom            NET_ACTIVE_WINDOW;$/;"	m	struct:_GLFWlibraryX11
NET_FRAME_EXTENTS	support/GLFW/src/x11_platform.h	/^    Atom            NET_FRAME_EXTENTS;$/;"	m	struct:_GLFWlibraryX11
NET_REQUEST_FRAME_EXTENTS	support/GLFW/src/x11_platform.h	/^    Atom            NET_REQUEST_FRAME_EXTENTS;$/;"	m	struct:_GLFWlibraryX11
NET_WM_BYPASS_COMPOSITOR	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_BYPASS_COMPOSITOR;$/;"	m	struct:_GLFWlibraryX11
NET_WM_FULLSCREEN_MONITORS	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_FULLSCREEN_MONITORS;$/;"	m	struct:_GLFWlibraryX11
NET_WM_ICON	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_ICON;$/;"	m	struct:_GLFWlibraryX11
NET_WM_ICON_NAME	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_ICON_NAME;$/;"	m	struct:_GLFWlibraryX11
NET_WM_NAME	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_NAME;$/;"	m	struct:_GLFWlibraryX11
NET_WM_PID	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_PID;$/;"	m	struct:_GLFWlibraryX11
NET_WM_PING	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_PING;$/;"	m	struct:_GLFWlibraryX11
NET_WM_STATE	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_STATE;$/;"	m	struct:_GLFWlibraryX11
NET_WM_STATE_ABOVE	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_STATE_ABOVE;$/;"	m	struct:_GLFWlibraryX11
NET_WM_STATE_FULLSCREEN	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_STATE_FULLSCREEN;$/;"	m	struct:_GLFWlibraryX11
NET_WM_STATE_MAXIMIZED_HORZ	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_STATE_MAXIMIZED_HORZ;$/;"	m	struct:_GLFWlibraryX11
NET_WM_STATE_MAXIMIZED_VERT	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_STATE_MAXIMIZED_VERT;$/;"	m	struct:_GLFWlibraryX11
NET_WM_WINDOW_TYPE	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_WINDOW_TYPE;$/;"	m	struct:_GLFWlibraryX11
NET_WM_WINDOW_TYPE_NORMAL	support/GLFW/src/x11_platform.h	/^    Atom            NET_WM_WINDOW_TYPE_NORMAL;$/;"	m	struct:_GLFWlibraryX11
NLOHMANN_BASIC_JSON_TPL	support/tinygltf/json.hpp	20403;"	d
NLOHMANN_BASIC_JSON_TPL	support/tinygltf/json.hpp	247;"	d
NLOHMANN_BASIC_JSON_TPL_DECLARATION	support/tinygltf/json.hpp	20402;"	d
NLOHMANN_BASIC_JSON_TPL_DECLARATION	support/tinygltf/json.hpp	239;"	d
NLOHMANN_JSON_FWD_HPP	support/tinygltf/json.hpp	51;"	d
NLOHMANN_JSON_HPP	support/tinygltf/json.hpp	31;"	d
NLOHMANN_JSON_SERIALIZE_ENUM	support/tinygltf/json.hpp	210;"	d
NLOHMANN_JSON_VERSION_MAJOR	support/tinygltf/json.hpp	33;"	d
NLOHMANN_JSON_VERSION_MINOR	support/tinygltf/json.hpp	34;"	d
NLOHMANN_JSON_VERSION_PATCH	support/tinygltf/json.hpp	35;"	d
NOMINMAX	support/GLFW/src/win32_platform.h	33;"	d
NOMINMAX	support/glad/glad.h	36;"	d
NOMINMAX	support/tinygltf/tiny_gltf.h	1579;"	d
NOMINMAX	support/tinygltf/tiny_gltf.h	1593;"	d
NONAMELESSSTRUCT	support/GLFW/deps/mingw/_mingw_dxhelper.h	16;"	d
NONAMELESSUNION	support/GLFW/deps/mingw/_mingw_dxhelper.h	12;"	d
NONAMELESSUNION	support/GLFW/deps/mingw/_mingw_dxhelper.h	8;"	d
NONE	cuda/Light.h	/^        NONE = 0,$/;"	m	class:Light::Falloff
NONE	optixVolumeViewer/nanovdb/util/IO.h	/^enum class Codec : uint16_t { NONE = 0,$/;"	m	class:nanovdb::io::Codec
NO_REQUIRE	support/tinygltf/tiny_gltf.h	/^  NO_REQUIRE = 0x00,$/;"	e	enum:tinygltf::SectionCheck
NULL	support/GLFW/deps/tinycthread.c	47;"	d	file:
NULL_	support/GLFW/src/x11_platform.h	/^    Atom            NULL_;$/;"	m	struct:_GLFWlibraryX11
NULL_TYPE	support/tinygltf/tiny_gltf.h	/^  NULL_TYPE = 0,$/;"	e	enum:tinygltf::__anon114
NUM_ATTRIBUTE_VALUES	cuda/whitted.h	/^const unsigned int NUM_ATTRIBUTE_VALUES = 4u;$/;"	m	namespace:whitted
NUM_PAYLOAD_VALUES	cuda/whitted.h	/^const unsigned int NUM_PAYLOAD_VALUES   = 4u;$/;"	m	namespace:whitted
NUM_PAYLOAD_VALUES	optixVolumeViewer/volume.h	/^const unsigned int NUM_PAYLOAD_VALUES = 4u;$/;"	v
NUM_TRIS	optixOpacityMicromap/optixOpacityMicromap.cpp	/^constexpr int NUM_TRIS         = 2; $/;"	v
NUM_VALUES	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint64_t NUM_VALUES = uint64_t(1) << (3 * TOTAL); \/\/ total voxel count represented by this node$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
NUM_VALUES	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint64_t NUM_VALUES = uint64_t(1) << (3 * TOTAL); \/\/ total voxel count represented by this node$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
NVML_DEVICE_GET_HANDLE_BY_INDEX_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_DEVICE_GET_HANDLE_BY_INDEX_TYPE)( unsigned int, nvmlDevice_t* );$/;"	t	file:
NVML_DEVICE_GET_NVLINK_CAPABILITY_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_DEVICE_GET_NVLINK_CAPABILITY_TYPE)( nvmlDevice_t, unsigned int, nvmlNvLinkCapability_t, unsigned int* );$/;"	t	file:
NVML_DEVICE_GET_NVLINK_REMOTE_PCI_INFO_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_DEVICE_GET_NVLINK_REMOTE_PCI_INFO_TYPE)( nvmlDevice_t, unsigned int, nvmlPciInfo_t* );$/;"	t	file:
NVML_DEVICE_GET_NVLINK_STATE_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_DEVICE_GET_NVLINK_STATE_TYPE)( nvmlDevice_t, unsigned int, nvmlEnableState_t* );$/;"	t	file:
NVML_DEVICE_GET_PCI_INFO_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_DEVICE_GET_PCI_INFO_TYPE)( nvmlDevice_t, nvmlPciInfo_t* );$/;"	t	file:
NVML_INIT_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_INIT_TYPE)();$/;"	t	file:
NVML_SYSTEM_GET_DRIVER_VERSION_TYPE	optixNVLink/optixNVLink.cpp	/^typedef nvmlReturn_t (APIFUNC *NVML_SYSTEM_GET_DRIVER_VERSION_TYPE)( char*, unsigned int );$/;"	t	file:
NVOFAPI	optixOpticalFlow/nvOpticalFlowCommon.h	55;"	d
NVOFAPI	optixOpticalFlow/nvOpticalFlowCommon.h	57;"	d
NVRTC_CHECK_ERROR	sutil/sutil.cpp	826;"	d	file:
NV_OF_API_MAJOR_VERSION	optixOpticalFlow/nvOpticalFlowCommon.h	59;"	d
NV_OF_API_MINOR_VERSION	optixOpticalFlow/nvOpticalFlowCommon.h	60;"	d
NV_OF_API_VERSION	optixOpticalFlow/nvOpticalFlowCommon.h	61;"	d
NV_OF_BOOL	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_BOOL;$/;"	t	typeref:enum:_NV_OF_BOOL
NV_OF_BUFFER_DESCRIPTOR	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_BUFFER_DESCRIPTOR;$/;"	t	typeref:struct:_NV_OF_BUFFER_DESCRIPTOR
NV_OF_BUFFER_FORMAT	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_BUFFER_FORMAT;$/;"	t	typeref:enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_ABGR8	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_ABGR8,                    \/**< Input buffer format with 8 bit packed A8B8G8R8 *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_GRAYSCALE8	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_GRAYSCALE8,               \/**< Input buffer format with 8 bit planar format *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_MAX$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_NV12	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_NV12,                     \/**< Input buffer format with 8 bit plannar, UV interleaved *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_SHORT	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_SHORT,                    \/**< Output or hint buffer format for stereo disparity *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_SHORT2	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_SHORT2,                   \/**< Output or hint buffer format for optical flow vector *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_UINT	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_UINT,                     \/**< Legacy 32-bit Cost buffer format for optical flow vector \/ stereo disparity. $/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_UINT8	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_UINT8,                    \/**< 8-bit Cost buffer format for optical flow vector \/ stereo disparity. *\/$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_FORMAT_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT_UNDEFINED,$/;"	e	enum:_NV_OF_BUFFER_FORMAT
NV_OF_BUFFER_STRIDE	optixOpticalFlow/nvOpticalFlowCuda.h	/^} NV_OF_BUFFER_STRIDE;$/;"	t	typeref:struct:_NV_OF_BUFFER_STRIDE
NV_OF_BUFFER_USAGE	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_BUFFER_USAGE;$/;"	t	typeref:enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_COST	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_COST,                     \/**< Cost buffer type is used to allocate ::NV_OF_OUTPUT_EXECUTE_PARAMS::outputCostBuffer.*\/$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_HINT	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_HINT,                     \/**< Hint buffer type is used to allocate ::NV_OF_INPUT_EXECUTE_PARAMS::externalHints.*\/$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_INPUT	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_INPUT,                    \/**< Input buffer type is used to allocate ::NV_OF_INPUT_EXECUTE_PARAMS::inputFrame,$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_MAX$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_OUTPUT	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_OUTPUT,                   \/**< Output buffer type is used to allocate ::NV_OF_OUTPUT_EXECUTE_PARAMS::outputBuffer. *\/$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_BUFFER_USAGE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE_UNDEFINED,$/;"	e	enum:_NV_OF_BUFFER_USAGE
NV_OF_CAPS	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_CAPS;$/;"	t	typeref:enum:_NV_OF_CAPS
NV_OF_CAPS_HEIGHT_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_HEIGHT_MAX,                       \/**< Maximum input height supported. *\/$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_HEIGHT_MIN	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_HEIGHT_MIN,                       \/**< Minimum input height supported. *\/$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORTED_HINT_GRID_SIZES	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORTED_HINT_GRID_SIZES,        \/**< Indicates supported values of ::NV_OF_HINT_VECTOR_GRID_SIZE, $/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORTED_OUTPUT_GRID_SIZES	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORTED_OUTPUT_GRID_SIZES,      \/**< Indicates supported values of ::NV_OF_OUTPUT_VECTOR_GRID_SIZE, $/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORT_HINT_WITH_OF_MODE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORT_HINT_WITH_OF_MODE,        \/**< Indicates external hint support for ::NV_OF_MODE_OPTICALFLOW mode. $/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORT_HINT_WITH_ST_MODE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORT_HINT_WITH_ST_MODE,        \/**< Indicates external hint support for ::NV_OF_MODE_STEREODISPARITY mode. $/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORT_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORT_MAX$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORT_ROI	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORT_ROI,                      \/**< Indicates ROI support.$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_SUPPORT_ROI_MAX_NUM	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_SUPPORT_ROI_MAX_NUM,              \/**< Indicates maximum number of ROIs supported. *\/$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_WIDTH_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_WIDTH_MAX,                        \/**< Maximum input width supported. *\/$/;"	e	enum:_NV_OF_CAPS
NV_OF_CAPS_WIDTH_MIN	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_CAPS_WIDTH_MIN,                        \/**< Minimum input width supported. *\/$/;"	e	enum:_NV_OF_CAPS
NV_OF_CUDA_API_FUNCTION_LIST	optixOpticalFlow/nvOpticalFlowCuda.h	/^} NV_OF_CUDA_API_FUNCTION_LIST;$/;"	t	typeref:struct:_NV_OF_CUDA_API_FUNCTION_LIST
NV_OF_CUDA_BUFFER_STRIDE_INFO	optixOpticalFlow/nvOpticalFlowCuda.h	/^} NV_OF_CUDA_BUFFER_STRIDE_INFO;$/;"	t	typeref:struct:_NV_OF_CUDA_BUFFER_STRIDE_INFO
NV_OF_CUDA_BUFFER_TYPE	optixOpticalFlow/nvOpticalFlowCuda.h	/^} NV_OF_CUDA_BUFFER_TYPE;$/;"	t	typeref:enum:_NV_OF_CUDA_BUFFER_TYPE
NV_OF_CUDA_BUFFER_TYPE_CUARRAY	optixOpticalFlow/nvOpticalFlowCuda.h	/^    NV_OF_CUDA_BUFFER_TYPE_CUARRAY,           \/**< Buffer type is CUarray *\/$/;"	e	enum:_NV_OF_CUDA_BUFFER_TYPE
NV_OF_CUDA_BUFFER_TYPE_CUDEVICEPTR	optixOpticalFlow/nvOpticalFlowCuda.h	/^    NV_OF_CUDA_BUFFER_TYPE_CUDEVICEPTR,       \/**< Buffer type is CUdeviceptr *\/$/;"	e	enum:_NV_OF_CUDA_BUFFER_TYPE
NV_OF_CUDA_BUFFER_TYPE_MAX	optixOpticalFlow/nvOpticalFlowCuda.h	/^    NV_OF_CUDA_BUFFER_TYPE_MAX$/;"	e	enum:_NV_OF_CUDA_BUFFER_TYPE
NV_OF_CUDA_BUFFER_TYPE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCuda.h	/^    NV_OF_CUDA_BUFFER_TYPE_UNDEFINED,$/;"	e	enum:_NV_OF_CUDA_BUFFER_TYPE
NV_OF_ERR_DEVICE_DOES_NOT_EXIST	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_DEVICE_DOES_NOT_EXIST,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_GENERIC	optixOpticalFlow/nvOpticalFlowCommon.h	/^   NV_OF_ERR_GENERIC,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_INVALID_CALL	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_INVALID_CALL,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_INVALID_PARAM	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_INVALID_PARAM,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_INVALID_PTR	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_INVALID_PTR,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_INVALID_VERSION	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_INVALID_VERSION,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_NOT_INITIALIZED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_NOT_INITIALIZED,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_OF_NOT_AVAILABLE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_OF_NOT_AVAILABLE,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_OUT_OF_MEMORY	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_OUT_OF_MEMORY,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_UNSUPPORTED_DEVICE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_UNSUPPORTED_DEVICE,$/;"	e	enum:_NV_OF_STATUS
NV_OF_ERR_UNSUPPORTED_FEATURE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ERR_UNSUPPORTED_FEATURE,$/;"	e	enum:_NV_OF_STATUS
NV_OF_EXECUTE_INPUT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_EXECUTE_INPUT_PARAMS;$/;"	t	typeref:struct:_NV_OF_EXECUTE_INPUT_PARAMS
NV_OF_EXECUTE_OUTPUT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_EXECUTE_OUTPUT_PARAMS;$/;"	t	typeref:struct:_NV_OF_EXECUTE_OUTPUT_PARAMS
NV_OF_FALSE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_FALSE = 0,                              \/* < Represents false bool value *\/$/;"	e	enum:_NV_OF_BOOL
NV_OF_FLOW_VECTOR	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_FLOW_VECTOR;$/;"	t	typeref:struct:_NV_OF_FLOW_VECTOR
NV_OF_HINT_VECTOR_GRID_SIZE	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_HINT_VECTOR_GRID_SIZE;$/;"	t	typeref:enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_1	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_1 = 1,            \/**< Hint buffer grid size is 1x1.*\/$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_2	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_2 = 2,            \/**< Hint buffer grid size is 2x2.*\/$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_4	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_4 = 4,            \/**< Hint buffer grid size is 4x4.*\/$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_8	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_8 = 8,            \/**< Hint buffer grid size is 8x8.*\/$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_MAX$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_HINT_VECTOR_GRID_SIZE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE_UNDEFINED,$/;"	e	enum:_NV_OF_HINT_VECTOR_GRID_SIZE
NV_OF_INIT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_INIT_PARAMS;$/;"	t	typeref:struct:_NV_OF_INIT_PARAMS
NV_OF_MODE	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_MODE;$/;"	t	typeref:enum:_NV_OF_MODE
NV_OF_MODE_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_MODE_MAX$/;"	e	enum:_NV_OF_MODE
NV_OF_MODE_OPTICALFLOW	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_MODE_OPTICALFLOW,                       \/**< Calculate optical flow between two frames. *\/$/;"	e	enum:_NV_OF_MODE
NV_OF_MODE_STEREODISPARITY	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_MODE_STEREODISPARITY,                   \/**< Calculate disparity between Stereo view pair. *\/$/;"	e	enum:_NV_OF_MODE
NV_OF_MODE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_MODE_UNDEFINED,$/;"	e	enum:_NV_OF_MODE
NV_OF_OUTPUT_VECTOR_GRID_SIZE	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_OUTPUT_VECTOR_GRID_SIZE;$/;"	t	typeref:enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_OUTPUT_VECTOR_GRID_SIZE_1	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE_1 = 1,          \/**< Output buffer grid size is 1x1  *\/$/;"	e	enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_OUTPUT_VECTOR_GRID_SIZE_2	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE_2 = 2,          \/**< Output buffer grid size is 2x2  *\/$/;"	e	enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_OUTPUT_VECTOR_GRID_SIZE_4	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE_4 = 4,          \/**< Output buffer grid size is 4x4  *\/$/;"	e	enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_OUTPUT_VECTOR_GRID_SIZE_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE_MAX$/;"	e	enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_OUTPUT_VECTOR_GRID_SIZE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE_UNDEFINED,$/;"	e	enum:_NV_OF_OUTPUT_VECTOR_GRID_SIZE
NV_OF_PERF_LEVEL	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_PERF_LEVEL;$/;"	t	typeref:enum:_NV_OF_PERF_LEVEL
NV_OF_PERF_LEVEL_FAST	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL_FAST = 20,                  \/**< Fast perf level results in high performance and low quality *\/$/;"	e	enum:_NV_OF_PERF_LEVEL
NV_OF_PERF_LEVEL_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL_MAX$/;"	e	enum:_NV_OF_PERF_LEVEL
NV_OF_PERF_LEVEL_MEDIUM	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL_MEDIUM = 10,                \/**< Medium perf level results in low performance and medium quality *\/$/;"	e	enum:_NV_OF_PERF_LEVEL
NV_OF_PERF_LEVEL_SLOW	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL_SLOW = 5,                   \/**< Slow perf level results in lowest performance and best quality *\/$/;"	e	enum:_NV_OF_PERF_LEVEL
NV_OF_PERF_LEVEL_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL_UNDEFINED,$/;"	e	enum:_NV_OF_PERF_LEVEL
NV_OF_ROI_RECT	optixOpticalFlow/nvOpticalFlowCommon.h	/^struct NV_OF_ROI_RECT$/;"	s
NV_OF_STATUS	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_STATUS;$/;"	t	typeref:enum:_NV_OF_STATUS
NV_OF_STEREO_DISPARITY	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_STEREO_DISPARITY;$/;"	t	typeref:struct:_NV_OF_STEREO_DISPARITY
NV_OF_STEREO_DISPARITY_RANGE	optixOpticalFlow/nvOpticalFlowCommon.h	/^} NV_OF_STEREO_DISPARITY_RANGE;$/;"	t	typeref:enum:_NV_OF_STEREO_DISPARITY_RANGE
NV_OF_STEREO_DISPARITY_RANGE_128	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_STEREO_DISPARITY_RANGE_128 = 128,$/;"	e	enum:_NV_OF_STEREO_DISPARITY_RANGE
NV_OF_STEREO_DISPARITY_RANGE_256	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_STEREO_DISPARITY_RANGE_256 = 256,$/;"	e	enum:_NV_OF_STEREO_DISPARITY_RANGE
NV_OF_STEREO_DISPARITY_RANGE_MAX	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_STEREO_DISPARITY_RANGE_MAX,$/;"	e	enum:_NV_OF_STEREO_DISPARITY_RANGE
NV_OF_STEREO_DISPARITY_RANGE_UNDEFINED	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_STEREO_DISPARITY_RANGE_UNDEFINED,$/;"	e	enum:_NV_OF_STEREO_DISPARITY_RANGE
NV_OF_SUCCESS	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_SUCCESS,$/;"	e	enum:_NV_OF_STATUS
NV_OF_TRUE	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_TRUE  = !NV_OF_FALSE                    \/* < Represents true bool value *\/$/;"	e	enum:_NV_OF_BOOL
Name	support/imgui/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig
Name	support/imgui/imgui_demo.cpp	/^    const char* Name;           \/\/ Document title$/;"	m	struct:MyDocument	file:
Name	support/imgui/imgui_internal.h	/^    char*                   Name;$/;"	m	struct:ImGuiWindow
Name	support/imgui/imgui_internal.h	/^    char*       Name;$/;"	m	struct:ImGuiWindowSettings
NameBufLen	support/imgui/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name. May be larger than strlen(Name)!$/;"	m	struct:ImGuiWindow
NameOffset	support/imgui/imgui_internal.h	/^    int                 NameOffset;             \/\/ When Window==NULL, offset to name within parent ImGuiTabBar::TabsNames$/;"	m	struct:ImGuiTabItem
NavActivateDownId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavInput_Activate) ? NavId : 0$/;"	m	struct:ImGuiContext
NavActivateId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0, also set when calling ActivateItem()$/;"	m	struct:ImGuiContext
NavActivatePressedId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0$/;"	m	struct:ImGuiContext
NavActive	support/imgui/imgui.h	/^    bool        NavActive;                      \/\/ Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.$/;"	m	struct:ImGuiIO
NavAnyRequest	support/imgui/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavInitRequest$/;"	m	struct:ImGuiContext
NavCalcPreferredRefPos	support/imgui/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui
NavClampRectToVisibleAreaForMoveDir	support/imgui/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRect& clip_rect)$/;"	f	file:
NavDisableHighlight	support/imgui/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mouse, we hide gamepad\/keyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)$/;"	m	struct:ImGuiContext
NavDisableMouseHover	support/imgui/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using gamepad\/keyboard, we hide mouse hovering highlight until mouse is touched again.$/;"	m	struct:ImGuiContext
NavHasScroll	support/imgui/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollMax > 0.0f)$/;"	m	struct:ImGuiWindowTempData
NavHideHighlightOneFrame	support/imgui/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData
NavId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext
NavIdIsAlive	support/imgui/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen this frame ~~ NavRefRectRel is valid$/;"	m	struct:ImGuiContext
NavIdTabCounter	support/imgui/imgui_internal.h	/^    int                     NavIdTabCounter;                    \/\/ == NavWindow->DC.FocusIdxTabCounter at time of NavId processing$/;"	m	struct:ImGuiContext
NavInitRequest	support/imgui/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing window to select first item$/;"	m	struct:ImGuiContext
NavInitRequestFromMove	support/imgui/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext
NavInitResultId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavInitResultId;$/;"	m	struct:ImGuiContext
NavInitResultRectRel	support/imgui/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;$/;"	m	struct:ImGuiContext
NavInitWindow	support/imgui/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui
NavInputId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavInputId;                         \/\/ ~~ IsNavInputPressed(ImGuiNavInput_Input) ? NavId : 0$/;"	m	struct:ImGuiContext
NavInputSource	support/imgui/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? THIS WILL ONLY BE None or NavGamepad or NavKeyboard.$/;"	m	struct:ImGuiContext
NavInputs	support/imgui/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT]; \/\/ Gamepad inputs. Cleared back to zero by EndFrame(). Keyboard keys will be auto-mapped and be written here by NewFrame().$/;"	m	struct:ImGuiIO
NavInputsDownDuration	support/imgui/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO
NavInputsDownDurationPrev	support/imgui/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO
NavJustMovedToId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (result of a successfully MoveRequest).$/;"	m	struct:ImGuiContext
NavJustMovedToSelectScopeId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToSelectScopeId;        \/\/ Just navigated to this select scope id (result of a successfully MoveRequest).$/;"	m	struct:ImGuiContext
NavJustTabbedId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavJustTabbedId;                    \/\/ Just tabbed to this id.$/;"	m	struct:ImGuiContext
NavLastChildNavWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar, we remember the child window we came from. (This could probably be made implicit if we kept g.Windows sorted by last focused including child window.)$/;"	m	struct:ImGuiWindow
NavLastIds	support/imgui/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this window, per layer (0\/1)$/;"	m	struct:ImGuiWindow
NavLayer	support/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on. For now the system is hard-coded for 0=main contents and 1=menu\/title bar, may expose layers later.$/;"	m	struct:ImGuiContext
NavLayerActiveMask	support/imgui/imgui_internal.h	/^    int                     NavLayerActiveMask;     \/\/ Which layer have been written to (result from previous frame)$/;"	m	struct:ImGuiWindowTempData
NavLayerActiveMaskNext	support/imgui/imgui_internal.h	/^    int                     NavLayerActiveMaskNext; \/\/ Which layer have been written to (buffer for current frame)$/;"	m	struct:ImGuiWindowTempData
NavLayerCurrent	support/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only use 0..1)$/;"	m	struct:ImGuiWindowTempData
NavLayerCurrentMask	support/imgui/imgui_internal.h	/^    int                     NavLayerCurrentMask;    \/\/ = (1 << NavLayerCurrent) used by ItemAdd prior to clipping.$/;"	m	struct:ImGuiWindowTempData
NavMousePosDirty	support/imgui/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mouse position if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)$/;"	m	struct:ImGuiContext
NavMoveClipDir	support/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;$/;"	m	struct:ImGuiContext
NavMoveDir	support/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move request (left\/right\/up\/down), direction of the previous move request$/;"	m	struct:ImGuiContext
NavMoveDirLast	support/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move request (left\/right\/up\/down), direction of the previous move request$/;"	m	struct:ImGuiContext
NavMoveFromClampedRefRect	support/imgui/imgui_internal.h	/^    bool                    NavMoveFromClampedRefRect;          \/\/ Set by manual scrolling, if we scroll to a point where NavId isn't visible we reset navigation from visible items$/;"	m	struct:ImGuiContext
NavMoveRequest	support/imgui/imgui_internal.h	/^    bool                    NavMoveRequest;                     \/\/ Move request for this frame$/;"	m	struct:ImGuiContext
NavMoveRequestButNoResultYet	support/imgui/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui
NavMoveRequestCancel	support/imgui/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui
NavMoveRequestFlags	support/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveRequestFlags;$/;"	m	struct:ImGuiContext
NavMoveRequestForward	support/imgui/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui
NavMoveRequestForward	support/imgui/imgui_internal.h	/^    ImGuiNavForward         NavMoveRequestForward;              \/\/ None \/ ForwardQueued \/ ForwardActive (this is used to navigate sibling parent menus from a child menu)$/;"	m	struct:ImGuiContext
NavMoveRequestTryWrapping	support/imgui/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui
NavMoveResultLocal	support/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocal;                 \/\/ Best move request candidate within NavWindow$/;"	m	struct:ImGuiContext
NavMoveResultLocalVisibleSet	support/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;       \/\/ Best move request candidate within NavWindow that are mostly visible (when using ImGuiNavMoveFlags_AlsoScoreVisibleSet flag)$/;"	m	struct:ImGuiContext
NavMoveResultOther	support/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultOther;                 \/\/ Best move request candidate within NavWindow's flattened hierarchy (when using ImGuiWindowFlags_NavFlattened flag)$/;"	m	struct:ImGuiContext
NavNextActivateId	support/imgui/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queued until next frame.$/;"	m	struct:ImGuiContext
NavProcessItem	support/imgui/imgui.cpp	/^static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)$/;"	f	class:ImGui
NavRectRel	support/imgui/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in window relative space$/;"	m	struct:ImGuiWindow
NavRestoreLastChildNavWindow	support/imgui/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui
NavRestoreLayer	support/imgui/imgui.cpp	/^static void NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	file:
NavSaveLastChildNavWindow	support/imgui/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindow(ImGuiWindow* nav_window)$/;"	f	class:ImGui
NavScoreItem	support/imgui/imgui.cpp	/^static bool NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)$/;"	f	file:
NavScoreItemDistInterval	support/imgui/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	file:
NavScoringCount	support/imgui/imgui_internal.h	/^    int                     NavScoringCount;                    \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext
NavScoringRectScreen	support/imgui/imgui_internal.h	/^    ImRect                  NavScoringRectScreen;               \/\/ Rectangle used for scoring, in screen space. Based of window->DC.NavRefRectRel[], modified for directional navigation scoring.$/;"	m	struct:ImGuiContext
NavScrollToBringItemIntoView	support/imgui/imgui.cpp	/^static void NavScrollToBringItemIntoView(ImGuiWindow* window, const ImRect& item_rect)$/;"	f	file:
NavUpdate	support/imgui/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui
NavUpdateAnyRequestFlag	support/imgui/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui
NavUpdateMoveResult	support/imgui/imgui.cpp	/^static void ImGui::NavUpdateMoveResult()$/;"	f	class:ImGui
NavUpdatePageUpPageDown	support/imgui/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown(int allowed_dir_flags)$/;"	f	class:ImGui
NavUpdateWindowing	support/imgui/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui
NavUpdateWindowingHighlightWindow	support/imgui/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	file:
NavUpdateWindowingList	support/imgui/imgui.cpp	/^void ImGui::NavUpdateWindowingList()$/;"	f	class:ImGui
NavVisible	support/imgui/imgui.h	/^    bool        NavVisible;                     \/\/ Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).$/;"	m	struct:ImGuiIO
NavWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigation. Could be called 'FocusWindow'$/;"	m	struct:ImGuiContext
NavWindowingHighlightAlpha	support/imgui/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext
NavWindowingList	support/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingList;$/;"	m	struct:ImGuiContext
NavWindowingTarget	support/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ When selecting a window (holding Menu+FocusPrev\/Next, or equivalent of CTRL-TAB) this window is temporarily displayed front-most.$/;"	m	struct:ImGuiContext
NavWindowingTargetAnim	support/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWindowingTarget until DimBgRatio and NavWindowingHighlightAlpha becomes 0.0f$/;"	m	struct:ImGuiContext
NavWindowingTimer	support/imgui/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext
NavWindowingToggleLayer	support/imgui/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext
NewFrame	support/imgui/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui
NewLine	support/imgui/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui
NextColumn	support/imgui/imgui.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui
NextSelectedTabId	support/imgui/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;$/;"	m	struct:ImGuiTabBar
NextTreeNodeOpenCond	support/imgui/imgui_internal.h	/^    ImGuiCond               NextTreeNodeOpenCond;$/;"	m	struct:ImGuiContext
NextTreeNodeOpenVal	support/imgui/imgui_internal.h	/^    bool                    NextTreeNodeOpenVal;                \/\/ Storage for SetNextTreeNode** functions$/;"	m	struct:ImGuiContext
NextWidth	support/imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns
NextWidths	support/imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns
NextWindowData	support/imgui/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow** functions$/;"	m	struct:ImGuiContext
Ng	cuda/LocalGeometry.h	/^    float3 Ng;$/;"	m	struct:LocalGeometry
Node	support/tinygltf/tiny_gltf.h	/^  Node() : camera(-1), skin(-1), mesh(-1) {}$/;"	f	class:tinygltf::Node
Node	support/tinygltf/tiny_gltf.h	/^class Node {$/;"	c	namespace:tinygltf
NodeInfo	optixVolumeViewer/nanovdb/NanoVDB.h	/^    struct NodeInfo {$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
NormalTextureInfo	support/tinygltf/tiny_gltf.h	/^  NormalTextureInfo() : index(-1), texCoord(0), scale(1.0) {}$/;"	f	struct:tinygltf::NormalTextureInfo
NormalTextureInfo	support/tinygltf/tiny_gltf.h	/^struct NormalTextureInfo {$/;"	s	namespace:tinygltf
NotifyOfDocumentsClosedElsewhere	support/imgui/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	file:
NvOFGPUBufferHandle	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct NvOFGPUBufferHandle_st   *NvOFGPUBufferHandle;$/;"	t	typeref:struct:NvOFGPUBufferHandle_st
NvOFHandle	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct NvOFHandle_st            *NvOFHandle;$/;"	t	typeref:struct:NvOFHandle_st
NvOFPrivDataHandle	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct NVOFPrivDataHandle_st    *NvOFPrivDataHandle;$/;"	t	typeref:struct:NVOFPrivDataHandle_st
OBJECT_TYPE	support/tinygltf/tiny_gltf.h	/^  OBJECT_TYPE = 7$/;"	e	enum:tinygltf::__anon114
OBJ_COUNT	optixConsole/optixConsole.cpp	/^const uint32_t OBJ_COUNT = 3;$/;"	v
OBJ_COUNT	optixWhitted/optixWhitted.cpp	/^const uint32_t OBJ_COUNT = 3;$/;"	v
OMM_SUBDIV_LEVEL	optixOpacityMicromap/optixOpacityMicromap.cpp	/^constexpr int OMM_SUBDIV_LEVEL = 4;$/;"	v
OPTIX_CHECK	sutil/Exception.h	82;"	d
OPTIX_CHECK_LOG	sutil/Exception.h	92;"	d
OPTIX_CHECK_NOTHROW	sutil/Exception.h	101;"	d
OPTIX_SAMPLE_DIR	sutil/sutil.h	48;"	d
OPTIX_SAMPLE_NAME	sutil/sutil.h	47;"	d
OPTIX_STRINGIFY	sutil/sutil.h	46;"	d
OPTIX_STRINGIFY2	sutil/sutil.h	45;"	d
OPTIX_USE_NVML	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/optixNVLink/nvml_configure.h	23;"	d
ObjReader	optixMotionGeometry/tiny_obj_loader.h	/^  ObjReader() : valid_(false) {}$/;"	f	class:tinyobj::ObjReader
ObjReader	optixMotionGeometry/tiny_obj_loader.h	/^class ObjReader {$/;"	c	namespace:tinyobj
ObjReaderConfig	optixMotionGeometry/tiny_obj_loader.h	/^  ObjReaderConfig() : triangulate(true), vertex_color(true) {}$/;"	f	struct:tinyobj::ObjReaderConfig
ObjReaderConfig	optixMotionGeometry/tiny_obj_loader.h	/^struct ObjReaderConfig {$/;"	s	namespace:tinyobj
Object	support/tinygltf/tiny_gltf.h	/^  typedef std::map<std::string, Value> Object;$/;"	t	class:tinygltf::Value
ObjectBegin	support/tinygltf/tiny_gltf.h	/^json_const_iterator ObjectBegin(const json &o) {$/;"	f	namespace:tinygltf::__anon119
ObjectEnd	support/tinygltf/tiny_gltf.h	/^json_const_iterator ObjectEnd(const json &o) {$/;"	f	namespace:tinygltf::__anon119
ObjectType	optixVolumeViewer/volume.h	/^enum ObjectType$/;"	g
OcclusionTextureInfo	support/tinygltf/tiny_gltf.h	/^  OcclusionTextureInfo() : index(-1), texCoord(0), strength(1.0) {}$/;"	f	struct:tinygltf::OcclusionTextureInfo
OcclusionTextureInfo	support/tinygltf/tiny_gltf.h	/^struct OcclusionTextureInfo {$/;"	s	namespace:tinygltf
Offset	support/imgui/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	file:
Offset	support/imgui/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem
OffsetMax	support/imgui/imgui_internal.h	/^    float               OffsetMax;              \/\/ Distance from BarRect.Min.x, locked during layout$/;"	m	struct:ImGuiTabBar
OffsetNextTab	support/imgui/imgui_internal.h	/^    float               OffsetNextTab;          \/\/ Distance from BarRect.Min.x, incremented with each BeginTabItem() call, not used if ImGuiTabBarFlags_Reorderable if set.$/;"	m	struct:ImGuiTabBar
OffsetNorm	support/imgui/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) -> 1.0 (far right)$/;"	m	struct:ImGuiColumnData
OffsetNormBeforeResize	support/imgui/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiColumnData
OffsetNormToPixels	support/imgui/imgui.cpp	/^static float OffsetNormToPixels(const ImGuiColumnsSet* columns, float offset_norm)$/;"	f	file:
OffsetToLocalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static Coord OffsetToLocalCoord(uint32_t n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
OffsetToLocalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static CoordT OffsetToLocalCoord(uint32_t n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
OnKeyPressed	support/imgui/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState
Onb	optixBoundValues/optixBoundValues.h	/^    __forceinline__ __device__ Onb( const float3& normal )$/;"	f	struct:Onb
Onb	optixBoundValues/optixBoundValues.h	/^struct Onb$/;"	s
Onb	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    __forceinline__ __device__ Onb( const float3& normal )$/;"	f	struct:Onb
Onb	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct Onb$/;"	s
Open	support/imgui/imgui_demo.cpp	/^    bool        Open;           \/\/ Set when the document is open (in this demo, we keep an array of all available documents to simplify the demo)$/;"	m	struct:MyDocument	file:
OpenFrameCount	support/imgui/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
OpenMousePos	support/imgui/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the time of opening popup$/;"	m	struct:ImGuiPopupRef
OpenParentId	support/imgui/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate multiple menu sets from each others (e.g. inside menu bar vs loose menu items)$/;"	m	struct:ImGuiPopupRef
OpenPopup	support/imgui/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id)$/;"	f	class:ImGui
OpenPopupEx	support/imgui/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id)$/;"	f	class:ImGui
OpenPopupOnItemClick	support/imgui/imgui.cpp	/^bool ImGui::OpenPopupOnItemClick(const char* str_id, int mouse_button)$/;"	f	class:ImGui
OpenPopupPos	support/imgui/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typically == OpenMousePos when using mouse)$/;"	m	struct:ImGuiPopupRef
OpenPopupStack	support/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupRef> OpenPopupStack;                     \/\/ Which popups are open (persistent)$/;"	m	struct:ImGuiContext
OpenPrev	support/imgui/imgui_demo.cpp	/^    bool        OpenPrev;       \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	file:
OptiXDenoiser	optixDenoiser/OptiXDenoiser.h	/^class OptiXDenoiser$/;"	c
OptixConsoleState	optixConsole/optixConsole.cpp	/^struct OptixConsoleState$/;"	s	file:
OptixTaskExecutePool	lib/CompileWithTasks.h	/^struct OptixTaskExecutePool$/;"	s	namespace:optix::CompileWithTasks
OptixUtilOpticalFlow	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    OptixUtilOpticalFlow()$/;"	f	class:OptixUtilOpticalFlow
OptixUtilOpticalFlow	optixOpticalFlow/optix_denoiser_opticalflow.h	/^class OptixUtilOpticalFlow$/;"	c
OrthographicCamera	support/tinygltf/tiny_gltf.h	/^  OrthographicCamera() : xmag(0.0), ymag(0.0), zfar(0.0), znear(0.0) {}$/;"	f	struct:tinygltf::OrthographicCamera
OrthographicCamera	support/tinygltf/tiny_gltf.h	/^struct OrthographicCamera {$/;"	s	namespace:tinygltf
OuterRectClipped	support/imgui/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ = WindowRect just after setup in Begin(). == window->Rect() for root window.$/;"	m	struct:ImGuiWindow
Overlaps	support/imgui/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min.y && r.Min.x <  Max.x && r.Max.x >  Min.x; }$/;"	f	struct:ImRect
OversampleH	support/imgui/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for sub-pixel positioning. Read https:\/\/github.com\/nothings\/stb\/blob\/master\/tests\/oversample\/README.md for details.$/;"	m	struct:ImFontConfig
OversampleV	support/imgui/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis. $/;"	m	struct:ImFontConfig
P	cuda/LocalGeometry.h	/^    float3 P;$/;"	m	struct:LocalGeometry
PARALLELOGRAM	cuda/GeometryData.h	/^        PARALLELOGRAM         = 3,$/;"	e	enum:GeometryData::Type
PAYLOAD_TYPE_RADIANCE	optixPathTracer/optixPathTracer.h	/^constexpr OptixPayloadTypeID PAYLOAD_TYPE_RADIANCE  = OPTIX_PAYLOAD_TYPE_ID_0;$/;"	v
PBR	cuda/MaterialData.h	/^        PBR           = 0,$/;"	e	enum:MaterialData::Type
PCHANGEFILTERSTRUCT	support/GLFW/src/win32_platform.h	/^} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;$/;"	t	typeref:struct:tagCHANGEFILTERSTRUCT
PCPOINT	support/GLFW/deps/mingw/dinput.h	/^} CPOINT, *PCPOINT;$/;"	t	typeref:struct:_CPOINT
PEERS_ALL	optixNVLink/optixNVLink.cpp	/^const int PEERS_ALL    = 2;$/;"	v
PEERS_NONE	optixNVLink/optixNVLink.cpp	/^const int PEERS_NONE   = 0;$/;"	v
PEERS_NVLINK	optixNVLink/optixNVLink.cpp	/^const int PEERS_NVLINK = 1;$/;"	v
PFNEGLBINDAPIPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLBINDAPIPROC)(EGLenum);$/;"	t
PFNEGLCREATECONTEXTPROC	support/GLFW/src/egl_context.h	/^typedef EGLContext (EGLAPIENTRY * PFNEGLCREATECONTEXTPROC)(EGLDisplay,EGLConfig,EGLContext,const EGLint*);$/;"	t
PFNEGLCREATEWINDOWSURFACEPROC	support/GLFW/src/egl_context.h	/^typedef EGLSurface (EGLAPIENTRY * PFNEGLCREATEWINDOWSURFACEPROC)(EGLDisplay,EGLConfig,EGLNativeWindowType,const EGLint*);$/;"	t
PFNEGLDESTROYCONTEXTPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLDESTROYCONTEXTPROC)(EGLDisplay,EGLContext);$/;"	t
PFNEGLDESTROYSURFACEPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLDESTROYSURFACEPROC)(EGLDisplay,EGLSurface);$/;"	t
PFNEGLGETCONFIGATTRIBPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLGETCONFIGATTRIBPROC)(EGLDisplay,EGLConfig,EGLint,EGLint*);$/;"	t
PFNEGLGETCONFIGSPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLGETCONFIGSPROC)(EGLDisplay,EGLConfig*,EGLint,EGLint*);$/;"	t
PFNEGLGETDISPLAYPROC	support/GLFW/src/egl_context.h	/^typedef EGLDisplay (EGLAPIENTRY * PFNEGLGETDISPLAYPROC)(EGLNativeDisplayType);$/;"	t
PFNEGLGETERRORPROC	support/GLFW/src/egl_context.h	/^typedef EGLint (EGLAPIENTRY * PFNEGLGETERRORPROC)(void);$/;"	t
PFNEGLGETPROCADDRESSPROC	support/GLFW/src/egl_context.h	/^typedef GLFWglproc (EGLAPIENTRY * PFNEGLGETPROCADDRESSPROC)(const char*);$/;"	t
PFNEGLINITIALIZEPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLINITIALIZEPROC)(EGLDisplay,EGLint*,EGLint*);$/;"	t
PFNEGLMAKECURRENTPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLMAKECURRENTPROC)(EGLDisplay,EGLSurface,EGLSurface,EGLContext);$/;"	t
PFNEGLQUERYSTRINGPROC	support/GLFW/src/egl_context.h	/^typedef const char* (EGLAPIENTRY * PFNEGLQUERYSTRINGPROC)(EGLDisplay,EGLint);$/;"	t
PFNEGLSWAPBUFFERSPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLSWAPBUFFERSPROC)(EGLDisplay,EGLSurface);$/;"	t
PFNEGLSWAPINTERVALPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLSWAPINTERVALPROC)(EGLDisplay,EGLint);$/;"	t
PFNEGLTERMINATEPROC	support/GLFW/src/egl_context.h	/^typedef EGLBoolean (EGLAPIENTRY * PFNEGLTERMINATEPROC)(EGLDisplay);$/;"	t
PFNGLACCUMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);$/;"	t
PFNGLACCUMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);$/;"	t
PFNGLACTIVETEXTUREPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);$/;"	t
PFNGLACTIVETEXTUREPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);$/;"	t
PFNGLALPHAFUNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);$/;"	t
PFNGLALPHAFUNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);$/;"	t
PFNGLARETEXTURESRESIDENTPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);$/;"	t
PFNGLARETEXTURESRESIDENTPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);$/;"	t
PFNGLARRAYELEMENTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);$/;"	t
PFNGLARRAYELEMENTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);$/;"	t
PFNGLATTACHSHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t
PFNGLATTACHSHADERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);$/;"	t
PFNGLBEGINPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum mode);$/;"	t
PFNGLBEGINPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum mode);$/;"	t
PFNGLBEGINQUERYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);$/;"	t
PFNGLBEGINQUERYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDBUFFERBASEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERBASEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERRANGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDBUFFERRANGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDRENDERBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDRENDERBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDSAMPLERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);$/;"	t
PFNGLBINDTEXTUREPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);$/;"	t
PFNGLBINDTEXTUREPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);$/;"	t
PFNGLBINDVERTEXARRAYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);$/;"	t
PFNGLBINDVERTEXARRAYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);$/;"	t
PFNGLBITMAPPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);$/;"	t
PFNGLBITMAPPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);$/;"	t
PFNGLBLENDCOLORPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLBLENDCOLORPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLBLENDEQUATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);$/;"	t
PFNGLBLENDEQUATIONPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);$/;"	t
PFNGLBLENDFUNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBUFFERDATAPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);$/;"	t
PFNGLBUFFERDATAPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);$/;"	t
PFNGLBUFFERSUBDATAPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);$/;"	t
PFNGLBUFFERSUBDATAPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);$/;"	t
PFNGLCALLLISTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint list);$/;"	t
PFNGLCALLLISTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint list);$/;"	t
PFNGLCALLLISTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);$/;"	t
PFNGLCALLLISTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void *lists);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	support/GLFW/deps/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	support/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);$/;"	t
PFNGLCLAMPCOLORPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);$/;"	t
PFNGLCLAMPCOLORPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);$/;"	t
PFNGLCLEARACCUMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARACCUMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARBUFFERFIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);$/;"	t
PFNGLCLEARBUFFERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	t
PFNGLCLEARBUFFERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);$/;"	t
PFNGLCLEARBUFFERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	t
PFNGLCLEARBUFFERUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);$/;"	t
PFNGLCLEARBUFFERUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	t
PFNGLCLEARCOLORPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARCOLORPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARDEPTHPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);$/;"	t
PFNGLCLEARDEPTHPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);$/;"	t
PFNGLCLEARINDEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);$/;"	t
PFNGLCLEARINDEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);$/;"	t
PFNGLCLEARPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);$/;"	t
PFNGLCLEARPROC	support/GLFW/src/internal.h	/^typedef void (APIENTRY * PFNGLCLEARPROC)(GLbitfield);$/;"	t
PFNGLCLEARPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);$/;"	t
PFNGLCLEARSTENCILPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);$/;"	t
PFNGLCLEARSTENCILPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);$/;"	t
PFNGLCLIENTACTIVETEXTUREPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);$/;"	t
PFNGLCLIENTACTIVETEXTUREPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);$/;"	t
PFNGLCLIENTWAITSYNCPROC	support/GLFW/deps/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCLIENTWAITSYNCPROC	support/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCLIPPLANEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble* equation);$/;"	t
PFNGLCLIPPLANEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble *equation);$/;"	t
PFNGLCOLOR3BPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);$/;"	t
PFNGLCOLOR3BPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);$/;"	t
PFNGLCOLOR3BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte* v);$/;"	t
PFNGLCOLOR3BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte *v);$/;"	t
PFNGLCOLOR3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);$/;"	t
PFNGLCOLOR3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);$/;"	t
PFNGLCOLOR3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble* v);$/;"	t
PFNGLCOLOR3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble *v);$/;"	t
PFNGLCOLOR3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);$/;"	t
PFNGLCOLOR3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);$/;"	t
PFNGLCOLOR3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat* v);$/;"	t
PFNGLCOLOR3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat *v);$/;"	t
PFNGLCOLOR3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);$/;"	t
PFNGLCOLOR3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);$/;"	t
PFNGLCOLOR3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const GLint* v);$/;"	t
PFNGLCOLOR3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const GLint *v);$/;"	t
PFNGLCOLOR3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);$/;"	t
PFNGLCOLOR3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);$/;"	t
PFNGLCOLOR3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort* v);$/;"	t
PFNGLCOLOR3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort *v);$/;"	t
PFNGLCOLOR3UBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);$/;"	t
PFNGLCOLOR3UBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);$/;"	t
PFNGLCOLOR3UBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte* v);$/;"	t
PFNGLCOLOR3UBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte *v);$/;"	t
PFNGLCOLOR3UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);$/;"	t
PFNGLCOLOR3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);$/;"	t
PFNGLCOLOR3UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint* v);$/;"	t
PFNGLCOLOR3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint *v);$/;"	t
PFNGLCOLOR3USPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);$/;"	t
PFNGLCOLOR3USPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);$/;"	t
PFNGLCOLOR3USVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort* v);$/;"	t
PFNGLCOLOR3USVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort *v);$/;"	t
PFNGLCOLOR4BPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);$/;"	t
PFNGLCOLOR4BPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);$/;"	t
PFNGLCOLOR4BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte* v);$/;"	t
PFNGLCOLOR4BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte *v);$/;"	t
PFNGLCOLOR4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);$/;"	t
PFNGLCOLOR4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);$/;"	t
PFNGLCOLOR4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble* v);$/;"	t
PFNGLCOLOR4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble *v);$/;"	t
PFNGLCOLOR4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCOLOR4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCOLOR4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat* v);$/;"	t
PFNGLCOLOR4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat *v);$/;"	t
PFNGLCOLOR4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);$/;"	t
PFNGLCOLOR4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);$/;"	t
PFNGLCOLOR4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const GLint* v);$/;"	t
PFNGLCOLOR4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const GLint *v);$/;"	t
PFNGLCOLOR4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);$/;"	t
PFNGLCOLOR4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);$/;"	t
PFNGLCOLOR4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort* v);$/;"	t
PFNGLCOLOR4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort *v);$/;"	t
PFNGLCOLOR4UBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);$/;"	t
PFNGLCOLOR4UBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);$/;"	t
PFNGLCOLOR4UBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte* v);$/;"	t
PFNGLCOLOR4UBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte *v);$/;"	t
PFNGLCOLOR4UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);$/;"	t
PFNGLCOLOR4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);$/;"	t
PFNGLCOLOR4UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint* v);$/;"	t
PFNGLCOLOR4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint *v);$/;"	t
PFNGLCOLOR4USPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);$/;"	t
PFNGLCOLOR4USPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);$/;"	t
PFNGLCOLOR4USVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort* v);$/;"	t
PFNGLCOLOR4USVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort *v);$/;"	t
PFNGLCOLORMASKIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOLORMASKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOLORMATERIALPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);$/;"	t
PFNGLCOLORMATERIALPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);$/;"	t
PFNGLCOLORP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);$/;"	t
PFNGLCOLORP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);$/;"	t
PFNGLCOLORP4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);$/;"	t
PFNGLCOLORP4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);$/;"	t
PFNGLCOLORPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLCOLORPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLCOMPILESHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);$/;"	t
PFNGLCOMPILESHADERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOPYBUFFERSUBDATAPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	t
PFNGLCOPYBUFFERSUBDATAPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	t
PFNGLCOPYPIXELSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);$/;"	t
PFNGLCOPYPIXELSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);$/;"	t
PFNGLCOPYTEXIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	t
PFNGLCOPYTEXSUBIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	t
PFNGLCOPYTEXSUBIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	t
PFNGLCOPYTEXSUBIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCREATEPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)();$/;"	t
PFNGLCREATEPROGRAMPROC	support/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)(void);$/;"	t
PFNGLCREATESHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);$/;"	t
PFNGLCREATESHADERPROC	support/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);$/;"	t
PFNGLCULLFACEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);$/;"	t
PFNGLCULLFACEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);$/;"	t
PFNGLDELETEBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);$/;"	t
PFNGLDELETEBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);$/;"	t
PFNGLDELETELISTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);$/;"	t
PFNGLDELETELISTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);$/;"	t
PFNGLDELETEPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLDELETEPROGRAMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLDELETEQUERIESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);$/;"	t
PFNGLDELETEQUERIESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);$/;"	t
PFNGLDELETESAMPLERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);$/;"	t
PFNGLDELETESHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);$/;"	t
PFNGLDELETESHADERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);$/;"	t
PFNGLDELETESYNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);$/;"	t
PFNGLDELETESYNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);$/;"	t
PFNGLDELETETEXTURESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);$/;"	t
PFNGLDELETETEXTURESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDEPTHFUNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);$/;"	t
PFNGLDEPTHFUNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);$/;"	t
PFNGLDEPTHMASKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);$/;"	t
PFNGLDEPTHMASKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);$/;"	t
PFNGLDEPTHRANGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble near, GLdouble far);$/;"	t
PFNGLDEPTHRANGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);$/;"	t
PFNGLDETACHSHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t
PFNGLDETACHSHADERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t
PFNGLDISABLECLIENTSTATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);$/;"	t
PFNGLDISABLECLIENTSTATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);$/;"	t
PFNGLDISABLEIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLDISABLEIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLDISABLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);$/;"	t
PFNGLDISABLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	t
PFNGLDRAWARRAYSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWARRAYSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);$/;"	t
PFNGLDRAWBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);$/;"	t
PFNGLDRAWBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);$/;"	t
PFNGLDRAWBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);$/;"	t
PFNGLDRAWELEMENTSBASEVERTEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSBASEVERTEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);$/;"	t
PFNGLDRAWELEMENTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);$/;"	t
PFNGLDRAWELEMENTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLDRAWPIXELSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLDRAWPIXELSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);$/;"	t
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLEDGEFLAGPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);$/;"	t
PFNGLEDGEFLAGPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void *pointer);$/;"	t
PFNGLEDGEFLAGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);$/;"	t
PFNGLEDGEFLAGPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);$/;"	t
PFNGLEDGEFLAGVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean* flag);$/;"	t
PFNGLEDGEFLAGVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean *flag);$/;"	t
PFNGLENABLECLIENTSTATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);$/;"	t
PFNGLENABLECLIENTSTATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);$/;"	t
PFNGLENABLEIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLENABLEIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLENABLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);$/;"	t
PFNGLENABLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t
PFNGLENDCONDITIONALRENDERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)();$/;"	t
PFNGLENDCONDITIONALRENDERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);$/;"	t
PFNGLENDLISTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDLISTPROC)();$/;"	t
PFNGLENDLISTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDLISTPROC)(void);$/;"	t
PFNGLENDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDPROC)();$/;"	t
PFNGLENDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDPROC)(void);$/;"	t
PFNGLENDQUERYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);$/;"	t
PFNGLENDQUERYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)();$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);$/;"	t
PFNGLEVALCOORD1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);$/;"	t
PFNGLEVALCOORD1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);$/;"	t
PFNGLEVALCOORD1DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble* u);$/;"	t
PFNGLEVALCOORD1DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble *u);$/;"	t
PFNGLEVALCOORD1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);$/;"	t
PFNGLEVALCOORD1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);$/;"	t
PFNGLEVALCOORD1FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat* u);$/;"	t
PFNGLEVALCOORD1FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat *u);$/;"	t
PFNGLEVALCOORD2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);$/;"	t
PFNGLEVALCOORD2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);$/;"	t
PFNGLEVALCOORD2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble* u);$/;"	t
PFNGLEVALCOORD2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble *u);$/;"	t
PFNGLEVALCOORD2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);$/;"	t
PFNGLEVALCOORD2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);$/;"	t
PFNGLEVALCOORD2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat* u);$/;"	t
PFNGLEVALCOORD2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat *u);$/;"	t
PFNGLEVALMESH1PROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);$/;"	t
PFNGLEVALMESH1PROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);$/;"	t
PFNGLEVALMESH2PROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);$/;"	t
PFNGLEVALMESH2PROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);$/;"	t
PFNGLEVALPOINT1PROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);$/;"	t
PFNGLEVALPOINT1PROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);$/;"	t
PFNGLEVALPOINT2PROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);$/;"	t
PFNGLEVALPOINT2PROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);$/;"	t
PFNGLFEEDBACKBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);$/;"	t
PFNGLFEEDBACKBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat *buffer);$/;"	t
PFNGLFENCESYNCPROC	support/GLFW/deps/glad/glad.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);$/;"	t
PFNGLFENCESYNCPROC	support/glad/glad.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);$/;"	t
PFNGLFINISHPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFINISHPROC)();$/;"	t
PFNGLFINISHPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFINISHPROC)(void);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC)();$/;"	t
PFNGLFLUSHPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC)(void);$/;"	t
PFNGLFOGCOORDDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);$/;"	t
PFNGLFOGCOORDDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);$/;"	t
PFNGLFOGCOORDDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble* coord);$/;"	t
PFNGLFOGCOORDDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble *coord);$/;"	t
PFNGLFOGCOORDFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);$/;"	t
PFNGLFOGCOORDFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);$/;"	t
PFNGLFOGCOORDFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat* coord);$/;"	t
PFNGLFOGCOORDFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat *coord);$/;"	t
PFNGLFOGCOORDPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLFOGCOORDPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLFOGFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLFOGFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLFOGFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat* params);$/;"	t
PFNGLFOGFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat *params);$/;"	t
PFNGLFOGIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLFOGIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLFOGIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint* params);$/;"	t
PFNGLFOGIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint *params);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRONTFACEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);$/;"	t
PFNGLFRONTFACEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);$/;"	t
PFNGLFRUSTUMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	t
PFNGLFRUSTUMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	t
PFNGLGENBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);$/;"	t
PFNGLGENBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);$/;"	t
PFNGLGENERATEMIPMAPPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);$/;"	t
PFNGLGENERATEMIPMAPPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);$/;"	t
PFNGLGENLISTSPROC	support/GLFW/deps/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);$/;"	t
PFNGLGENLISTSPROC	support/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);$/;"	t
PFNGLGENQUERIESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);$/;"	t
PFNGLGENQUERIESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);$/;"	t
PFNGLGENRENDERBUFFERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);$/;"	t
PFNGLGENRENDERBUFFERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);$/;"	t
PFNGLGENSAMPLERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);$/;"	t
PFNGLGENTEXTURESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);$/;"	t
PFNGLGENTEXTURESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);$/;"	t
PFNGLGENVERTEXARRAYSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);$/;"	t
PFNGLGENVERTEXARRAYSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);$/;"	t
PFNGLGETACTIVEATTRIBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);$/;"	t
PFNGLGETACTIVEATTRIBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	t
PFNGLGETACTIVEUNIFORMNAMEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);$/;"	t
PFNGLGETACTIVEUNIFORMNAMEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMSIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);$/;"	t
PFNGLGETACTIVEUNIFORMSIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	support/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t
PFNGLGETBOOLEANI_VPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);$/;"	t
PFNGLGETBOOLEANI_VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);$/;"	t
PFNGLGETBOOLEANVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);$/;"	t
PFNGLGETBOOLEANVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);$/;"	t
PFNGLGETCLIPPLANEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);$/;"	t
PFNGLGETCLIPPLANEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble *equation);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);$/;"	t
PFNGLGETDOUBLEVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);$/;"	t
PFNGLGETDOUBLEVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);$/;"	t
PFNGLGETERRORPROC	support/GLFW/deps/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC)();$/;"	t
PFNGLGETERRORPROC	support/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC)(void);$/;"	t
PFNGLGETFLOATVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);$/;"	t
PFNGLGETFLOATVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);$/;"	t
PFNGLGETFRAGDATAINDEXPROC	support/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAGDATALOCATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);$/;"	t
PFNGLGETFRAGDATALOCATIONPROC	support/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSARBPROC	support/GLFW/deps/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC)();$/;"	t
PFNGLGETINTEGER64I_VPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);$/;"	t
PFNGLGETINTEGER64I_VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);$/;"	t
PFNGLGETINTEGER64VPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);$/;"	t
PFNGLGETINTEGER64VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);$/;"	t
PFNGLGETINTEGERI_VPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);$/;"	t
PFNGLGETINTEGERI_VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);$/;"	t
PFNGLGETINTEGERVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);$/;"	t
PFNGLGETINTEGERVPROC	support/GLFW/src/internal.h	/^typedef void (APIENTRY * PFNGLGETINTEGERVPROC)(GLenum,GLint*);$/;"	t
PFNGLGETINTEGERVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);$/;"	t
PFNGLGETLIGHTFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETLIGHTFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETLIGHTIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);$/;"	t
PFNGLGETLIGHTIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint *params);$/;"	t
PFNGLGETMAPDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);$/;"	t
PFNGLGETMAPDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble *v);$/;"	t
PFNGLGETMAPFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);$/;"	t
PFNGLGETMAPFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat *v);$/;"	t
PFNGLGETMAPIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);$/;"	t
PFNGLGETMAPIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint *v);$/;"	t
PFNGLGETMATERIALFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETMATERIALFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETMATERIALIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);$/;"	t
PFNGLGETMATERIALIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint *params);$/;"	t
PFNGLGETMULTISAMPLEFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);$/;"	t
PFNGLGETMULTISAMPLEFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);$/;"	t
PFNGLGETNCOLORTABLEARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);$/;"	t
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void* img);$/;"	t
PFNGLGETNCONVOLUTIONFILTERARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);$/;"	t
PFNGLGETNHISTOGRAMARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);$/;"	t
PFNGLGETNMAPDVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);$/;"	t
PFNGLGETNMAPFVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);$/;"	t
PFNGLGETNMAPIVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);$/;"	t
PFNGLGETNMINMAXARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);$/;"	t
PFNGLGETNPIXELMAPFVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat* values);$/;"	t
PFNGLGETNPIXELMAPUIVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint* values);$/;"	t
PFNGLGETNPIXELMAPUSVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort* values);$/;"	t
PFNGLGETNPOLYGONSTIPPLEARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte* pattern);$/;"	t
PFNGLGETNSEPARABLEFILTERARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);$/;"	t
PFNGLGETNTEXIMAGEARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);$/;"	t
PFNGLGETNUNIFORMDVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);$/;"	t
PFNGLGETNUNIFORMFVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);$/;"	t
PFNGLGETNUNIFORMIVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);$/;"	t
PFNGLGETNUNIFORMUIVARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);$/;"	t
PFNGLGETPIXELMAPFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);$/;"	t
PFNGLGETPIXELMAPFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat *values);$/;"	t
PFNGLGETPIXELMAPUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);$/;"	t
PFNGLGETPIXELMAPUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint *values);$/;"	t
PFNGLGETPIXELMAPUSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);$/;"	t
PFNGLGETPIXELMAPUSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort *values);$/;"	t
PFNGLGETPOINTERVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void** params);$/;"	t
PFNGLGETPOINTERVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void **params);$/;"	t
PFNGLGETPOLYGONSTIPPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);$/;"	t
PFNGLGETPOLYGONSTIPPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte *mask);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);$/;"	t
PFNGLGETPROGRAMIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETQUERYIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTI64VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTUI64VPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERINFOLOGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);$/;"	t
PFNGLGETSHADERINFOLOGPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETSHADERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);$/;"	t
PFNGLGETSHADERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERSOURCEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);$/;"	t
PFNGLGETSHADERSOURCEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	t
PFNGLGETSTRINGIPROC	support/GLFW/deps/glad/glad.h	/^typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGIPROC	support/GLFW/src/internal.h	/^typedef const GLubyte* (APIENTRY * PFNGLGETSTRINGIPROC)(GLenum,GLuint);$/;"	t
PFNGLGETSTRINGIPROC	support/glad/glad.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGPROC	support/GLFW/deps/glad/glad.h	/^typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);$/;"	t
PFNGLGETSTRINGPROC	support/GLFW/src/internal.h	/^typedef const GLubyte* (APIENTRY * PFNGLGETSTRINGPROC)(GLenum);$/;"	t
PFNGLGETSTRINGPROC	support/glad/glad.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);$/;"	t
PFNGLGETSYNCIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);$/;"	t
PFNGLGETSYNCIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETTEXENVFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETTEXENVFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXENVIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXENVIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXGENDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);$/;"	t
PFNGLGETTEXGENDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETTEXGENFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETTEXGENFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXGENIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXGENIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXIMAGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);$/;"	t
PFNGLGETTEXIMAGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLGETTEXLEVELPARAMETERFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETTEXLEVELPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXLEVELPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXLEVELPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETTEXPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXPARAMETERIIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXPARAMETERIIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);$/;"	t
PFNGLGETTEXPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETUNIFORMBLOCKINDEXPROC	support/GLFW/deps/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);$/;"	t
PFNGLGETUNIFORMBLOCKINDEXPROC	support/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);$/;"	t
PFNGLGETUNIFORMFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);$/;"	t
PFNGLGETUNIFORMFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);$/;"	t
PFNGLGETUNIFORMINDICESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint* uniformIndices);$/;"	t
PFNGLGETUNIFORMINDICESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);$/;"	t
PFNGLGETUNIFORMIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);$/;"	t
PFNGLGETUNIFORMIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	support/GLFW/deps/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	support/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t
PFNGLGETUNIFORMUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);$/;"	t
PFNGLGETUNIFORMUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);$/;"	t
PFNGLHINTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);$/;"	t
PFNGLHINTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);$/;"	t
PFNGLINDEXDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble c);$/;"	t
PFNGLINDEXDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble c);$/;"	t
PFNGLINDEXDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXDVPROC)(const GLdouble* c);$/;"	t
PFNGLINDEXDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXDVPROC)(const GLdouble *c);$/;"	t
PFNGLINDEXFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat c);$/;"	t
PFNGLINDEXFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat c);$/;"	t
PFNGLINDEXFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXFVPROC)(const GLfloat* c);$/;"	t
PFNGLINDEXFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXFVPROC)(const GLfloat *c);$/;"	t
PFNGLINDEXIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint c);$/;"	t
PFNGLINDEXIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint c);$/;"	t
PFNGLINDEXIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXIVPROC)(const GLint* c);$/;"	t
PFNGLINDEXIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXIVPROC)(const GLint *c);$/;"	t
PFNGLINDEXMASKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);$/;"	t
PFNGLINDEXMASKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);$/;"	t
PFNGLINDEXPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLINDEXPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLINDEXSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort c);$/;"	t
PFNGLINDEXSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort c);$/;"	t
PFNGLINDEXSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXSVPROC)(const GLshort* c);$/;"	t
PFNGLINDEXSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXSVPROC)(const GLshort *c);$/;"	t
PFNGLINDEXUBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);$/;"	t
PFNGLINDEXUBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);$/;"	t
PFNGLINDEXUBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte* c);$/;"	t
PFNGLINDEXUBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte *c);$/;"	t
PFNGLINITNAMESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINITNAMESPROC)();$/;"	t
PFNGLINITNAMESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINITNAMESPROC)(void);$/;"	t
PFNGLINTERLEAVEDARRAYSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);$/;"	t
PFNGLINTERLEAVEDARRAYSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void *pointer);$/;"	t
PFNGLISBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);$/;"	t
PFNGLISBUFFERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);$/;"	t
PFNGLISENABLEDIPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDIPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);$/;"	t
PFNGLISENABLEDPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);$/;"	t
PFNGLISFRAMEBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);$/;"	t
PFNGLISFRAMEBUFFERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);$/;"	t
PFNGLISLISTPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISLISTPROC)(GLuint list);$/;"	t
PFNGLISLISTPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISLISTPROC)(GLuint list);$/;"	t
PFNGLISPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);$/;"	t
PFNGLISPROGRAMPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);$/;"	t
PFNGLISQUERYPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);$/;"	t
PFNGLISQUERYPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);$/;"	t
PFNGLISRENDERBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);$/;"	t
PFNGLISRENDERBUFFERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);$/;"	t
PFNGLISSAMPLERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);$/;"	t
PFNGLISSHADERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);$/;"	t
PFNGLISSHADERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);$/;"	t
PFNGLISSYNCPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);$/;"	t
PFNGLISSYNCPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);$/;"	t
PFNGLISTEXTUREPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);$/;"	t
PFNGLISTEXTUREPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);$/;"	t
PFNGLISVERTEXARRAYPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);$/;"	t
PFNGLISVERTEXARRAYPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);$/;"	t
PFNGLLIGHTFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);$/;"	t
PFNGLLIGHTFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);$/;"	t
PFNGLLIGHTFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat* params);$/;"	t
PFNGLLIGHTFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat *params);$/;"	t
PFNGLLIGHTIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);$/;"	t
PFNGLLIGHTIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);$/;"	t
PFNGLLIGHTIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint* params);$/;"	t
PFNGLLIGHTIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint *params);$/;"	t
PFNGLLIGHTMODELFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLLIGHTMODELFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLLIGHTMODELFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat* params);$/;"	t
PFNGLLIGHTMODELFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat *params);$/;"	t
PFNGLLIGHTMODELIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLLIGHTMODELIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLLIGHTMODELIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint* params);$/;"	t
PFNGLLIGHTMODELIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint *params);$/;"	t
PFNGLLINESTIPPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);$/;"	t
PFNGLLINESTIPPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);$/;"	t
PFNGLLINEWIDTHPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);$/;"	t
PFNGLLINEWIDTHPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);$/;"	t
PFNGLLINKPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);$/;"	t
PFNGLLINKPROGRAMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);$/;"	t
PFNGLLISTBASEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint base);$/;"	t
PFNGLLISTBASEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint base);$/;"	t
PFNGLLOADIDENTITYPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)();$/;"	t
PFNGLLOADIDENTITYPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)(void);$/;"	t
PFNGLLOADMATRIXDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble* m);$/;"	t
PFNGLLOADMATRIXDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble *m);$/;"	t
PFNGLLOADMATRIXFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat* m);$/;"	t
PFNGLLOADMATRIXFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat *m);$/;"	t
PFNGLLOADNAMEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);$/;"	t
PFNGLLOADNAMEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);$/;"	t
PFNGLLOADTRANSPOSEMATRIXDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble* m);$/;"	t
PFNGLLOADTRANSPOSEMATRIXDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble *m);$/;"	t
PFNGLLOADTRANSPOSEMATRIXFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat* m);$/;"	t
PFNGLLOADTRANSPOSEMATRIXFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat *m);$/;"	t
PFNGLLOGICOPPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);$/;"	t
PFNGLLOGICOPPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);$/;"	t
PFNGLMAP1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);$/;"	t
PFNGLMAP1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);$/;"	t
PFNGLMAP1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);$/;"	t
PFNGLMAP1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);$/;"	t
PFNGLMAP2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);$/;"	t
PFNGLMAP2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);$/;"	t
PFNGLMAP2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);$/;"	t
PFNGLMAP2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);$/;"	t
PFNGLMAPBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void* (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERPROC	support/glad/glad.h	/^typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERRANGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void* (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMAPBUFFERRANGEPROC	support/glad/glad.h	/^typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMAPGRID1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);$/;"	t
PFNGLMAPGRID1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);$/;"	t
PFNGLMAPGRID1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);$/;"	t
PFNGLMAPGRID1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);$/;"	t
PFNGLMAPGRID2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);$/;"	t
PFNGLMAPGRID2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);$/;"	t
PFNGLMAPGRID2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);$/;"	t
PFNGLMAPGRID2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);$/;"	t
PFNGLMATERIALFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);$/;"	t
PFNGLMATERIALFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);$/;"	t
PFNGLMATERIALFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat* params);$/;"	t
PFNGLMATERIALFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat *params);$/;"	t
PFNGLMATERIALIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);$/;"	t
PFNGLMATERIALIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);$/;"	t
PFNGLMATERIALIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint* params);$/;"	t
PFNGLMATERIALIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint *params);$/;"	t
PFNGLMATRIXMODEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);$/;"	t
PFNGLMATRIXMODEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount, const GLint* basevertex);$/;"	t
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);$/;"	t
PFNGLMULTITEXCOORD1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);$/;"	t
PFNGLMULTITEXCOORD1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);$/;"	t
PFNGLMULTITEXCOORD1DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble* v);$/;"	t
PFNGLMULTITEXCOORD1DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);$/;"	t
PFNGLMULTITEXCOORD1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);$/;"	t
PFNGLMULTITEXCOORD1FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat* v);$/;"	t
PFNGLMULTITEXCOORD1FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD1IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);$/;"	t
PFNGLMULTITEXCOORD1IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);$/;"	t
PFNGLMULTITEXCOORD1IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint* v);$/;"	t
PFNGLMULTITEXCOORD1IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD1SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);$/;"	t
PFNGLMULTITEXCOORD1SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);$/;"	t
PFNGLMULTITEXCOORD1SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort* v);$/;"	t
PFNGLMULTITEXCOORD1SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);$/;"	t
PFNGLMULTITEXCOORD2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);$/;"	t
PFNGLMULTITEXCOORD2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble* v);$/;"	t
PFNGLMULTITEXCOORD2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);$/;"	t
PFNGLMULTITEXCOORD2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);$/;"	t
PFNGLMULTITEXCOORD2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat* v);$/;"	t
PFNGLMULTITEXCOORD2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);$/;"	t
PFNGLMULTITEXCOORD2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);$/;"	t
PFNGLMULTITEXCOORD2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint* v);$/;"	t
PFNGLMULTITEXCOORD2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);$/;"	t
PFNGLMULTITEXCOORD2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);$/;"	t
PFNGLMULTITEXCOORD2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort* v);$/;"	t
PFNGLMULTITEXCOORD2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);$/;"	t
PFNGLMULTITEXCOORD3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);$/;"	t
PFNGLMULTITEXCOORD3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble* v);$/;"	t
PFNGLMULTITEXCOORD3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);$/;"	t
PFNGLMULTITEXCOORD3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);$/;"	t
PFNGLMULTITEXCOORD3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat* v);$/;"	t
PFNGLMULTITEXCOORD3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);$/;"	t
PFNGLMULTITEXCOORD3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);$/;"	t
PFNGLMULTITEXCOORD3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint* v);$/;"	t
PFNGLMULTITEXCOORD3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);$/;"	t
PFNGLMULTITEXCOORD3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);$/;"	t
PFNGLMULTITEXCOORD3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort* v);$/;"	t
PFNGLMULTITEXCOORD3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	t
PFNGLMULTITEXCOORD4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	t
PFNGLMULTITEXCOORD4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble* v);$/;"	t
PFNGLMULTITEXCOORD4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	t
PFNGLMULTITEXCOORD4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	t
PFNGLMULTITEXCOORD4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat* v);$/;"	t
PFNGLMULTITEXCOORD4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);$/;"	t
PFNGLMULTITEXCOORD4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);$/;"	t
PFNGLMULTITEXCOORD4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint* v);$/;"	t
PFNGLMULTITEXCOORD4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);$/;"	t
PFNGLMULTITEXCOORD4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);$/;"	t
PFNGLMULTITEXCOORD4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort* v);$/;"	t
PFNGLMULTITEXCOORD4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORDP1UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP1UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTMATRIXDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble* m);$/;"	t
PFNGLMULTMATRIXDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble *m);$/;"	t
PFNGLMULTMATRIXFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat* m);$/;"	t
PFNGLMULTMATRIXFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat *m);$/;"	t
PFNGLMULTTRANSPOSEMATRIXDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble* m);$/;"	t
PFNGLMULTTRANSPOSEMATRIXDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble *m);$/;"	t
PFNGLMULTTRANSPOSEMATRIXFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat* m);$/;"	t
PFNGLMULTTRANSPOSEMATRIXFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat *m);$/;"	t
PFNGLNEWLISTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);$/;"	t
PFNGLNEWLISTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);$/;"	t
PFNGLNORMAL3BPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);$/;"	t
PFNGLNORMAL3BPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);$/;"	t
PFNGLNORMAL3BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte* v);$/;"	t
PFNGLNORMAL3BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte *v);$/;"	t
PFNGLNORMAL3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);$/;"	t
PFNGLNORMAL3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);$/;"	t
PFNGLNORMAL3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble* v);$/;"	t
PFNGLNORMAL3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble *v);$/;"	t
PFNGLNORMAL3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);$/;"	t
PFNGLNORMAL3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);$/;"	t
PFNGLNORMAL3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat* v);$/;"	t
PFNGLNORMAL3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat *v);$/;"	t
PFNGLNORMAL3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);$/;"	t
PFNGLNORMAL3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);$/;"	t
PFNGLNORMAL3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const GLint* v);$/;"	t
PFNGLNORMAL3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const GLint *v);$/;"	t
PFNGLNORMAL3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);$/;"	t
PFNGLNORMAL3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);$/;"	t
PFNGLNORMAL3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort* v);$/;"	t
PFNGLNORMAL3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort *v);$/;"	t
PFNGLNORMALP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);$/;"	t
PFNGLNORMALP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);$/;"	t
PFNGLNORMALPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLNORMALPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLORTHOPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	t
PFNGLORTHOPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	t
PFNGLPASSTHROUGHPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);$/;"	t
PFNGLPASSTHROUGHPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);$/;"	t
PFNGLPIXELMAPFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat* values);$/;"	t
PFNGLPIXELMAPFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat *values);$/;"	t
PFNGLPIXELMAPUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint* values);$/;"	t
PFNGLPIXELMAPUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint *values);$/;"	t
PFNGLPIXELMAPUSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort* values);$/;"	t
PFNGLPIXELMAPUSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort *values);$/;"	t
PFNGLPIXELSTOREFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELSTOREFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELSTOREIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPIXELSTOREIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPIXELTRANSFERFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELTRANSFERFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELTRANSFERIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPIXELTRANSFERIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPIXELZOOMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);$/;"	t
PFNGLPIXELZOOMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);$/;"	t
PFNGLPOINTPARAMETERFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);$/;"	t
PFNGLPOINTPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);$/;"	t
PFNGLPOINTPARAMETERIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);$/;"	t
PFNGLPOINTPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);$/;"	t
PFNGLPOINTSIZEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);$/;"	t
PFNGLPOINTSIZEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);$/;"	t
PFNGLPOLYGONMODEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);$/;"	t
PFNGLPOLYGONMODEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);$/;"	t
PFNGLPOLYGONOFFSETPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);$/;"	t
PFNGLPOLYGONOFFSETPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);$/;"	t
PFNGLPOLYGONSTIPPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte* mask);$/;"	t
PFNGLPOLYGONSTIPPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte *mask);$/;"	t
PFNGLPOPATTRIBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPATTRIBPROC)();$/;"	t
PFNGLPOPATTRIBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPATTRIBPROC)(void);$/;"	t
PFNGLPOPCLIENTATTRIBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)();$/;"	t
PFNGLPOPCLIENTATTRIBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)(void);$/;"	t
PFNGLPOPMATRIXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPMATRIXPROC)();$/;"	t
PFNGLPOPMATRIXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPMATRIXPROC)(void);$/;"	t
PFNGLPOPNAMEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPNAMEPROC)();$/;"	t
PFNGLPOPNAMEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOPNAMEPROC)(void);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);$/;"	t
PFNGLPRIORITIZETEXTURESPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint* textures, const GLfloat* priorities);$/;"	t
PFNGLPRIORITIZETEXTURESPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint *textures, const GLfloat *priorities);$/;"	t
PFNGLPROVOKINGVERTEXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);$/;"	t
PFNGLPROVOKINGVERTEXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);$/;"	t
PFNGLPUSHATTRIBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);$/;"	t
PFNGLPUSHATTRIBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);$/;"	t
PFNGLPUSHCLIENTATTRIBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);$/;"	t
PFNGLPUSHCLIENTATTRIBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);$/;"	t
PFNGLPUSHMATRIXPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)();$/;"	t
PFNGLPUSHMATRIXPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)(void);$/;"	t
PFNGLPUSHNAMEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);$/;"	t
PFNGLPUSHNAMEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);$/;"	t
PFNGLQUERYCOUNTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);$/;"	t
PFNGLRASTERPOS2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLRASTERPOS2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLRASTERPOS2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble* v);$/;"	t
PFNGLRASTERPOS2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble *v);$/;"	t
PFNGLRASTERPOS2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLRASTERPOS2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLRASTERPOS2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat* v);$/;"	t
PFNGLRASTERPOS2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat *v);$/;"	t
PFNGLRASTERPOS2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);$/;"	t
PFNGLRASTERPOS2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);$/;"	t
PFNGLRASTERPOS2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint* v);$/;"	t
PFNGLRASTERPOS2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint *v);$/;"	t
PFNGLRASTERPOS2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLRASTERPOS2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLRASTERPOS2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort* v);$/;"	t
PFNGLRASTERPOS2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort *v);$/;"	t
PFNGLRASTERPOS3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLRASTERPOS3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLRASTERPOS3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble* v);$/;"	t
PFNGLRASTERPOS3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble *v);$/;"	t
PFNGLRASTERPOS3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLRASTERPOS3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLRASTERPOS3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat* v);$/;"	t
PFNGLRASTERPOS3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat *v);$/;"	t
PFNGLRASTERPOS3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLRASTERPOS3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLRASTERPOS3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint* v);$/;"	t
PFNGLRASTERPOS3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint *v);$/;"	t
PFNGLRASTERPOS3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLRASTERPOS3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLRASTERPOS3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort* v);$/;"	t
PFNGLRASTERPOS3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort *v);$/;"	t
PFNGLRASTERPOS4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLRASTERPOS4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLRASTERPOS4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble* v);$/;"	t
PFNGLRASTERPOS4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble *v);$/;"	t
PFNGLRASTERPOS4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLRASTERPOS4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLRASTERPOS4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat* v);$/;"	t
PFNGLRASTERPOS4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat *v);$/;"	t
PFNGLRASTERPOS4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLRASTERPOS4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLRASTERPOS4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint* v);$/;"	t
PFNGLRASTERPOS4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint *v);$/;"	t
PFNGLRASTERPOS4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLRASTERPOS4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLRASTERPOS4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort* v);$/;"	t
PFNGLRASTERPOS4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort *v);$/;"	t
PFNGLREADBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);$/;"	t
PFNGLREADBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);$/;"	t
PFNGLREADNPIXELSARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);$/;"	t
PFNGLREADPIXELSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);$/;"	t
PFNGLREADPIXELSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLRECTDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);$/;"	t
PFNGLRECTDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);$/;"	t
PFNGLRECTDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTDVPROC)(const GLdouble* v1, const GLdouble* v2);$/;"	t
PFNGLRECTDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTDVPROC)(const GLdouble *v1, const GLdouble *v2);$/;"	t
PFNGLRECTFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);$/;"	t
PFNGLRECTFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);$/;"	t
PFNGLRECTFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTFVPROC)(const GLfloat* v1, const GLfloat* v2);$/;"	t
PFNGLRECTFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTFVPROC)(const GLfloat *v1, const GLfloat *v2);$/;"	t
PFNGLRECTIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);$/;"	t
PFNGLRECTIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);$/;"	t
PFNGLRECTIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTIVPROC)(const GLint* v1, const GLint* v2);$/;"	t
PFNGLRECTIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTIVPROC)(const GLint *v1, const GLint *v2);$/;"	t
PFNGLRECTSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);$/;"	t
PFNGLRECTSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);$/;"	t
PFNGLRECTSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTSVPROC)(const GLshort* v1, const GLshort* v2);$/;"	t
PFNGLRECTSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRECTSVPROC)(const GLshort *v1, const GLshort *v2);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERMODEPROC	support/GLFW/deps/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);$/;"	t
PFNGLRENDERMODEPROC	support/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);$/;"	t
PFNGLROTATEDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLROTATEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLROTATEFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLROTATEFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLSAMPLECOVERAGEARBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLECOVERAGEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLECOVERAGEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLEMASKIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);$/;"	t
PFNGLSAMPLEMASKIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);$/;"	t
PFNGLSAMPLERPARAMETERFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);$/;"	t
PFNGLSAMPLERPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);$/;"	t
PFNGLSAMPLERPARAMETERIIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSAMPLERPARAMETERIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);$/;"	t
PFNGLSAMPLERPARAMETERIUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);$/;"	t
PFNGLSAMPLERPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSCALEDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLSCALEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLSCALEFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLSCALEFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLSCISSORPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLSCISSORPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLSECONDARYCOLOR3BPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);$/;"	t
PFNGLSECONDARYCOLOR3BPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);$/;"	t
PFNGLSECONDARYCOLOR3BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte* v);$/;"	t
PFNGLSECONDARYCOLOR3BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte *v);$/;"	t
PFNGLSECONDARYCOLOR3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);$/;"	t
PFNGLSECONDARYCOLOR3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);$/;"	t
PFNGLSECONDARYCOLOR3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble* v);$/;"	t
PFNGLSECONDARYCOLOR3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble *v);$/;"	t
PFNGLSECONDARYCOLOR3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);$/;"	t
PFNGLSECONDARYCOLOR3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);$/;"	t
PFNGLSECONDARYCOLOR3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat* v);$/;"	t
PFNGLSECONDARYCOLOR3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat *v);$/;"	t
PFNGLSECONDARYCOLOR3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);$/;"	t
PFNGLSECONDARYCOLOR3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);$/;"	t
PFNGLSECONDARYCOLOR3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const GLint* v);$/;"	t
PFNGLSECONDARYCOLOR3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const GLint *v);$/;"	t
PFNGLSECONDARYCOLOR3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);$/;"	t
PFNGLSECONDARYCOLOR3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);$/;"	t
PFNGLSECONDARYCOLOR3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const GLshort* v);$/;"	t
PFNGLSECONDARYCOLOR3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const GLshort *v);$/;"	t
PFNGLSECONDARYCOLOR3UBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);$/;"	t
PFNGLSECONDARYCOLOR3UBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);$/;"	t
PFNGLSECONDARYCOLOR3UBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte* v);$/;"	t
PFNGLSECONDARYCOLOR3UBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte *v);$/;"	t
PFNGLSECONDARYCOLOR3UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);$/;"	t
PFNGLSECONDARYCOLOR3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);$/;"	t
PFNGLSECONDARYCOLOR3UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint* v);$/;"	t
PFNGLSECONDARYCOLOR3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint *v);$/;"	t
PFNGLSECONDARYCOLOR3USPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);$/;"	t
PFNGLSECONDARYCOLOR3USPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);$/;"	t
PFNGLSECONDARYCOLOR3USVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const GLushort* v);$/;"	t
PFNGLSECONDARYCOLOR3USVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const GLushort *v);$/;"	t
PFNGLSECONDARYCOLORP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);$/;"	t
PFNGLSECONDARYCOLORP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);$/;"	t
PFNGLSECONDARYCOLORPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLSECONDARYCOLORPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLSELECTBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);$/;"	t
PFNGLSELECTBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint *buffer);$/;"	t
PFNGLSHADEMODELPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);$/;"	t
PFNGLSHADEMODELPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);$/;"	t
PFNGLSHADERSOURCEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);$/;"	t
PFNGLSHADERSOURCEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);$/;"	t
PFNGLSTENCILFUNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILMASKPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);$/;"	t
PFNGLSTENCILMASKPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILOPPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);$/;"	t
PFNGLSTENCILOPPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLTEXBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);$/;"	t
PFNGLTEXBUFFERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);$/;"	t
PFNGLTEXCOORD1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);$/;"	t
PFNGLTEXCOORD1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);$/;"	t
PFNGLTEXCOORD1DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble* v);$/;"	t
PFNGLTEXCOORD1DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble *v);$/;"	t
PFNGLTEXCOORD1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);$/;"	t
PFNGLTEXCOORD1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);$/;"	t
PFNGLTEXCOORD1FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat* v);$/;"	t
PFNGLTEXCOORD1FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat *v);$/;"	t
PFNGLTEXCOORD1IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);$/;"	t
PFNGLTEXCOORD1IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);$/;"	t
PFNGLTEXCOORD1IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint* v);$/;"	t
PFNGLTEXCOORD1IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint *v);$/;"	t
PFNGLTEXCOORD1SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);$/;"	t
PFNGLTEXCOORD1SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);$/;"	t
PFNGLTEXCOORD1SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort* v);$/;"	t
PFNGLTEXCOORD1SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort *v);$/;"	t
PFNGLTEXCOORD2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);$/;"	t
PFNGLTEXCOORD2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);$/;"	t
PFNGLTEXCOORD2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble* v);$/;"	t
PFNGLTEXCOORD2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble *v);$/;"	t
PFNGLTEXCOORD2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);$/;"	t
PFNGLTEXCOORD2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);$/;"	t
PFNGLTEXCOORD2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat* v);$/;"	t
PFNGLTEXCOORD2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat *v);$/;"	t
PFNGLTEXCOORD2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);$/;"	t
PFNGLTEXCOORD2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);$/;"	t
PFNGLTEXCOORD2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint* v);$/;"	t
PFNGLTEXCOORD2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint *v);$/;"	t
PFNGLTEXCOORD2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);$/;"	t
PFNGLTEXCOORD2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);$/;"	t
PFNGLTEXCOORD2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort* v);$/;"	t
PFNGLTEXCOORD2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort *v);$/;"	t
PFNGLTEXCOORD3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);$/;"	t
PFNGLTEXCOORD3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);$/;"	t
PFNGLTEXCOORD3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble* v);$/;"	t
PFNGLTEXCOORD3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble *v);$/;"	t
PFNGLTEXCOORD3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);$/;"	t
PFNGLTEXCOORD3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);$/;"	t
PFNGLTEXCOORD3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat* v);$/;"	t
PFNGLTEXCOORD3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat *v);$/;"	t
PFNGLTEXCOORD3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);$/;"	t
PFNGLTEXCOORD3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);$/;"	t
PFNGLTEXCOORD3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint* v);$/;"	t
PFNGLTEXCOORD3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint *v);$/;"	t
PFNGLTEXCOORD3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);$/;"	t
PFNGLTEXCOORD3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);$/;"	t
PFNGLTEXCOORD3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort* v);$/;"	t
PFNGLTEXCOORD3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort *v);$/;"	t
PFNGLTEXCOORD4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	t
PFNGLTEXCOORD4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	t
PFNGLTEXCOORD4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble* v);$/;"	t
PFNGLTEXCOORD4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble *v);$/;"	t
PFNGLTEXCOORD4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	t
PFNGLTEXCOORD4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	t
PFNGLTEXCOORD4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat* v);$/;"	t
PFNGLTEXCOORD4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat *v);$/;"	t
PFNGLTEXCOORD4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);$/;"	t
PFNGLTEXCOORD4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);$/;"	t
PFNGLTEXCOORD4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint* v);$/;"	t
PFNGLTEXCOORD4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint *v);$/;"	t
PFNGLTEXCOORD4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);$/;"	t
PFNGLTEXCOORD4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);$/;"	t
PFNGLTEXCOORD4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort* v);$/;"	t
PFNGLTEXCOORD4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort *v);$/;"	t
PFNGLTEXCOORDP1UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP1UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLTEXCOORDPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLTEXENVFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXENVFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXENVFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat* params);$/;"	t
PFNGLTEXENVFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXENVIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXENVIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXENVIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint* params);$/;"	t
PFNGLTEXENVIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXGENDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);$/;"	t
PFNGLTEXGENDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);$/;"	t
PFNGLTEXGENDVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble* params);$/;"	t
PFNGLTEXGENDVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble *params);$/;"	t
PFNGLTEXGENFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXGENFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXGENFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat* params);$/;"	t
PFNGLTEXGENFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXGENIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);$/;"	t
PFNGLTEXGENIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);$/;"	t
PFNGLTEXGENIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint* params);$/;"	t
PFNGLTEXGENIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE3DMULTISAMPLEPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DMULTISAMPLEPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXIMAGE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXPARAMETERFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXPARAMETERFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXPARAMETERFVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);$/;"	t
PFNGLTEXPARAMETERFVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXPARAMETERIIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);$/;"	t
PFNGLTEXPARAMETERIIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXPARAMETERIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXPARAMETERIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXPARAMETERIUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);$/;"	t
PFNGLTEXPARAMETERIUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);$/;"	t
PFNGLTEXPARAMETERIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);$/;"	t
PFNGLTEXPARAMETERIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXSUBIMAGE1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXSUBIMAGE1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXSUBIMAGE2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);$/;"	t
PFNGLTRANSLATEDPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLTRANSLATEDPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLTRANSLATEFPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLTRANSLATEFPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLUNIFORM1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM1FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM1IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM1IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM1UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM1UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM2UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM3UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM4UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORMBLOCKBINDINGPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	t
PFNGLUNIFORMBLOCKBINDINGPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNMAPBUFFERPROC	support/GLFW/deps/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);$/;"	t
PFNGLUNMAPBUFFERPROC	support/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);$/;"	t
PFNGLUSEPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLUSEPROGRAMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);$/;"	t
PFNGLVERTEX2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEX2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEX2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble* v);$/;"	t
PFNGLVERTEX2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble *v);$/;"	t
PFNGLVERTEX2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEX2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEX2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat* v);$/;"	t
PFNGLVERTEX2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat *v);$/;"	t
PFNGLVERTEX2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);$/;"	t
PFNGLVERTEX2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);$/;"	t
PFNGLVERTEX2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const GLint* v);$/;"	t
PFNGLVERTEX2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const GLint *v);$/;"	t
PFNGLVERTEX2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLVERTEX2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLVERTEX2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort* v);$/;"	t
PFNGLVERTEX2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort *v);$/;"	t
PFNGLVERTEX3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEX3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEX3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble* v);$/;"	t
PFNGLVERTEX3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble *v);$/;"	t
PFNGLVERTEX3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEX3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEX3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat* v);$/;"	t
PFNGLVERTEX3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat *v);$/;"	t
PFNGLVERTEX3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEX3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEX3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const GLint* v);$/;"	t
PFNGLVERTEX3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const GLint *v);$/;"	t
PFNGLVERTEX3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEX3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEX3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort* v);$/;"	t
PFNGLVERTEX3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort *v);$/;"	t
PFNGLVERTEX4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEX4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEX4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble* v);$/;"	t
PFNGLVERTEX4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble *v);$/;"	t
PFNGLVERTEX4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEX4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEX4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat* v);$/;"	t
PFNGLVERTEX4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat *v);$/;"	t
PFNGLVERTEX4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEX4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEX4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const GLint* v);$/;"	t
PFNGLVERTEX4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const GLint *v);$/;"	t
PFNGLVERTEX4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEX4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEX4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort* v);$/;"	t
PFNGLVERTEX4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB1DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB1FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB1SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB4FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIB4SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBDIVISORPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXATTRIBP1UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP1UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXP2UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP2UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);$/;"	t
PFNGLVERTEXP3UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP3UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);$/;"	t
PFNGLVERTEXP4UIPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP4UIVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);$/;"	t
PFNGLVERTEXPOINTERPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);$/;"	t
PFNGLVERTEXPOINTERPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVIEWPORTPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLVIEWPORTPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLWAITSYNCPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLWAITSYNCPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLWINDOWPOS2DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLWINDOWPOS2DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);$/;"	t
PFNGLWINDOWPOS2DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const GLdouble* v);$/;"	t
PFNGLWINDOWPOS2DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const GLdouble *v);$/;"	t
PFNGLWINDOWPOS2FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLWINDOWPOS2FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);$/;"	t
PFNGLWINDOWPOS2FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const GLfloat* v);$/;"	t
PFNGLWINDOWPOS2FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const GLfloat *v);$/;"	t
PFNGLWINDOWPOS2IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);$/;"	t
PFNGLWINDOWPOS2IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);$/;"	t
PFNGLWINDOWPOS2IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const GLint* v);$/;"	t
PFNGLWINDOWPOS2IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const GLint *v);$/;"	t
PFNGLWINDOWPOS2SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLWINDOWPOS2SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);$/;"	t
PFNGLWINDOWPOS2SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const GLshort* v);$/;"	t
PFNGLWINDOWPOS2SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const GLshort *v);$/;"	t
PFNGLWINDOWPOS3DPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLWINDOWPOS3DPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLWINDOWPOS3DVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const GLdouble* v);$/;"	t
PFNGLWINDOWPOS3DVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const GLdouble *v);$/;"	t
PFNGLWINDOWPOS3FPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLWINDOWPOS3FPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLWINDOWPOS3FVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const GLfloat* v);$/;"	t
PFNGLWINDOWPOS3FVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const GLfloat *v);$/;"	t
PFNGLWINDOWPOS3IPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLWINDOWPOS3IPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);$/;"	t
PFNGLWINDOWPOS3IVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const GLint* v);$/;"	t
PFNGLWINDOWPOS3IVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const GLint *v);$/;"	t
PFNGLWINDOWPOS3SPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLWINDOWPOS3SPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLWINDOWPOS3SVPROC	support/GLFW/deps/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const GLshort* v);$/;"	t
PFNGLWINDOWPOS3SVPROC	support/glad/glad.h	/^typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const GLshort *v);$/;"	t
PFNGLXCREATECONTEXTATTRIBSARBPROC	support/GLFW/src/glx_context.h	/^typedef GLXContext (*PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display*,GLXFBConfig,GLXContext,Bool,const int*);$/;"	t
PFNGLXCREATENEWCONTEXTPROC	support/GLFW/src/glx_context.h	/^typedef GLXContext (*PFNGLXCREATENEWCONTEXTPROC)(Display*,GLXFBConfig,int,GLXContext,Bool);$/;"	t
PFNGLXCREATEWINDOWPROC	support/GLFW/src/glx_context.h	/^typedef GLXWindow (*PFNGLXCREATEWINDOWPROC)(Display*,GLXFBConfig,Window,const int*);$/;"	t
PFNGLXDESTROYCONTEXTPROC	support/GLFW/src/glx_context.h	/^typedef void (*PFNGLXDESTROYCONTEXTPROC)(Display*,GLXContext);$/;"	t
PFNGLXDESTROYWINDOWPROC	support/GLFW/src/glx_context.h	/^typedef void (*PFNGLXDESTROYWINDOWPROC)(Display*,GLXWindow);$/;"	t
PFNGLXGETCLIENTSTRINGPROC	support/GLFW/src/glx_context.h	/^typedef const char* (*PFNGLXGETCLIENTSTRINGPROC)(Display*,int);$/;"	t
PFNGLXGETFBCONFIGATTRIBPROC	support/GLFW/src/glx_context.h	/^typedef int (*PFNGLXGETFBCONFIGATTRIBPROC)(Display*,GLXFBConfig,int,int*);$/;"	t
PFNGLXGETFBCONFIGSPROC	support/GLFW/src/glx_context.h	/^typedef GLXFBConfig* (*PFNGLXGETFBCONFIGSPROC)(Display*,int,int*);$/;"	t
PFNGLXGETPROCADDRESSPROC	support/GLFW/src/glx_context.h	/^typedef __GLXextproc (* PFNGLXGETPROCADDRESSPROC)(const GLubyte *procName);$/;"	t
PFNGLXGETPROCADDRESSPROC_PRIVATE	support/glad/glad.c	/^typedef void* (APIENTRYP PFNGLXGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	file:
PFNGLXGETVISUALFROMFBCONFIGPROC	support/GLFW/src/glx_context.h	/^typedef XVisualInfo* (*PFNGLXGETVISUALFROMFBCONFIGPROC)(Display*,GLXFBConfig);$/;"	t
PFNGLXMAKECURRENTPROC	support/GLFW/src/glx_context.h	/^typedef Bool (*PFNGLXMAKECURRENTPROC)(Display*,GLXDrawable,GLXContext);$/;"	t
PFNGLXQUERYEXTENSIONPROC	support/GLFW/src/glx_context.h	/^typedef Bool (*PFNGLXQUERYEXTENSIONPROC)(Display*,int*,int*);$/;"	t
PFNGLXQUERYEXTENSIONSSTRINGPROC	support/GLFW/src/glx_context.h	/^typedef const char* (*PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display*,int);$/;"	t
PFNGLXQUERYVERSIONPROC	support/GLFW/src/glx_context.h	/^typedef Bool (*PFNGLXQUERYVERSIONPROC)(Display*,int*,int*);$/;"	t
PFNGLXSWAPBUFFERSPROC	support/GLFW/src/glx_context.h	/^typedef void (*PFNGLXSWAPBUFFERSPROC)(Display*,GLXDrawable);$/;"	t
PFNGLXSWAPINTERVALEXTPROC	support/GLFW/src/glx_context.h	/^typedef void (*PFNGLXSWAPINTERVALEXTPROC)(Display*,GLXDrawable,int);$/;"	t
PFNGLXSWAPINTERVALMESAPROC	support/GLFW/src/glx_context.h	/^typedef int (*PFNGLXSWAPINTERVALMESAPROC)(int);$/;"	t
PFNGLXSWAPINTERVALSGIPROC	support/GLFW/src/glx_context.h	/^typedef int (*PFNGLXSWAPINTERVALSGIPROC)(int);$/;"	t
PFNNVCREATEOPTICALFLOWCUDA	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVCREATEOPTICALFLOWCUDA) (CUcontext device, NvOFHandle *hOf);$/;"	t
PFNNVOFCREATEGPUBUFFERCUDA	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFCREATEGPUBUFFERCUDA) (NvOFHandle hOf, const NV_OF_BUFFER_DESCRIPTOR *bufferDesc,$/;"	t
PFNNVOFDESTROY	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFDESTROY) (NvOFHandle hOf);$/;"	t
PFNNVOFDESTROYGPUBUFFERCUDA	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFDESTROYGPUBUFFERCUDA) (NvOFGPUBufferHandle buffer);$/;"	t
PFNNVOFEXECUTE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFEXECUTE) (NvOFHandle hOf, const NV_OF_EXECUTE_INPUT_PARAMS *executeInParams, NV_OF_EXECUTE_OUTPUT_PARAMS *executeOutParams);$/;"	t
PFNNVOFGETCAPS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFGETCAPS) (NvOFHandle hOf, NV_OF_CAPS capsParam, uint32_t *capsVal, uint32_t *size);$/;"	t
PFNNVOFGETLASTERROR	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFGETLASTERROR) (NvOFHandle hOf, char lastError[], uint32_t *size);$/;"	t
PFNNVOFGPUBUFFERGETCUARRAY	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef CUarray(NVOFAPI* PFNNVOFGPUBUFFERGETCUARRAY) (NvOFGPUBufferHandle ofGpuBuffer);$/;"	t
PFNNVOFGPUBUFFERGETCUDEVICEPTR	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef CUdeviceptr(NVOFAPI* PFNNVOFGPUBUFFERGETCUDEVICEPTR) (NvOFGPUBufferHandle ofGpuBuffer);$/;"	t
PFNNVOFINIT	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFINIT) (NvOFHandle hOf, const NV_OF_INIT_PARAMS *initParams);$/;"	t
PFNNVOFSETIOCUDASTREAMS	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNNVOFSETIOCUDASTREAMS) (NvOFHandle hOf, CUstream inputStream, CUstream outputStream);$/;"	t
PFNVOFGPUBUFFERGETSTRIDEINFO	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef NV_OF_STATUS(NVOFAPI* PFNVOFGPUBUFFERGETSTRIDEINFO) (NvOFGPUBufferHandle ofGpuBuffer, NV_OF_CUDA_BUFFER_STRIDE_INFO *strideInfo);$/;"	t
PFNWGLCREATECONTEXTATTRIBSARBPROC	support/GLFW/src/wgl_context.h	/^typedef HGLRC (WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC,HGLRC,const int*);$/;"	t
PFNWGLGETEXTENSIONSSTRINGARBPROC	support/GLFW/src/wgl_context.h	/^typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC)(HDC);$/;"	t
PFNWGLGETEXTENSIONSSTRINGEXTPROC	support/GLFW/src/wgl_context.h	/^typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC)(void);$/;"	t
PFNWGLGETPIXELFORMATATTRIBIVARBPROC	support/GLFW/src/wgl_context.h	/^typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC)(HDC,int,int,UINT,const int*,int*);$/;"	t
PFNWGLGETPROCADDRESSPROC_PRIVATE	support/glad/glad.c	/^typedef void* (APIENTRYP PFNWGLGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	file:
PFNWGLSWAPINTERVALEXTPROC	support/GLFW/src/wgl_context.h	/^typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC)(int);$/;"	t
PFN_LMGetKbdType	support/GLFW/src/cocoa_platform.h	/^typedef UInt8 (*PFN_LMGetKbdType)(void);$/;"	t
PFN_TISCopyCurrentKeyboardLayoutInputSource	support/GLFW/src/cocoa_platform.h	/^typedef TISInputSourceRef (*PFN_TISCopyCurrentKeyboardLayoutInputSource)(void);$/;"	t
PFN_TISGetInputSourceProperty	support/GLFW/src/cocoa_platform.h	/^typedef void* (*PFN_TISGetInputSourceProperty)(TISInputSourceRef,CFStringRef);$/;"	t
PFN_vkAcquireNextImageKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex);$/;"	t
PFN_vkAllocateCommandBuffers	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkAllocateDescriptorSets	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);$/;"	t
PFN_vkAllocateMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateMemory)(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);$/;"	t
PFN_vkAllocationFunction	support/GLFW/deps/vulkan/vulkan.h	/^typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)($/;"	t
PFN_vkBeginCommandBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo);$/;"	t
PFN_vkBindBufferMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);$/;"	t
PFN_vkBindImageMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);$/;"	t
PFN_vkCmdBeginQuery	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);$/;"	t
PFN_vkCmdBeginRenderPass	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);$/;"	t
PFN_vkCmdBindDescriptorSets	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets);$/;"	t
PFN_vkCmdBindIndexBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);$/;"	t
PFN_vkCmdBindPipeline	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);$/;"	t
PFN_vkCmdBindVertexBuffers	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets);$/;"	t
PFN_vkCmdBlitImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter);$/;"	t
PFN_vkCmdClearAttachments	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects);$/;"	t
PFN_vkCmdClearColorImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);$/;"	t
PFN_vkCmdClearDepthStencilImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);$/;"	t
PFN_vkCmdCopyBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions);$/;"	t
PFN_vkCmdCopyBufferToImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyImageToBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyQueryPoolResults	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);$/;"	t
PFN_vkCmdDispatch	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t x, uint32_t y, uint32_t z);$/;"	t
PFN_vkCmdDispatchIndirect	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);$/;"	t
PFN_vkCmdDraw	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);$/;"	t
PFN_vkCmdDrawIndexed	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);$/;"	t
PFN_vkCmdDrawIndexedIndirect	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);$/;"	t
PFN_vkCmdDrawIndirect	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);$/;"	t
PFN_vkCmdEndQuery	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);$/;"	t
PFN_vkCmdEndRenderPass	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);$/;"	t
PFN_vkCmdExecuteCommands	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkCmdFillBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);$/;"	t
PFN_vkCmdNextSubpass	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);$/;"	t
PFN_vkCmdPipelineBarrier	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);$/;"	t
PFN_vkCmdPushConstants	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues);$/;"	t
PFN_vkCmdResetEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);$/;"	t
PFN_vkCmdResetQueryPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);$/;"	t
PFN_vkCmdResolveImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions);$/;"	t
PFN_vkCmdSetBlendConstants	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4]);$/;"	t
PFN_vkCmdSetDepthBias	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);$/;"	t
PFN_vkCmdSetDepthBounds	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);$/;"	t
PFN_vkCmdSetEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);$/;"	t
PFN_vkCmdSetLineWidth	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);$/;"	t
PFN_vkCmdSetScissor	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors);$/;"	t
PFN_vkCmdSetStencilCompareMask	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);$/;"	t
PFN_vkCmdSetStencilReference	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);$/;"	t
PFN_vkCmdSetStencilWriteMask	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);$/;"	t
PFN_vkCmdSetViewport	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports);$/;"	t
PFN_vkCmdUpdateBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const uint32_t* pData);$/;"	t
PFN_vkCmdWaitEvents	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);$/;"	t
PFN_vkCmdWriteTimestamp	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);$/;"	t
PFN_vkCreateAndroidSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateAndroidSurfaceKHR)(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateBuffer)(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);$/;"	t
PFN_vkCreateBufferView	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateBufferView)(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView);$/;"	t
PFN_vkCreateCommandPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateCommandPool)(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);$/;"	t
PFN_vkCreateComputePipelines	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);$/;"	t
PFN_vkCreateDebugReportCallbackEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);$/;"	t
PFN_vkCreateDescriptorPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);$/;"	t
PFN_vkCreateDescriptorSetLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);$/;"	t
PFN_vkCreateDevice	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice);$/;"	t
PFN_vkCreateDisplayModeKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);$/;"	t
PFN_vkCreateDisplayPlaneSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateEvent)(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent);$/;"	t
PFN_vkCreateFence	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateFence)(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);$/;"	t
PFN_vkCreateFramebuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);$/;"	t
PFN_vkCreateGraphicsPipelines	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);$/;"	t
PFN_vkCreateImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateImage)(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage);$/;"	t
PFN_vkCreateImageView	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateImageView)(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView);$/;"	t
PFN_vkCreateInstance	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance);$/;"	t
PFN_vkCreateMirSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateMirSurfaceKHR)(VkInstance instance, const VkMirSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateMirSurfaceKHR	support/GLFW/src/mir_platform.h	/^typedef VkResult (APIENTRY *PFN_vkCreateMirSurfaceKHR)(VkInstance,const VkMirSurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);$/;"	t
PFN_vkCreatePipelineCache	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);$/;"	t
PFN_vkCreatePipelineLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);$/;"	t
PFN_vkCreateQueryPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);$/;"	t
PFN_vkCreateRenderPass	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass)(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);$/;"	t
PFN_vkCreateSampler	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSampler)(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler);$/;"	t
PFN_vkCreateSemaphore	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSemaphore)(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);$/;"	t
PFN_vkCreateShaderModule	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateShaderModule)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);$/;"	t
PFN_vkCreateSharedSwapchainsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);$/;"	t
PFN_vkCreateSwapchainKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);$/;"	t
PFN_vkCreateWaylandSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateWaylandSurfaceKHR)(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateWaylandSurfaceKHR	support/GLFW/src/wl_platform.h	/^typedef VkResult (APIENTRY *PFN_vkCreateWaylandSurfaceKHR)(VkInstance,const VkWaylandSurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);$/;"	t
PFN_vkCreateWin32SurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateWin32SurfaceKHR)(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateWin32SurfaceKHR	support/GLFW/src/win32_platform.h	/^typedef VkResult (APIENTRY *PFN_vkCreateWin32SurfaceKHR)(VkInstance,const VkWin32SurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);$/;"	t
PFN_vkCreateXcbSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateXcbSurfaceKHR)(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateXcbSurfaceKHR	support/GLFW/src/x11_platform.h	/^typedef VkResult (APIENTRY *PFN_vkCreateXcbSurfaceKHR)(VkInstance,const VkXcbSurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);$/;"	t
PFN_vkCreateXlibSurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateXlibSurfaceKHR)(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateXlibSurfaceKHR	support/GLFW/src/x11_platform.h	/^typedef VkResult (APIENTRY *PFN_vkCreateXlibSurfaceKHR)(VkInstance,const VkXlibSurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);$/;"	t
PFN_vkDebugReportCallbackEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)($/;"	t
PFN_vkDebugReportMessageEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage);$/;"	t
PFN_vkDestroyBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyBufferView	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyCommandPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDebugReportCallbackEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDescriptorPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDescriptorSetLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDevice	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyFence	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyFramebuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyImage	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyImageView	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyInstance	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipeline	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipelineCache	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipelineLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyQueryPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyRenderPass	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySampler	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySemaphore	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyShaderModule	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySurfaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySwapchainKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDeviceWaitIdle	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);$/;"	t
PFN_vkEndCommandBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);$/;"	t
PFN_vkEnumerateDeviceExtensionProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);$/;"	t
PFN_vkEnumerateDeviceLayerProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties);$/;"	t
PFN_vkEnumerateInstanceExtensionProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);$/;"	t
PFN_vkEnumerateInstanceExtensionProperties	support/GLFW/src/internal.h	/^  typedef VkResult (APIENTRY * PFN_vkEnumerateInstanceExtensionProperties)(const char*,uint32_t*,VkExtensionProperties*);$/;"	t
PFN_vkEnumerateInstanceLayerProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount, VkLayerProperties* pProperties);$/;"	t
PFN_vkEnumeratePhysicalDevices	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);$/;"	t
PFN_vkFlushMappedMemoryRanges	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);$/;"	t
PFN_vkFreeCommandBuffers	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkFreeDescriptorSets	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets);$/;"	t
PFN_vkFreeFunction	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeFunction)($/;"	t
PFN_vkFreeMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkGetBufferMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);$/;"	t
PFN_vkGetDeviceMemoryCommitment	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);$/;"	t
PFN_vkGetDeviceProcAddr	support/GLFW/deps/vulkan/vulkan.h	/^typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char* pName);$/;"	t
PFN_vkGetDeviceQueue	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);$/;"	t
PFN_vkGetDisplayModePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);$/;"	t
PFN_vkGetDisplayPlaneCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);$/;"	t
PFN_vkGetDisplayPlaneSupportedDisplaysKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays);$/;"	t
PFN_vkGetEventStatus	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);$/;"	t
PFN_vkGetFenceStatus	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);$/;"	t
PFN_vkGetImageMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);$/;"	t
PFN_vkGetImageSparseMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);$/;"	t
PFN_vkGetImageSubresourceLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);$/;"	t
PFN_vkGetInstanceProcAddr	support/GLFW/deps/vulkan/vulkan.h	/^typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char* pName);$/;"	t
PFN_vkGetInstanceProcAddr	support/GLFW/src/internal.h	/^  typedef PFN_vkVoidFunction (APIENTRY * PFN_vkGetInstanceProcAddr)(VkInstance,const char*);$/;"	t
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceFeatures	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);$/;"	t
PFN_vkGetPhysicalDeviceFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);$/;"	t
PFN_vkGetPhysicalDeviceImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);$/;"	t
PFN_vkGetPhysicalDeviceMemoryProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);$/;"	t
PFN_vkGetPhysicalDeviceMirPresentationSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceMirPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, MirConnection* connection);$/;"	t
PFN_vkGetPhysicalDeviceMirPresentationSupportKHR	support/GLFW/src/mir_platform.h	/^typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceMirPresentationSupportKHR)(VkPhysicalDevice,uint32_t,MirConnection*);$/;"	t
PFN_vkGetPhysicalDeviceProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceQueueFamilyProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);$/;"	t
PFN_vkGetPhysicalDeviceSparseImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);$/;"	t
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);$/;"	t
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display);$/;"	t
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR	support/GLFW/src/wl_platform.h	/^typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice,uint32_t,struct wl_display*);$/;"	t
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);$/;"	t
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR	support/GLFW/src/win32_platform.h	/^typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice,uint32_t);$/;"	t
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id);$/;"	t
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR	support/GLFW/src/x11_platform.h	/^typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice,uint32_t,xcb_connection_t*,xcb_visualid_t);$/;"	t
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID);$/;"	t
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR	support/GLFW/src/x11_platform.h	/^typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice,uint32_t,Display*,VisualID);$/;"	t
PFN_vkGetPipelineCacheData	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);$/;"	t
PFN_vkGetQueryPoolResults	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);$/;"	t
PFN_vkGetRenderAreaGranularity	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);$/;"	t
PFN_vkGetSwapchainImagesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages);$/;"	t
PFN_vkInternalAllocationNotification	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)($/;"	t
PFN_vkInternalFreeNotification	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)($/;"	t
PFN_vkInvalidateMappedMemoryRanges	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);$/;"	t
PFN_vkMapMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);$/;"	t
PFN_vkMergePipelineCaches	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches);$/;"	t
PFN_vkQueueBindSparse	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence);$/;"	t
PFN_vkQueuePresentKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR* pPresentInfo);$/;"	t
PFN_vkQueueSubmit	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence);$/;"	t
PFN_vkQueueWaitIdle	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);$/;"	t
PFN_vkReallocationFunction	support/GLFW/deps/vulkan/vulkan.h	/^typedef void* (VKAPI_PTR *PFN_vkReallocationFunction)($/;"	t
PFN_vkResetCommandBuffer	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);$/;"	t
PFN_vkResetCommandPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);$/;"	t
PFN_vkResetDescriptorPool	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);$/;"	t
PFN_vkResetEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);$/;"	t
PFN_vkResetFences	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences);$/;"	t
PFN_vkSetEvent	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);$/;"	t
PFN_vkUnmapMemory	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);$/;"	t
PFN_vkUpdateDescriptorSets	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies);$/;"	t
PFN_vkVoidFunction	support/GLFW/deps/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);$/;"	t
PFN_vkVoidFunction	support/GLFW/src/internal.h	/^typedef void (APIENTRY * PFN_vkVoidFunction)(void);$/;"	t
PFN_vkWaitForFences	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout);$/;"	t
PHONG	cuda/MaterialData.h	/^        PHONG         = 2,$/;"	e	enum:MaterialData::Type
PIZChannelData	support/tinyexr/tinyexr.h	/^struct PIZChannelData {$/;"	s	namespace:tinyexr
PLANE_OBJECT	optixVolumeViewer/volume.h	/^    PLANE_OBJECT  = 1,$/;"	e	enum:ObjectType
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	452;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	455;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	458;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	461;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	467;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	470;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	473;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	476;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	488;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	491;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	494;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	497;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	500;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	503;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	506;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	509;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	512;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	515;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	518;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	521;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	524;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	528;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	531;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	534;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	537;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	540;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	543;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	548;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	551;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	555;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	558;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	437;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	440;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	443;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	446;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	452;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	455;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	458;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	461;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	473;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	476;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	479;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	482;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	485;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	488;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	491;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	494;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	497;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	500;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	503;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	506;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	509;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	513;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	516;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	519;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	522;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	525;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	528;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	533;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	536;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	540;"	d	file:
PLATFORM_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	543;"	d	file:
POINT	cuda/Light.h	/^        POINT   = 0,$/;"	m	class:Light::Type
PPMLoader	sutil/PPMLoader.cpp	/^PPMLoader::PPMLoader( const std::string& filename, const bool vflip )$/;"	f	class:PPMLoader
PPMLoader	sutil/PPMLoader.h	/^class PPMLoader$/;"	c
PROCESS_DPI_AWARENESS	support/GLFW/src/win32_platform.h	/^typedef enum PROCESS_DPI_AWARENESS$/;"	g
PROCESS_DPI_AWARENESS	support/GLFW/src/win32_platform.h	/^} PROCESS_DPI_AWARENESS;$/;"	t	typeref:enum:PROCESS_DPI_AWARENESS
PROCESS_DPI_UNAWARE	support/GLFW/src/win32_platform.h	/^    PROCESS_DPI_UNAWARE = 0,$/;"	e	enum:PROCESS_DPI_AWARENESS
PROCESS_PER_MONITOR_DPI_AWARE	support/GLFW/src/win32_platform.h	/^    PROCESS_PER_MONITOR_DPI_AWARE = 2$/;"	e	enum:PROCESS_DPI_AWARENESS
PROCESS_SYSTEM_DPI_AWARE	support/GLFW/src/win32_platform.h	/^    PROCESS_SYSTEM_DPI_AWARE = 1,$/;"	e	enum:PROCESS_DPI_AWARENESS
PXINPUT_BATTERY_INFORMATION	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_BATTERY_INFORMATION, *PXINPUT_BATTERY_INFORMATION;$/;"	t	typeref:struct:_XINPUT_BATTERY_INFORMATION
PXINPUT_CAPABILITIES	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;$/;"	t	typeref:struct:_XINPUT_CAPABILITIES
PXINPUT_GAMEPAD	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;$/;"	t	typeref:struct:_XINPUT_GAMEPAD
PXINPUT_KEYSTROKE	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_KEYSTROKE, *PXINPUT_KEYSTROKE;$/;"	t	typeref:struct:_XINPUT_KEYSTROKE
PXINPUT_STATE	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_STATE, *PXINPUT_STATE;$/;"	t	typeref:struct:_XINPUT_STATE
PXINPUT_VIBRATION	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_VIBRATION, *PXINPUT_VIBRATION;$/;"	t	typeref:struct:_XINPUT_VIBRATION
PackRange	support/imgui/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentially points to Codepoints.Data)$/;"	m	struct:ImFontBuildSrcData	file:
PackedChars	support/imgui/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	file:
Pair	support/imgui/imgui.h	/^        Pair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::Pair
Pair	support/imgui/imgui.h	/^        Pair(ImGuiID _key, int _val_i)   { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::Pair
Pair	support/imgui/imgui.h	/^        Pair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::Pair
Pair	support/imgui/imgui.h	/^    struct Pair$/;"	s	struct:ImGuiStorage
Parallelogram	cuda/GeometryData.h	/^        Parallelogram( float3 v1, float3 v2, float3 anchor )$/;"	f	struct:GeometryData::Parallelogram
Parallelogram	cuda/GeometryData.h	/^    struct Parallelogram$/;"	s	struct:GeometryData
ParallelogramLight	optixBoundValues/optixBoundValues.h	/^struct ParallelogramLight$/;"	s
ParallelogramLight	optixCutouts/optixCutouts.h	/^struct ParallelogramLight$/;"	s
ParallelogramLight	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct ParallelogramLight$/;"	s
ParallelogramLight	optixMultiGPU/optixMultiGPU.h	/^struct ParallelogramLight$/;"	s
ParallelogramLight	optixNVLink/optixNVLink.h	/^struct ParallelogramLight$/;"	s
ParallelogramLight	optixPathTracer/optixPathTracer.h	/^struct ParallelogramLight$/;"	s
Parameter	support/tinygltf/tiny_gltf.h	/^struct Parameter {$/;"	s	namespace:tinygltf
ParameterMap	support/tinygltf/tiny_gltf.h	/^typedef std::map<std::string, Parameter> ParameterMap;$/;"	t	namespace:tinygltf
Params	optixBoundValues/optixBoundValues.h	/^struct Params$/;"	s
Params	optixCurves/optixCurves.h	/^struct Params$/;"	s
Params	optixCustomPrimitive/optixCustomPrimitive.h	/^struct Params$/;"	s
Params	optixCutouts/optixCutouts.h	/^struct Params$/;"	s
Params	optixDynamicGeometry/optixDynamicGeometry.h	/^struct Params$/;"	s
Params	optixDynamicMaterials/optixDynamicMaterials.h	/^struct Params$/;"	s
Params	optixHello/optixHello.h	/^struct Params$/;"	s
Params	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct Params$/;"	s
Params	optixMotionGeometry/optixMotionGeometry.h	/^struct Params$/;"	s
Params	optixMultiGPU/optixMultiGPU.h	/^struct Params$/;"	s
Params	optixNVLink/optixNVLink.h	/^struct Params$/;"	s
Params	optixOpacityMicromap/optixOpacityMicromap.h	/^struct Params$/;"	s
Params	optixPathTracer/optixPathTracer.h	/^struct Params$/;"	s
Params	optixRaycasting/optixRaycasting.h	/^struct Params$/;"	s
Params	optixRibbons/optixRibbons.h	/^struct Params$/;"	s
Params	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^struct Params$/;"	s
Params	optixSphere/optixSphere.h	/^struct Params$/;"	s
Params	optixTriangle/optixTriangle.h	/^struct Params$/;"	s
Params	optixVolumeViewer/optixVolumeViewer.h	/^struct Params$/;"	s
ParentLayoutType	support/imgui/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the time of Begin()$/;"	m	struct:ImGuiWindowTempData
ParentWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popup window, this is pointing to our parent. Otherwise NULL.$/;"	m	struct:ImGuiWindow
ParentWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*        ParentWindow;   \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
ParseAccessor	support/tinygltf/tiny_gltf.h	/^static bool ParseAccessor(Accessor *accessor, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseAnimation	support/tinygltf/tiny_gltf.h	/^static bool ParseAnimation(Animation *animation, std::string *err,$/;"	f	namespace:tinygltf
ParseAnimationChannel	support/tinygltf/tiny_gltf.h	/^static bool ParseAnimationChannel($/;"	f	namespace:tinygltf
ParseAsset	support/tinygltf/tiny_gltf.h	/^static bool ParseAsset(Asset *asset, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseBooleanProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseBooleanProperty(bool *ret, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseBuffer	support/tinygltf/tiny_gltf.h	/^static bool ParseBuffer(Buffer *buffer, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseBufferView	support/tinygltf/tiny_gltf.h	/^static bool ParseBufferView($/;"	f	namespace:tinygltf
ParseCamera	support/tinygltf/tiny_gltf.h	/^static bool ParseCamera(Camera *camera, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseDracoExtension	support/tinygltf/tiny_gltf.h	/^static bool ParseDracoExtension(Primitive *primitive, Model *model,$/;"	f	namespace:tinygltf
ParseEXRHeader	support/tinyexr/tinyexr.h	/^static int ParseEXRHeader(HeaderInfo *info, bool *empty_header,$/;"	f	namespace:tinyexr
ParseEXRHeaderFromFile	support/tinyexr/tinyexr.h	/^int ParseEXRHeaderFromFile(EXRHeader *exr_header, const EXRVersion *exr_version,$/;"	f
ParseEXRHeaderFromMemory	support/tinyexr/tinyexr.h	/^int ParseEXRHeaderFromMemory(EXRHeader *exr_header, const EXRVersion *version,$/;"	f
ParseEXRMultipartHeaderFromFile	support/tinyexr/tinyexr.h	/^int ParseEXRMultipartHeaderFromFile(EXRHeader ***exr_headers, int *num_headers,$/;"	f
ParseEXRMultipartHeaderFromMemory	support/tinyexr/tinyexr.h	/^int ParseEXRMultipartHeaderFromMemory(EXRHeader ***exr_headers,$/;"	f
ParseEXRVersionFromFile	support/tinyexr/tinyexr.h	/^int ParseEXRVersionFromFile(EXRVersion *version, const char *filename) {$/;"	f
ParseEXRVersionFromMemory	support/tinyexr/tinyexr.h	/^int ParseEXRVersionFromMemory(EXRVersion *version, const unsigned char *memory,$/;"	f
ParseExtensionsProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseExtensionsProperty(ExtensionMap *ret, std::string *err,$/;"	f	namespace:tinygltf
ParseExtrasProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseExtrasProperty(Value *ret, const json &o) {$/;"	f	namespace:tinygltf
ParseFromFile	optixMotionGeometry/tiny_obj_loader.h	/^bool ObjReader::ParseFromFile(const std::string &filename,$/;"	f	class:tinyobj::ObjReader
ParseFromString	optixMotionGeometry/tiny_obj_loader.h	/^bool ObjReader::ParseFromString(const std::string &obj_text,$/;"	f	class:tinyobj::ObjReader
ParseImage	support/tinygltf/tiny_gltf.h	/^static bool ParseImage(Image *image, const int image_idx, std::string *err,$/;"	f	namespace:tinygltf
ParseIntegerArrayProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseIntegerArrayProperty(std::vector<int> *ret, std::string *err,$/;"	f	namespace:tinygltf
ParseIntegerProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseIntegerProperty(int *ret, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseJSONProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseJSONProperty(std::map<std::string, double> *ret,$/;"	f	namespace:tinygltf
ParseJsonAsValue	support/tinygltf/tiny_gltf.h	/^static bool ParseJsonAsValue(Value *ret, const json &o) {$/;"	f	namespace:tinygltf
ParseLight	support/tinygltf/tiny_gltf.h	/^static bool ParseLight(Light *light, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseMaterial	support/tinygltf/tiny_gltf.h	/^static bool ParseMaterial(Material *material, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseMesh	support/tinygltf/tiny_gltf.h	/^static bool ParseMesh(Mesh *mesh, Model *model, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseNode	support/tinygltf/tiny_gltf.h	/^static bool ParseNode(Node *node, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseNormalTextureInfo	support/tinygltf/tiny_gltf.h	/^static bool ParseNormalTextureInfo($/;"	f	namespace:tinygltf
ParseNumberArrayProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseNumberArrayProperty(std::vector<double> *ret, std::string *err,$/;"	f	namespace:tinygltf
ParseNumberProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseNumberProperty(double *ret, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseOcclusionTextureInfo	support/tinygltf/tiny_gltf.h	/^static bool ParseOcclusionTextureInfo($/;"	f	namespace:tinygltf
ParseOrthographicCamera	support/tinygltf/tiny_gltf.h	/^static bool ParseOrthographicCamera($/;"	f	namespace:tinygltf
ParseParameterProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseParameterProperty(Parameter *param, std::string *err,$/;"	f	namespace:tinygltf
ParsePbrMetallicRoughness	support/tinygltf/tiny_gltf.h	/^static bool ParsePbrMetallicRoughness($/;"	f	namespace:tinygltf
ParsePerspectiveCamera	support/tinygltf/tiny_gltf.h	/^static bool ParsePerspectiveCamera($/;"	f	namespace:tinygltf
ParsePrimitive	support/tinygltf/tiny_gltf.h	/^static bool ParsePrimitive(Primitive *primitive, Model *model, std::string *err,$/;"	f	namespace:tinygltf
ParseSampler	support/tinygltf/tiny_gltf.h	/^static bool ParseSampler(Sampler *sampler, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseSkin	support/tinygltf/tiny_gltf.h	/^static bool ParseSkin(Skin *skin, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseSparseAccessor	support/tinygltf/tiny_gltf.h	/^static bool ParseSparseAccessor(Accessor *accessor, std::string *err,$/;"	f	namespace:tinygltf
ParseSpotLight	support/tinygltf/tiny_gltf.h	/^static bool ParseSpotLight(SpotLight *light, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseStringIntegerProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseStringIntegerProperty(std::map<std::string, int> *ret,$/;"	f	namespace:tinygltf
ParseStringProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseStringProperty($/;"	f	namespace:tinygltf
ParseTexture	support/tinygltf/tiny_gltf.h	/^static bool ParseTexture(Texture *texture, std::string *err, const json &o,$/;"	f	namespace:tinygltf
ParseTextureInfo	support/tinygltf/tiny_gltf.h	/^static bool ParseTextureInfo($/;"	f	namespace:tinygltf
ParseTextureNameAndOption	optixMotionGeometry/tiny_obj_loader.h	/^bool ParseTextureNameAndOption(std::string *texname, texture_option_t *texopt,$/;"	f	namespace:tinyobj
ParseUnsignedProperty	support/tinygltf/tiny_gltf.h	/^static bool ParseUnsignedProperty(size_t *ret, std::string *err, const json &o,$/;"	f	namespace:tinygltf
PassFilter	support/imgui/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter
PatchFormatStringFloatToInt	support/imgui/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	file:
PathArcTo	support/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments)$/;"	f	class:ImDrawList
PathArcToFast	support/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12)$/;"	f	class:ImDrawList
PathBezierCurveTo	support/imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments)$/;"	f	class:ImDrawList
PathBezierToCasteljau	support/imgui/imgui_draw.cpp	/^static void PathBezierToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float tess_tol, int level)$/;"	f	file:
PathClear	support/imgui/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0; }$/;"	f	struct:ImDrawList
PathFillConvex	support/imgui/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }  \/\/ Note: Anti-aliased filling requires points to be in clockwise order.$/;"	f	struct:ImDrawList
PathLineTo	support/imgui/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }$/;"	f	struct:ImDrawList
PathLineToMergeDuplicate	support/imgui/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path.Data[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }$/;"	f	struct:ImDrawList
PathRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, int rounding_corners)$/;"	f	class:ImDrawList
PathStroke	support/imgui/imgui.h	/^    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); _Path.Size = 0; }$/;"	f	struct:ImDrawList
PathTracerState	optixBoundValues/optixBoundValues.cpp	/^struct PathTracerState$/;"	s	file:
PathTracerState	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct PathTracerState$/;"	s	file:
PathTracerState	optixMultiGPU/optixMultiGPU.cpp	/^struct PathTracerState$/;"	s	file:
PathTracerState	optixPathTracer/optixPathTracer.cpp	/^struct PathTracerState$/;"	s	file:
PayloadOcclusion	cuda/whitted.h	/^struct PayloadOcclusion$/;"	s	namespace:whitted
PayloadOcclusion	optixVolumeViewer/volume.h	/^struct PayloadOcclusion$/;"	s
PayloadRadiance	cuda/whitted.h	/^struct PayloadRadiance$/;"	s	namespace:whitted
PayloadRadiance	optixVolumeViewer/volume.h	/^struct PayloadRadiance$/;"	s
Pbr	cuda/MaterialData.h	/^    struct Pbr$/;"	s	struct:MaterialData
PbrMetallicRoughness	support/tinygltf/tiny_gltf.h	/^  PbrMetallicRoughness()$/;"	f	struct:tinygltf::PbrMetallicRoughness
PbrMetallicRoughness	support/tinygltf/tiny_gltf.h	/^struct PbrMetallicRoughness {$/;"	s	namespace:tinygltf
PerDeviceSampleState	optixNVLink/optixNVLink.cpp	/^struct PerDeviceSampleState$/;"	s	file:
PerspectiveCamera	support/tinygltf/tiny_gltf.h	/^  PerspectiveCamera()$/;"	f	struct:tinygltf::PerspectiveCamera
PerspectiveCamera	support/tinygltf/tiny_gltf.h	/^struct PerspectiveCamera {$/;"	s	namespace:tinygltf
Phong	cuda/MaterialData.h	/^    struct Phong$/;"	s	struct:MaterialData
PixelSnapH	support/imgui/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH\/V to 1.$/;"	m	struct:ImFontConfig
PixelsToOffsetNorm	support/imgui/imgui.cpp	/^static float PixelsToOffsetNorm(const ImGuiColumnsSet* columns, float offset)$/;"	f	file:
Plane	optixVolumeViewer/optixVolumeViewer.h	/^struct Plane$/;"	s
Plane	optixVolumeViewer/volume.h	/^    struct Plane$/;"	s	struct:GeometryData
PlaneAccel	optixVolumeViewer/optixVolumeViewer.h	/^struct PlaneAccel$/;"	s
PlaneAnimation	optixMotionGeometry/optixMotionGeometry.cpp	/^struct PlaneAnimation {$/;"	s	file:
PlatformImeLastPos	support/imgui/imgui_internal.h	/^    ImVec2                  PlatformImeLastPos;$/;"	m	struct:ImGuiContext
PlatformImePos	support/imgui/imgui_internal.h	/^    ImVec2                  PlatformImePos;                     \/\/ Cursor position request & last passed to the OS Input Method Editor$/;"	m	struct:ImGuiContext
PlotEx	support/imgui/imgui_widgets.cpp	/^void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 frame_size)$/;"	f	class:ImGui
PlotHistogram	support/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)$/;"	f	class:ImGui
PlotHistogram	support/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)$/;"	f	class:ImGui
PlotLines	support/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)$/;"	f	class:ImGui
PlotLines	support/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)$/;"	f	class:ImGui
Plot_ArrayGetter	support/imgui/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	file:
Point	cuda/Light.h	/^    struct Point$/;"	s	class:Light::Type
PointAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    PointAccessor(const UInt32Grid& grid)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
PointAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^class PointAccessor : public DefaultReadAccessor<uint32_t>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointColor	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointColor = 2,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointData	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  PointData = 5,$/;"	m	class:nanovdb::GridType::GridClass
PointId	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointId = 6,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  PointIndex = 4,$/;"	m	class:nanovdb::GridType::GridClass
PointNormal	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointNormal = 3,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointPosition	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointPosition = 1,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointRadius	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointRadius = 4,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PointTreeMarcher	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ PointTreeMarcher(AccT& acc) : BaseT(acc) {}$/;"	f	class:nanovdb::PointTreeMarcher
PointTreeMarcher	optixVolumeViewer/nanovdb/util/HDDA.h	/^class PointTreeMarcher : public TreeMarcher<LeafNode<typename AccT::ValueType>, RayT, AccT, CoordT>$/;"	c	namespace:nanovdb
PointVelocity	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                              PointVelocity = 5,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PopAllowKeyboardFocus	support/imgui/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui
PopButtonRepeat	support/imgui/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui
PopClipRect	support/imgui/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui
PopClipRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList
PopFont	support/imgui/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui
PopID	support/imgui/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui
PopItemFlag	support/imgui/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui
PopItemWidth	support/imgui/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui
PopStyleColor	support/imgui/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui
PopStyleVar	support/imgui/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui
PopTextWrapPos	support/imgui/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui
PopTextureID	support/imgui/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList
PopupBorderSize	support/imgui/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
PopupId	support/imgui/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when this window is used as a popup\/menu (because we use generic Name\/ID for recycling)$/;"	m	struct:ImGuiWindow
PopupId	support/imgui/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
PopupRounding	support/imgui/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)$/;"	m	struct:ImGuiStyle
Pos	support/imgui/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData
Pos	support/imgui/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up to nearest pixel)$/;"	m	struct:ImGuiWindow
Pos	support/imgui/imgui_internal.h	/^    ImVec2      Pos;$/;"	m	struct:ImGuiWindowSettings
Pos	support/imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns
PosCond	support/imgui/imgui_internal.h	/^    ImGuiCond               PosCond;$/;"	m	struct:ImGuiNextWindowData
PosPivotVal	support/imgui/imgui_internal.h	/^    ImVec2                  PosPivotVal;$/;"	m	struct:ImGuiNextWindowData
PosVal	support/imgui/imgui_internal.h	/^    ImVec2                  PosVal;$/;"	m	struct:ImGuiNextWindowData
Pow2	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline T Pow2(T x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
PrevFrameVisible	support/imgui/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar
PrevLineSize	support/imgui/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData
PrevLineTextBaseOffset	support/imgui/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData
Preview	support/imgui/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)$/;"	m	struct:ImGuiPayload
PrimGroup	optixMotionGeometry/tiny_obj_loader.h	/^struct PrimGroup {$/;"	s	namespace:tinyobj
PrimQuadUV	support/imgui/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)$/;"	f	class:ImDrawList
PrimRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList
PrimRectUV	support/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)$/;"	f	class:ImDrawList
PrimReserve	support/imgui/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList
PrimVtx	support/imgui/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }$/;"	f	struct:ImDrawList
PrimWriteIdx	support/imgui/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }$/;"	f	struct:ImDrawList
PrimWriteVtx	support/imgui/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }$/;"	f	struct:ImDrawList
Primitive	support/tinygltf/tiny_gltf.h	/^  Primitive() {$/;"	f	struct:tinygltf::Primitive
Primitive	support/tinygltf/tiny_gltf.h	/^struct Primitive {$/;"	s	namespace:tinygltf
PrintFmt	support/imgui/imgui_widgets.cpp	/^    const char* PrintFmt;   \/\/ Unused$/;"	m	struct:ImGuiDataTypeInfo	file:
PrivateClipboard	support/imgui/imgui_internal.h	/^    ImVector<char>          PrivateClipboard;                   \/\/ If no custom clipboard handler is defined$/;"	m	struct:ImGuiContext
ProgramGroups	optixHair/ProgramGroups.cpp	/^ProgramGroups::ProgramGroups( const OptixDeviceContext    context,$/;"	f	class:ProgramGroups
ProgramGroups	optixHair/ProgramGroups.h	/^class ProgramGroups$/;"	c
ProgramGroups	optixVolumeViewer/optixVolumeViewer.h	/^struct ProgramGroups$/;"	s
ProgressBar	support/imgui/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui
Ptr	support/imgui/imgui_internal.h	/^    ImGuiTabBar*    Ptr;                    \/\/ Either field can be set, not both. Dock node tab bars are loose while BeginTabBar() ones are in a pool.$/;"	m	struct:ImGuiTabBarRef
PushAllowKeyboardFocus	support/imgui/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui
PushButtonRepeat	support/imgui/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui
PushClipRect	support/imgui/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)$/;"	f	class:ImGui
PushClipRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)$/;"	f	class:ImDrawList
PushClipRectFullScreen	support/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList
PushColumnClipRect	support/imgui/imgui.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui
PushFont	support/imgui/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui
PushID	support/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui
PushID	support/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui
PushID	support/imgui/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui
PushID	support/imgui/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui
PushItemFlag	support/imgui/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui
PushItemWidth	support/imgui/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui
PushMultiItemsWidths	support/imgui/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui
PushStyleColor	support/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui
PushStyleColor	support/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui
PushStyleVar	support/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui
PushStyleVar	support/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui
PushTextWrapPos	support/imgui/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui
PushTextureID	support/imgui/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList
QUADRATIC_BSPLINE	optixHair/Hair.h	/^        QUADRATIC_BSPLINE,$/;"	e	enum:Hair::SplineMode
QUADRATIC_CURVE_ARRAY	cuda/GeometryData.h	/^        QUADRATIC_CURVE_ARRAY = 5,$/;"	e	enum:GeometryData::Type
QuadraticInterpolator	cuda/curve.h	/^    __device__ __forceinline__ QuadraticInterpolator() {}$/;"	f	struct:QuadraticInterpolator
QuadraticInterpolator	cuda/curve.h	/^struct QuadraticInterpolator$/;"	s
Quaternion	optixMotionGeometry/motionHelper.hpp	/^Quaternion::Quaternion( const float3& axis, double angle )$/;"	f	class:__anon4::Quaternion
Quaternion	optixMotionGeometry/motionHelper.hpp	/^Quaternion::Quaternion()$/;"	f	class:__anon4::Quaternion
Quaternion	optixMotionGeometry/motionHelper.hpp	/^class Quaternion$/;"	c	namespace:__anon4
Quaternion	sutil/Quaternion.h	/^    Quaternion( const Quaternion& a )$/;"	f	class:sutil::Quaternion
Quaternion	sutil/Quaternion.h	/^    Quaternion( float w, float x, float y, float z )$/;"	f	class:sutil::Quaternion
Quaternion	sutil/Quaternion.h	/^    Quaternion()$/;"	f	class:sutil::Quaternion
Quaternion	sutil/Quaternion.h	/^class Quaternion$/;"	c	namespace:sutil
Quaternion	sutil/Quaternion.h	/^inline Quaternion::Quaternion( const float3& from, const float3& to )$/;"	f	class:sutil::Quaternion
Quaternion	sutil/Quaternion.h	/^inline Quaternion::Quaternion( float angle, const float3&  axis )$/;"	f	class:sutil::Quaternion
QueryExtension	support/GLFW/src/glx_context.h	/^    PFNGLXQUERYEXTENSIONPROC            QueryExtension;$/;"	m	struct:_GLFWlibraryGLX
QueryExtensionsString	support/GLFW/src/glx_context.h	/^    PFNGLXQUERYEXTENSIONSSTRINGPROC     QueryExtensionsString;$/;"	m	struct:_GLFWlibraryGLX
QueryString	support/GLFW/src/egl_context.h	/^    PFNEGLQUERYSTRINGPROC           QueryString;$/;"	m	struct:_GLFWlibraryEGL
QueryVersion	support/GLFW/src/glx_context.h	/^    PFNGLXQUERYVERSIONPROC              QueryVersion;$/;"	m	struct:_GLFWlibraryGLX
RAY_TYPE_COUNT	cuda/whitted.h	/^    RAY_TYPE_COUNT = 2$/;"	e	enum:whitted::RayType
RAY_TYPE_COUNT	optixBoundValues/optixBoundValues.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixMultiGPU/optixMultiGPU.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixNVLink/optixNVLink.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixPathTracer/optixPathTracer.h	/^constexpr unsigned int RAY_TYPE_COUNT = 1;$/;"	v
RAY_TYPE_COUNT	optixRaycasting/optixRaycasting.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    RAY_TYPE_COUNT$/;"	e	enum:RayType
RAY_TYPE_COUNT	optixVolumeViewer/volume.h	/^    RAY_TYPE_COUNT = 2$/;"	e	enum:RayType
RAY_TYPE_OCCLUSION	cuda/whitted.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:whitted::RayType
RAY_TYPE_OCCLUSION	optixBoundValues/optixBoundValues.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:RayType
RAY_TYPE_OCCLUSION	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:RayType
RAY_TYPE_OCCLUSION	optixMultiGPU/optixMultiGPU.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:RayType
RAY_TYPE_OCCLUSION	optixNVLink/optixNVLink.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:RayType
RAY_TYPE_OCCLUSION	optixVolumeViewer/volume.h	/^    RAY_TYPE_OCCLUSION = 1,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	cuda/whitted.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:whitted::RayType
RAY_TYPE_RADIANCE	optixBoundValues/optixBoundValues.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixMultiGPU/optixMultiGPU.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixNVLink/optixNVLink.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixRaycasting/optixRaycasting.h	/^    RAY_TYPE_RADIANCE = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    RAY_TYPE_RADIANCE = 0,$/;"	e	enum:RayType
RAY_TYPE_RADIANCE	optixVolumeViewer/volume.h	/^    RAY_TYPE_RADIANCE  = 0,$/;"	e	enum:RayType
REAL_TYPE	support/tinygltf/tiny_gltf.h	/^  REAL_TYPE = 1,$/;"	e	enum:tinygltf::__anon114
REQUIRE_ACCESSORS	support/tinygltf/tiny_gltf.h	/^  REQUIRE_ACCESSORS = 0x10,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_ALL	support/tinygltf/tiny_gltf.h	/^  REQUIRE_ALL = 0x7f$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_BUFFERS	support/tinygltf/tiny_gltf.h	/^  REQUIRE_BUFFERS = 0x20,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_BUFFER_VIEWS	support/tinygltf/tiny_gltf.h	/^  REQUIRE_BUFFER_VIEWS = 0x40,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_NODES	support/tinygltf/tiny_gltf.h	/^  REQUIRE_NODES = 0x08,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_SCENE	support/tinygltf/tiny_gltf.h	/^  REQUIRE_SCENE = 0x02,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_SCENES	support/tinygltf/tiny_gltf.h	/^  REQUIRE_SCENES = 0x04,$/;"	e	enum:tinygltf::SectionCheck
REQUIRE_VERSION	support/tinygltf/tiny_gltf.h	/^  REQUIRE_VERSION = 0x01,$/;"	e	enum:tinygltf::SectionCheck
RT_MATRIX_ACCESS	sutil/Matrix.h	41;"	d
RT_MATRIX_ACCESS	sutil/Matrix.h	809;"	d
RT_MAT_DECL	sutil/Matrix.h	42;"	d
RT_MAT_DECL	sutil/Matrix.h	810;"	d
RadiancePRD	optixBoundValues/optixBoundValues.h	/^struct RadiancePRD$/;"	s
RadiancePRD	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct RadiancePRD$/;"	s
RadiancePRD	optixPathTracer/optixPathTracer.h	/^struct RadiancePRD$/;"	s
RadioButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui
RadioButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui
Radius	optixHair/Hair.h	/^    enum Radius$/;"	g	class:Hair
Rank	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int  Rank = 0; \/\/ i.e. scalar$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
Rank	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int  Rank = 1; \/\/ i.e. vector$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
RasterizerFlags	support/imgui/imgui.h	/^    unsigned int    RasterizerFlags;        \/\/ 0x00     \/\/ Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.$/;"	m	struct:ImFontConfig
RasterizerMultiply	support/imgui/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.$/;"	m	struct:ImFontConfig
Ray	optixRaycasting/optixRaycastingKernels.h	/^struct Ray$/;"	s
Ray	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray(const Vec3Type& eye = Vec3Type(0, 0, 0),$/;"	f	class:nanovdb::Ray
Ray	optixVolumeViewer/nanovdb/util/Ray.h	/^class Ray$/;"	c	namespace:nanovdb
RayGenData	optixBoundValues/optixBoundValues.h	/^struct RayGenData$/;"	s
RayGenData	optixCurves/optixCurves.h	/^struct RayGenData$/;"	s
RayGenData	optixCustomPrimitive/optixCustomPrimitive.h	/^struct RayGenData$/;"	s
RayGenData	optixCutouts/optixCutouts.h	/^struct RayGenData$/;"	s
RayGenData	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^struct RayGenData$/;"	s
RayGenData	optixDynamicGeometry/optixDynamicGeometry.h	/^struct RayGenData$/;"	s
RayGenData	optixDynamicMaterials/optixDynamicMaterials.h	/^struct RayGenData$/;"	s
RayGenData	optixHello/optixHello.h	/^struct RayGenData$/;"	s
RayGenData	optixModuleCreateAbort/optixModuleCreateAbort.h	/^struct RayGenData$/;"	s
RayGenData	optixMotionGeometry/optixMotionGeometry.h	/^struct RayGenData$/;"	s
RayGenData	optixMultiGPU/optixMultiGPU.h	/^struct RayGenData$/;"	s
RayGenData	optixNVLink/optixNVLink.h	/^struct RayGenData$/;"	s
RayGenData	optixOpacityMicromap/optixOpacityMicromap.h	/^struct RayGenData$/;"	s
RayGenData	optixPathTracer/optixPathTracer.h	/^struct RayGenData$/;"	s
RayGenData	optixRibbons/optixRibbons.h	/^struct RayGenData$/;"	s
RayGenData	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^struct RayGenData$/;"	s
RayGenData	optixSphere/optixSphere.h	/^struct RayGenData$/;"	s
RayGenData	optixTriangle/optixTriangle.h	/^struct RayGenData$/;"	s
RayGenRecord	optixBoundValues/optixBoundValues.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixCallablePrograms/optixCallablePrograms.cpp	/^typedef Record<EmptyData>                    RayGenRecord;$/;"	t	file:
RayGenRecord	optixCutouts/optixCutouts.cpp	/^typedef Record<RayGenData>          RayGenRecord;$/;"	t	file:
RayGenRecord	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixDynamicGeometry/optixDynamicGeometry.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixHair/optixHair.h	/^typedef sutil::EmptyRecord                   RayGenRecord;$/;"	t
RayGenRecord	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixMotionGeometry/optixMotionGeometry.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixMultiGPU/optixMultiGPU.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixNVLink/optixNVLink.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixPathTracer/optixPathTracer.cpp	/^typedef Record<RayGenData>   RayGenRecord;$/;"	t	file:
RayGenRecord	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^typedef Record<RayGenData>         RayGenRecord;$/;"	t	file:
RayGenSbtRecord	optixCurves/optixCurves.cpp	/^typedef SbtRecord<RayGenData>   RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixCustomPrimitive/optixCustomPrimitive.cpp	/^typedef SbtRecord<RayGenData>            RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixDynamicMaterials/optixDynamicMaterials.cpp	/^typedef SbtRecord<RayGenData>   RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixHello/optixHello.cpp	/^typedef SbtRecord<RayGenData> RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixOpacityMicromap/optixOpacityMicromap.cpp	/^typedef SbtRecord<RayGenData>     RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixRibbons/optixRibbons.cpp	/^typedef SbtRecord<RayGenData>   RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixSphere/optixSphere.cpp	/^typedef SbtRecord<RayGenData>   RayGenSbtRecord;$/;"	t	file:
RayGenSbtRecord	optixTriangle/optixTriangle.cpp	/^typedef SbtRecord<RayGenData>     RayGenSbtRecord;$/;"	t	file:
RayType	cuda/whitted.h	/^enum RayType$/;"	g	namespace:whitted
RayType	optixBoundValues/optixBoundValues.h	/^enum RayType$/;"	g
RayType	optixModuleCreateAbort/optixModuleCreateAbort.h	/^enum RayType$/;"	g
RayType	optixMultiGPU/optixMultiGPU.h	/^enum RayType$/;"	g
RayType	optixNVLink/optixNVLink.h	/^enum RayType$/;"	g
RayType	optixRaycasting/optixRaycasting.h	/^enum RayType$/;"	g
RayType	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^enum RayType$/;"	g
RayType	optixVolumeViewer/volume.h	/^enum RayType$/;"	g
RaycastingState	optixRaycasting/optixRaycasting.cpp	/^struct RaycastingState$/;"	s	file:
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ReadAccessor(const RootT& root) : mRoot{&root} {}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ReadAccessor(const RootT& root)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ReadAccessor(const RootT& root)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^class ReadAccessor<ValueT, -1, -1, -1>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^class ReadAccessor<ValueT, 0, 1, 2>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^class ReadAccessor<ValueT, LEVEL0, -1, -1>\/\/ 0, 1, 2$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
ReadAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^class ReadAccessor<ValueT, LEVEL0, LEVEL1, -1>\/\/ (0,1), (1,2), (0,2)$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
ReadAttribute	support/tinyexr/tinyexr.h	/^static bool ReadAttribute(std::string *name, std::string *type,$/;"	f	namespace:tinyexr
ReadChannelInfo	support/tinyexr/tinyexr.h	/^static bool ReadChannelInfo(std::vector<ChannelInfo> &channels,$/;"	f	namespace:tinyexr
ReadLineFn	support/imgui/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line); \/\/ Read: Called for every line of text within an ini entry$/;"	m	struct:ImGuiSettingsHandler
ReadOpenFn	support/imgui/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name);              \/\/ Read: Called when entering into a new ini entry e.g. "[Window][Name]"$/;"	m	struct:ImGuiSettingsHandler
ReadString	support/tinyexr/tinyexr.h	/^static const char *ReadString(std::string *s, const char *ptr, size_t len) {$/;"	f	namespace:tinyexr
ReadWholeFile	support/tinygltf/tiny_gltf.h	/^  ReadWholeFileFunction ReadWholeFile;$/;"	m	struct:tinygltf::FsCallbacks
ReadWholeFile	support/tinygltf/tiny_gltf.h	/^bool ReadWholeFile(std::vector<unsigned char> *out, std::string *err,$/;"	f	namespace:tinygltf
ReadWholeFileFunction	support/tinygltf/tiny_gltf.h	/^typedef bool (*ReadWholeFileFunction)(std::vector<unsigned char> *,$/;"	t	namespace:tinygltf
ReconstructLineOffsets	support/tinyexr/tinyexr.h	/^static bool ReconstructLineOffsets($/;"	f	namespace:tinyexr
Record	optixBoundValues/optixBoundValues.cpp	/^struct Record$/;"	s	file:
Record	optixCallablePrograms/optixCallablePrograms.cpp	/^struct Record$/;"	s	file:
Record	optixCutouts/optixCutouts.cpp	/^struct Record$/;"	s	file:
Record	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^struct Record$/;"	s	file:
Record	optixDynamicGeometry/optixDynamicGeometry.cpp	/^struct Record$/;"	s	file:
Record	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct Record$/;"	s	file:
Record	optixMotionGeometry/optixMotionGeometry.cpp	/^struct Record$/;"	s	file:
Record	optixMultiGPU/optixMultiGPU.cpp	/^struct Record$/;"	s	file:
Record	optixNVLink/optixNVLink.cpp	/^struct Record$/;"	s	file:
Record	optixPathTracer/optixPathTracer.cpp	/^struct Record$/;"	s	file:
Record	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^struct Record$/;"	s	file:
Record	sutil/Record.h	/^struct Record$/;"	s	namespace:sutil
Rect	support/imgui/imgui_internal.h	/^    ImRect      Rect() const                            { return ImRect(Pos.x, Pos.y, Pos.x+Size.x, Pos.y+Size.y); }$/;"	f	struct:ImGuiWindow
RectRel	support/imgui/imgui_internal.h	/^    ImRect        RectRel;      \/\/ Best candidate bounding box in window relative space$/;"	m	struct:ImGuiNavMoveResult
Rects	support/imgui/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size and the packer will give us their position.$/;"	m	struct:ImFontBuildSrcData	file:
RefFrame	support/imgui/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame
Remove	support/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Data[idx].~T(); *(int*)&Data[idx] = FreeIdx; FreeIdx = idx; Map.SetInt(key, -1); }$/;"	f	struct:ImPool
Remove	support/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool
RemoveImageLoader	support/tinygltf/tiny_gltf.h	/^void TinyGLTF::RemoveImageLoader() {$/;"	f	class:tinygltf::TinyGLTF
Render	support/imgui/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui
RenderArrow	support/imgui/imgui.cpp	/^void ImGui::RenderArrow(ImVec2 p_min, ImGuiDir dir, float scale)$/;"	f	class:ImGui
RenderArrowPointingAt	support/imgui/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)$/;"	f	class:ImGui
RenderArrowsForVerticalBar	support/imgui/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float bar_w)$/;"	f	file:
RenderBullet	support/imgui/imgui.cpp	/^void ImGui::RenderBullet(ImVec2 pos)$/;"	f	class:ImGui
RenderChar	support/imgui/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) const$/;"	f	class:ImFont
RenderCheckMark	support/imgui/imgui.cpp	/^void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui
RenderColorRectWithAlphaCheckerboard	support/imgui/imgui_widgets.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags)$/;"	f	class:ImGui
RenderDrawListsFn	support/imgui/imgui.h	/^    void        (*RenderDrawListsFn)(ImDrawData* data);$/;"	m	struct:ImGuiIO
RenderDrawListsFnUnused	support/imgui/imgui.h	/^    void*       RenderDrawListsFnUnused;$/;"	m	struct:ImGuiIO
RenderFrame	support/imgui/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui
RenderFrameBorder	support/imgui/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui
RenderMouseCursor	support/imgui/imgui_draw.cpp	/^void ImGui::RenderMouseCursor(ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor)$/;"	f	class:ImGui
RenderNavHighlight	support/imgui/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui
RenderOuterBorders	support/imgui/imgui.cpp	/^static void ImGui::RenderOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui
RenderPixelEllipsis	support/imgui/imgui_draw.cpp	/^void ImGui::RenderPixelEllipsis(ImDrawList* draw_list, ImVec2 pos, int count, ImU32 col)$/;"	f	class:ImGui
RenderRectFilledRangeH	support/imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)$/;"	f	class:ImGui
RenderText	support/imgui/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)$/;"	f	class:ImGui
RenderText	support/imgui/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip) const$/;"	f	class:ImFont
RenderTextClipped	support/imgui/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)$/;"	f	class:ImGui
RenderTextClippedEx	support/imgui/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_display_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)$/;"	f	class:ImGui
RenderTextWrapped	support/imgui/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)$/;"	f	class:ImGui
Renderer	optixHair/Renderers.cpp	/^Renderer::Renderer( HairState* pState )$/;"	f	class:Renderer
Renderer	optixHair/Renderers.h	/^class Renderer$/;"	c
ReorderRequestDir	support/imgui/imgui_internal.h	/^    int                 ReorderRequestDir;$/;"	m	struct:ImGuiTabBar
ReorderRequestTabId	support/imgui/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar
Reserve	support/imgui/imgui_internal.h	/^    void        Reserve(int capacity)               { Data.reserve(capacity); Map.Data.reserve(capacity); }$/;"	f	struct:ImPool
ResetMouseDragDelta	support/imgui/imgui.cpp	/^void ImGui::ResetMouseDragDelta(int button)$/;"	f	class:ImGui
Resize	support/imgui/imgui_internal.h	/^    void            Resize(int sz)          { Storage.resize((sz + 31) >> 5); memset(Storage.Data, 0, (size_t)Storage.Size * sizeof(Storage.Data[0])); }$/;"	f	struct:ImBoolVector
ResizeBorderHeld	support/imgui/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held for resize (-1: none, otherwise 0-3)$/;"	m	struct:ImGuiWindow
Restore	support/imgui/imgui_internal.h	/^    void Restore() const    { ImGuiWindow* window = GImGui->CurrentWindow; window->DC.LastItemId = LastItemId; window->DC.LastItemStatusFlags = LastItemStatusFlags; window->DC.LastItemRect = LastItemRect; window->DC.LastItemDisplayRect = LastItemDisplayRect; }$/;"	f	struct:ImGuiItemHoveredDataBackup
RootNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^class RootNode : private RootData<ChildT>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
RootWindow	support/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first ancestor that is not a child window.$/;"	m	struct:ImGuiWindow
RootWindowForNav	support/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first ancestor which doesn't have the NavFlattened flag.$/;"	m	struct:ImGuiWindow
RootWindowForTitleBarHighlight	support/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first ancestor which will display TitleBgActive color when this window is active.$/;"	m	struct:ImGuiWindow
Round	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline CoordT Round(const Vec3T<double>& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Round	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline CoordT Round(const Vec3T<float>& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
RoundDown	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline CoordT RoundDown(const Vec3T<RealT>& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
RoundScalarWithFormatT	support/imgui/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui
SAMPLES_ABSOLUTE_INCLUDE_DIRS	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	40;"	d
SAMPLES_CUDA_DIR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	33;"	d
SAMPLES_DIR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	31;"	d
SAMPLES_INPUT_GENERATE_OPTIXIR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	73;"	d
SAMPLES_INPUT_GENERATE_PTX	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	74;"	d
SAMPLES_PTX_DIR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	32;"	d
SAMPLES_RELATIVE_INCLUDE_DIRS	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/sampleConfig.h	36;"	d
SAMPLES_RELATIVE_INCLUDE_DIRS	optixConsole/sampleConfig.h	32;"	d
SAVE_TARGETS	support/GLFW/src/x11_platform.h	/^    Atom            SAVE_TARGETS;$/;"	m	struct:_GLFWlibraryX11
SBT	optixHair/optixHair.h	/^    OptixShaderBindingTable SBT = {};$/;"	m	struct:HairState
SEGMENT_U	optixHair/Hair.h	/^        SEGMENT_U,$/;"	e	enum:Hair::Shade
SETPROCESSDPIAWARENESS_T	support/GLFW/src/win32_platform.h	/^typedef HRESULT (WINAPI * SETPROCESSDPIAWARENESS_T)(PROCESS_DPI_AWARENESS);$/;"	t
SETPROCESSDPIAWARE_T	support/GLFW/src/win32_platform.h	/^typedef BOOL (WINAPI * SETPROCESSDPIAWARE_T)(void);$/;"	t
SGI_swap_control	support/GLFW/src/glx_context.h	/^    GLFWbool        SGI_swap_control;$/;"	m	struct:_GLFWlibraryGLX
SHORTEST_LONG_RUN	support/tinyexr/tinyexr.h	/^const int SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;$/;"	m	namespace:tinyexr
SHORT_ZEROCODE_RUN	support/tinyexr/tinyexr.h	/^const int SHORT_ZEROCODE_RUN = 59;$/;"	m	namespace:tinyexr
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	327;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	346;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
SIMULATE_ID	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	312;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	341;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	61;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
SIMULATE_VERSION_MAJOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	313;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	102;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	307;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	329;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
SIMULATE_VERSION_MINOR	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	344;"	d	file:
SIMULATE_VERSION_PATCH	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
SIZE	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int SIZE = 3;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
SIZE	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int SIZE = 4;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
SIZE	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t SIZE = 1U << (3 * LOG2DIM); \/\/ Number of bits in mask$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
SIZE	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t SIZE = 1u << (3 * LOG2DIM); \/\/ number of tile values (or child pointers)$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
SIZE	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t SIZE = 1u << 3 * LOG2DIM; \/\/ total number of voxels represented by this node$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
SPHERE	cuda/GeometryData.h	/^        SPHERE                = 1,$/;"	e	enum:GeometryData::Type
SPHERE	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    SPHERE=0,$/;"	e	enum:InstanceType	file:
SPHERE_COUNT	optixCutouts/optixCutouts.cpp	/^constexpr int32_t SPHERE_COUNT       = 1;$/;"	v
SPHERE_MAT_COUNT	optixCutouts/optixCutouts.cpp	/^constexpr int32_t SPHERE_MAT_COUNT   = 1;$/;"	v
SPHERE_SHELL	cuda/GeometryData.h	/^        SPHERE_SHELL          = 2,$/;"	e	enum:GeometryData::Type
SRTMotionTransformArray	optixMotionGeometry/motionHelper.hpp	/^    SRTMotionTransformArray( size_t numTransforms = 0, unsigned int numKeys = 2 )$/;"	f	class:__anon4::SRTMotionTransformArray
SRTMotionTransformArray	optixMotionGeometry/motionHelper.hpp	/^class SRTMotionTransformArray : public MotionTransformArrayBase<SRTMotionTransformArray, OptixSRTMotionTransform>$/;"	c	namespace:__anon4
SSE_41_AVAILABLE	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/include/sse_support.h	1;"	d
STBIDEF	support/tinygltf/stb_image.h	343;"	d
STBIDEF	support/tinygltf/stb_image.h	345;"	d
STBIWDEF	support/tinygltf/stb_image_write.h	163;"	d
STBIWDEF	support/tinygltf/stb_image_write.h	166;"	d
STBIWDEF	support/tinygltf/stb_image_write.h	168;"	d
STBIW_ASSERT	support/tinygltf/stb_image_write.h	249;"	d
STBIW_EXTERN	support/tinygltf/stb_image_write.h	293;"	d
STBIW_EXTERN	support/tinygltf/stb_image_write.h	295;"	d
STBIW_FREE	support/tinygltf/stb_image_write.h	234;"	d
STBIW_MALLOC	support/tinygltf/stb_image_write.h	232;"	d
STBIW_MEMMOVE	support/tinygltf/stb_image_write.h	243;"	d
STBIW_REALLOC	support/tinygltf/stb_image_write.h	233;"	d
STBIW_REALLOC_SIZED	support/tinygltf/stb_image_write.h	238;"	d
STBIW_UCHAR	support/tinygltf/stb_image_write.h	252;"	d
STBI_ASSERT	support/tinygltf/stb_image.h	542;"	d
STBI_EXTERN	support/tinygltf/stb_image.h	546;"	d
STBI_EXTERN	support/tinygltf/stb_image.h	548;"	d
STBI_FREE	support/tinygltf/stb_image.h	606;"	d
STBI_HAS_LROTL	support/tinygltf/stb_image.h	586;"	d
STBI_INCLUDE_STB_IMAGE_H	support/tinygltf/stb_image.h	110;"	d
STBI_MALLOC	support/tinygltf/stb_image.h	604;"	d
STBI_NEON	support/tinygltf/stb_image.h	701;"	d
STBI_NOTUSED	support/tinygltf/stb_image.h	580;"	d
STBI_NOTUSED	support/tinygltf/stb_image.h	582;"	d
STBI_NO_BMP	support/tinygltf/stb_image.h	499;"	d
STBI_NO_GIF	support/tinygltf/stb_image.h	508;"	d
STBI_NO_HDR	support/tinygltf/stb_image.h	511;"	d
STBI_NO_JPEG	support/tinygltf/stb_image.h	493;"	d
STBI_NO_PIC	support/tinygltf/stb_image.h	514;"	d
STBI_NO_PNG	support/tinygltf/stb_image.h	496;"	d
STBI_NO_PNM	support/tinygltf/stb_image.h	517;"	d
STBI_NO_PSD	support/tinygltf/stb_image.h	502;"	d
STBI_NO_SIMD	support/tinygltf/stb_image.h	628;"	d
STBI_NO_SIMD	support/tinygltf/stb_image.h	643;"	d
STBI_NO_TGA	support/tinygltf/stb_image.h	505;"	d
STBI_NO_ZLIB	support/tinygltf/stb_image.h	522;"	d
STBI_ORDER_BGR	support/tinygltf/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon95
STBI_ORDER_RGB	support/tinygltf/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon95
STBI_REALLOC	support/tinygltf/stb_image.h	605;"	d
STBI_REALLOC_SIZED	support/tinygltf/stb_image.h	610;"	d
STBI_SIMD_ALIGN	support/tinygltf/stb_image.h	673;"	d
STBI_SIMD_ALIGN	support/tinygltf/stb_image.h	684;"	d
STBI_SIMD_ALIGN	support/tinygltf/stb_image.h	707;"	d
STBI_SIMD_ALIGN	support/tinygltf/stb_image.h	711;"	d
STBI_SSE2	support/tinygltf/stb_image.h	647;"	d
STBI_VERSION	support/tinygltf/stb_image.h	322;"	d
STBI__BYTECAST	support/tinygltf/stb_image.h	1559;"	d
STBI__CASE	support/tinygltf/stb_image.h	1597;"	d
STBI__CASE	support/tinygltf/stb_image.h	1615;"	d
STBI__CASE	support/tinygltf/stb_image.h	1646;"	d
STBI__CASE	support/tinygltf/stb_image.h	1664;"	d
STBI__CASE	support/tinygltf/stb_image.h	4474;"	d
STBI__CASE	support/tinygltf/stb_image.h	4487;"	d
STBI__CASE	support/tinygltf/stb_image.h	4491;"	d
STBI__CASE	support/tinygltf/stb_image.h	4504;"	d
STBI__COMBO	support/tinygltf/stb_image.h	1596;"	d
STBI__COMBO	support/tinygltf/stb_image.h	1645;"	d
STBI__F_avg	support/tinygltf/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon106
STBI__F_avg_first	support/tinygltf/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon106
STBI__F_none	support/tinygltf/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon106
STBI__F_paeth	support/tinygltf/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon106
STBI__F_paeth_first	support/tinygltf/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon106
STBI__F_sub	support/tinygltf/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon106
STBI__F_up	support/tinygltf/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon106
STBI__HDR_BUFLEN	support/tinygltf/stb_image.h	6686;"	d
STBI__IDCT_1D	support/tinygltf/stb_image.h	2230;"	d
STBI__MARKER_none	support/tinygltf/stb_image.h	2715;"	d
STBI__PNG_TYPE	support/tinygltf/stb_image.h	4792;"	d
STBI__RESTART	support/tinygltf/stb_image.h	2732;"	d
STBI__SCAN_header	support/tinygltf/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon97
STBI__SCAN_load	support/tinygltf/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon97
STBI__SCAN_type	support/tinygltf/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon97
STBI__X64_TARGET	support/tinygltf/stb_image.h	615;"	d
STBI__X86_TARGET	support/tinygltf/stb_image.h	617;"	d
STBI__ZFAST_BITS	support/tinygltf/stb_image.h	3852;"	d
STBI__ZFAST_MASK	support/tinygltf/stb_image.h	3853;"	d
STBI_default	support/tinygltf/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon92
STBI_grey	support/tinygltf/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon92
STBI_grey_alpha	support/tinygltf/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon92
STBI_rgb	support/tinygltf/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon92
STBI_rgb_alpha	support/tinygltf/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon92
STBRP_ASSERT	support/imgui/imgui_draw.cpp	119;"	d	file:
STBRP_ASSERT	support/imgui/imstb_rectpack.h	211;"	d
STBRP_DEF	support/imgui/imstb_rectpack.h	69;"	d
STBRP_DEF	support/imgui/imstb_rectpack.h	71;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	support/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon88
STBRP_HEURISTIC_Skyline_BL_sortHeight	support/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon88
STBRP_HEURISTIC_Skyline_default	support/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon88
STBRP_SORT	support/imgui/imgui_draw.cpp	120;"	d	file:
STBRP_SORT	support/imgui/imstb_rectpack.h	206;"	d
STBRP_STATIC	support/imgui/imgui_draw.cpp	118;"	d	file:
STBRP__CDECL	support/imgui/imstb_rectpack.h	217;"	d
STBRP__CDECL	support/imgui/imstb_rectpack.h	220;"	d
STBRP__INIT_skyline	support/imgui/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon89
STBRP__MAXVAL	support/imgui/imstb_rectpack.h	544;"	d
STBRP__MAXVAL	support/imgui/imstb_rectpack.h	546;"	d
STBRP__NOTUSED	support/imgui/imstb_rectpack.h	216;"	d
STBRP__NOTUSED	support/imgui/imstb_rectpack.h	219;"	d
STBTT_DEF	support/imgui/imstb_truetype.h	504;"	d
STBTT_DEF	support/imgui/imstb_truetype.h	506;"	d
STBTT_FIX	support/imgui/imstb_truetype.h	2740;"	d
STBTT_FIXMASK	support/imgui/imstb_truetype.h	2741;"	d
STBTT_FIXSHIFT	support/imgui/imstb_truetype.h	2739;"	d
STBTT_GPOS_TODO_assert	support/imgui/imstb_truetype.h	2426;"	d
STBTT_MACSTYLE_BOLD	support/imgui/imstb_truetype.h	1010;"	d
STBTT_MACSTYLE_DONTCARE	support/imgui/imstb_truetype.h	1009;"	d
STBTT_MACSTYLE_ITALIC	support/imgui/imstb_truetype.h	1011;"	d
STBTT_MACSTYLE_NONE	support/imgui/imstb_truetype.h	1013;"	d
STBTT_MACSTYLE_UNDERSCORE	support/imgui/imstb_truetype.h	1012;"	d
STBTT_MAC_EID_ARABIC	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon75
STBTT_MAC_EID_CHINESE_TRAD	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon75
STBTT_MAC_EID_GREEK	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon75
STBTT_MAC_EID_HEBREW	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon75
STBTT_MAC_EID_JAPANESE	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon75
STBTT_MAC_EID_KOREAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon75
STBTT_MAC_EID_ROMAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon75
STBTT_MAC_EID_RUSSIAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon75
STBTT_MAC_LANG_ARABIC	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon77
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon77
STBTT_MAC_LANG_CHINESE_TRAD	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon77
STBTT_MAC_LANG_DUTCH	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon77
STBTT_MAC_LANG_ENGLISH	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon77
STBTT_MAC_LANG_FRENCH	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon77
STBTT_MAC_LANG_GERMAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon77
STBTT_MAC_LANG_HEBREW	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon77
STBTT_MAC_LANG_ITALIAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon77
STBTT_MAC_LANG_JAPANESE	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon77
STBTT_MAC_LANG_KOREAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon77
STBTT_MAC_LANG_RUSSIAN	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon77
STBTT_MAC_LANG_SPANISH	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon77
STBTT_MAC_LANG_SWEDISH	support/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon77
STBTT_MAX_OVERSAMPLE	support/imgui/imstb_truetype.h	1092;"	d
STBTT_MS_EID_SHIFTJIS	support/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon74
STBTT_MS_EID_SYMBOL	support/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon74
STBTT_MS_EID_UNICODE_BMP	support/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon74
STBTT_MS_EID_UNICODE_FULL	support/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon74
STBTT_MS_LANG_CHINESE	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon76
STBTT_MS_LANG_DUTCH	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon76
STBTT_MS_LANG_ENGLISH	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon76
STBTT_MS_LANG_FRENCH	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon76
STBTT_MS_LANG_GERMAN	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon76
STBTT_MS_LANG_HEBREW	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon76
STBTT_MS_LANG_ITALIAN	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon76
STBTT_MS_LANG_JAPANESE	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon76
STBTT_MS_LANG_KOREAN	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon76
STBTT_MS_LANG_RUSSIAN	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon76
STBTT_MS_LANG_SPANISH	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon76
STBTT_MS_LANG_SWEDISH	support/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon76
STBTT_PLATFORM_ID_ISO	support/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon72
STBTT_PLATFORM_ID_MAC	support/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon72
STBTT_PLATFORM_ID_MICROSOFT	support/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon72
STBTT_PLATFORM_ID_UNICODE	support/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon72
STBTT_POINT_SIZE	support/imgui/imstb_truetype.h	603;"	d
STBTT_RASTERIZER_VERSION	support/imgui/imstb_truetype.h	1102;"	d
STBTT_STATIC	support/imgui/imgui_draw.cpp	141;"	d	file:
STBTT_UNICODE_EID_ISO_10646	support/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon73
STBTT_UNICODE_EID_UNICODE_1_0	support/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon73
STBTT_UNICODE_EID_UNICODE_1_1	support/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon73
STBTT_UNICODE_EID_UNICODE_2_0_BMP	support/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon73
STBTT_UNICODE_EID_UNICODE_2_0_FULL	support/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon73
STBTT__COMPARE	support/imgui/imstb_truetype.h	3237;"	d
STBTT__CSCTX_INIT	support/imgui/imstb_truetype.h	1877;"	d
STBTT__CSERR	support/imgui/imstb_truetype.h	1986;"	d
STBTT__CSERR	support/imgui/imstb_truetype.h	2234;"	d
STBTT__NOTUSED	support/imgui/imstb_truetype.h	1106;"	d
STBTT__NOTUSED	support/imgui/imstb_truetype.h	1108;"	d
STBTT__OVER_MASK	support/imgui/imstb_truetype.h	3850;"	d
STBTT_acos	support/imgui/imstb_truetype.h	461;"	d
STBTT_assert	support/imgui/imgui_draw.cpp	134;"	d	file:
STBTT_assert	support/imgui/imstb_truetype.h	478;"	d
STBTT_cos	support/imgui/imstb_truetype.h	460;"	d
STBTT_fabs	support/imgui/imgui_draw.cpp	138;"	d	file:
STBTT_fabs	support/imgui/imstb_truetype.h	466;"	d
STBTT_fmod	support/imgui/imgui_draw.cpp	135;"	d	file:
STBTT_fmod	support/imgui/imstb_truetype.h	455;"	d
STBTT_free	support/imgui/imgui_draw.cpp	133;"	d	file:
STBTT_free	support/imgui/imstb_truetype.h	473;"	d
STBTT_iceil	support/imgui/imgui_draw.cpp	140;"	d	file:
STBTT_iceil	support/imgui/imstb_truetype.h	444;"	d
STBTT_ifloor	support/imgui/imgui_draw.cpp	139;"	d	file:
STBTT_ifloor	support/imgui/imstb_truetype.h	443;"	d
STBTT_malloc	support/imgui/imgui_draw.cpp	132;"	d	file:
STBTT_malloc	support/imgui/imstb_truetype.h	472;"	d
STBTT_max	support/imgui/imstb_truetype.h	4226;"	d
STBTT_memcpy	support/imgui/imstb_truetype.h	488;"	d
STBTT_memset	support/imgui/imstb_truetype.h	489;"	d
STBTT_min	support/imgui/imstb_truetype.h	4225;"	d
STBTT_pow	support/imgui/imgui_draw.cpp	137;"	d	file:
STBTT_pow	support/imgui/imstb_truetype.h	450;"	d
STBTT_sqrt	support/imgui/imgui_draw.cpp	136;"	d	file:
STBTT_sqrt	support/imgui/imstb_truetype.h	449;"	d
STBTT_strlen	support/imgui/imstb_truetype.h	483;"	d
STBTT_vcubic	support/imgui/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon69
STBTT_vcurve	support/imgui/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon69
STBTT_vline	support/imgui/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon69
STBTT_vmove	support/imgui/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon69
STB_IMAGE_IMPLEMENTATION	optixHair/Head.cpp	40;"	d	file:
STB_IMAGE_IMPLEMENTATION	sutil/sutil.cpp	42;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	optixHair/Head.cpp	42;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	sutil/sutil.cpp	44;"	d	file:
STB_INCLUDE_STB_RECT_PACK_H	support/imgui/imstb_rectpack.h	64;"	d
STB_RECT_PACK_IMPLEMENTATION	support/imgui/imgui_draw.cpp	121;"	d	file:
STB_RECT_PACK_VERSION	support/imgui/imstb_rectpack.h	66;"	d
STB_SPRINTF_IMPLEMENTATION	support/imgui/imgui.cpp	1401;"	d	file:
STB_TEXTEDIT_CHARTYPE	support/imgui/imgui_internal.h	104;"	d
STB_TEXTEDIT_CHARTYPE	support/imgui/imgui_internal.h	106;"	d
STB_TEXTEDIT_CHARTYPE	support/imgui/imstb_textedit.h	295;"	d
STB_TEXTEDIT_DELETECHARS	support/imgui/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)$/;"	f	namespace:ImStb
STB_TEXTEDIT_GETCHAR	support/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->TextW[idx]; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_GETWIDTH	support/imgui/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->TextW[line_start_idx+char_idx]; if (c == '\\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize \/ GImGui->Font->FontSize); }$/;"	f	namespace:ImStb
STB_TEXTEDIT_GETWIDTH_NEWLINE	support/imgui/imgui_internal.h	107;"	d
STB_TEXTEDIT_IMPLEMENTATION	support/imgui/imgui_widgets.cpp	3067;"	d	file:
STB_TEXTEDIT_INSERTCHARS	support/imgui/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)$/;"	f	namespace:ImStb
STB_TEXTEDIT_KEYTOTEXT	support/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x10000 ? 0 : key; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_KEYTYPE	support/imgui/imstb_textedit.h	724;"	d
STB_TEXTEDIT_K_BACKSPACE	support/imgui/imgui_widgets.cpp	3060;"	d	file:
STB_TEXTEDIT_K_DELETE	support/imgui/imgui_widgets.cpp	3059;"	d	file:
STB_TEXTEDIT_K_DOWN	support/imgui/imgui_widgets.cpp	3054;"	d	file:
STB_TEXTEDIT_K_LEFT	support/imgui/imgui_widgets.cpp	3051;"	d	file:
STB_TEXTEDIT_K_LINEEND	support/imgui/imgui_widgets.cpp	3056;"	d	file:
STB_TEXTEDIT_K_LINESTART	support/imgui/imgui_widgets.cpp	3055;"	d	file:
STB_TEXTEDIT_K_REDO	support/imgui/imgui_widgets.cpp	3062;"	d	file:
STB_TEXTEDIT_K_RIGHT	support/imgui/imgui_widgets.cpp	3052;"	d	file:
STB_TEXTEDIT_K_SHIFT	support/imgui/imgui_widgets.cpp	3065;"	d	file:
STB_TEXTEDIT_K_TEXTEND	support/imgui/imgui_widgets.cpp	3058;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	support/imgui/imgui_widgets.cpp	3057;"	d	file:
STB_TEXTEDIT_K_UNDO	support/imgui/imgui_widgets.cpp	3061;"	d	file:
STB_TEXTEDIT_K_UP	support/imgui/imgui_widgets.cpp	3053;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	support/imgui/imgui_widgets.cpp	3063;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	support/imgui/imgui_widgets.cpp	3064;"	d	file:
STB_TEXTEDIT_LAYOUTROW	support/imgui/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)$/;"	f	namespace:ImStb
STB_TEXTEDIT_MOVEWORDLEFT	support/imgui/imgui_widgets.cpp	3001;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	support/imgui/imstb_textedit.h	663;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	support/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_MOVEWORDRIGHT	support/imgui/imgui_widgets.cpp	3002;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	support/imgui/imstb_textedit.h	679;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	support/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	support/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_NEWLINE	support/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	m	namespace:ImStb	file:
STB_TEXTEDIT_POSITIONTYPE	support/imgui/imstb_textedit.h	298;"	d
STB_TEXTEDIT_STRING	support/imgui/imgui_internal.h	103;"	d
STB_TEXTEDIT_STRING	support/imgui/imgui_internal.h	105;"	d
STB_TEXTEDIT_STRINGLEN	support/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }$/;"	f	namespace:ImStb
STB_TEXTEDIT_UNDOCHARCOUNT	support/imgui/imgui_internal.h	109;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	support/imgui/imstb_textedit.h	292;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	support/imgui/imgui_internal.h	108;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	support/imgui/imstb_textedit.h	289;"	d
STB_TEXTEDIT_memmove	support/imgui/imstb_textedit.h	386;"	d
STB_TEXT_HAS_SELECTION	support/imgui/imstb_textedit.h	572;"	d
STB_TRUETYPE_IMPLEMENTATION	support/imgui/imgui_draw.cpp	142;"	d	file:
STB_TexteditState	support/imgui/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon84
STRAND_IDX	optixHair/Hair.h	/^        STRAND_IDX$/;"	e	enum:Hair::Shade
STRAND_U	optixHair/Hair.h	/^        STRAND_U,$/;"	e	enum:Hair::Shade
STRINGIFY	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	448;"	d	file:
STRINGIFY	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	433;"	d	file:
STRINGIFY	sutil/sutil.cpp	821;"	d	file:
STRINGIFY2	sutil/sutil.cpp	822;"	d	file:
STRINGIFY_HELPER	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
STRINGIFY_HELPER	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	432;"	d	file:
STRING_TYPE	support/tinygltf/tiny_gltf.h	/^  STRING_TYPE = 4,$/;"	e	enum:tinygltf::__anon114
SUTILAPI	sutil/sutilapi.h	34;"	d
SUTILAPI	sutil/sutilapi.h	37;"	d
SUTILAPI	sutil/sutilapi.h	40;"	d
SUTILAPI	sutil/sutilapi.h	49;"	d
SUTILAPI	sutil/sutilapi.h	52;"	d
SUTILAPI	sutil/sutilapi.h	55;"	d
SUTILAPI	sutil/sutilapi.h	58;"	d
SUTILCLASSAPI	sutil/sutilapi.h	35;"	d
SUTILCLASSAPI	sutil/sutilapi.h	38;"	d
SUTILCLASSAPI	sutil/sutilapi.h	41;"	d
SUTILCLASSAPI	sutil/sutilapi.h	50;"	d
SUTILCLASSAPI	sutil/sutilapi.h	53;"	d
SUTILCLASSAPI	sutil/sutilapi.h	56;"	d
SUTILCLASSAPI	sutil/sutilapi.h	59;"	d
SUTIL_AABB_ASSERT	sutil/Aabb.h	36;"	d
SUTIL_AABB_ASSERT	sutil/Aabb.h	38;"	d
SUTIL_ASSERT	sutil/Exception.h	125;"	d
SUTIL_ASSERT_FAIL_MSG	sutil/Exception.h	131;"	d
SUTIL_ASSERT_MSG	sutil/Exception.h	128;"	d
SUTIL_HOSTDEVICE	sutil/Preprocessor.h	33;"	d
SUTIL_HOSTDEVICE	sutil/Preprocessor.h	37;"	d
SUTIL_INLINE	sutil/Preprocessor.h	34;"	d
SUTIL_INLINE	sutil/Preprocessor.h	38;"	d
SameLine	support/imgui/imgui.cpp	/^void ImGui::SameLine(float pos_x, float spacing_w)$/;"	f	class:ImGui
SampleState	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    SampleState( uint32_t width, uint32_t height )$/;"	f	struct:SampleState
SampleState	optixDynamicMaterials/optixDynamicMaterials.cpp	/^struct SampleState$/;"	s	file:
Sampler	support/tinygltf/tiny_gltf.h	/^  Sampler()$/;"	f	struct:tinygltf::Sampler
Sampler	support/tinygltf/tiny_gltf.h	/^struct Sampler {$/;"	s	namespace:tinygltf
SaveEXR	support/tinyexr/tinyexr.h	/^int SaveEXR(const float *data, int width, int height, int components,$/;"	f
SaveEXRImageToFile	support/tinyexr/tinyexr.h	/^int SaveEXRImageToFile(const EXRImage *exr_image, const EXRHeader *exr_header,$/;"	f
SaveEXRImageToMemory	support/tinyexr/tinyexr.h	/^size_t SaveEXRImageToMemory(const EXRImage *exr_image,$/;"	f
SaveIniSettingsToDisk	support/imgui/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui
SaveIniSettingsToMemory	support/imgui/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui
SbtRecord	optixCurves/optixCurves.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixCustomPrimitive/optixCustomPrimitive.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixDynamicMaterials/optixDynamicMaterials.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixHello/optixHello.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixOpacityMicromap/optixOpacityMicromap.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixRibbons/optixRibbons.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixSphere/optixSphere.cpp	/^struct SbtRecord$/;"	s	file:
SbtRecord	optixTriangle/optixTriangle.cpp	/^struct SbtRecord$/;"	s	file:
ScalarAsInputTextId	support/imgui/imgui_internal.h	/^    ImGuiID                 ScalarAsInputTextId;                \/\/ Temporary text input when CTRL+clicking on a slider, etc.$/;"	m	struct:ImGuiContext
Scale	optixMotionGeometry/motionHelper.hpp	/^    inline static Matrix3x4 Scale( const float3& s )$/;"	f	struct:__anon4::Matrix3x4
Scale	support/imgui/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()$/;"	m	struct:ImFont
ScaleAllSizes	support/imgui/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle
ScaleClipRects	support/imgui/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData
ScanFmt	support/imgui/imgui_widgets.cpp	/^    const char* ScanFmt;$/;"	m	struct:ImGuiDataTypeInfo	file:
Scene	support/tinygltf/tiny_gltf.h	/^struct Scene {$/;"	s	namespace:tinygltf
Scene	sutil/Scene.cpp	/^Scene::Scene( void ) {}$/;"	f	class:sutil::Scene
Scene	sutil/Scene.h	/^class Scene$/;"	c	namespace:sutil
Scroll	support/imgui/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow
ScrollTarget	support/imgui/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)$/;"	m	struct:ImGuiWindow
ScrollTargetCenterRatio	support/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that target position is at top, 0.5f = scroll so that target position is centered$/;"	m	struct:ImGuiWindow
ScrollToBottom	support/imgui/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	file:
ScrollToBottom	support/imgui/imgui_demo.cpp	/^    bool                ScrollToBottom;$/;"	m	struct:ExampleAppLog	file:
ScrollX	support/imgui/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState
Scrollbar	support/imgui/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui
ScrollbarClickDeltaToGrabCenter	support/imgui/imgui_internal.h	/^    ImVec2                  ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and center of grab box, normalized in parent space. Use storage?$/;"	m	struct:ImGuiContext
ScrollbarRounding	support/imgui/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle
ScrollbarSize	support/imgui/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the horizontal scrollbar.$/;"	m	struct:ImGuiStyle
ScrollbarSizes	support/imgui/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by scrollbars on each axis$/;"	m	struct:ImGuiWindow
ScrollbarX	support/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow
ScrollbarY	support/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow
ScrollingAnim	support/imgui/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar
ScrollingSpeed	support/imgui/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar
ScrollingTarget	support/imgui/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar
ScrollingTargetDistToVisibility	support/imgui/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar
SectionCheck	support/tinygltf/tiny_gltf.h	/^enum SectionCheck {$/;"	g	namespace:tinygltf
Segment	optixVolumeViewer/nanovdb/util/IO.h	/^    Segment(Codec c = Codec::NONE)$/;"	f	struct:nanovdb::io::Codec::Segment
Segment	optixVolumeViewer/nanovdb/util/IO.h	/^struct Segment$/;"	s	class:nanovdb::io::Codec
SelectAll	support/imgui/imgui_internal.h	/^    void                SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end = CurLenW; Stb.has_preferred_x = 0; }$/;"	f	struct:ImGuiInputTextState
SelectScopeId	support/imgui/imgui_internal.h	/^    ImGuiID       SelectScopeId;\/\/ Best candidate window current selectable group ID$/;"	m	struct:ImGuiNavMoveResult
Selectable	support/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)$/;"	f	class:ImGui
Selectable	support/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)$/;"	f	class:ImGui
SelectableTextAlign	support/imgui/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text when selectable is larger than text. Defaults to (0.0f, 0.0f) (top-left aligned).$/;"	m	struct:ImGuiStyle
SelectedAllMouseLock	support/imgui/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we ignore further mouse drags to update selection$/;"	m	struct:ImGuiInputTextState
SelectedTabId	support/imgui/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab$/;"	m	struct:ImGuiTabBar
SelectionEnd	support/imgui/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
SelectionStart	support/imgui/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always] == to SelectionEnd when no selection)$/;"	m	struct:ImGuiInputTextCallbackData
Separator	support/imgui/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui
SerializeExtensionMap	support/tinygltf/tiny_gltf.h	/^static void SerializeExtensionMap(const ExtensionMap &extensions, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfAccessor	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfAccessor(Accessor &accessor, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfAnimation	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfAnimation(Animation &animation, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfAnimationChannel	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfAnimationChannel(AnimationChannel &channel, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfAnimationSampler	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfAnimationSampler(AnimationSampler &sampler, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfAsset	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfAsset(Asset &asset, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfBuffer	support/tinygltf/tiny_gltf.h	/^static bool SerializeGltfBuffer(Buffer &buffer, json &o,$/;"	f	namespace:tinygltf
SerializeGltfBuffer	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfBuffer(Buffer &buffer, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfBufferBin	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfBufferBin(Buffer &buffer, json &o,$/;"	f	namespace:tinygltf
SerializeGltfBufferData	support/tinygltf/tiny_gltf.h	/^static bool SerializeGltfBufferData(const std::vector<unsigned char> &data,$/;"	f	namespace:tinygltf
SerializeGltfBufferData	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfBufferData(const std::vector<unsigned char> &data,$/;"	f	namespace:tinygltf
SerializeGltfBufferView	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfBufferView(BufferView &bufferView, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfCamera	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfCamera(const Camera &camera, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfImage	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfImage(Image &image, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfLight	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfLight(Light &light, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfMaterial	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfMaterial(Material &material, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfMesh	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfMesh(Mesh &mesh, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfModel	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfModel(Model *model, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfNode	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfNode(Node &node, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfNormalTextureInfo	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfNormalTextureInfo(NormalTextureInfo &texinfo,$/;"	f	namespace:tinygltf
SerializeGltfOcclusionTextureInfo	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfOcclusionTextureInfo(OcclusionTextureInfo &texinfo,$/;"	f	namespace:tinygltf
SerializeGltfOrthographicCamera	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfOrthographicCamera(const OrthographicCamera &camera,$/;"	f	namespace:tinygltf
SerializeGltfPbrMetallicRoughness	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfPbrMetallicRoughness(PbrMetallicRoughness &pbr,$/;"	f	namespace:tinygltf
SerializeGltfPerspectiveCamera	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfPerspectiveCamera(const PerspectiveCamera &camera,$/;"	f	namespace:tinygltf
SerializeGltfSampler	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfSampler(Sampler &sampler, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfScene	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfScene(Scene &scene, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfSkin	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfSkin(Skin &skin, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfTexture	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfTexture(Texture &texture, json &o) {$/;"	f	namespace:tinygltf
SerializeGltfTextureInfo	support/tinygltf/tiny_gltf.h	/^static void SerializeGltfTextureInfo(TextureInfo &texinfo, json &o) {$/;"	f	namespace:tinygltf
SerializeNumberArrayProperty	support/tinygltf/tiny_gltf.h	/^static void SerializeNumberArrayProperty(const std::string &key,$/;"	f	namespace:tinygltf
SerializeNumberProperty	support/tinygltf/tiny_gltf.h	/^static void SerializeNumberProperty(const std::string &key, T number,$/;"	f	namespace:tinygltf
SerializeNumberProperty	support/tinygltf/tiny_gltf.h	/^void SerializeNumberProperty(const std::string &key, size_t number, json &obj) {$/;"	f	namespace:tinygltf
SerializeSpotLight	support/tinygltf/tiny_gltf.h	/^static void SerializeSpotLight(SpotLight &spot, json &o) {$/;"	f	namespace:tinygltf
SerializeStringArrayProperty	support/tinygltf/tiny_gltf.h	/^static void SerializeStringArrayProperty(const std::string &key,$/;"	f	namespace:tinygltf
SerializeStringProperty	support/tinygltf/tiny_gltf.h	/^static void SerializeStringProperty(const std::string &key,$/;"	f	namespace:tinygltf
SerializeValue	support/tinygltf/tiny_gltf.h	/^static void SerializeValue(const std::string &key, const Value &value,$/;"	f	namespace:tinygltf
SetActiveID	support/imgui/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui
SetAllInt	support/imgui/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage
SetAllocatorFunctions	support/imgui/imgui.cpp	/^void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data)$/;"	f	class:ImGui
SetAmbient	optixMotionGeometry/tiny_obj_loader.h	/^  void SetAmbient(std::array<double, 3> &a) {$/;"	f	struct:tinyobj::material_t
SetBit	support/imgui/imgui.h	/^    void            SetBit(int n)       { int off = (n >> 5); int mask = 1 << (n & 31); UsedChars[off] |= mask; }               \/\/ Set bit n in the array$/;"	f	struct:ImFontGlyphRangesBuilder
SetBit	support/imgui/imgui_internal.h	/^    void            SetBit(int n, bool v)   { int off = (n >> 5); int mask = 1 << (n & 31); if (v) Storage[off] |= mask; else Storage[off] &= ~mask; }$/;"	f	struct:ImBoolVector
SetBool	support/imgui/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage
SetClipboardText	support/imgui/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui
SetClipboardTextFn	support/imgui/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO
SetClipboardTextFn_DefaultImpl	support/imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	file:
SetColorEditOptions	support/imgui/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui
SetColumnOffset	support/imgui/imgui.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui
SetColumnWidth	support/imgui/imgui.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui
SetCurrentContext	support/imgui/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui
SetCurrentFont	support/imgui/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui
SetCurrentWindow	support/imgui/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	file:
SetCursorPos	support/imgui/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui
SetCursorPosX	support/imgui/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui
SetCursorPosY	support/imgui/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui
SetCursorPosYAndSetupDummyPrevLine	support/imgui/imgui.cpp	/^static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)$/;"	f	file:
SetCursorScreenPos	support/imgui/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui
SetDiffuse	optixMotionGeometry/tiny_obj_loader.h	/^  void SetDiffuse(std::array<double, 3> &a) {$/;"	f	struct:tinyobj::material_t
SetDragDropPayload	support/imgui/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)$/;"	f	class:ImGui
SetErrorMessage	support/tinyexr/tinyexr.h	/^static void SetErrorMessage(const std::string &msg, const char **err) {$/;"	f	namespace:tinyexr
SetFallbackChar	support/imgui/imgui_draw.cpp	/^void ImFont::SetFallbackChar(ImWchar c)$/;"	f	class:ImFont
SetFloat	support/imgui/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage
SetFocusID	support/imgui/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui
SetFsCallbacks	support/tinygltf/tiny_gltf.h	/^void TinyGLTF::SetFsCallbacks(FsCallbacks callbacks) { fs = callbacks; }$/;"	f	class:tinygltf::TinyGLTF
SetHSV	support/imgui/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }$/;"	f	struct:ImColor
SetHoveredID	support/imgui/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui
SetImageLoader	support/tinygltf/tiny_gltf.h	/^void TinyGLTF::SetImageLoader(LoadImageDataFunction func, void *user_data) {$/;"	f	class:tinygltf::TinyGLTF
SetImageWriter	support/tinygltf/tiny_gltf.h	/^void TinyGLTF::SetImageWriter(WriteImageDataFunction func, void *user_data) {$/;"	f	class:tinygltf::TinyGLTF
SetInt	support/imgui/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage
SetItemAllowOverlap	support/imgui/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui
SetItemDefaultFocus	support/imgui/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui
SetKeyboardFocusHere	support/imgui/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui
SetLoggingLevel	optixCompileWithTasks/optixCompileWithTasks.cpp	/^static void SetLoggingLevel( unsigned int level )$/;"	f	file:
SetMouseCursor	support/imgui/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui
SetNavID	support/imgui/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, int nav_layer)$/;"	f	class:ImGui
SetNavIDWithRectRel	support/imgui/imgui.cpp	/^void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, const ImRect& rect_rel)$/;"	f	class:ImGui
SetNextTreeNodeOpen	support/imgui/imgui_widgets.cpp	/^void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowBgAlpha	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui
SetNextWindowCollapsed	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowContentSize	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui
SetNextWindowContentWidth	support/imgui/imgui.h	/^    static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(w, 0.0f)); }$/;"	f	namespace:ImGui
SetNextWindowFocus	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui
SetNextWindowPos	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui
SetNextWindowPosCenter	support/imgui/imgui.h	/^    static inline void  SetNextWindowPosCenter(ImGuiCond c=0) { ImGuiIO& io = GetIO(); SetNextWindowPos(ImVec2(io.DisplaySize.x * 0.5f, io.DisplaySize.y * 0.5f), c, ImVec2(0.5f, 0.5f)); }$/;"	f	namespace:ImGui
SetNextWindowSize	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowSizeConstraints	support/imgui/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)$/;"	f	class:ImGui
SetPreserveImageChannels	support/tinygltf/tiny_gltf.h	/^  void SetPreserveImageChannels(bool onoff) {$/;"	f	class:tinygltf::TinyGLTF
SetProcessDPIAware	support/GLFW/src/win32_platform.h	/^        SETPROCESSDPIAWARE_T          SetProcessDPIAware;$/;"	m	struct:_GLFWlibraryWin32::__anon15
SetProcessDpiAwareness	support/GLFW/src/win32_platform.h	/^        SETPROCESSDPIAWARENESS_T SetProcessDpiAwareness;$/;"	m	struct:_GLFWlibraryWin32::__anon17
SetScrollFromPosY	support/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui
SetScrollHere	support/imgui/imgui.h	/^    static inline void  SetScrollHere(float center_ratio=0.5f){ SetScrollHereY(center_ratio); }$/;"	f	namespace:ImGui
SetScrollHereY	support/imgui/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui
SetScrollX	support/imgui/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui
SetScrollY	support/imgui/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui
SetSerializeDefaultValues	support/tinygltf/tiny_gltf.h	/^  void SetSerializeDefaultValues(const bool enabled) {$/;"	f	class:tinygltf::TinyGLTF
SetSpecular	optixMotionGeometry/tiny_obj_loader.h	/^  void SetSpecular(std::array<double, 3> &a) {$/;"	f	struct:tinyobj::material_t
SetStateStorage	support/imgui/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui
SetStoreOriginalJSONForExtrasAndExtensions	support/tinygltf/tiny_gltf.h	/^  void SetStoreOriginalJSONForExtrasAndExtensions(const bool enabled) {$/;"	f	class:tinygltf::TinyGLTF
SetTabItemClosed	support/imgui/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui
SetTexID	support/imgui/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas
SetTooltip	support/imgui/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui
SetTooltipV	support/imgui/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui
SetTransmittance	optixMotionGeometry/tiny_obj_loader.h	/^  void SetTransmittance(std::array<double, 3> &a) {$/;"	f	struct:tinyobj::material_t
SetUp	optixCompileWithTasks/optixCompileWithTasks.cpp	/^static void SetUp()$/;"	f	file:
SetVoidPtr	support/imgui/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage
SetWindowCollapsed	support/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowCollapsed	support/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowCollapsed	support/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowCollapsedAllowFlags	support/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags;       \/\/ store acceptable condition flags for SetNextWindowCollapsed() use.$/;"	m	struct:ImGuiWindow
SetWindowConditionAllowFlags	support/imgui/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	file:
SetWindowFocus	support/imgui/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui
SetWindowFocus	support/imgui/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui
SetWindowFontScale	support/imgui/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui
SetWindowPos	support/imgui/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowPos	support/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowPos	support/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowPosAllowFlags	support/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags;             \/\/ store acceptable condition flags for SetNextWindowPos() use.$/;"	m	struct:ImGuiWindow
SetWindowPosPivot	support/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for positioning. ImVec2(0,0) when positioning from top-left corner; ImVec2(0.5f,0.5f) for centering; ImVec2(1,1) for bottom right.$/;"	m	struct:ImGuiWindow
SetWindowPosVal	support/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when using a non-zero Pivot (position set needs to be processed when we know the window size)$/;"	m	struct:ImGuiWindow
SetWindowScrollX	support/imgui/imgui.cpp	/^void ImGui::SetWindowScrollX(ImGuiWindow* window, float new_scroll_x)$/;"	f	class:ImGui
SetWindowScrollY	support/imgui/imgui.cpp	/^void ImGui::SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)$/;"	f	class:ImGui
SetWindowSize	support/imgui/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowSize	support/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowSize	support/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowSizeAllowFlags	support/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags;            \/\/ store acceptable condition flags for SetNextWindowSize() use.$/;"	m	struct:ImGuiWindow
SettingsDirtyTimer	support/imgui/imgui_internal.h	/^    float                          SettingsDirtyTimer;          \/\/ Save .ini Settings to memory when time reaches zero$/;"	m	struct:ImGuiContext
SettingsHandlerWindow_ReadLine	support/imgui/imgui.cpp	/^static void SettingsHandlerWindow_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line)$/;"	f	file:
SettingsHandlerWindow_ReadOpen	support/imgui/imgui.cpp	/^static void* SettingsHandlerWindow_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name)$/;"	f	file:
SettingsHandlerWindow_WriteAll	support/imgui/imgui.cpp	/^static void SettingsHandlerWindow_WriteAll(ImGuiContext* imgui_ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* buf)$/;"	f	file:
SettingsHandlers	support/imgui/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler> SettingsHandlers;            \/\/ List of .ini settings handlers$/;"	m	struct:ImGuiContext
SettingsIdx	support/imgui/imgui_internal.h	/^    int                     SettingsIdx;                        \/\/ Index into SettingsWindow[] (indices are always valid as we only grow the array from the back)$/;"	m	struct:ImGuiWindow
SettingsIniData	support/imgui/imgui_internal.h	/^    ImGuiTextBuffer                SettingsIniData;             \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext
SettingsLoaded	support/imgui/imgui_internal.h	/^    bool                           SettingsLoaded;$/;"	m	struct:ImGuiContext
SettingsWindows	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindowSettings>  SettingsWindows;             \/\/ ImGuiWindow .ini settings entries (parsed from the last loaded .ini file and maintained on saving)$/;"	m	struct:ImGuiContext
SetupDrawData	support/imgui/imgui.cpp	/^static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)$/;"	f	file:
Shade	optixHair/Hair.h	/^    enum Shade$/;"	g	class:Hair
ShadeVertsLinearColorGradientKeepAlpha	support/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)$/;"	f	class:ImGui
ShadeVertsLinearUV	support/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, bool clamp)$/;"	f	class:ImGui
ShareLists	support/GLFW/src/wgl_context.h	/^    WGLSHARELISTS_T                     ShareLists;$/;"	m	struct:_GLFWlibraryWGL
ShowAboutWindow	support/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui
ShowAboutWindow	support/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui
ShowDemoWindow	support/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui
ShowDemoWindow	support/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui
ShowDemoWindowColumns	support/imgui/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	file:
ShowDemoWindowLayout	support/imgui/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	file:
ShowDemoWindowMisc	support/imgui/imgui_demo.cpp	/^static void ShowDemoWindowMisc()$/;"	f	file:
ShowDemoWindowPopups	support/imgui/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	file:
ShowDemoWindowWidgets	support/imgui/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	file:
ShowExampleAppAutoResize	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	file:
ShowExampleAppConsole	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	file:
ShowExampleAppConstrainedResize	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	file:
ShowExampleAppCustomRendering	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	file:
ShowExampleAppDocuments	support/imgui/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f
ShowExampleAppLayout	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	file:
ShowExampleAppLog	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	file:
ShowExampleAppLongText	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	file:
ShowExampleAppMainMenuBar	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	file:
ShowExampleAppPropertyEditor	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	file:
ShowExampleAppSimpleOverlay	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	file:
ShowExampleAppWindowTitles	support/imgui/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	file:
ShowExampleMenuFile	support/imgui/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	file:
ShowFontSelector	support/imgui/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui
ShowMetricsWindow	support/imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui
ShowStyleEditor	support/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui
ShowStyleEditor	support/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui
ShowStyleSelector	support/imgui/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui
ShowTestWindow	support/imgui/imgui.h	/^    static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }$/;"	f	namespace:ImGui
ShowUserGuide	support/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui
ShowUserGuide	support/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui
Shutdown	support/imgui/imgui.cpp	/^void ImGui::Shutdown(ImGuiContext* context)$/;"	f	class:ImGui
Sign	support/tinyexr/tinyexr.h	/^    unsigned int Sign : 1;$/;"	m	struct:tinyexr::FP16::__anon62
Sign	support/tinyexr/tinyexr.h	/^    unsigned int Sign : 1;$/;"	m	struct:tinyexr::FP32::__anon61
SimpleMotionBlurState	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^struct SimpleMotionBlurState$/;"	s	file:
Size	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int  Size = 1;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
Size	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const int  Size = T::SIZE;$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
Size	support/imgui/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector
Size	support/imgui/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or collapsed title bar size)$/;"	m	struct:ImGuiWindow
Size	support/imgui/imgui_internal.h	/^    ImVec2      Size;$/;"	m	struct:ImGuiWindowSettings
Size	support/imgui/imgui_widgets.cpp	/^    size_t      Size;$/;"	m	struct:ImGuiDataTypeInfo	file:
Size	support/tinygltf/tiny_gltf.h	/^  size_t Size() const { return (IsArray() ? ArrayLen() : Keys().size()); }$/;"	f	class:tinygltf::Value
SizeCallback	support/imgui/imgui_internal.h	/^    ImGuiSizeCallback       SizeCallback;$/;"	m	struct:ImGuiNextWindowData
SizeCallbackUserData	support/imgui/imgui_internal.h	/^    void*                   SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData
SizeCond	support/imgui/imgui_internal.h	/^    ImGuiCond               SizeCond;$/;"	m	struct:ImGuiNextWindowData
SizeConstraintCond	support/imgui/imgui_internal.h	/^    ImGuiCond               SizeConstraintCond;$/;"	m	struct:ImGuiNextWindowData
SizeConstraintRect	support/imgui/imgui_internal.h	/^    ImRect                  SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData
SizeContents	support/imgui/imgui_internal.h	/^    ImVec2                  SizeContents;                       \/\/ Size of contents (== extents reach of the drawing cursor) from previous frame. Include decoration, window title, border, menu, etc.$/;"	m	struct:ImGuiWindow
SizeContentsExplicit	support/imgui/imgui_internal.h	/^    ImVec2                  SizeContentsExplicit;               \/\/ Size of contents explicitly set by the user via SetNextWindowContentSize()$/;"	m	struct:ImGuiWindow
SizeFull	support/imgui/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow
SizeFullAtLastBegin	support/imgui/imgui_internal.h	/^    ImVec2                  SizeFullAtLastBegin;                \/\/ Copy of SizeFull at the end of Begin. This is the reference value we'll use on the next frame to decide if we need scrollbars.$/;"	m	struct:ImGuiWindow
SizePixels	support/imgui/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (more or less maps to the resulting font height).$/;"	m	struct:ImFontConfig
SizeVal	support/imgui/imgui_internal.h	/^    ImVec2                  SizeVal;$/;"	m	struct:ImGuiNextWindowData
Skin	support/tinygltf/tiny_gltf.h	/^  Skin() {$/;"	f	struct:tinygltf::Skin
Skin	support/tinygltf/tiny_gltf.h	/^struct Skin {$/;"	s	namespace:tinygltf
SkipItems	support/imgui/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely be all clipped (e.g. window not visible or collapsed)$/;"	m	struct:ImGuiWindow
SliderAngle	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format)$/;"	f	class:ImGui
SliderBehavior	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)$/;"	f	class:ImGui
SliderBehaviorT	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)$/;"	f	class:ImGui
SliderCalcRatioFromValueT	support/imgui/imgui_widgets.cpp	/^float ImGui::SliderCalcRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, float power, float linear_zero_pos)$/;"	f	class:ImGui
SliderFloat	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat2	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat3	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat4	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderInt	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt2	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt3	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt4	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderScalar	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
SliderScalarN	support/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
SmallButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui
SourceCache	sutil/sutil.cpp	/^struct SourceCache$/;"	s	namespace:sutil	file:
SourceId	support/imgui/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload
SourceParentId	support/imgui/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload
Spacing	support/imgui/imgui_internal.h	/^    float       Spacing;$/;"	m	struct:ImGuiMenuColumns
Spacing	support/imgui/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui
Sphere	cuda/GeometryData.h	/^    struct Sphere$/;"	s	struct:GeometryData
SphereData	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^struct SphereData$/;"	s
SphereShell	cuda/GeometryData.h	/^    struct SphereShell$/;"	s	struct:GeometryData
SplineMode	optixHair/Hair.h	/^    enum SplineMode$/;"	g	class:Hair
SplitString	optixMotionGeometry/tiny_obj_loader.h	/^static void SplitString(const std::string &s, char delim,$/;"	f	namespace:tinyobj
SplitterBehavior	support/imgui/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)$/;"	f	class:ImGui
SpotLight	support/tinygltf/tiny_gltf.h	/^  SpotLight() : innerConeAngle(0.0), outerConeAngle(0.7853981634) {}$/;"	f	struct:tinygltf::SpotLight
SpotLight	support/tinygltf/tiny_gltf.h	/^struct SpotLight {$/;"	s	namespace:tinygltf
Sqrt	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ double Sqrt(double x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Sqrt	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ float Sqrt(float x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
SrcCount	support/imgui/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destination font.$/;"	m	struct:ImFontBuildDstData	file:
SrcRanges	support/imgui/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to request too much, e.g. 0x0020..0xFFFF)$/;"	m	struct:ImFontBuildSrcData	file:
StackSizesBackup	support/imgui/imgui_internal.h	/^    short                   StackSizesBackup[6];    \/\/ Store size of various stacks for asserting$/;"	m	struct:ImGuiWindowTempData
Staggered	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                  Staggered = 3,$/;"	m	class:nanovdb::GridType::GridClass
StartMaxPosX	support/imgui/imgui_internal.h	/^    float               StartMaxPosX;       \/\/ Copy of CursorMaxPos$/;"	m	struct:ImGuiColumnsSet
StartMouseMovingWindow	support/imgui/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui
StartPosY	support/imgui/imgui.h	/^    float   StartPosY;$/;"	m	struct:ImGuiListClipper
StartPosY	support/imgui/imgui_internal.h	/^    float               StartPosY;          \/\/ Copy of CursorPos$/;"	m	struct:ImGuiColumnsSet
StateStorage	support/imgui/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow
StateStorage	support/imgui/imgui_internal.h	/^    ImGuiStorage*           StateStorage;$/;"	m	struct:ImGuiWindowTempData
StaticWorkDistribution	sutil/WorkDistribution.h	/^class StaticWorkDistribution$/;"	c
Stb	support/imgui/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState
StbFindState	support/imgui/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon86
StbTexteditRow	support/imgui/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon85
StbUndoRecord	support/imgui/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon82
StbUndoState	support/imgui/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon83
Step	support/imgui/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper
StepNo	support/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
Storage	support/imgui/imgui_internal.h	/^    ImVector<int>   Storage;$/;"	m	struct:ImBoolVector
Strdup	support/imgui/imgui_demo.cpp	/^    static char* Strdup(const char *str)                             { size_t len = strlen(str) + 1; void* buf = malloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)str, len); }$/;"	f	struct:ExampleAppConsole
Stricmp	support/imgui/imgui_demo.cpp	/^    static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; } return d; }$/;"	f	struct:ExampleAppConsole
Stride	support/imgui/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	file:
Strnicmp	support/imgui/imgui_demo.cpp	/^    static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; n--; } return d; }$/;"	f	struct:ExampleAppConsole
Strtrim	support/imgui/imgui_demo.cpp	/^    static void  Strtrim(char* str)                                  { char* str_end = str + strlen(str); while (str_end > str && str_end[-1] == ' ') str_end--; *str_end = 0; }$/;"	f	struct:ExampleAppConsole
Style	support/imgui/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext
StyleColorsClassic	support/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleColorsDark	support/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleColorsLight	support/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleModifiers	support/imgui/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleModifiers;                     \/\/ Stack for PushStyleVar()\/PopStyleVar()$/;"	m	struct:ImGuiContext
SubType	support/GLFW/deps/mingw/xinput.h	/^    BYTE SubType;$/;"	m	struct:_XINPUT_CAPABILITIES
SwapBuffers	support/GLFW/src/egl_context.h	/^    PFNEGLSWAPBUFFERSPROC           SwapBuffers;$/;"	m	struct:_GLFWlibraryEGL
SwapBuffers	support/GLFW/src/glx_context.h	/^    PFNGLXSWAPBUFFERSPROC               SwapBuffers;$/;"	m	struct:_GLFWlibraryGLX
SwapInterval	support/GLFW/src/egl_context.h	/^    PFNEGLSWAPINTERVALPROC          SwapInterval;$/;"	m	struct:_GLFWlibraryEGL
SwapIntervalEXT	support/GLFW/src/glx_context.h	/^    PFNGLXSWAPINTERVALEXTPROC           SwapIntervalEXT;$/;"	m	struct:_GLFWlibraryGLX
SwapIntervalEXT	support/GLFW/src/wgl_context.h	/^    PFNWGLSWAPINTERVALEXTPROC           SwapIntervalEXT;$/;"	m	struct:_GLFWlibraryWGL
SwapIntervalMESA	support/GLFW/src/glx_context.h	/^    PFNGLXSWAPINTERVALMESAPROC          SwapIntervalMESA;$/;"	m	struct:_GLFWlibraryGLX
SwapIntervalSGI	support/GLFW/src/glx_context.h	/^    PFNGLXSWAPINTERVALSGIPROC           SwapIntervalSGI;$/;"	m	struct:_GLFWlibraryGLX
TAPERED_R	optixHair/Hair.h	/^        TAPERED_R$/;"	e	enum:Hair::Radius
TARGETS	support/GLFW/src/x11_platform.h	/^    Atom            TARGETS;$/;"	m	struct:_GLFWlibraryX11
TDEFL_COMPUTE_ADLER32	support/tinyexr/tinyexr.h	/^  TDEFL_COMPUTE_ADLER32 = 0x02000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_DEFAULT_MAX_PROBES	support/tinyexr/tinyexr.h	/^  TDEFL_DEFAULT_MAX_PROBES = 128,$/;"	e	enum:tinyexr::miniz::__anon46
TDEFL_FILTER_MATCHES	support/tinyexr/tinyexr.h	/^  TDEFL_FILTER_MATCHES = 0x20000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_FINISH	support/tinyexr/tinyexr.h	/^  TDEFL_FINISH = 4$/;"	e	enum:tinyexr::miniz::__anon52
TDEFL_FORCE_ALL_RAW_BLOCKS	support/tinyexr/tinyexr.h	/^  TDEFL_FORCE_ALL_RAW_BLOCKS = 0x80000$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_FORCE_ALL_STATIC_BLOCKS	support/tinyexr/tinyexr.h	/^  TDEFL_FORCE_ALL_STATIC_BLOCKS = 0x40000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_FULL_FLUSH	support/tinyexr/tinyexr.h	/^  TDEFL_FULL_FLUSH = 3,$/;"	e	enum:tinyexr::miniz::__anon52
TDEFL_GREEDY_PARSING_FLAG	support/tinyexr/tinyexr.h	/^  TDEFL_GREEDY_PARSING_FLAG = 0x04000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_HUFFMAN_ONLY	support/tinyexr/tinyexr.h	/^  TDEFL_HUFFMAN_ONLY = 0,$/;"	e	enum:tinyexr::miniz::__anon46
TDEFL_LESS_MEMORY	support/tinyexr/tinyexr.h	1649;"	d
TDEFL_LEVEL1_HASH_SIZE_MASK	support/tinyexr/tinyexr.h	/^  TDEFL_LEVEL1_HASH_SIZE_MASK = 4095,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_LEVEL1_HASH_SIZE_MASK	support/tinyexr/tinyexr.h	/^  TDEFL_LEVEL1_HASH_SIZE_MASK = 4095,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_LZ_CODE_BUF_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_CODE_BUF_SIZE = 24 * 1024,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_LZ_CODE_BUF_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_CODE_BUF_SIZE = 64 * 1024,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_LZ_DICT_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_DICT_SIZE = 32768,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_LZ_DICT_SIZE_MASK	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_DICT_SIZE_MASK = TDEFL_LZ_DICT_SIZE - 1,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_LZ_HASH_BITS	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_BITS = 12,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_LZ_HASH_BITS	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_BITS = 15,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_LZ_HASH_SHIFT	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_SHIFT = (TDEFL_LZ_HASH_BITS + 2) \/ 3,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_LZ_HASH_SHIFT	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_SHIFT = (TDEFL_LZ_HASH_BITS + 2) \/ 3,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_LZ_HASH_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_SIZE = 1 << TDEFL_LZ_HASH_BITS$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_LZ_HASH_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_LZ_HASH_SIZE = 1 << TDEFL_LZ_HASH_BITS$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_MAX_HUFF_SYMBOLS	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_SYMBOLS = 288,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_MAX_HUFF_SYMBOLS	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_SYMBOLS = 288,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_MAX_HUFF_SYMBOLS_0	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_SYMBOLS_0 = 288,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_MAX_HUFF_SYMBOLS_1	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_SYMBOLS_1 = 32,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_MAX_HUFF_SYMBOLS_2	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_MAX_HUFF_TABLES	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_HUFF_TABLES = 3,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_MAX_MATCH_LEN	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_MATCH_LEN = 258$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_MAX_PROBES_MASK	support/tinyexr/tinyexr.h	/^  TDEFL_MAX_PROBES_MASK = 0xFFF$/;"	e	enum:tinyexr::miniz::__anon46
TDEFL_MAX_SUPPORTED_HUFF_CODESIZE	support/tinyexr/tinyexr.h	/^enum { TDEFL_MAX_SUPPORTED_HUFF_CODESIZE = 32 };$/;"	e	enum:tinyexr::miniz::__anon56
TDEFL_MIN_MATCH_LEN	support/tinyexr/tinyexr.h	/^  TDEFL_MIN_MATCH_LEN = 3,$/;"	e	enum:tinyexr::miniz::__anon48
TDEFL_NONDETERMINISTIC_PARSING_FLAG	support/tinyexr/tinyexr.h	/^  TDEFL_NONDETERMINISTIC_PARSING_FLAG = 0x08000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_NO_FLUSH	support/tinyexr/tinyexr.h	/^  TDEFL_NO_FLUSH = 0,$/;"	e	enum:tinyexr::miniz::__anon52
TDEFL_OUT_BUF_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_OUT_BUF_SIZE = (TDEFL_LZ_CODE_BUF_SIZE * 13) \/ 10,$/;"	e	enum:tinyexr::miniz::__anon49
TDEFL_OUT_BUF_SIZE	support/tinyexr/tinyexr.h	/^  TDEFL_OUT_BUF_SIZE = (TDEFL_LZ_CODE_BUF_SIZE * 13) \/ 10,$/;"	e	enum:tinyexr::miniz::__anon50
TDEFL_PROBE	support/tinyexr/tinyexr.h	3755;"	d
TDEFL_PROBE	support/tinyexr/tinyexr.h	3809;"	d
TDEFL_PUT_BITS	support/tinyexr/tinyexr.h	3298;"	d
TDEFL_PUT_BITS_FAST	support/tinyexr/tinyexr.h	3471;"	d
TDEFL_PUT_BITS_FAST	support/tinyexr/tinyexr.h	3538;"	d
TDEFL_READ_UNALIGNED_WORD	support/tinyexr/tinyexr.h	3739;"	d
TDEFL_RLE_MATCHES	support/tinyexr/tinyexr.h	/^  TDEFL_RLE_MATCHES = 0x10000,$/;"	e	enum:tinyexr::miniz::__anon47
TDEFL_RLE_PREV_CODE_SIZE	support/tinyexr/tinyexr.h	3314;"	d
TDEFL_RLE_ZERO_CODE_SIZE	support/tinyexr/tinyexr.h	3332;"	d
TDEFL_STATUS_BAD_PARAM	support/tinyexr/tinyexr.h	/^  TDEFL_STATUS_BAD_PARAM = -2,$/;"	e	enum:tinyexr::miniz::__anon51
TDEFL_STATUS_DONE	support/tinyexr/tinyexr.h	/^  TDEFL_STATUS_DONE = 1$/;"	e	enum:tinyexr::miniz::__anon51
TDEFL_STATUS_OKAY	support/tinyexr/tinyexr.h	/^  TDEFL_STATUS_OKAY = 0,$/;"	e	enum:tinyexr::miniz::__anon51
TDEFL_STATUS_PUT_BUF_FAILED	support/tinyexr/tinyexr.h	/^  TDEFL_STATUS_PUT_BUF_FAILED = -1,$/;"	e	enum:tinyexr::miniz::__anon51
TDEFL_SYNC_FLUSH	support/tinyexr/tinyexr.h	/^  TDEFL_SYNC_FLUSH = 2,$/;"	e	enum:tinyexr::miniz::__anon52
TDEFL_WRITE_ZLIB_HEADER	support/tinyexr/tinyexr.h	/^  TDEFL_WRITE_ZLIB_HEADER = 0x01000,$/;"	e	enum:tinyexr::miniz::__anon47
TEXTURE_TYPE_CUBE_BACK	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_BACK,$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_CUBE_BOTTOM	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_BOTTOM,$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_CUBE_FRONT	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_FRONT,$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_CUBE_LEFT	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_LEFT,$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_CUBE_RIGHT	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_RIGHT$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_CUBE_TOP	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_CUBE_TOP,$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_NONE	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_NONE,  \/\/ default$/;"	e	enum:tinyobj::__anon5
TEXTURE_TYPE_SPHERE	optixMotionGeometry/tiny_obj_loader.h	/^  TEXTURE_TYPE_SPHERE,$/;"	e	enum:tinyobj::__anon5
TEXTURE_WIDTH	optixNVLink/optixNVLink.cpp	/^const int TEXTURE_WIDTH = 1024;$/;"	v
TILE_HEIGHT	sutil/WorkDistribution.h	/^    static const int32_t TILE_HEIGHT = 4;$/;"	m	class:StaticWorkDistribution
TILE_WIDTH	sutil/WorkDistribution.h	/^    static const int32_t TILE_WIDTH  = 8;$/;"	m	class:StaticWorkDistribution
TIMEGETTIME_T	support/GLFW/src/win32_platform.h	/^typedef DWORD (WINAPI * TIMEGETTIME_T)(void);$/;"	t
TIME_UTC	support/GLFW/deps/tinycthread.h	101;"	d
TIME_UTC	support/GLFW/deps/tinycthread.h	103;"	d
TINFL_BITBUF_SIZE	support/tinyexr/tinyexr.h	1628;"	d
TINFL_BITBUF_SIZE	support/tinyexr/tinyexr.h	1631;"	d
TINFL_CR_BEGIN	support/tinyexr/tinyexr.h	2379;"	d
TINFL_CR_FINISH	support/tinyexr/tinyexr.h	2397;"	d
TINFL_CR_RETURN	support/tinyexr/tinyexr.h	2382;"	d
TINFL_CR_RETURN_FOREVER	support/tinyexr/tinyexr.h	2390;"	d
TINFL_DECOMPRESS_MEM_TO_MEM_FAILED	support/tinyexr/tinyexr.h	1556;"	d
TINFL_FAST_LOOKUP_BITS	support/tinyexr/tinyexr.h	/^  TINFL_FAST_LOOKUP_BITS = 10,$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_FAST_LOOKUP_SIZE	support/tinyexr/tinyexr.h	/^  TINFL_FAST_LOOKUP_SIZE = 1 << TINFL_FAST_LOOKUP_BITS$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_FLAG_COMPUTE_ADLER32	support/tinyexr/tinyexr.h	/^  TINFL_FLAG_COMPUTE_ADLER32 = 8$/;"	e	enum:tinyexr::miniz::__anon42
TINFL_FLAG_HAS_MORE_INPUT	support/tinyexr/tinyexr.h	/^  TINFL_FLAG_HAS_MORE_INPUT = 2,$/;"	e	enum:tinyexr::miniz::__anon42
TINFL_FLAG_PARSE_ZLIB_HEADER	support/tinyexr/tinyexr.h	/^  TINFL_FLAG_PARSE_ZLIB_HEADER = 1,$/;"	e	enum:tinyexr::miniz::__anon42
TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF	support/tinyexr/tinyexr.h	/^  TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 4,$/;"	e	enum:tinyexr::miniz::__anon42
TINFL_GET_BITS	support/tinyexr/tinyexr.h	2440;"	d
TINFL_GET_BYTE	support/tinyexr/tinyexr.h	2404;"	d
TINFL_HUFF_BITBUF_FILL	support/tinyexr/tinyexr.h	2460;"	d
TINFL_HUFF_DECODE	support/tinyexr/tinyexr.h	2488;"	d
TINFL_LZ_DICT_SIZE	support/tinyexr/tinyexr.h	1574;"	d
TINFL_MAX_HUFF_SYMBOLS_0	support/tinyexr/tinyexr.h	/^  TINFL_MAX_HUFF_SYMBOLS_0 = 288,$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_MAX_HUFF_SYMBOLS_1	support/tinyexr/tinyexr.h	/^  TINFL_MAX_HUFF_SYMBOLS_1 = 32,$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_MAX_HUFF_SYMBOLS_2	support/tinyexr/tinyexr.h	/^  TINFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_MAX_HUFF_TABLES	support/tinyexr/tinyexr.h	/^  TINFL_MAX_HUFF_TABLES = 3,$/;"	e	enum:tinyexr::miniz::__anon44
TINFL_MEMCPY	support/tinyexr/tinyexr.h	2376;"	d
TINFL_MEMSET	support/tinyexr/tinyexr.h	2377;"	d
TINFL_NEED_BITS	support/tinyexr/tinyexr.h	2424;"	d
TINFL_SKIP_BITS	support/tinyexr/tinyexr.h	2431;"	d
TINFL_STATUS_ADLER32_MISMATCH	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_ADLER32_MISMATCH = -2,$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_STATUS_BAD_PARAM	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_BAD_PARAM = -3,$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_STATUS_DONE	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_DONE = 0,$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_STATUS_FAILED	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_FAILED = -1,$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_STATUS_HAS_MORE_OUTPUT	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_HAS_MORE_OUTPUT = 2$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_STATUS_NEEDS_MORE_INPUT	support/tinyexr/tinyexr.h	/^  TINFL_STATUS_NEEDS_MORE_INPUT = 1,$/;"	e	enum:tinyexr::miniz::__anon43
TINFL_USE_64BIT_BITBUF	support/tinyexr/tinyexr.h	1623;"	d
TINYCTHREAD_VERSION	support/GLFW/deps/tinycthread.h	135;"	d
TINYCTHREAD_VERSION_MAJOR	support/GLFW/deps/tinycthread.h	131;"	d
TINYCTHREAD_VERSION_MINOR	support/GLFW/deps/tinycthread.h	133;"	d
TINYEXR_COMPRESSIONTYPE_NONE	support/tinyexr/tinyexr.h	132;"	d
TINYEXR_COMPRESSIONTYPE_PIZ	support/tinyexr/tinyexr.h	136;"	d
TINYEXR_COMPRESSIONTYPE_RLE	support/tinyexr/tinyexr.h	133;"	d
TINYEXR_COMPRESSIONTYPE_ZFP	support/tinyexr/tinyexr.h	137;"	d
TINYEXR_COMPRESSIONTYPE_ZIP	support/tinyexr/tinyexr.h	135;"	d
TINYEXR_COMPRESSIONTYPE_ZIPS	support/tinyexr/tinyexr.h	134;"	d
TINYEXR_ERROR_CANT_OPEN_FILE	support/tinyexr/tinyexr.h	115;"	d
TINYEXR_ERROR_CANT_WRITE_FILE	support/tinyexr/tinyexr.h	119;"	d
TINYEXR_ERROR_INVALID_ARGUMENT	support/tinyexr/tinyexr.h	111;"	d
TINYEXR_ERROR_INVALID_DATA	support/tinyexr/tinyexr.h	112;"	d
TINYEXR_ERROR_INVALID_EXR_VERSION	support/tinyexr/tinyexr.h	110;"	d
TINYEXR_ERROR_INVALID_FILE	support/tinyexr/tinyexr.h	113;"	d
TINYEXR_ERROR_INVALID_HEADER	support/tinyexr/tinyexr.h	117;"	d
TINYEXR_ERROR_INVALID_MAGIC_NUMBER	support/tinyexr/tinyexr.h	109;"	d
TINYEXR_ERROR_INVALID_PARAMETER	support/tinyexr/tinyexr.h	114;"	d
TINYEXR_ERROR_SERIALZATION_FAILED	support/tinyexr/tinyexr.h	120;"	d
TINYEXR_ERROR_UNSUPPORTED_FEATURE	support/tinyexr/tinyexr.h	118;"	d
TINYEXR_ERROR_UNSUPPORTED_FORMAT	support/tinyexr/tinyexr.h	116;"	d
TINYEXR_H_	support/tinyexr/tinyexr.h	67;"	d
TINYEXR_IMPLEMENTATION	sutil/sutil.cpp	46;"	d	file:
TINYEXR_IMPLEMENTATION_DEIFNED	support/tinyexr/tinyexr.h	466;"	d
TINYEXR_MAX_CUSTOM_ATTRIBUTES	support/tinyexr/tinyexr.h	130;"	d
TINYEXR_MAX_HEADER_ATTRIBUTES	support/tinyexr/tinyexr.h	129;"	d
TINYEXR_PIXELTYPE_FLOAT	support/tinyexr/tinyexr.h	127;"	d
TINYEXR_PIXELTYPE_HALF	support/tinyexr/tinyexr.h	126;"	d
TINYEXR_PIXELTYPE_UINT	support/tinyexr/tinyexr.h	125;"	d
TINYEXR_SUCCESS	support/tinyexr/tinyexr.h	108;"	d
TINYEXR_TILE_MIPMAP_LEVELS	support/tinyexr/tinyexr.h	144;"	d
TINYEXR_TILE_ONE_LEVEL	support/tinyexr/tinyexr.h	143;"	d
TINYEXR_TILE_RIPMAP_LEVELS	support/tinyexr/tinyexr.h	145;"	d
TINYEXR_TILE_ROUND_DOWN	support/tinyexr/tinyexr.h	147;"	d
TINYEXR_TILE_ROUND_UP	support/tinyexr/tinyexr.h	148;"	d
TINYEXR_USE_MINIZ	support/tinyexr/tinyexr.h	95;"	d
TINYEXR_USE_PIZ	support/tinyexr/tinyexr.h	100;"	d
TINYEXR_USE_ZFP	support/tinyexr/tinyexr.h	104;"	d
TINYEXR_ZFP_COMPRESSIONTYPE_ACCURACY	support/tinyexr/tinyexr.h	141;"	d
TINYEXR_ZFP_COMPRESSIONTYPE_PRECISION	support/tinyexr/tinyexr.h	140;"	d
TINYEXR_ZFP_COMPRESSIONTYPE_RATE	support/tinyexr/tinyexr.h	139;"	d
TINYGLTF_COMPONENT_TYPE_BYTE	support/tinygltf/tiny_gltf.h	103;"	d
TINYGLTF_COMPONENT_TYPE_DOUBLE	support/tinygltf/tiny_gltf.h	110;"	d
TINYGLTF_COMPONENT_TYPE_FLOAT	support/tinygltf/tiny_gltf.h	109;"	d
TINYGLTF_COMPONENT_TYPE_INT	support/tinygltf/tiny_gltf.h	107;"	d
TINYGLTF_COMPONENT_TYPE_SHORT	support/tinygltf/tiny_gltf.h	105;"	d
TINYGLTF_COMPONENT_TYPE_UNSIGNED_BYTE	support/tinygltf/tiny_gltf.h	104;"	d
TINYGLTF_COMPONENT_TYPE_UNSIGNED_INT	support/tinygltf/tiny_gltf.h	108;"	d
TINYGLTF_COMPONENT_TYPE_UNSIGNED_SHORT	support/tinygltf/tiny_gltf.h	106;"	d
TINYGLTF_DOUBLE_EPS	support/tinygltf/tiny_gltf.h	183;"	d
TINYGLTF_DOUBLE_EQUAL	support/tinygltf/tiny_gltf.h	184;"	d
TINYGLTF_IMAGE_FORMAT_BMP	support/tinygltf/tiny_gltf.h	165;"	d
TINYGLTF_IMAGE_FORMAT_GIF	support/tinygltf/tiny_gltf.h	166;"	d
TINYGLTF_IMAGE_FORMAT_JPEG	support/tinygltf/tiny_gltf.h	163;"	d
TINYGLTF_IMAGE_FORMAT_PNG	support/tinygltf/tiny_gltf.h	164;"	d
TINYGLTF_IMPLEMENTATION	optixHair/Head.cpp	34;"	d	file:
TINYGLTF_IMPLEMENTATION	sutil/Scene.cpp	42;"	d	file:
TINYGLTF_INTERNAL_NOMINMAX	support/tinygltf/tiny_gltf.h	1578;"	d
TINYGLTF_INTERNAL_WIN32_LEAN_AND_MEAN	support/tinygltf/tiny_gltf.h	1584;"	d
TINYGLTF_MODE_LINE	support/tinygltf/tiny_gltf.h	96;"	d
TINYGLTF_MODE_LINE_LOOP	support/tinygltf/tiny_gltf.h	97;"	d
TINYGLTF_MODE_LINE_STRIP	support/tinygltf/tiny_gltf.h	98;"	d
TINYGLTF_MODE_POINTS	support/tinygltf/tiny_gltf.h	95;"	d
TINYGLTF_MODE_TRIANGLES	support/tinygltf/tiny_gltf.h	99;"	d
TINYGLTF_MODE_TRIANGLE_FAN	support/tinygltf/tiny_gltf.h	101;"	d
TINYGLTF_MODE_TRIANGLE_STRIP	support/tinygltf/tiny_gltf.h	100;"	d
TINYGLTF_NOEXCEPT	support/tinygltf/tiny_gltf.h	78;"	d
TINYGLTF_NOEXCEPT	support/tinygltf/tiny_gltf.h	80;"	d
TINYGLTF_NOEXCEPT	support/tinygltf/tiny_gltf.h	83;"	d
TINYGLTF_PARAMETER_TYPE_BOOL	support/tinygltf/tiny_gltf.h	140;"	d
TINYGLTF_PARAMETER_TYPE_BOOL_VEC2	support/tinygltf/tiny_gltf.h	141;"	d
TINYGLTF_PARAMETER_TYPE_BOOL_VEC3	support/tinygltf/tiny_gltf.h	142;"	d
TINYGLTF_PARAMETER_TYPE_BOOL_VEC4	support/tinygltf/tiny_gltf.h	143;"	d
TINYGLTF_PARAMETER_TYPE_BYTE	support/tinygltf/tiny_gltf.h	124;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT	support/tinygltf/tiny_gltf.h	130;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_MAT2	support/tinygltf/tiny_gltf.h	145;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_MAT3	support/tinygltf/tiny_gltf.h	146;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_MAT4	support/tinygltf/tiny_gltf.h	147;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_VEC2	support/tinygltf/tiny_gltf.h	132;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_VEC3	support/tinygltf/tiny_gltf.h	133;"	d
TINYGLTF_PARAMETER_TYPE_FLOAT_VEC4	support/tinygltf/tiny_gltf.h	134;"	d
TINYGLTF_PARAMETER_TYPE_INT	support/tinygltf/tiny_gltf.h	128;"	d
TINYGLTF_PARAMETER_TYPE_INT_VEC2	support/tinygltf/tiny_gltf.h	136;"	d
TINYGLTF_PARAMETER_TYPE_INT_VEC3	support/tinygltf/tiny_gltf.h	137;"	d
TINYGLTF_PARAMETER_TYPE_INT_VEC4	support/tinygltf/tiny_gltf.h	138;"	d
TINYGLTF_PARAMETER_TYPE_SAMPLER_2D	support/tinygltf/tiny_gltf.h	149;"	d
TINYGLTF_PARAMETER_TYPE_SHORT	support/tinygltf/tiny_gltf.h	126;"	d
TINYGLTF_PARAMETER_TYPE_UNSIGNED_BYTE	support/tinygltf/tiny_gltf.h	125;"	d
TINYGLTF_PARAMETER_TYPE_UNSIGNED_INT	support/tinygltf/tiny_gltf.h	129;"	d
TINYGLTF_PARAMETER_TYPE_UNSIGNED_SHORT	support/tinygltf/tiny_gltf.h	127;"	d
TINYGLTF_SHADER_TYPE_FRAGMENT_SHADER	support/tinygltf/tiny_gltf.h	181;"	d
TINYGLTF_SHADER_TYPE_VERTEX_SHADER	support/tinygltf/tiny_gltf.h	180;"	d
TINYGLTF_TARGET_ARRAY_BUFFER	support/tinygltf/tiny_gltf.h	177;"	d
TINYGLTF_TARGET_ELEMENT_ARRAY_BUFFER	support/tinygltf/tiny_gltf.h	178;"	d
TINYGLTF_TEXTURE_FILTER_LINEAR	support/tinygltf/tiny_gltf.h	113;"	d
TINYGLTF_TEXTURE_FILTER_LINEAR_MIPMAP_LINEAR	support/tinygltf/tiny_gltf.h	117;"	d
TINYGLTF_TEXTURE_FILTER_LINEAR_MIPMAP_NEAREST	support/tinygltf/tiny_gltf.h	115;"	d
TINYGLTF_TEXTURE_FILTER_NEAREST	support/tinygltf/tiny_gltf.h	112;"	d
TINYGLTF_TEXTURE_FILTER_NEAREST_MIPMAP_LINEAR	support/tinygltf/tiny_gltf.h	116;"	d
TINYGLTF_TEXTURE_FILTER_NEAREST_MIPMAP_NEAREST	support/tinygltf/tiny_gltf.h	114;"	d
TINYGLTF_TEXTURE_FORMAT_ALPHA	support/tinygltf/tiny_gltf.h	168;"	d
TINYGLTF_TEXTURE_FORMAT_LUMINANCE	support/tinygltf/tiny_gltf.h	171;"	d
TINYGLTF_TEXTURE_FORMAT_LUMINANCE_ALPHA	support/tinygltf/tiny_gltf.h	172;"	d
TINYGLTF_TEXTURE_FORMAT_RGB	support/tinygltf/tiny_gltf.h	169;"	d
TINYGLTF_TEXTURE_FORMAT_RGBA	support/tinygltf/tiny_gltf.h	170;"	d
TINYGLTF_TEXTURE_TARGET_TEXTURE2D	support/tinygltf/tiny_gltf.h	174;"	d
TINYGLTF_TEXTURE_TYPE_UNSIGNED_BYTE	support/tinygltf/tiny_gltf.h	175;"	d
TINYGLTF_TEXTURE_WRAP_CLAMP_TO_EDGE	support/tinygltf/tiny_gltf.h	120;"	d
TINYGLTF_TEXTURE_WRAP_MIRRORED_REPEAT	support/tinygltf/tiny_gltf.h	121;"	d
TINYGLTF_TEXTURE_WRAP_REPEAT	support/tinygltf/tiny_gltf.h	119;"	d
TINYGLTF_TYPE_MAT2	support/tinygltf/tiny_gltf.h	156;"	d
TINYGLTF_TYPE_MAT3	support/tinygltf/tiny_gltf.h	157;"	d
TINYGLTF_TYPE_MAT4	support/tinygltf/tiny_gltf.h	158;"	d
TINYGLTF_TYPE_MATRIX	support/tinygltf/tiny_gltf.h	161;"	d
TINYGLTF_TYPE_SCALAR	support/tinygltf/tiny_gltf.h	159;"	d
TINYGLTF_TYPE_VEC2	support/tinygltf/tiny_gltf.h	153;"	d
TINYGLTF_TYPE_VEC3	support/tinygltf/tiny_gltf.h	154;"	d
TINYGLTF_TYPE_VEC4	support/tinygltf/tiny_gltf.h	155;"	d
TINYGLTF_TYPE_VECTOR	support/tinygltf/tiny_gltf.h	160;"	d
TINYGLTF_VALUE_GET	support/tinygltf/tiny_gltf.h	406;"	d
TINYGLTF_VALUE_GET	support/tinygltf/tiny_gltf.h	422;"	d
TINYOBJLOADER_IMPLEMENTATION	optixMotionGeometry/optixMotionGeometry.cpp	31;"	d	file:
TINYOBJLOADER_IMPLEMENTATION	optixMotionGeometry/optixMotionGeometry.cpp	33;"	d	file:
TINYOBJ_OVERRIDE	optixMotionGeometry/tiny_obj_loader.h	/^                          std::string *err) TINYOBJ_OVERRIDE;$/;"	m	class:tinyobj::MaterialFileReader
TINYOBJ_OVERRIDE	optixMotionGeometry/tiny_obj_loader.h	/^                          std::string *err) TINYOBJ_OVERRIDE;$/;"	m	class:tinyobj::MaterialStreamReader
TINYOBJ_OVERRIDE	optixMotionGeometry/tiny_obj_loader.h	68;"	d
TINY_GLTF_H_	support/tinygltf/tiny_gltf.h	53;"	d
TINY_OBJ_LOADER_H_	optixMotionGeometry/tiny_obj_loader.h	58;"	d
TISCopyCurrentKeyboardLayoutInputSource	support/GLFW/src/cocoa_platform.h	63;"	d
TISGetInputSourceProperty	support/GLFW/src/cocoa_platform.h	65;"	d
TOTAL	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t TOTAL = LOG2DIM + ChildT::TOTAL; \/\/ dimension in index space$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
TOTAL	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t TOTAL = LOG2DIM; \/\/ needed by parent nodes$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
TRI	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    TRI,$/;"	e	enum:InstanceType	file:
TRIANGLE_COUNT	optixBoundValues/optixBoundValues.cpp	/^const int32_t TRIANGLE_COUNT = 32;$/;"	v
TRIANGLE_COUNT	optixCutouts/optixCutouts.cpp	/^constexpr int32_t TRIANGLE_COUNT     = 32;$/;"	v
TRIANGLE_COUNT	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^const int32_t TRIANGLE_COUNT = 32;$/;"	v
TRIANGLE_COUNT	optixMultiGPU/optixMultiGPU.cpp	/^const int32_t  TRIANGLE_COUNT  = 32;$/;"	v
TRIANGLE_COUNT	optixNVLink/optixNVLink.cpp	/^const int32_t  TRIANGLE_COUNT  = 32;$/;"	v
TRIANGLE_COUNT	optixPathTracer/optixPathTracer.cpp	/^const int32_t TRIANGLE_COUNT = 32;$/;"	v
TRIANGLE_MAT_COUNT	optixCutouts/optixCutouts.cpp	/^constexpr int32_t TRIANGLE_MAT_COUNT = 6;$/;"	v
TRIANGLE_MESH	cuda/GeometryData.h	/^        TRIANGLE_MESH         = 0,$/;"	e	enum:GeometryData::Type
TRUE	support/GLFW/deps/tinycthread.c	50;"	d	file:
TSS_DTOR_ITERATIONS	support/GLFW/deps/tinycthread.h	166;"	d
TabBarCalcMaxTabWidth	support/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui
TabBarCalcTabID	support/imgui/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui
TabBarCloseTab	support/imgui/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui
TabBarFindTabByID	support/imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui
TabBarLayout	support/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui
TabBarQueueChangeTabOrder	support/imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)$/;"	f	class:ImGui
TabBarRemoveTab	support/imgui/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui
TabBarScrollClamp	support/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui
TabBarScrollToTab	support/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui
TabBarScrollingButtons	support/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui
TabBarSortItemComparer	support/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabBarSortItemComparer(const void* lhs, const void* rhs)$/;"	f	file:
TabBarTabListPopupButton	support/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui
TabBars	support/imgui/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext
TabBorderSize	support/imgui/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle
TabItemBackground	support/imgui/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImU32 col)$/;"	f	class:ImGui
TabItemCalcSize	support/imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui
TabItemComparerByVisibleOffset	support/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByVisibleOffset(const void* lhs, const void* rhs)$/;"	f	file:
TabItemEx	support/imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui
TabItemLabelAndCloseButton	support/imgui/imgui_widgets.cpp	/^bool ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char* label, ImGuiID tab_id, ImGuiID close_button_id)$/;"	f	class:ImGui
TabRounding	support/imgui/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.$/;"	m	struct:ImGuiStyle
TabSortByWidthBuffer	support/imgui/imgui_internal.h	/^    ImVector<ImGuiTabBarSortItem>   TabSortByWidthBuffer;$/;"	m	struct:ImGuiContext
Tabs	support/imgui/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar
TabsNames	support/imgui/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names in a contiguous buffer. $/;"	m	struct:ImGuiTabBar
TearDown	optixCompileWithTasks/optixCompileWithTasks.cpp	/^static void TearDown()$/;"	f	file:
TempBuffer	support/imgui/imgui_internal.h	/^    char                    TempBuffer[1024*3+1];               \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext
TensorTraits	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TensorTraits<T, 0>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TensorTraits	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TensorTraits<T, 1>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Terminate	support/GLFW/src/egl_context.h	/^    PFNEGLTERMINATEPROC             Terminate;$/;"	m	struct:_GLFWlibraryEGL
TexCoord	optixNVLink/optixNVLink.cpp	/^struct TexCoord$/;"	s	file:
TexDesiredWidth	support/imgui/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.$/;"	m	struct:ImFontAtlas
TexGlyphPadding	support/imgui/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0.$/;"	m	struct:ImFontAtlas
TexHeight	support/imgui/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build().$/;"	m	struct:ImFontAtlas
TexID	support/imgui/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.$/;"	m	struct:ImFontAtlas
TexPixelsAlpha8	support/imgui/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight$/;"	m	struct:ImFontAtlas
TexPixelsRGBA32	support/imgui/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4$/;"	m	struct:ImFontAtlas
TexUvScale	support/imgui/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas
TexUvWhitePixel	support/imgui/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas
TexUvWhitePixel	support/imgui/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData
TexWidth	support/imgui/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build().$/;"	m	struct:ImFontAtlas
Texcoord	cuda/LocalGeometry.h	/^    struct Texcoord$/;"	s	struct:LocalGeometry
Text	support/imgui/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui
TextA	support/imgui/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and other operations. this is not updated in every code-path! size=capacity.$/;"	m	struct:ImGuiInputTextState
TextAIsValid	support/imgui/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially valid before we make the widget active (until then we pull the data from user argument)$/;"	m	struct:ImGuiInputTextState
TextColored	support/imgui/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui
TextColoredV	support/imgui/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui
TextDisabled	support/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui
TextDisabledV	support/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui
TextEditCallback	support/imgui/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole
TextEditCallbackStub	support/imgui/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data) \/\/ In C++11 you are better off using lambdas for this sort of forwarding callbacks$/;"	f	struct:ExampleAppConsole
TextEx	support/imgui/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui
TextRange	support/imgui/imgui.h	/^        TextRange() { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::TextRange
TextRange	support/imgui/imgui.h	/^        TextRange(const char* _b, const char* _e) { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::TextRange
TextRange	support/imgui/imgui.h	/^    struct TextRange$/;"	s	struct:ImGuiTextFilter
TextUnformatted	support/imgui/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui
TextV	support/imgui/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui
TextW	support/imgui/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer.$/;"	m	struct:ImGuiInputTextState
TextWrapPos	support/imgui/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ == TextWrapPosStack.back() [empty == -1.0f]$/;"	m	struct:ImGuiWindowTempData
TextWrapPosStack	support/imgui/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;$/;"	m	struct:ImGuiWindowTempData
TextWrapped	support/imgui/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui
TextWrappedV	support/imgui/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui
Texture	cuda/MaterialData.h	/^    struct Texture$/;"	s	struct:MaterialData
Texture	support/tinygltf/tiny_gltf.h	/^  Texture() : sampler(-1), source(-1) {}$/;"	f	struct:tinygltf::Texture
Texture	support/tinygltf/tiny_gltf.h	/^struct Texture {$/;"	s	namespace:tinygltf
Texture	sutil/sutil.h	/^struct Texture$/;"	s	namespace:sutil
TextureId	support/imgui/imgui.h	/^    ImTextureID     TextureId;              \/\/ User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.$/;"	m	struct:ImDrawCmd
TextureIndex	support/tinygltf/tiny_gltf.h	/^  int TextureIndex() const {$/;"	f	struct:tinygltf::Parameter
TextureInfo	support/tinygltf/tiny_gltf.h	/^  TextureInfo() : index(-1), texCoord(0) {}$/;"	f	struct:tinygltf::TextureInfo
TextureInfo	support/tinygltf/tiny_gltf.h	/^struct TextureInfo {$/;"	s	namespace:tinygltf
TextureScale	support/tinygltf/tiny_gltf.h	/^  double TextureScale() const {$/;"	f	struct:tinygltf::Parameter
TextureStrength	support/tinygltf/tiny_gltf.h	/^  double TextureStrength() const {$/;"	f	struct:tinygltf::Parameter
TextureTexCoord	support/tinygltf/tiny_gltf.h	/^  int TextureTexCoord() const {$/;"	f	struct:tinygltf::Parameter
ThreadPool	lib/CompileWithTasks.h	/^struct ThreadPool$/;"	s	namespace:optix::CompileWithTasks
Time	support/imgui/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext
TimeSpan	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ TimeSpan() {}$/;"	f	struct:nanovdb::Ray::TimeSpan
TimeSpan	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ TimeSpan(RealT _t0, RealT _t1)$/;"	f	struct:nanovdb::Ray::TimeSpan
TimeSpan	optixVolumeViewer/nanovdb/util/Ray.h	/^    struct TimeSpan$/;"	s	class:nanovdb::Ray
Timer	optixCompileWithTasks/optixCompileWithTasks.cpp	/^    Timer() { m_start = m_clock.now(); }$/;"	f	struct:Timer
Timer	optixCompileWithTasks/optixCompileWithTasks.cpp	/^struct Timer$/;"	s	file:
TinyGLTF	support/tinygltf/tiny_gltf.h	/^  TinyGLTF() : bin_data_(nullptr), bin_size_(0), is_binary_(false) {}$/;"	f	class:tinygltf::TinyGLTF
TinyGLTF	support/tinygltf/tiny_gltf.h	/^class TinyGLTF {$/;"	c	namespace:tinygltf
TitleBarHeight	support/imgui/imgui_internal.h	/^    float       TitleBarHeight() const                  { return (Flags & ImGuiWindowFlags_NoTitleBar) ? 0.0f : CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f; }$/;"	f	struct:ImGuiWindow
TitleBarRect	support/imgui/imgui_internal.h	/^    ImRect      TitleBarRect() const                    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + TitleBarHeight())); }$/;"	f	struct:ImGuiWindow
Tolerance	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Tolerance<double>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Tolerance	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct Tolerance<float>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TooltipOverrideCount	support/imgui/imgui_internal.h	/^    int                     TooltipOverrideCount;$/;"	m	struct:ImGuiContext
TotalIdxCount	support/imgui/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuffer.Size$/;"	m	struct:ImDrawData
TotalVtxCount	support/imgui/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuffer.Size$/;"	m	struct:ImDrawData
TouchExtraPadding	support/imgui/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!$/;"	m	struct:ImGuiStyle
Trackball	sutil/Trackball.h	/^class Trackball$/;"	c	namespace:sutil
Translate	support/imgui/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; Max.y += d.y; }$/;"	f	struct:ImRect
TranslateX	support/imgui/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect
TranslateY	support/imgui/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect
Translation	optixMotionGeometry/motionHelper.hpp	/^    inline static Matrix3x4 Translation( const float3& t )$/;"	f	struct:__anon4::Matrix3x4
Tree	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Tree : private TreeData<RootT::LEVEL>$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TreeAdvanceToLabelPos	support/imgui/imgui_widgets.cpp	/^void ImGui::TreeAdvanceToLabelPos()$/;"	f	class:ImGui
TreeDepth	support/imgui/imgui_internal.h	/^    int                     TreeDepth;$/;"	m	struct:ImGuiWindowTempData
TreeDepthMayJumpToParentOnPop	support/imgui/imgui_internal.h	/^    ImU32                   TreeDepthMayJumpToParentOnPop; \/\/ Store a copy of !g.NavIdIsAlive for TreeDepth 0..31$/;"	m	struct:ImGuiWindowTempData
TreeMarcher	optixVolumeViewer/nanovdb/util/HDDA.h	/^    inline __hostdev__ TreeMarcher(AccT& acc)$/;"	f	class:nanovdb::TreeMarcher
TreeMarcher	optixVolumeViewer/nanovdb/util/HDDA.h	/^class TreeMarcher$/;"	c	namespace:nanovdb
TreeNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TreeNode<TreeT, 0>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TreeNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TreeNode<TreeT, 1>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TreeNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TreeNode<TreeT, 2>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TreeNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct TreeNode<TreeT, 3>$/;"	s	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
TreeNode	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui
TreeNode	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui
TreeNode	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeBehavior	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)$/;"	f	class:ImGui
TreeNodeBehaviorIsOpen	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
TreeNodeEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
TreeNodeEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeEx	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeExV	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeExV	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeV	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeV	support/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui
TreePop	support/imgui/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui
TreePush	support/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui
TreePush	support/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui
TreePushRawID	support/imgui/imgui_widgets.cpp	/^void ImGui::TreePushRawID(ImGuiID id)$/;"	f	class:ImGui
TriangleMesh	cuda/GeometryData.h	/^    struct TriangleMesh$/;"	s	struct:GeometryData
Type	cuda/GeometryData.h	/^    enum Type$/;"	g	struct:GeometryData
Type	cuda/Light.h	/^    enum class Type : int$/;"	c	struct:Light
Type	cuda/MaterialData.h	/^    enum Type$/;"	g	struct:MaterialData
Type	support/GLFW/deps/mingw/xinput.h	/^    BYTE Type;$/;"	m	struct:_XINPUT_CAPABILITIES
Type	support/imgui/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	file:
Type	support/tinygltf/tiny_gltf.h	/^  char Type() const { return static_cast<const char>(type_); }$/;"	f	class:tinygltf::Value
Type	support/tinygltf/tiny_gltf.h	/^} Type;$/;"	t	namespace:tinygltf	typeref:enum:tinygltf::__anon114
TypeHash	support/imgui/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName, 0, 0)$/;"	m	struct:ImGuiSettingsHandler
TypeName	support/imgui/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed characters: '[' ']'$/;"	m	struct:ImGuiSettingsHandler
U	cuda/whitted.h	/^    float3                   U;$/;"	m	struct:whitted::LaunchParams
U	optixBoundValues/optixBoundValues.h	/^    float3       U;$/;"	m	struct:Params
U	optixCutouts/optixCutouts.h	/^    float3       U;$/;"	m	struct:Params
U	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Globals
U	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
U	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       U;$/;"	m	struct:Params
U	optixMotionGeometry/optixMotionGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
U	optixMultiGPU/optixMultiGPU.h	/^    float3       U;$/;"	m	struct:Params
U	optixNVLink/optixNVLink.h	/^    float3       U;$/;"	m	struct:Params
U	optixPathTracer/optixPathTracer.h	/^    float3       U;$/;"	m	struct:Params
U	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3       U;$/;"	m	struct:Params
U	optixVolumeViewer/volume.h	/^    float3                   U;$/;"	m	struct:LaunchParams
U0	support/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
U1	support/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
UINT64_C	optixVolumeViewer/nanovdb/NanoVDB.h	127;"	d
UInt32	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 UInt32 = 10,$/;"	m	class:nanovdb::GridType
UNICODE	support/GLFW/src/win32_platform.h	51;"	d
UNICODE_NOCHAR	support/GLFW/src/win32_platform.h	93;"	d
UNKNOWN_TYPE	cuda/GeometryData.h	/^        UNKNOWN_TYPE          = 8$/;"	e	enum:GeometryData::Type
UNSIGNED_BYTE4	sutil/sutil.h	/^    UNSIGNED_BYTE4,$/;"	e	enum:sutil::BufferImageFormat
USE_SINGLE_ACCESSOR_KEY	optixVolumeViewer/nanovdb/NanoVDB.h	108;"	d
USE_SINGLE_ROOT_KEY	optixVolumeViewer/nanovdb/NanoVDB.h	105;"	d
USHORT_RANGE	support/tinyexr/tinyexr.h	/^const int USHORT_RANGE = (1 << 16);$/;"	m	namespace:tinyexr
UTF8ToWchar	support/tinygltf/tiny_gltf.h	/^static inline std::wstring UTF8ToWchar(const std::string &str) {$/;"	f	namespace:tinygltf
UTF8_ACCEPT	support/tinygltf/json.hpp	/^    static constexpr uint8_t UTF8_ACCEPT = 0;$/;"	m	class:nlohmann::detail::serializer
UTF8_REJECT	support/tinygltf/json.hpp	/^    static constexpr uint8_t UTF8_REJECT = 1;$/;"	m	class:nlohmann::detail::serializer
UTF8_STRING	support/GLFW/src/x11_platform.h	/^    Atom            UTF8_STRING;$/;"	m	struct:_GLFWlibraryX11
UV	cuda/LocalGeometry.h	/^        float2 UV;$/;"	m	struct:LocalGeometry::Texcoord
UVWFrame	sutil/Camera.cpp	/^void Camera::UVWFrame(float3& U, float3& V, float3& W) const$/;"	f	class:sutil::Camera
Unicode	support/GLFW/deps/mingw/xinput.h	/^    WCHAR Unicode;$/;"	m	struct:_XINPUT_KEYSTROKE
Unindent	support/imgui/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui
Unknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridBlindDataClass : uint32_t { Unknown = 0,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass
Unknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridBlindDataSemantic : uint32_t { Unknown = 0,$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Unknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridClass : uint32_t { Unknown = 0,$/;"	m	class:nanovdb::GridType::GridClass
Unknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^enum class GridType : uint32_t { Unknown = 0,$/;"	m	class:nanovdb::GridType
UnpackAccumulativeOffsetsIntoRanges	support/imgui/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_offsets, int accumulative_offsets_count, ImWchar* out_ranges)$/;"	f	file:
UnpackBoolVectorToFlatIndexList	support/imgui/imgui_draw.cpp	/^static void UnpackBoolVectorToFlatIndexList(const ImBoolVector* in, ImVector<int>* out)$/;"	f	file:
Update	support/imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(int count, float spacing, bool clear)$/;"	f	class:ImGuiMenuColumns
UpdateClipRect	support/imgui/imgui_draw.cpp	/^void ImDrawList::UpdateClipRect()$/;"	f	class:ImDrawList
UpdateHoveredWindowAndCaptureFlags	support/imgui/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui
UpdateImageObject	support/tinygltf/tiny_gltf.h	/^static void UpdateImageObject(Image &image, std::string &baseDir, int index,$/;"	f	namespace:tinygltf
UpdateManualResize	support/imgui/imgui.cpp	/^static void ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4])$/;"	f	class:ImGui
UpdateMouseInputs	support/imgui/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui
UpdateMouseMovingWindowEndFrame	support/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui
UpdateMouseMovingWindowNewFrame	support/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui
UpdateMouseWheel	support/imgui/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui
UpdateTextureID	support/imgui/imgui_draw.cpp	/^void ImDrawList::UpdateTextureID()$/;"	f	class:ImDrawList
UpdateWindowParentAndRootLinks	support/imgui/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window)$/;"	f	class:ImGui
UsedChars	support/imgui/imgui.h	/^    ImVector<int> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=used)$/;"	m	struct:ImFontGlyphRangesBuilder
UserCallback	support/imgui/imgui.h	/^    ImDrawCallback  UserCallback;           \/\/ If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.$/;"	m	struct:ImDrawCmd
UserCallback	support/imgui/imgui_internal.h	/^    ImGuiInputTextCallback  UserCallback;$/;"	m	struct:ImGuiInputTextState
UserCallbackData	support/imgui/imgui.h	/^    void*           UserCallbackData;       \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd
UserCallbackData	support/imgui/imgui_internal.h	/^    void*                   UserCallbackData;$/;"	m	struct:ImGuiInputTextState
UserData	support/imgui/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
UserData	support/imgui/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data for retrieval by callbacks.$/;"	m	struct:ImGuiIO
UserData	support/imgui/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData
UserData	support/imgui/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler
UserFlags	support/imgui/imgui_internal.h	/^    ImGuiInputTextFlags     UserFlags;$/;"	m	struct:ImGuiInputTextState
UserIndex	support/GLFW/deps/mingw/xinput.h	/^    BYTE UserIndex;$/;"	m	struct:_XINPUT_KEYSTROKE
V	cuda/whitted.h	/^    float3                   V;$/;"	m	struct:whitted::LaunchParams
V	optixBoundValues/optixBoundValues.h	/^    float3       V;$/;"	m	struct:Params
V	optixCutouts/optixCutouts.h	/^    float3       V;$/;"	m	struct:Params
V	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Globals
V	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
V	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       V;$/;"	m	struct:Params
V	optixMotionGeometry/optixMotionGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
V	optixMultiGPU/optixMultiGPU.h	/^    float3       V;$/;"	m	struct:Params
V	optixNVLink/optixNVLink.h	/^    float3       V;$/;"	m	struct:Params
V	optixPathTracer/optixPathTracer.h	/^    float3       V;$/;"	m	struct:Params
V	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3       V;$/;"	m	struct:Params
V	optixVolumeViewer/volume.h	/^    float3                   V;$/;"	m	struct:LaunchParams
V0	support/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
V1	support/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
VC_EXTRALEAN	support/GLFW/src/win32_platform.h	37;"	d
VKAPI_ATTR	support/GLFW/deps/vulkan/vk_platform.h	51;"	d
VKAPI_ATTR	support/GLFW/deps/vulkan/vk_platform.h	61;"	d
VKAPI_ATTR	support/GLFW/deps/vulkan/vk_platform.h	66;"	d
VKAPI_CALL	support/GLFW/deps/vulkan/vk_platform.h	52;"	d
VKAPI_CALL	support/GLFW/deps/vulkan/vk_platform.h	62;"	d
VKAPI_CALL	support/GLFW/deps/vulkan/vk_platform.h	67;"	d
VKAPI_PTR	support/GLFW/deps/vulkan/vk_platform.h	53;"	d
VKAPI_PTR	support/GLFW/deps/vulkan/vk_platform.h	63;"	d
VKAPI_PTR	support/GLFW/deps/vulkan/vk_platform.h	68;"	d
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_HOST_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_HOST_READ_BIT = 0x00002000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_HOST_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_HOST_WRITE_BIT = 0x00004000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INDEX_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_INDEX_READ_BIT = 0x00000002,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INDIRECT_COMMAND_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_MEMORY_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_MEMORY_READ_BIT = 0x00008000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_MEMORY_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_SHADER_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_SHADER_READ_BIT = 0x00000020,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_SHADER_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_TRANSFER_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_TRANSFER_WRITE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_UNIFORM_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,$/;"	e	enum:VkAccessFlagBits
VK_API_VERSION_1_0	support/GLFW/deps/vulkan/vulkan.h	40;"	d
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentDescriptionFlagBits
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,$/;"	e	enum:VkAttachmentDescriptionFlagBits
VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VK_ATTACHMENT_LOAD_OP_LOAD,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_CLEAR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_DONT_CARE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_END_RANGE = VK_ATTACHMENT_LOAD_OP_DONT_CARE,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_LOAD	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_LOAD = 0,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = (VK_ATTACHMENT_LOAD_OP_DONT_CARE - VK_ATTACHMENT_LOAD_OP_LOAD + 1),$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_STORE_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VK_ATTACHMENT_STORE_OP_STORE,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_DONT_CARE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_END_RANGE = VK_ATTACHMENT_STORE_OP_DONT_CARE,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_RANGE_SIZE = (VK_ATTACHMENT_STORE_OP_DONT_CARE - VK_ATTACHMENT_STORE_OP_STORE + 1),$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_STORE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_STORE = 0,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_UNUSED	support/GLFW/deps/vulkan/vulkan.h	99;"	d
VK_BLEND_FACTOR_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_BEGIN_RANGE = VK_BLEND_FACTOR_ZERO,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_CONSTANT_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_CONSTANT_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_DST_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_DST_ALPHA = 8,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_DST_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_DST_COLOR = 4,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_END_RANGE = VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE = 1,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_RANGE_SIZE = (VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA - VK_BLEND_FACTOR_ZERO + 1),$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC1_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC1_ALPHA = 17,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC1_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC1_COLOR = 15,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_ALPHA	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_ALPHA = 6,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_COLOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_COLOR = 2,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ZERO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ZERO = 0,$/;"	e	enum:VkBlendFactor
VK_BLEND_OP_ADD	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_ADD = 0,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_BEGIN_RANGE = VK_BLEND_OP_ADD,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_END_RANGE = VK_BLEND_OP_MAX,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MAX	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_MAX = 4,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MIN	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_MIN = 3,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_RANGE_SIZE = (VK_BLEND_OP_MAX - VK_BLEND_OP_ADD + 1),$/;"	e	enum:VkBlendOp
VK_BLEND_OP_REVERSE_SUBTRACT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_REVERSE_SUBTRACT = 2,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_SUBTRACT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BLEND_OP_SUBTRACT = 1,$/;"	e	enum:VkBlendOp
VK_BORDER_COLOR_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_BEGIN_RANGE = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_END_RANGE = VK_BORDER_COLOR_INT_OPAQUE_WHITE,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_OPAQUE_BLACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_OPAQUE_WHITE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BORDER_COLOR_RANGE_SIZE = (VK_BORDER_COLOR_INT_OPAQUE_WHITE - VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK + 1),$/;"	e	enum:VkBorderColor
VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_BINDING_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_INDEX_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_TRANSFER_DST_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_TRANSFER_SRC_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,$/;"	e	enum:VkBufferUsageFlagBits
VK_COLORSPACE_SRGB_NONLINEAR_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0,$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_COMPONENT_A_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_A_BIT = 0x00000008,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_B_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_B_BIT = 0x00000004,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_G_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_G_BIT = 0x00000002,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_R_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_R_BIT = 0x00000001,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_SPACE_BEGIN_RANGE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_SPACE_BEGIN_RANGE_KHR = VK_COLORSPACE_SRGB_NONLINEAR_KHR,$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_END_RANGE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_SPACE_END_RANGE_KHR = VK_COLORSPACE_SRGB_NONLINEAR_KHR,$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_MAX_ENUM_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_RANGE_SIZE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COLOR_SPACE_RANGE_SIZE_KHR = (VK_COLORSPACE_SRGB_NONLINEAR_KHR - VK_COLORSPACE_SRGB_NONLINEAR_KHR + 1),$/;"	e	enum:VkColorSpaceKHR
VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VK_COMMAND_BUFFER_LEVEL_PRIMARY,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_END_RANGE = VK_COMMAND_BUFFER_LEVEL_SECONDARY,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_PRIMARY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = (VK_COMMAND_BUFFER_LEVEL_SECONDARY - VK_COMMAND_BUFFER_LEVEL_PRIMARY + 1),$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_SECONDARY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferResetFlagBits
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,$/;"	e	enum:VkCommandBufferResetFlagBits
VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandPoolResetFlagBits
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,$/;"	e	enum:VkCommandPoolResetFlagBits
VK_COMPARE_OP_ALWAYS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_ALWAYS = 7,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_BEGIN_RANGE = VK_COMPARE_OP_NEVER,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_END_RANGE = VK_COMPARE_OP_ALWAYS,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_EQUAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_EQUAL = 2,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_GREATER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_GREATER = 4,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_GREATER_OR_EQUAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_LESS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_LESS = 1,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_LESS_OR_EQUAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_LESS_OR_EQUAL = 3,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_NEVER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_NEVER = 0,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_NOT_EQUAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_NOT_EQUAL = 5,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPARE_OP_RANGE_SIZE = (VK_COMPARE_OP_ALWAYS - VK_COMPARE_OP_NEVER + 1),$/;"	e	enum:VkCompareOp
VK_COMPONENT_SWIZZLE_A	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_A = 6,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_B	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_B = 5,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VK_COMPONENT_SWIZZLE_IDENTITY,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_END_RANGE = VK_COMPONENT_SWIZZLE_A,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_G	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_G = 4,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_IDENTITY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_IDENTITY = 0,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_ONE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_ONE = 2,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_R	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_R = 3,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_RANGE_SIZE = (VK_COMPONENT_SWIZZLE_A - VK_COMPONENT_SWIZZLE_IDENTITY + 1),$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_ZERO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_ZERO = 1,$/;"	e	enum:VkComponentSwizzle
VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_CULL_MODE_BACK_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_CULL_MODE_BACK_BIT = 0x00000002,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FRONT_AND_BACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FRONT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_CULL_MODE_FRONT_BIT = 0x00000001,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_NONE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_CULL_MODE_NONE = 0,$/;"	e	enum:VkCullModeFlagBits
VK_DEBUG_REPORT_DEBUG_BIT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT = VK_DEBUG_REPORT_ERROR_NONE_EXT,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_BIT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_END_RANGE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_END_RANGE_EXT = VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_NONE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT = (VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT - VK_DEBUG_REPORT_ERROR_NONE_EXT + 1),$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_INFORMATION_BIT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = (VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT - VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT + 1),$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_WARNING_BIT_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEFINE_HANDLE	support/GLFW/deps/vulkan/vulkan.h	53;"	d
VK_DEFINE_NON_DISPATCHABLE_HANDLE	support/GLFW/deps/vulkan/vulkan.h	57;"	d
VK_DEFINE_NON_DISPATCHABLE_HANDLE	support/GLFW/deps/vulkan/vulkan.h	59;"	d
VK_DEPENDENCY_BY_REGION_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,$/;"	e	enum:VkDependencyFlagBits
VK_DEPENDENCY_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDependencyFlagBits
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDescriptorPoolCreateFlagBits
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,$/;"	e	enum:VkDescriptorPoolCreateFlagBits
VK_DESCRIPTOR_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VK_DESCRIPTOR_TYPE_SAMPLER,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_END_RANGE = VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_RANGE_SIZE = (VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT - VK_DESCRIPTOR_TYPE_SAMPLER + 1),$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_SAMPLER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_SAMPLER = 0,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,$/;"	e	enum:VkDescriptorType
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DYNAMIC_STATE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_BEGIN_RANGE = VK_DYNAMIC_STATE_VIEWPORT,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_BLEND_CONSTANTS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_DEPTH_BIAS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_DEPTH_BOUNDS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_END_RANGE = VK_DYNAMIC_STATE_STENCIL_REFERENCE,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_LINE_WIDTH	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_LINE_WIDTH = 2,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_RANGE_SIZE = (VK_DYNAMIC_STATE_STENCIL_REFERENCE - VK_DYNAMIC_STATE_VIEWPORT + 1),$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_SCISSOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_SCISSOR = 1,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_REFERENCE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_VIEWPORT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_VIEWPORT = 0,$/;"	e	enum:VkDynamicState
VK_ERROR_DEVICE_LOST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_DEVICE_LOST = -4,$/;"	e	enum:VkResult
VK_ERROR_DEVICE_LOST	support/GLFW/src/internal.h	/^    VK_ERROR_DEVICE_LOST = -4,$/;"	e	enum:VkResult
VK_ERROR_EXTENSION_NOT_PRESENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_EXTENSION_NOT_PRESENT = -7,$/;"	e	enum:VkResult
VK_ERROR_EXTENSION_NOT_PRESENT	support/GLFW/src/internal.h	/^    VK_ERROR_EXTENSION_NOT_PRESENT = -7,$/;"	e	enum:VkResult
VK_ERROR_FEATURE_NOT_PRESENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_FEATURE_NOT_PRESENT = -8,$/;"	e	enum:VkResult
VK_ERROR_FEATURE_NOT_PRESENT	support/GLFW/src/internal.h	/^    VK_ERROR_FEATURE_NOT_PRESENT = -8,$/;"	e	enum:VkResult
VK_ERROR_FORMAT_NOT_SUPPORTED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,$/;"	e	enum:VkResult
VK_ERROR_FORMAT_NOT_SUPPORTED	support/GLFW/src/internal.h	/^    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR	support/GLFW/src/internal.h	/^    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DRIVER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_INCOMPATIBLE_DRIVER = -9,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DRIVER	support/GLFW/src/internal.h	/^    VK_ERROR_INCOMPATIBLE_DRIVER = -9,$/;"	e	enum:VkResult
VK_ERROR_INITIALIZATION_FAILED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_INITIALIZATION_FAILED = -3,$/;"	e	enum:VkResult
VK_ERROR_INITIALIZATION_FAILED	support/GLFW/src/internal.h	/^    VK_ERROR_INITIALIZATION_FAILED = -3,$/;"	e	enum:VkResult
VK_ERROR_INVALID_SHADER_NV	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_INVALID_SHADER_NV = -1000012000,$/;"	e	enum:VkResult
VK_ERROR_LAYER_NOT_PRESENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_LAYER_NOT_PRESENT = -6,$/;"	e	enum:VkResult
VK_ERROR_LAYER_NOT_PRESENT	support/GLFW/src/internal.h	/^    VK_ERROR_LAYER_NOT_PRESENT = -6,$/;"	e	enum:VkResult
VK_ERROR_MEMORY_MAP_FAILED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_MEMORY_MAP_FAILED = -5,$/;"	e	enum:VkResult
VK_ERROR_MEMORY_MAP_FAILED	support/GLFW/src/internal.h	/^    VK_ERROR_MEMORY_MAP_FAILED = -5,$/;"	e	enum:VkResult
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,$/;"	e	enum:VkResult
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR	support/GLFW/src/internal.h	/^    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DATE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DATE_KHR	support/GLFW/src/internal.h	/^    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DEVICE_MEMORY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DEVICE_MEMORY	support/GLFW/src/internal.h	/^    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_HOST_MEMORY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_HOST_MEMORY = -1,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_HOST_MEMORY	support/GLFW/src/internal.h	/^    VK_ERROR_OUT_OF_HOST_MEMORY = -1,$/;"	e	enum:VkResult
VK_ERROR_SURFACE_LOST_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_SURFACE_LOST_KHR = -1000000000,$/;"	e	enum:VkResult
VK_ERROR_SURFACE_LOST_KHR	support/GLFW/src/internal.h	/^    VK_ERROR_SURFACE_LOST_KHR = -1000000000,$/;"	e	enum:VkResult
VK_ERROR_TOO_MANY_OBJECTS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_TOO_MANY_OBJECTS = -10,$/;"	e	enum:VkResult
VK_ERROR_TOO_MANY_OBJECTS	support/GLFW/src/internal.h	/^    VK_ERROR_TOO_MANY_OBJECTS = -10,$/;"	e	enum:VkResult
VK_ERROR_VALIDATION_FAILED_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,$/;"	e	enum:VkResult
VK_ERROR_VALIDATION_FAILED_EXT	support/GLFW/src/internal.h	/^    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,$/;"	e	enum:VkResult
VK_EVENT_RESET	support/GLFW/deps/vulkan/vulkan.h	/^    VK_EVENT_RESET = 4,$/;"	e	enum:VkResult
VK_EVENT_RESET	support/GLFW/src/internal.h	/^    VK_EVENT_RESET = 4,$/;"	e	enum:VkResult
VK_EVENT_SET	support/GLFW/deps/vulkan/vulkan.h	/^    VK_EVENT_SET = 3,$/;"	e	enum:VkResult
VK_EVENT_SET	support/GLFW/src/internal.h	/^    VK_EVENT_SET = 3,$/;"	e	enum:VkResult
VK_EXT_DEBUG_REPORT_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3714;"	d
VK_EXT_DEBUG_REPORT_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3713;"	d
VK_EXT_debug_report	support/GLFW/deps/vulkan/vulkan.h	3710;"	d
VK_FALSE	support/GLFW/deps/vulkan/vulkan.h	101;"	d
VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFenceCreateFlagBits
VK_FENCE_CREATE_SIGNALED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,$/;"	e	enum:VkFenceCreateFlagBits
VK_FILTER_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_BEGIN_RANGE = VK_FILTER_NEAREST,$/;"	e	enum:VkFilter
VK_FILTER_CUBIC_IMG	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_CUBIC_IMG = 1000015000,$/;"	e	enum:VkFilter
VK_FILTER_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_END_RANGE = VK_FILTER_LINEAR,$/;"	e	enum:VkFilter
VK_FILTER_LINEAR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_LINEAR = 1,$/;"	e	enum:VkFilter
VK_FILTER_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFilter
VK_FILTER_NEAREST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_NEAREST = 0,$/;"	e	enum:VkFilter
VK_FILTER_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FILTER_RANGE_SIZE = (VK_FILTER_LINEAR - VK_FILTER_NEAREST + 1),$/;"	e	enum:VkFilter
VK_FORMAT_A1R5G5B5_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SSCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_UINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_UNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_USCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SSCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_UINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_UNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_USCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SRGB_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SSCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_UINT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_UNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_USCALED_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x10_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x10_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x5_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x5_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x6_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x6_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x8_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x8_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x10_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x10_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x12_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x12_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_4x4_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_4x4_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x4_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x4_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x5_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x5_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x5_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x5_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x6_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x6_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x5_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x5_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x6_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x6_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x8_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x8_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,$/;"	e	enum:VkFormat
VK_FORMAT_B10G11R11_UFLOAT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,$/;"	e	enum:VkFormat
VK_FORMAT_B4G4R4A4_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,$/;"	e	enum:VkFormat
VK_FORMAT_B5G5R5A1_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,$/;"	e	enum:VkFormat
VK_FORMAT_B5G6R5_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SINT = 49,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SNORM = 45,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SRGB = 50,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SSCALED = 47,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_UINT = 48,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_UNORM = 44,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_USCALED = 46,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SINT = 35,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SNORM = 31,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SRGB = 36,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SSCALED = 33,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_UINT = 34,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_UNORM = 30,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_USCALED = 32,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGBA_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGBA_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGB_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGB_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,$/;"	e	enum:VkFormat
VK_FORMAT_BC2_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC2_SRGB_BLOCK = 136,$/;"	e	enum:VkFormat
VK_FORMAT_BC2_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC2_UNORM_BLOCK = 135,$/;"	e	enum:VkFormat
VK_FORMAT_BC3_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC3_SRGB_BLOCK = 138,$/;"	e	enum:VkFormat
VK_FORMAT_BC3_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC3_UNORM_BLOCK = 137,$/;"	e	enum:VkFormat
VK_FORMAT_BC4_SNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC4_SNORM_BLOCK = 140,$/;"	e	enum:VkFormat
VK_FORMAT_BC4_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC4_UNORM_BLOCK = 139,$/;"	e	enum:VkFormat
VK_FORMAT_BC5_SNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC5_SNORM_BLOCK = 142,$/;"	e	enum:VkFormat
VK_FORMAT_BC5_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC5_UNORM_BLOCK = 141,$/;"	e	enum:VkFormat
VK_FORMAT_BC6H_SFLOAT_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,$/;"	e	enum:VkFormat
VK_FORMAT_BC6H_UFLOAT_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,$/;"	e	enum:VkFormat
VK_FORMAT_BC7_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC7_SRGB_BLOCK = 146,$/;"	e	enum:VkFormat
VK_FORMAT_BC7_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BC7_UNORM_BLOCK = 145,$/;"	e	enum:VkFormat
VK_FORMAT_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_BEGIN_RANGE = VK_FORMAT_UNDEFINED,$/;"	e	enum:VkFormat
VK_FORMAT_D16_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_D16_UNORM = 124,$/;"	e	enum:VkFormat
VK_FORMAT_D16_UNORM_S8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_D16_UNORM_S8_UINT = 128,$/;"	e	enum:VkFormat
VK_FORMAT_D24_UNORM_S8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_D24_UNORM_S8_UINT = 129,$/;"	e	enum:VkFormat
VK_FORMAT_D32_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_D32_SFLOAT = 126,$/;"	e	enum:VkFormat
VK_FORMAT_D32_SFLOAT_S8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,$/;"	e	enum:VkFormat
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11G11_SNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11G11_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11_SNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,$/;"	e	enum:VkFormat
VK_FORMAT_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_END_RANGE = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,$/;"	e	enum:VkFormat
VK_FORMAT_FEATURE_BLIT_DST_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_BLIT_SRC_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SFLOAT = 97,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SINT = 96,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SNORM = 92,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SSCALED = 94,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_UINT = 95,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_UNORM = 91,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_USCALED = 93,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SFLOAT = 90,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SINT = 89,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SNORM = 85,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SSCALED = 87,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_UINT = 88,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_UNORM = 84,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_USCALED = 86,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SFLOAT = 83,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SINT = 82,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SNORM = 78,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SSCALED = 80,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_UINT = 81,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_UNORM = 77,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_USCALED = 79,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_SFLOAT = 76,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_SINT = 75,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_SNORM = 71,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_SSCALED = 73,$/;"	e	enum:VkFormat
VK_FORMAT_R16_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_UINT = 74,$/;"	e	enum:VkFormat
VK_FORMAT_R16_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_UNORM = 70,$/;"	e	enum:VkFormat
VK_FORMAT_R16_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R16_USCALED = 72,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_SFLOAT = 109,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_SINT = 108,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_UINT = 107,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_SFLOAT = 106,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_SINT = 105,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_UINT = 104,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_SFLOAT = 103,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_SINT = 102,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_UINT = 101,$/;"	e	enum:VkFormat
VK_FORMAT_R32_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32_SFLOAT = 100,$/;"	e	enum:VkFormat
VK_FORMAT_R32_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32_SINT = 99,$/;"	e	enum:VkFormat
VK_FORMAT_R32_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R32_UINT = 98,$/;"	e	enum:VkFormat
VK_FORMAT_R4G4B4A4_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,$/;"	e	enum:VkFormat
VK_FORMAT_R4G4_UNORM_PACK8	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R4G4_UNORM_PACK8 = 1,$/;"	e	enum:VkFormat
VK_FORMAT_R5G5B5A1_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,$/;"	e	enum:VkFormat
VK_FORMAT_R5G6B5_UNORM_PACK16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_SFLOAT = 121,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_SINT = 120,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_UINT = 119,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_SFLOAT = 118,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_SINT = 117,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_UINT = 116,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_SFLOAT = 115,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_SINT = 114,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_UINT = 113,$/;"	e	enum:VkFormat
VK_FORMAT_R64_SFLOAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64_SFLOAT = 112,$/;"	e	enum:VkFormat
VK_FORMAT_R64_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64_SINT = 111,$/;"	e	enum:VkFormat
VK_FORMAT_R64_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R64_UINT = 110,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SINT = 42,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SNORM = 38,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SRGB = 43,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SSCALED = 40,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_UINT = 41,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_UNORM = 37,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_USCALED = 39,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SINT = 28,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SNORM = 24,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SRGB = 29,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SSCALED = 26,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_UINT = 27,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_UNORM = 23,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_USCALED = 25,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SINT = 21,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SNORM = 17,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SRGB = 22,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SSCALED = 19,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_UINT = 20,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_UNORM = 16,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_USCALED = 18,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_SINT = 14,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_SNORM = 10,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SRGB	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_SRGB = 15,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SSCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_SSCALED = 12,$/;"	e	enum:VkFormat
VK_FORMAT_R8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_UINT = 13,$/;"	e	enum:VkFormat
VK_FORMAT_R8_UNORM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_UNORM = 9,$/;"	e	enum:VkFormat
VK_FORMAT_R8_USCALED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_R8_USCALED = 11,$/;"	e	enum:VkFormat
VK_FORMAT_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1),$/;"	e	enum:VkFormat
VK_FORMAT_S8_UINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_S8_UINT = 127,$/;"	e	enum:VkFormat
VK_FORMAT_UNDEFINED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_UNDEFINED = 0,$/;"	e	enum:VkFormat
VK_FORMAT_X8_D24_UNORM_PACK32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,$/;"	e	enum:VkFormat
VK_FRONT_FACE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_BEGIN_RANGE = VK_FRONT_FACE_COUNTER_CLOCKWISE,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_CLOCKWISE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_CLOCKWISE = 1,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_COUNTER_CLOCKWISE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_END_RANGE = VK_FRONT_FACE_CLOCKWISE,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_FRONT_FACE_RANGE_SIZE = (VK_FRONT_FACE_CLOCKWISE - VK_FRONT_FACE_COUNTER_CLOCKWISE + 1),$/;"	e	enum:VkFrontFace
VK_HEADER_VERSION	support/GLFW/deps/vulkan/vulkan.h	46;"	d
VK_IMAGE_ASPECT_COLOR_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_DEPTH_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_METADATA_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_STENCIL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_BINDING_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_LAYOUT_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_BEGIN_RANGE = VK_IMAGE_LAYOUT_UNDEFINED,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_END_RANGE = VK_IMAGE_LAYOUT_PREINITIALIZED,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_GENERAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_GENERAL = 1,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_PREINITIALIZED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_RANGE_SIZE = (VK_IMAGE_LAYOUT_PREINITIALIZED - VK_IMAGE_LAYOUT_UNDEFINED + 1),$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_UNDEFINED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_UNDEFINED = 0,$/;"	e	enum:VkImageLayout
VK_IMAGE_TILING_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_BEGIN_RANGE = VK_IMAGE_TILING_OPTIMAL,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_END_RANGE = VK_IMAGE_TILING_LINEAR,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_LINEAR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_LINEAR = 1,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_OPTIMAL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_OPTIMAL = 0,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TILING_RANGE_SIZE = (VK_IMAGE_TILING_LINEAR - VK_IMAGE_TILING_OPTIMAL + 1),$/;"	e	enum:VkImageTiling
VK_IMAGE_TYPE_1D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_1D = 0,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_2D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_2D = 1,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_3D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_3D = 2,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_BEGIN_RANGE = VK_IMAGE_TYPE_1D,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_END_RANGE = VK_IMAGE_TYPE_3D,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_RANGE_SIZE = (VK_IMAGE_TYPE_3D - VK_IMAGE_TYPE_1D + 1),$/;"	e	enum:VkImageType
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_SAMPLED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_STORAGE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSFER_DST_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSFER_SRC_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_VIEW_TYPE_1D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_1D = 0,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_1D_ARRAY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_2D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_2D = 1,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_2D_ARRAY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_3D	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_3D = 2,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VK_IMAGE_VIEW_TYPE_1D,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_CUBE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_CUBE = 3,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_END_RANGE = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_RANGE_SIZE = (VK_IMAGE_VIEW_TYPE_CUBE_ARRAY - VK_IMAGE_VIEW_TYPE_1D + 1),$/;"	e	enum:VkImageViewType
VK_IMG_FILTER_CUBIC_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3828;"	d
VK_IMG_FILTER_CUBIC_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3827;"	d
VK_IMG_filter_cubic	support/GLFW/deps/vulkan/vulkan.h	3826;"	d
VK_INCOMPLETE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INCOMPLETE = 5,$/;"	e	enum:VkResult
VK_INCOMPLETE	support/GLFW/src/internal.h	/^    VK_INCOMPLETE = 5,$/;"	e	enum:VkResult
VK_INDEX_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_BEGIN_RANGE = VK_INDEX_TYPE_UINT16,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_END_RANGE = VK_INDEX_TYPE_UINT32,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_RANGE_SIZE = (VK_INDEX_TYPE_UINT32 - VK_INDEX_TYPE_UINT16 + 1),$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_UINT16	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_UINT16 = 0,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_UINT32	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INDEX_TYPE_UINT32 = 1,$/;"	e	enum:VkIndexType
VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = (VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE - VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE + 1),$/;"	e	enum:VkInternalAllocationType
VK_KHR_ANDROID_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3648;"	d
VK_KHR_ANDROID_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3647;"	d
VK_KHR_DISPLAY_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3354;"	d
VK_KHR_DISPLAY_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3353;"	d
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3479;"	d
VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3478;"	d
VK_KHR_MIR_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3613;"	d
VK_KHR_MIR_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3612;"	d
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3707;"	d
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3706;"	d
VK_KHR_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3170;"	d
VK_KHR_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3169;"	d
VK_KHR_SWAPCHAIN_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3275;"	d
VK_KHR_SWAPCHAIN_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3274;"	d
VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3578;"	d
VK_KHR_WAYLAND_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3577;"	d
VK_KHR_WIN32_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3676;"	d
VK_KHR_WIN32_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3675;"	d
VK_KHR_XCB_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3542;"	d
VK_KHR_XCB_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3541;"	d
VK_KHR_XLIB_SURFACE_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3506;"	d
VK_KHR_XLIB_SURFACE_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3505;"	d
VK_KHR_android_surface	support/GLFW/deps/vulkan/vulkan.h	3644;"	d
VK_KHR_display	support/GLFW/deps/vulkan/vulkan.h	3349;"	d
VK_KHR_display_swapchain	support/GLFW/deps/vulkan/vulkan.h	3477;"	d
VK_KHR_mir_surface	support/GLFW/deps/vulkan/vulkan.h	3609;"	d
VK_KHR_sampler_mirror_clamp_to_edge	support/GLFW/deps/vulkan/vulkan.h	3705;"	d
VK_KHR_surface	support/GLFW/deps/vulkan/vulkan.h	3166;"	d
VK_KHR_swapchain	support/GLFW/deps/vulkan/vulkan.h	3271;"	d
VK_KHR_wayland_surface	support/GLFW/deps/vulkan/vulkan.h	3574;"	d
VK_KHR_win32_surface	support/GLFW/deps/vulkan/vulkan.h	3672;"	d
VK_KHR_xcb_surface	support/GLFW/deps/vulkan/vulkan.h	3538;"	d
VK_KHR_xlib_surface	support/GLFW/deps/vulkan/vulkan.h	3502;"	d
VK_LOD_CLAMP_NONE	support/GLFW/deps/vulkan/vulkan.h	95;"	d
VK_LOGIC_OP_AND	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND = 1,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_AND_INVERTED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND_INVERTED = 4,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_AND_REVERSE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND_REVERSE = 2,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_BEGIN_RANGE = VK_LOGIC_OP_CLEAR,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_CLEAR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_CLEAR = 0,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_COPY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_COPY = 3,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_COPY_INVERTED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_COPY_INVERTED = 12,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_END_RANGE = VK_LOGIC_OP_SET,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_EQUIVALENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_EQUIVALENT = 9,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_INVERT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_INVERT = 10,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NAND	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_NAND = 14,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_NOR = 8,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NO_OP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_NO_OP = 5,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR = 7,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR_INVERTED	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR_INVERTED = 13,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR_REVERSE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR_REVERSE = 11,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_RANGE_SIZE = (VK_LOGIC_OP_SET - VK_LOGIC_OP_CLEAR + 1),$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_SET	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_SET = 15,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_XOR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_LOGIC_OP_XOR = 6,$/;"	e	enum:VkLogicOp
VK_MAKE_VERSION	support/GLFW/deps/vulkan/vulkan.h	33;"	d
VK_MAX_DESCRIPTION_SIZE	support/GLFW/deps/vulkan/vulkan.h	109;"	d
VK_MAX_EXTENSION_NAME_SIZE	support/GLFW/deps/vulkan/vulkan.h	108;"	d
VK_MAX_MEMORY_HEAPS	support/GLFW/deps/vulkan/vulkan.h	107;"	d
VK_MAX_MEMORY_TYPES	support/GLFW/deps/vulkan/vulkan.h	106;"	d
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE	support/GLFW/deps/vulkan/vulkan.h	104;"	d
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,$/;"	e	enum:VkMemoryHeapFlagBits
VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkMemoryHeapFlagBits
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_CACHED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_NOT_READY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_NOT_READY = 1,$/;"	e	enum:VkResult
VK_NOT_READY	support/GLFW/src/internal.h	/^    VK_NOT_READY = 1,$/;"	e	enum:VkResult
VK_NULL_HANDLE	support/GLFW/deps/vulkan/vulkan.h	49;"	d
VK_NULL_HANDLE	support/GLFW/src/internal.h	98;"	d
VK_NV_GLSL_SHADER_EXTENSION_NAME	support/GLFW/deps/vulkan/vulkan.h	3823;"	d
VK_NV_GLSL_SHADER_SPEC_VERSION	support/GLFW/deps/vulkan/vulkan.h	3822;"	d
VK_NV_glsl_shader	support/GLFW/deps/vulkan/vulkan.h	3821;"	d
VK_PAD_A	support/GLFW/deps/mingw/xinput.h	60;"	d
VK_PAD_B	support/GLFW/deps/mingw/xinput.h	61;"	d
VK_PAD_BACK	support/GLFW/deps/mingw/xinput.h	73;"	d
VK_PAD_DPAD_DOWN	support/GLFW/deps/mingw/xinput.h	69;"	d
VK_PAD_DPAD_LEFT	support/GLFW/deps/mingw/xinput.h	70;"	d
VK_PAD_DPAD_RIGHT	support/GLFW/deps/mingw/xinput.h	71;"	d
VK_PAD_DPAD_UP	support/GLFW/deps/mingw/xinput.h	68;"	d
VK_PAD_LSHOULDER	support/GLFW/deps/mingw/xinput.h	65;"	d
VK_PAD_LTHUMB_DOWN	support/GLFW/deps/mingw/xinput.h	77;"	d
VK_PAD_LTHUMB_DOWNLEFT	support/GLFW/deps/mingw/xinput.h	83;"	d
VK_PAD_LTHUMB_DOWNRIGHT	support/GLFW/deps/mingw/xinput.h	82;"	d
VK_PAD_LTHUMB_LEFT	support/GLFW/deps/mingw/xinput.h	79;"	d
VK_PAD_LTHUMB_PRESS	support/GLFW/deps/mingw/xinput.h	74;"	d
VK_PAD_LTHUMB_RIGHT	support/GLFW/deps/mingw/xinput.h	78;"	d
VK_PAD_LTHUMB_UP	support/GLFW/deps/mingw/xinput.h	76;"	d
VK_PAD_LTHUMB_UPLEFT	support/GLFW/deps/mingw/xinput.h	80;"	d
VK_PAD_LTHUMB_UPRIGHT	support/GLFW/deps/mingw/xinput.h	81;"	d
VK_PAD_LTRIGGER	support/GLFW/deps/mingw/xinput.h	66;"	d
VK_PAD_RSHOULDER	support/GLFW/deps/mingw/xinput.h	64;"	d
VK_PAD_RTHUMB_DOWN	support/GLFW/deps/mingw/xinput.h	85;"	d
VK_PAD_RTHUMB_DOWNLEFT	support/GLFW/deps/mingw/xinput.h	91;"	d
VK_PAD_RTHUMB_DOWNRIGHT	support/GLFW/deps/mingw/xinput.h	90;"	d
VK_PAD_RTHUMB_LEFT	support/GLFW/deps/mingw/xinput.h	87;"	d
VK_PAD_RTHUMB_PRESS	support/GLFW/deps/mingw/xinput.h	75;"	d
VK_PAD_RTHUMB_RIGHT	support/GLFW/deps/mingw/xinput.h	86;"	d
VK_PAD_RTHUMB_UP	support/GLFW/deps/mingw/xinput.h	84;"	d
VK_PAD_RTHUMB_UPLEFT	support/GLFW/deps/mingw/xinput.h	88;"	d
VK_PAD_RTHUMB_UPRIGHT	support/GLFW/deps/mingw/xinput.h	89;"	d
VK_PAD_RTRIGGER	support/GLFW/deps/mingw/xinput.h	67;"	d
VK_PAD_START	support/GLFW/deps/mingw/xinput.h	72;"	d
VK_PAD_X	support/GLFW/deps/mingw/xinput.h	62;"	d
VK_PAD_Y	support/GLFW/deps/mingw/xinput.h	63;"	d
VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VK_PHYSICAL_DEVICE_TYPE_OTHER,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_CPU	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VK_PHYSICAL_DEVICE_TYPE_CPU,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_OTHER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = (VK_PHYSICAL_DEVICE_TYPE_CPU - VK_PHYSICAL_DEVICE_TYPE_OTHER + 1),$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,$/;"	e	enum:VkPhysicalDeviceType
VK_PIPELINE_BIND_POINT_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VK_PIPELINE_BIND_POINT_GRAPHICS,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_COMPUTE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_COMPUTE = 1,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_END_RANGE = VK_PIPELINE_BIND_POINT_COMPUTE,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_GRAPHICS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_RANGE_SIZE = (VK_PIPELINE_BIND_POINT_COMPUTE - VK_PIPELINE_BIND_POINT_GRAPHICS + 1),$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_ONE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = (VK_PIPELINE_CACHE_HEADER_VERSION_ONE - VK_PIPELINE_CACHE_HEADER_VERSION_ONE + 1),$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_DERIVATIVE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_HOST_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TRANSFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,$/;"	e	enum:VkPipelineStageFlagBits
VK_PLATFORM_H_	support/GLFW/deps/vulkan/vk_platform.h	22;"	d
VK_POLYGON_MODE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_BEGIN_RANGE = VK_POLYGON_MODE_FILL,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_END_RANGE = VK_POLYGON_MODE_POINT,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_FILL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_FILL = 0,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_LINE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_LINE = 1,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_POINT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_POINT = 2,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_POLYGON_MODE_RANGE_SIZE = (VK_POLYGON_MODE_POINT - VK_POLYGON_MODE_FILL + 1),$/;"	e	enum:VkPolygonMode
VK_PRESENT_MODE_BEGIN_RANGE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_BEGIN_RANGE_KHR = VK_PRESENT_MODE_IMMEDIATE_KHR,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_END_RANGE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_END_RANGE_KHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_FIFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_FIFO_KHR = 2,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_FIFO_RELAXED_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_IMMEDIATE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_MAILBOX_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_MAILBOX_KHR = 1,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_MAX_ENUM_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_RANGE_SIZE_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRESENT_MODE_RANGE_SIZE_KHR = (VK_PRESENT_MODE_FIFO_RELAXED_KHR - VK_PRESENT_MODE_IMMEDIATE_KHR + 1),$/;"	e	enum:VkPresentModeKHR
VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_END_RANGE = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_LIST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_POINT_LIST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = (VK_PRIMITIVE_TOPOLOGY_PATCH_LIST - VK_PRIMITIVE_TOPOLOGY_POINT_LIST + 1),$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY	support/GLFW/deps/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,$/;"	e	enum:VkPrimitiveTopology
VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryControlFlagBits
VK_QUERY_CONTROL_PRECISE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,$/;"	e	enum:VkQueryControlFlagBits
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_RESULT_64_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_RESULT_64_BIT = 0x00000001,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_PARTIAL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_WAIT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_RESULT_WAIT_BIT = 0x00000002,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_BEGIN_RANGE = VK_QUERY_TYPE_OCCLUSION,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_END_RANGE = VK_QUERY_TYPE_TIMESTAMP,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_OCCLUSION	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_OCCLUSION = 0,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_PIPELINE_STATISTICS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_RANGE_SIZE = (VK_QUERY_TYPE_TIMESTAMP - VK_QUERY_TYPE_OCCLUSION + 1),$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_TIMESTAMP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUERY_TYPE_TIMESTAMP = 2,$/;"	e	enum:VkQueryType
VK_QUEUE_COMPUTE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUEUE_COMPUTE_BIT = 0x00000002,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_FAMILY_IGNORED	support/GLFW/deps/vulkan/vulkan.h	102;"	d
VK_QUEUE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_GRAPHICS_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUEUE_GRAPHICS_BIT = 0x00000001,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_SPARSE_BINDING_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_TRANSFER_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_QUEUE_TRANSFER_BIT = 0x00000004,$/;"	e	enum:VkQueueFlagBits
VK_REMAINING_ARRAY_LAYERS	support/GLFW/deps/vulkan/vulkan.h	97;"	d
VK_REMAINING_MIP_LEVELS	support/GLFW/deps/vulkan/vulkan.h	96;"	d
VK_RESULT_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_RESULT_BEGIN_RANGE = VK_ERROR_FORMAT_NOT_SUPPORTED,$/;"	e	enum:VkResult
VK_RESULT_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_RESULT_END_RANGE = VK_INCOMPLETE,$/;"	e	enum:VkResult
VK_RESULT_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_RESULT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkResult
VK_RESULT_MAX_ENUM	support/GLFW/src/internal.h	/^    VK_RESULT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkResult
VK_RESULT_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_RESULT_RANGE_SIZE = (VK_INCOMPLETE - VK_ERROR_FORMAT_NOT_SUPPORTED + 1),$/;"	e	enum:VkResult
VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VK_SAMPLER_ADDRESS_MODE_REPEAT,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_END_RANGE = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = (VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER - VK_SAMPLER_ADDRESS_MODE_REPEAT + 1),$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_REPEAT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VK_SAMPLER_MIPMAP_MODE_NEAREST,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_END_RANGE = VK_SAMPLER_MIPMAP_MODE_LINEAR,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_LINEAR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_NEAREST	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = (VK_SAMPLER_MIPMAP_MODE_LINEAR - VK_SAMPLER_MIPMAP_MODE_NEAREST + 1),$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLE_COUNT_16_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_16_BIT = 0x00000010,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_1_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_1_BIT = 0x00000001,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_2_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_2_BIT = 0x00000002,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_32_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_32_BIT = 0x00000020,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_4_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_4_BIT = 0x00000004,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_64_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_64_BIT = 0x00000040,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_8_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_8_BIT = 0x00000008,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSampleCountFlagBits
VK_SHADER_STAGE_ALL	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_ALL_GRAPHICS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_COMPUTE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_FRAGMENT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_GEOMETRY_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_VERTEX_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,$/;"	e	enum:VkShaderStageFlagBits
VK_SHARING_MODE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_BEGIN_RANGE = VK_SHARING_MODE_EXCLUSIVE,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_CONCURRENT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_CONCURRENT = 1,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_END_RANGE = VK_SHARING_MODE_CONCURRENT,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_EXCLUSIVE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_EXCLUSIVE = 0,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SHARING_MODE_RANGE_SIZE = (VK_SHARING_MODE_CONCURRENT - VK_SHARING_MODE_EXCLUSIVE + 1),$/;"	e	enum:VkSharingMode
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSparseMemoryBindFlagBits
VK_SPARSE_MEMORY_BIND_METADATA_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,$/;"	e	enum:VkSparseMemoryBindFlagBits
VK_STENCIL_FACE_BACK_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_FACE_BACK_BIT = 0x00000002,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FACE_FRONT_BIT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_FACE_FRONT_BIT = 0x00000001,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FRONT_AND_BACK	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_FRONT_AND_BACK = 0x00000003,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_OP_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_BEGIN_RANGE = VK_STENCIL_OP_KEEP,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_DECREMENT_AND_CLAMP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_DECREMENT_AND_WRAP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_END_RANGE = VK_STENCIL_OP_DECREMENT_AND_WRAP,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INCREMENT_AND_CLAMP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INCREMENT_AND_WRAP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INVERT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_INVERT = 5,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_KEEP	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_KEEP = 0,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_RANGE_SIZE = (VK_STENCIL_OP_DECREMENT_AND_WRAP - VK_STENCIL_OP_KEEP + 1),$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_REPLACE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_REPLACE = 2,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_ZERO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STENCIL_OP_ZERO = 1,$/;"	e	enum:VkStencilOp
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_APPLICATION_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BEGIN_RANGE = VK_STRUCTURE_TYPE_APPLICATION_INFO,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT	support/GLFW/deps/vulkan/vulkan.h	3715;"	d
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_END_RANGE = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MAX_ENUM	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MEMORY_BARRIER	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RANGE_SIZE = (VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO - VK_STRUCTURE_TYPE_APPLICATION_INFO + 1),$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SUBMIT_INFO	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR	support/GLFW/src/internal.h	/^    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,$/;"	e	enum:VkStructureType
VK_SUBOPTIMAL_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBOPTIMAL_KHR = 1000001003,$/;"	e	enum:VkResult
VK_SUBOPTIMAL_KHR	support/GLFW/src/internal.h	/^    VK_SUBOPTIMAL_KHR = 1000001003,$/;"	e	enum:VkResult
VK_SUBPASS_CONTENTS_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_BEGIN_RANGE = VK_SUBPASS_CONTENTS_INLINE,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_END_RANGE = VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_INLINE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_INLINE = 0,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_RANGE_SIZE = (VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS - VK_SUBPASS_CONTENTS_INLINE + 1),$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_EXTERNAL	support/GLFW/deps/vulkan/vulkan.h	103;"	d
VK_SUCCESS	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SUCCESS = 0,$/;"	e	enum:VkResult
VK_SUCCESS	support/GLFW/src/internal.h	/^    VK_SUCCESS = 0,$/;"	e	enum:VkResult
VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_CACHE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = (VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE - VK_SYSTEM_ALLOCATION_SCOPE_COMMAND + 1),$/;"	e	enum:VkSystemAllocationScope
VK_TIMEOUT	support/GLFW/deps/vulkan/vulkan.h	/^    VK_TIMEOUT = 2,$/;"	e	enum:VkResult
VK_TIMEOUT	support/GLFW/src/internal.h	/^    VK_TIMEOUT = 2,$/;"	e	enum:VkResult
VK_TRUE	support/GLFW/deps/vulkan/vulkan.h	100;"	d
VK_UUID_SIZE	support/GLFW/deps/vulkan/vulkan.h	105;"	d
VK_VERSION_1_0	support/GLFW/deps/vulkan/vulkan.h	30;"	d
VK_VERSION_MAJOR	support/GLFW/deps/vulkan/vulkan.h	42;"	d
VK_VERSION_MINOR	support/GLFW/deps/vulkan/vulkan.h	43;"	d
VK_VERSION_PATCH	support/GLFW/deps/vulkan/vulkan.h	44;"	d
VK_VERTEX_INPUT_RATE_BEGIN_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VK_VERTEX_INPUT_RATE_VERTEX,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_END_RANGE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_END_RANGE = VK_VERTEX_INPUT_RATE_INSTANCE,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_INSTANCE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_INSTANCE = 1,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_MAX_ENUM	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_RANGE_SIZE	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_RANGE_SIZE = (VK_VERTEX_INPUT_RATE_INSTANCE - VK_VERTEX_INPUT_RATE_VERTEX + 1),$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_VERTEX	support/GLFW/deps/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_VERTEX = 0,$/;"	e	enum:VkVertexInputRate
VK_WHOLE_SIZE	support/GLFW/deps/vulkan/vulkan.h	98;"	d
VOLUME_OBJECT	optixVolumeViewer/volume.h	/^    VOLUME_OBJECT = 1 << 2,$/;"	e	enum:ObjectType
VSliderFloat	support/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
VSliderInt	support/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
VSliderScalar	support/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
VULKAN_H_	support/GLFW/deps/vulkan/vulkan.h	2;"	d
Valid	optixMotionGeometry/tiny_obj_loader.h	/^  bool Valid() const { return valid_; }$/;"	f	class:tinyobj::ObjReader
Valid	support/imgui/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before the next NewFrame() is called.$/;"	m	struct:ImDrawData
Value	support/imgui/imgui.h	/^    ImVec4              Value;$/;"	m	struct:ImColor
Value	support/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui
Value	support/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui
Value	support/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui
Value	support/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui
Value	support/tinygltf/tiny_gltf.h	/^  Value()$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(bool b) : type_(BOOL_TYPE) { boolean_value_ = b; }$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(const Array &a) : type_(ARRAY_TYPE) { array_value_ = a; }$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(const Object &o) : type_(OBJECT_TYPE) { object_value_ = o; }$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(const std::string &s) : type_(STRING_TYPE) {$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(const unsigned char *p, size_t n) : type_(BINARY_TYPE) {$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(double n) : type_(REAL_TYPE) { real_value_ = n; }$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(int i) : type_(INT_TYPE) {$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^  explicit Value(std::string &&s)$/;"	f	class:tinygltf::Value
Value	support/tinygltf/tiny_gltf.h	/^class Value {$/;"	c	namespace:tinygltf
ValueMask	optixVolumeViewer/nanovdb/NanoVDB.h	/^class ValueMask$/;"	c	namespace:nanovdb
ValueToJson	support/tinygltf/tiny_gltf.h	/^static bool ValueToJson(const Value &value, json *ret) {$/;"	f	namespace:tinygltf
Values	support/imgui/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	file:
VarIdx	support/imgui/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod
Vec2f	cuda/GeometryData.h	/^struct Vec2f$/;"	s
Vec3	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3(T x, T y, T z)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
Vec3	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Vec3(T x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
Vec3	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Vec3(const Coord& ijk)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
Vec3	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Vec3(const Vec3<T2>& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
Vec3	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Vec3$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Vec3d	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Vec3d = 7,$/;"	m	class:nanovdb::GridType
Vec3f	optixVolumeViewer/nanovdb/NanoVDB.h	/^                                 Vec3f = 6,$/;"	m	class:nanovdb::GridType
Vec4	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4(T x, T y, T z, T w)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
Vec4	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Vec4(T x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
Vec4	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ explicit Vec4(const Vec4<T2>& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
Vec4	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Vec4$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Vec4f	cuda/GeometryData.h	/^struct Vec4f$/;"	s
VectorDim	sutil/Matrix.h	/^  template <> struct VectorDim<2> { typedef float2 VectorType; };$/;"	s	namespace:sutil
VectorDim	sutil/Matrix.h	/^  template <> struct VectorDim<3> { typedef float3 VectorType; };$/;"	s	namespace:sutil
VectorDim	sutil/Matrix.h	/^  template <> struct VectorDim<4> { typedef float4 VectorType; };$/;"	s	namespace:sutil
VectorDim	sutil/Matrix.h	/^  template <int DIM> struct VectorDim { };$/;"	s	namespace:sutil
VectorType	sutil/Matrix.h	/^  template <> struct VectorDim<2> { typedef float2 VectorType; };$/;"	t	struct:sutil::VectorDim
VectorType	sutil/Matrix.h	/^  template <> struct VectorDim<3> { typedef float3 VectorType; };$/;"	t	struct:sutil::VectorDim
VectorType	sutil/Matrix.h	/^  template <> struct VectorDim<4> { typedef float4 VectorType; };$/;"	t	struct:sutil::VectorDim
Version	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Version() : mData( uint32_t(NANOVDB_MAJOR_VERSION_NUMBER) << 21 |$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
Version	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Version(uint32_t major, uint32_t minor, uint32_t patch) $/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
Version	optixVolumeViewer/nanovdb/NanoVDB.h	/^class Version$/;"	c	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
Vertex	optixBoundValues/optixBoundValues.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixCutouts/optixCutouts.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixMultiGPU/optixMultiGPU.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixNVLink/optixNVLink.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixPathTracer/optixPathTracer.cpp	/^struct Vertex$/;"	s	file:
Vertex	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^struct Vertex$/;"	s	file:
VerticalSeparator	support/imgui/imgui_widgets.cpp	/^void ImGui::VerticalSeparator()$/;"	f	class:ImGui
Vibration	support/GLFW/deps/mingw/xinput.h	/^    XINPUT_VIBRATION Vibration;$/;"	m	struct:_XINPUT_CAPABILITIES
ViewMode	sutil/Trackball.h	/^    enum ViewMode$/;"	g	class:sutil::Trackball
VirtualKey	support/GLFW/deps/mingw/xinput.h	/^    WORD VirtualKey;$/;"	m	struct:_XINPUT_KEYSTROKE
VisibleTabId	support/imgui/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. when previewing contents for CTRL+TAB preview)$/;"	m	struct:ImGuiTabBar
VisibleTabWasSubmitted	support/imgui/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar
VkAccessFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkAccessFlagBits {$/;"	g
VkAccessFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkAccessFlagBits;$/;"	t	typeref:enum:VkAccessFlagBits
VkAccessFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkAccessFlags;$/;"	t
VkAllocationCallbacks	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkAllocationCallbacks {$/;"	s
VkAllocationCallbacks	support/GLFW/deps/vulkan/vulkan.h	/^} VkAllocationCallbacks;$/;"	t	typeref:struct:VkAllocationCallbacks
VkAllocationCallbacks	support/GLFW/src/internal.h	/^typedef struct VkAllocationCallbacks VkAllocationCallbacks;$/;"	t	typeref:struct:VkAllocationCallbacks
VkAndroidSurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkAndroidSurfaceCreateFlagsKHR;$/;"	t
VkAndroidSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkAndroidSurfaceCreateInfoKHR {$/;"	s
VkAndroidSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkAndroidSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkAndroidSurfaceCreateInfoKHR
VkApplicationInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkApplicationInfo {$/;"	s
VkApplicationInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkApplicationInfo;$/;"	t	typeref:struct:VkApplicationInfo
VkAttachmentDescription	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkAttachmentDescription {$/;"	s
VkAttachmentDescription	support/GLFW/deps/vulkan/vulkan.h	/^} VkAttachmentDescription;$/;"	t	typeref:struct:VkAttachmentDescription
VkAttachmentDescriptionFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkAttachmentDescriptionFlagBits {$/;"	g
VkAttachmentDescriptionFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkAttachmentDescriptionFlagBits;$/;"	t	typeref:enum:VkAttachmentDescriptionFlagBits
VkAttachmentDescriptionFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkAttachmentDescriptionFlags;$/;"	t
VkAttachmentLoadOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkAttachmentLoadOp {$/;"	g
VkAttachmentLoadOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkAttachmentLoadOp;$/;"	t	typeref:enum:VkAttachmentLoadOp
VkAttachmentReference	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkAttachmentReference {$/;"	s
VkAttachmentReference	support/GLFW/deps/vulkan/vulkan.h	/^} VkAttachmentReference;$/;"	t	typeref:struct:VkAttachmentReference
VkAttachmentStoreOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkAttachmentStoreOp {$/;"	g
VkAttachmentStoreOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkAttachmentStoreOp;$/;"	t	typeref:enum:VkAttachmentStoreOp
VkBindSparseInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBindSparseInfo {$/;"	s
VkBindSparseInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkBindSparseInfo;$/;"	t	typeref:struct:VkBindSparseInfo
VkBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkBlendFactor {$/;"	g
VkBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^} VkBlendFactor;$/;"	t	typeref:enum:VkBlendFactor
VkBlendOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkBlendOp {$/;"	g
VkBlendOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkBlendOp;$/;"	t	typeref:enum:VkBlendOp
VkBool32	support/GLFW/deps/vulkan/vulkan.h	/^typedef uint32_t VkBool32;$/;"	t
VkBool32	support/GLFW/src/internal.h	/^typedef uint32_t VkBool32;$/;"	t
VkBorderColor	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkBorderColor {$/;"	g
VkBorderColor	support/GLFW/deps/vulkan/vulkan.h	/^} VkBorderColor;$/;"	t	typeref:enum:VkBorderColor
VkBufferCopy	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBufferCopy {$/;"	s
VkBufferCopy	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferCopy;$/;"	t	typeref:struct:VkBufferCopy
VkBufferCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkBufferCreateFlagBits {$/;"	g
VkBufferCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferCreateFlagBits;$/;"	t	typeref:enum:VkBufferCreateFlagBits
VkBufferCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkBufferCreateFlags;$/;"	t
VkBufferCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBufferCreateInfo {$/;"	s
VkBufferCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferCreateInfo;$/;"	t	typeref:struct:VkBufferCreateInfo
VkBufferImageCopy	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBufferImageCopy {$/;"	s
VkBufferImageCopy	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferImageCopy;$/;"	t	typeref:struct:VkBufferImageCopy
VkBufferMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBufferMemoryBarrier {$/;"	s
VkBufferMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferMemoryBarrier;$/;"	t	typeref:struct:VkBufferMemoryBarrier
VkBufferUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkBufferUsageFlagBits {$/;"	g
VkBufferUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferUsageFlagBits;$/;"	t	typeref:enum:VkBufferUsageFlagBits
VkBufferUsageFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkBufferUsageFlags;$/;"	t
VkBufferViewCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkBufferViewCreateFlags;$/;"	t
VkBufferViewCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkBufferViewCreateInfo {$/;"	s
VkBufferViewCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkBufferViewCreateInfo;$/;"	t	typeref:struct:VkBufferViewCreateInfo
VkClearAttachment	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkClearAttachment {$/;"	s
VkClearAttachment	support/GLFW/deps/vulkan/vulkan.h	/^} VkClearAttachment;$/;"	t	typeref:struct:VkClearAttachment
VkClearColorValue	support/GLFW/deps/vulkan/vulkan.h	/^typedef union VkClearColorValue {$/;"	u
VkClearColorValue	support/GLFW/deps/vulkan/vulkan.h	/^} VkClearColorValue;$/;"	t	typeref:union:VkClearColorValue
VkClearDepthStencilValue	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkClearDepthStencilValue {$/;"	s
VkClearDepthStencilValue	support/GLFW/deps/vulkan/vulkan.h	/^} VkClearDepthStencilValue;$/;"	t	typeref:struct:VkClearDepthStencilValue
VkClearRect	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkClearRect {$/;"	s
VkClearRect	support/GLFW/deps/vulkan/vulkan.h	/^} VkClearRect;$/;"	t	typeref:struct:VkClearRect
VkClearValue	support/GLFW/deps/vulkan/vulkan.h	/^typedef union VkClearValue {$/;"	u
VkClearValue	support/GLFW/deps/vulkan/vulkan.h	/^} VkClearValue;$/;"	t	typeref:union:VkClearValue
VkColorComponentFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkColorComponentFlagBits {$/;"	g
VkColorComponentFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkColorComponentFlagBits;$/;"	t	typeref:enum:VkColorComponentFlagBits
VkColorComponentFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkColorComponentFlags;$/;"	t
VkColorSpaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkColorSpaceKHR {$/;"	g
VkColorSpaceKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkColorSpaceKHR;$/;"	t	typeref:enum:VkColorSpaceKHR
VkCommandBufferAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkCommandBufferAllocateInfo {$/;"	s
VkCommandBufferAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferAllocateInfo;$/;"	t	typeref:struct:VkCommandBufferAllocateInfo
VkCommandBufferBeginInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkCommandBufferBeginInfo {$/;"	s
VkCommandBufferBeginInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferBeginInfo;$/;"	t	typeref:struct:VkCommandBufferBeginInfo
VkCommandBufferInheritanceInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkCommandBufferInheritanceInfo {$/;"	s
VkCommandBufferInheritanceInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferInheritanceInfo;$/;"	t	typeref:struct:VkCommandBufferInheritanceInfo
VkCommandBufferLevel	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCommandBufferLevel {$/;"	g
VkCommandBufferLevel	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferLevel;$/;"	t	typeref:enum:VkCommandBufferLevel
VkCommandBufferResetFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCommandBufferResetFlagBits {$/;"	g
VkCommandBufferResetFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferResetFlagBits;$/;"	t	typeref:enum:VkCommandBufferResetFlagBits
VkCommandBufferResetFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCommandBufferResetFlags;$/;"	t
VkCommandBufferUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCommandBufferUsageFlagBits {$/;"	g
VkCommandBufferUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandBufferUsageFlagBits;$/;"	t	typeref:enum:VkCommandBufferUsageFlagBits
VkCommandBufferUsageFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCommandBufferUsageFlags;$/;"	t
VkCommandPoolCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCommandPoolCreateFlagBits {$/;"	g
VkCommandPoolCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandPoolCreateFlagBits;$/;"	t	typeref:enum:VkCommandPoolCreateFlagBits
VkCommandPoolCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCommandPoolCreateFlags;$/;"	t
VkCommandPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkCommandPoolCreateInfo {$/;"	s
VkCommandPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandPoolCreateInfo;$/;"	t	typeref:struct:VkCommandPoolCreateInfo
VkCommandPoolResetFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCommandPoolResetFlagBits {$/;"	g
VkCommandPoolResetFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkCommandPoolResetFlagBits;$/;"	t	typeref:enum:VkCommandPoolResetFlagBits
VkCommandPoolResetFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCommandPoolResetFlags;$/;"	t
VkCompareOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCompareOp {$/;"	g
VkCompareOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkCompareOp;$/;"	t	typeref:enum:VkCompareOp
VkComponentMapping	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkComponentMapping {$/;"	s
VkComponentMapping	support/GLFW/deps/vulkan/vulkan.h	/^} VkComponentMapping;$/;"	t	typeref:struct:VkComponentMapping
VkComponentSwizzle	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkComponentSwizzle {$/;"	g
VkComponentSwizzle	support/GLFW/deps/vulkan/vulkan.h	/^} VkComponentSwizzle;$/;"	t	typeref:enum:VkComponentSwizzle
VkCompositeAlphaFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCompositeAlphaFlagBitsKHR {$/;"	g
VkCompositeAlphaFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkCompositeAlphaFlagBitsKHR;$/;"	t	typeref:enum:VkCompositeAlphaFlagBitsKHR
VkCompositeAlphaFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCompositeAlphaFlagsKHR;$/;"	t
VkComputePipelineCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkComputePipelineCreateInfo {$/;"	s
VkComputePipelineCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkComputePipelineCreateInfo;$/;"	t	typeref:struct:VkComputePipelineCreateInfo
VkCopyDescriptorSet	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkCopyDescriptorSet {$/;"	s
VkCopyDescriptorSet	support/GLFW/deps/vulkan/vulkan.h	/^} VkCopyDescriptorSet;$/;"	t	typeref:struct:VkCopyDescriptorSet
VkCullModeFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkCullModeFlagBits {$/;"	g
VkCullModeFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkCullModeFlagBits;$/;"	t	typeref:enum:VkCullModeFlagBits
VkCullModeFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkCullModeFlags;$/;"	t
VkDebugReportCallbackCreateInfoEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDebugReportCallbackCreateInfoEXT {$/;"	s
VkDebugReportCallbackCreateInfoEXT	support/GLFW/deps/vulkan/vulkan.h	/^} VkDebugReportCallbackCreateInfoEXT;$/;"	t	typeref:struct:VkDebugReportCallbackCreateInfoEXT
VkDebugReportErrorEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDebugReportErrorEXT {$/;"	g
VkDebugReportErrorEXT	support/GLFW/deps/vulkan/vulkan.h	/^} VkDebugReportErrorEXT;$/;"	t	typeref:enum:VkDebugReportErrorEXT
VkDebugReportFlagBitsEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDebugReportFlagBitsEXT {$/;"	g
VkDebugReportFlagBitsEXT	support/GLFW/deps/vulkan/vulkan.h	/^} VkDebugReportFlagBitsEXT;$/;"	t	typeref:enum:VkDebugReportFlagBitsEXT
VkDebugReportFlagsEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDebugReportFlagsEXT;$/;"	t
VkDebugReportObjectTypeEXT	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDebugReportObjectTypeEXT {$/;"	g
VkDebugReportObjectTypeEXT	support/GLFW/deps/vulkan/vulkan.h	/^} VkDebugReportObjectTypeEXT;$/;"	t	typeref:enum:VkDebugReportObjectTypeEXT
VkDependencyFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDependencyFlagBits {$/;"	g
VkDependencyFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkDependencyFlagBits;$/;"	t	typeref:enum:VkDependencyFlagBits
VkDependencyFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDependencyFlags;$/;"	t
VkDescriptorBufferInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorBufferInfo {$/;"	s
VkDescriptorBufferInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorBufferInfo;$/;"	t	typeref:struct:VkDescriptorBufferInfo
VkDescriptorImageInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorImageInfo {$/;"	s
VkDescriptorImageInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorImageInfo;$/;"	t	typeref:struct:VkDescriptorImageInfo
VkDescriptorPoolCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDescriptorPoolCreateFlagBits {$/;"	g
VkDescriptorPoolCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorPoolCreateFlagBits;$/;"	t	typeref:enum:VkDescriptorPoolCreateFlagBits
VkDescriptorPoolCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorPoolCreateFlags;$/;"	t
VkDescriptorPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorPoolCreateInfo {$/;"	s
VkDescriptorPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorPoolCreateInfo;$/;"	t	typeref:struct:VkDescriptorPoolCreateInfo
VkDescriptorPoolResetFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorPoolResetFlags;$/;"	t
VkDescriptorPoolSize	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorPoolSize {$/;"	s
VkDescriptorPoolSize	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorPoolSize;$/;"	t	typeref:struct:VkDescriptorPoolSize
VkDescriptorSetAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorSetAllocateInfo {$/;"	s
VkDescriptorSetAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorSetAllocateInfo;$/;"	t	typeref:struct:VkDescriptorSetAllocateInfo
VkDescriptorSetLayoutBinding	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorSetLayoutBinding {$/;"	s
VkDescriptorSetLayoutBinding	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorSetLayoutBinding;$/;"	t	typeref:struct:VkDescriptorSetLayoutBinding
VkDescriptorSetLayoutCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorSetLayoutCreateFlags;$/;"	t
VkDescriptorSetLayoutCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDescriptorSetLayoutCreateInfo {$/;"	s
VkDescriptorSetLayoutCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorSetLayoutCreateInfo;$/;"	t	typeref:struct:VkDescriptorSetLayoutCreateInfo
VkDescriptorType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDescriptorType {$/;"	g
VkDescriptorType	support/GLFW/deps/vulkan/vulkan.h	/^} VkDescriptorType;$/;"	t	typeref:enum:VkDescriptorType
VkDeviceCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDeviceCreateFlags;$/;"	t
VkDeviceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDeviceCreateInfo {$/;"	s
VkDeviceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDeviceCreateInfo;$/;"	t	typeref:struct:VkDeviceCreateInfo
VkDeviceQueueCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDeviceQueueCreateFlags;$/;"	t
VkDeviceQueueCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDeviceQueueCreateInfo {$/;"	s
VkDeviceQueueCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkDeviceQueueCreateInfo;$/;"	t	typeref:struct:VkDeviceQueueCreateInfo
VkDeviceSize	support/GLFW/deps/vulkan/vulkan.h	/^typedef uint64_t VkDeviceSize;$/;"	t
VkDispatchIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDispatchIndirectCommand {$/;"	s
VkDispatchIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^} VkDispatchIndirectCommand;$/;"	t	typeref:struct:VkDispatchIndirectCommand
VkDisplayModeCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDisplayModeCreateFlagsKHR;$/;"	t
VkDisplayModeCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayModeCreateInfoKHR {$/;"	s
VkDisplayModeCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayModeCreateInfoKHR;$/;"	t	typeref:struct:VkDisplayModeCreateInfoKHR
VkDisplayModeParametersKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayModeParametersKHR {$/;"	s
VkDisplayModeParametersKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayModeParametersKHR;$/;"	t	typeref:struct:VkDisplayModeParametersKHR
VkDisplayModePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayModePropertiesKHR {$/;"	s
VkDisplayModePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayModePropertiesKHR;$/;"	t	typeref:struct:VkDisplayModePropertiesKHR
VkDisplayPlaneAlphaFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDisplayPlaneAlphaFlagBitsKHR {$/;"	g
VkDisplayPlaneAlphaFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayPlaneAlphaFlagBitsKHR;$/;"	t	typeref:enum:VkDisplayPlaneAlphaFlagBitsKHR
VkDisplayPlaneAlphaFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDisplayPlaneAlphaFlagsKHR;$/;"	t
VkDisplayPlaneCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayPlaneCapabilitiesKHR {$/;"	s
VkDisplayPlaneCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayPlaneCapabilitiesKHR;$/;"	t	typeref:struct:VkDisplayPlaneCapabilitiesKHR
VkDisplayPlanePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayPlanePropertiesKHR {$/;"	s
VkDisplayPlanePropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayPlanePropertiesKHR;$/;"	t	typeref:struct:VkDisplayPlanePropertiesKHR
VkDisplayPresentInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayPresentInfoKHR {$/;"	s
VkDisplayPresentInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayPresentInfoKHR;$/;"	t	typeref:struct:VkDisplayPresentInfoKHR
VkDisplayPropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplayPropertiesKHR {$/;"	s
VkDisplayPropertiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplayPropertiesKHR;$/;"	t	typeref:struct:VkDisplayPropertiesKHR
VkDisplaySurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkDisplaySurfaceCreateFlagsKHR;$/;"	t
VkDisplaySurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDisplaySurfaceCreateInfoKHR {$/;"	s
VkDisplaySurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkDisplaySurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkDisplaySurfaceCreateInfoKHR
VkDrawIndexedIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDrawIndexedIndirectCommand {$/;"	s
VkDrawIndexedIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^} VkDrawIndexedIndirectCommand;$/;"	t	typeref:struct:VkDrawIndexedIndirectCommand
VkDrawIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkDrawIndirectCommand {$/;"	s
VkDrawIndirectCommand	support/GLFW/deps/vulkan/vulkan.h	/^} VkDrawIndirectCommand;$/;"	t	typeref:struct:VkDrawIndirectCommand
VkDynamicState	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkDynamicState {$/;"	g
VkDynamicState	support/GLFW/deps/vulkan/vulkan.h	/^} VkDynamicState;$/;"	t	typeref:enum:VkDynamicState
VkEventCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkEventCreateFlags;$/;"	t
VkEventCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkEventCreateInfo {$/;"	s
VkEventCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkEventCreateInfo;$/;"	t	typeref:struct:VkEventCreateInfo
VkExtensionProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkExtensionProperties {$/;"	s
VkExtensionProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkExtensionProperties;$/;"	t	typeref:struct:VkExtensionProperties
VkExtensionProperties	support/GLFW/src/internal.h	/^typedef struct VkExtensionProperties$/;"	s
VkExtensionProperties	support/GLFW/src/internal.h	/^} VkExtensionProperties;$/;"	t	typeref:struct:VkExtensionProperties
VkExtent2D	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkExtent2D {$/;"	s
VkExtent2D	support/GLFW/deps/vulkan/vulkan.h	/^} VkExtent2D;$/;"	t	typeref:struct:VkExtent2D
VkExtent3D	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkExtent3D {$/;"	s
VkExtent3D	support/GLFW/deps/vulkan/vulkan.h	/^} VkExtent3D;$/;"	t	typeref:struct:VkExtent3D
VkFenceCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkFenceCreateFlagBits {$/;"	g
VkFenceCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkFenceCreateFlagBits;$/;"	t	typeref:enum:VkFenceCreateFlagBits
VkFenceCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkFenceCreateFlags;$/;"	t
VkFenceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkFenceCreateInfo {$/;"	s
VkFenceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkFenceCreateInfo;$/;"	t	typeref:struct:VkFenceCreateInfo
VkFilter	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkFilter {$/;"	g
VkFilter	support/GLFW/deps/vulkan/vulkan.h	/^} VkFilter;$/;"	t	typeref:enum:VkFilter
VkFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef uint32_t VkFlags;$/;"	t
VkFlags	support/GLFW/src/internal.h	/^typedef uint32_t VkFlags;$/;"	t
VkFormat	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkFormat {$/;"	g
VkFormat	support/GLFW/deps/vulkan/vulkan.h	/^} VkFormat;$/;"	t	typeref:enum:VkFormat
VkFormatFeatureFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkFormatFeatureFlagBits {$/;"	g
VkFormatFeatureFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkFormatFeatureFlagBits;$/;"	t	typeref:enum:VkFormatFeatureFlagBits
VkFormatFeatureFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkFormatFeatureFlags;$/;"	t
VkFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkFormatProperties {$/;"	s
VkFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkFormatProperties;$/;"	t	typeref:struct:VkFormatProperties
VkFramebufferCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkFramebufferCreateFlags;$/;"	t
VkFramebufferCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkFramebufferCreateInfo {$/;"	s
VkFramebufferCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkFramebufferCreateInfo;$/;"	t	typeref:struct:VkFramebufferCreateInfo
VkFrontFace	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkFrontFace {$/;"	g
VkFrontFace	support/GLFW/deps/vulkan/vulkan.h	/^} VkFrontFace;$/;"	t	typeref:enum:VkFrontFace
VkGraphicsPipelineCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkGraphicsPipelineCreateInfo {$/;"	s
VkGraphicsPipelineCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkGraphicsPipelineCreateInfo;$/;"	t	typeref:struct:VkGraphicsPipelineCreateInfo
VkImageAspectFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageAspectFlagBits {$/;"	g
VkImageAspectFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageAspectFlagBits;$/;"	t	typeref:enum:VkImageAspectFlagBits
VkImageAspectFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkImageAspectFlags;$/;"	t
VkImageBlit	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageBlit {$/;"	s
VkImageBlit	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageBlit;$/;"	t	typeref:struct:VkImageBlit
VkImageCopy	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageCopy {$/;"	s
VkImageCopy	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageCopy;$/;"	t	typeref:struct:VkImageCopy
VkImageCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageCreateFlagBits {$/;"	g
VkImageCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageCreateFlagBits;$/;"	t	typeref:enum:VkImageCreateFlagBits
VkImageCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkImageCreateFlags;$/;"	t
VkImageCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageCreateInfo {$/;"	s
VkImageCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageCreateInfo;$/;"	t	typeref:struct:VkImageCreateInfo
VkImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageFormatProperties {$/;"	s
VkImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageFormatProperties;$/;"	t	typeref:struct:VkImageFormatProperties
VkImageLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageLayout {$/;"	g
VkImageLayout	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageLayout;$/;"	t	typeref:enum:VkImageLayout
VkImageMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageMemoryBarrier {$/;"	s
VkImageMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageMemoryBarrier;$/;"	t	typeref:struct:VkImageMemoryBarrier
VkImageResolve	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageResolve {$/;"	s
VkImageResolve	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageResolve;$/;"	t	typeref:struct:VkImageResolve
VkImageSubresource	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageSubresource {$/;"	s
VkImageSubresource	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageSubresource;$/;"	t	typeref:struct:VkImageSubresource
VkImageSubresourceLayers	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageSubresourceLayers {$/;"	s
VkImageSubresourceLayers	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageSubresourceLayers;$/;"	t	typeref:struct:VkImageSubresourceLayers
VkImageSubresourceRange	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageSubresourceRange {$/;"	s
VkImageSubresourceRange	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageSubresourceRange;$/;"	t	typeref:struct:VkImageSubresourceRange
VkImageTiling	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageTiling {$/;"	g
VkImageTiling	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageTiling;$/;"	t	typeref:enum:VkImageTiling
VkImageType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageType {$/;"	g
VkImageType	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageType;$/;"	t	typeref:enum:VkImageType
VkImageUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageUsageFlagBits {$/;"	g
VkImageUsageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageUsageFlagBits;$/;"	t	typeref:enum:VkImageUsageFlagBits
VkImageUsageFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkImageUsageFlags;$/;"	t
VkImageViewCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkImageViewCreateFlags;$/;"	t
VkImageViewCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkImageViewCreateInfo {$/;"	s
VkImageViewCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageViewCreateInfo;$/;"	t	typeref:struct:VkImageViewCreateInfo
VkImageViewType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkImageViewType {$/;"	g
VkImageViewType	support/GLFW/deps/vulkan/vulkan.h	/^} VkImageViewType;$/;"	t	typeref:enum:VkImageViewType
VkIndexType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkIndexType {$/;"	g
VkIndexType	support/GLFW/deps/vulkan/vulkan.h	/^} VkIndexType;$/;"	t	typeref:enum:VkIndexType
VkInstance	support/GLFW/src/internal.h	/^typedef void* VkInstance;$/;"	t
VkInstanceCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkInstanceCreateFlags;$/;"	t
VkInstanceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkInstanceCreateInfo {$/;"	s
VkInstanceCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkInstanceCreateInfo;$/;"	t	typeref:struct:VkInstanceCreateInfo
VkInternalAllocationType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkInternalAllocationType {$/;"	g
VkInternalAllocationType	support/GLFW/deps/vulkan/vulkan.h	/^} VkInternalAllocationType;$/;"	t	typeref:enum:VkInternalAllocationType
VkLayerProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkLayerProperties {$/;"	s
VkLayerProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkLayerProperties;$/;"	t	typeref:struct:VkLayerProperties
VkLogicOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkLogicOp {$/;"	g
VkLogicOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkLogicOp;$/;"	t	typeref:enum:VkLogicOp
VkMappedMemoryRange	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMappedMemoryRange {$/;"	s
VkMappedMemoryRange	support/GLFW/deps/vulkan/vulkan.h	/^} VkMappedMemoryRange;$/;"	t	typeref:struct:VkMappedMemoryRange
VkMemoryAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMemoryAllocateInfo {$/;"	s
VkMemoryAllocateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryAllocateInfo;$/;"	t	typeref:struct:VkMemoryAllocateInfo
VkMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMemoryBarrier {$/;"	s
VkMemoryBarrier	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryBarrier;$/;"	t	typeref:struct:VkMemoryBarrier
VkMemoryHeap	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMemoryHeap {$/;"	s
VkMemoryHeap	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryHeap;$/;"	t	typeref:struct:VkMemoryHeap
VkMemoryHeapFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkMemoryHeapFlagBits {$/;"	g
VkMemoryHeapFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryHeapFlagBits;$/;"	t	typeref:enum:VkMemoryHeapFlagBits
VkMemoryHeapFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkMemoryHeapFlags;$/;"	t
VkMemoryMapFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkMemoryMapFlags;$/;"	t
VkMemoryPropertyFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkMemoryPropertyFlagBits {$/;"	g
VkMemoryPropertyFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryPropertyFlagBits;$/;"	t	typeref:enum:VkMemoryPropertyFlagBits
VkMemoryPropertyFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkMemoryPropertyFlags;$/;"	t
VkMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMemoryRequirements {$/;"	s
VkMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryRequirements;$/;"	t	typeref:struct:VkMemoryRequirements
VkMemoryType	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMemoryType {$/;"	s
VkMemoryType	support/GLFW/deps/vulkan/vulkan.h	/^} VkMemoryType;$/;"	t	typeref:struct:VkMemoryType
VkMirSurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkMirSurfaceCreateFlagsKHR;$/;"	t
VkMirSurfaceCreateFlagsKHR	support/GLFW/src/mir_platform.h	/^typedef VkFlags VkMirSurfaceCreateFlagsKHR;$/;"	t
VkMirSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkMirSurfaceCreateInfoKHR {$/;"	s
VkMirSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkMirSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkMirSurfaceCreateInfoKHR
VkMirSurfaceCreateInfoKHR	support/GLFW/src/mir_platform.h	/^typedef struct VkMirSurfaceCreateInfoKHR$/;"	s
VkMirSurfaceCreateInfoKHR	support/GLFW/src/mir_platform.h	/^} VkMirSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkMirSurfaceCreateInfoKHR
VkOffset2D	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkOffset2D {$/;"	s
VkOffset2D	support/GLFW/deps/vulkan/vulkan.h	/^} VkOffset2D;$/;"	t	typeref:struct:VkOffset2D
VkOffset3D	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkOffset3D {$/;"	s
VkOffset3D	support/GLFW/deps/vulkan/vulkan.h	/^} VkOffset3D;$/;"	t	typeref:struct:VkOffset3D
VkPhysicalDevice	support/GLFW/src/internal.h	/^typedef void* VkPhysicalDevice;$/;"	t
VkPhysicalDeviceFeatures	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceFeatures {$/;"	s
VkPhysicalDeviceFeatures	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceFeatures;$/;"	t	typeref:struct:VkPhysicalDeviceFeatures
VkPhysicalDeviceLimits	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceLimits {$/;"	s
VkPhysicalDeviceLimits	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceLimits;$/;"	t	typeref:struct:VkPhysicalDeviceLimits
VkPhysicalDeviceMemoryProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceMemoryProperties {$/;"	s
VkPhysicalDeviceMemoryProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceMemoryProperties;$/;"	t	typeref:struct:VkPhysicalDeviceMemoryProperties
VkPhysicalDeviceProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceProperties {$/;"	s
VkPhysicalDeviceProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceProperties;$/;"	t	typeref:struct:VkPhysicalDeviceProperties
VkPhysicalDeviceSparseProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceSparseProperties {$/;"	s
VkPhysicalDeviceSparseProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceSparseProperties;$/;"	t	typeref:struct:VkPhysicalDeviceSparseProperties
VkPhysicalDeviceType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPhysicalDeviceType {$/;"	g
VkPhysicalDeviceType	support/GLFW/deps/vulkan/vulkan.h	/^} VkPhysicalDeviceType;$/;"	t	typeref:enum:VkPhysicalDeviceType
VkPipelineBindPoint	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPipelineBindPoint {$/;"	g
VkPipelineBindPoint	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineBindPoint;$/;"	t	typeref:enum:VkPipelineBindPoint
VkPipelineCacheCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineCacheCreateFlags;$/;"	t
VkPipelineCacheCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineCacheCreateInfo {$/;"	s
VkPipelineCacheCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineCacheCreateInfo;$/;"	t	typeref:struct:VkPipelineCacheCreateInfo
VkPipelineCacheHeaderVersion	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPipelineCacheHeaderVersion {$/;"	g
VkPipelineCacheHeaderVersion	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineCacheHeaderVersion;$/;"	t	typeref:enum:VkPipelineCacheHeaderVersion
VkPipelineColorBlendAttachmentState	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineColorBlendAttachmentState {$/;"	s
VkPipelineColorBlendAttachmentState	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineColorBlendAttachmentState;$/;"	t	typeref:struct:VkPipelineColorBlendAttachmentState
VkPipelineColorBlendStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineColorBlendStateCreateFlags;$/;"	t
VkPipelineColorBlendStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineColorBlendStateCreateInfo {$/;"	s
VkPipelineColorBlendStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineColorBlendStateCreateInfo;$/;"	t	typeref:struct:VkPipelineColorBlendStateCreateInfo
VkPipelineCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPipelineCreateFlagBits {$/;"	g
VkPipelineCreateFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineCreateFlagBits;$/;"	t	typeref:enum:VkPipelineCreateFlagBits
VkPipelineCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineCreateFlags;$/;"	t
VkPipelineDepthStencilStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineDepthStencilStateCreateFlags;$/;"	t
VkPipelineDepthStencilStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineDepthStencilStateCreateInfo {$/;"	s
VkPipelineDepthStencilStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineDepthStencilStateCreateInfo;$/;"	t	typeref:struct:VkPipelineDepthStencilStateCreateInfo
VkPipelineDynamicStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineDynamicStateCreateFlags;$/;"	t
VkPipelineDynamicStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineDynamicStateCreateInfo {$/;"	s
VkPipelineDynamicStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineDynamicStateCreateInfo;$/;"	t	typeref:struct:VkPipelineDynamicStateCreateInfo
VkPipelineInputAssemblyStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;$/;"	t
VkPipelineInputAssemblyStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineInputAssemblyStateCreateInfo {$/;"	s
VkPipelineInputAssemblyStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineInputAssemblyStateCreateInfo;$/;"	t	typeref:struct:VkPipelineInputAssemblyStateCreateInfo
VkPipelineLayoutCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineLayoutCreateFlags;$/;"	t
VkPipelineLayoutCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineLayoutCreateInfo {$/;"	s
VkPipelineLayoutCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineLayoutCreateInfo;$/;"	t	typeref:struct:VkPipelineLayoutCreateInfo
VkPipelineMultisampleStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineMultisampleStateCreateFlags;$/;"	t
VkPipelineMultisampleStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineMultisampleStateCreateInfo {$/;"	s
VkPipelineMultisampleStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineMultisampleStateCreateInfo;$/;"	t	typeref:struct:VkPipelineMultisampleStateCreateInfo
VkPipelineRasterizationStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineRasterizationStateCreateFlags;$/;"	t
VkPipelineRasterizationStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineRasterizationStateCreateInfo {$/;"	s
VkPipelineRasterizationStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineRasterizationStateCreateInfo;$/;"	t	typeref:struct:VkPipelineRasterizationStateCreateInfo
VkPipelineShaderStageCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineShaderStageCreateFlags;$/;"	t
VkPipelineShaderStageCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineShaderStageCreateInfo {$/;"	s
VkPipelineShaderStageCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineShaderStageCreateInfo;$/;"	t	typeref:struct:VkPipelineShaderStageCreateInfo
VkPipelineStageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPipelineStageFlagBits {$/;"	g
VkPipelineStageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineStageFlagBits;$/;"	t	typeref:enum:VkPipelineStageFlagBits
VkPipelineStageFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineStageFlags;$/;"	t
VkPipelineTessellationStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineTessellationStateCreateFlags;$/;"	t
VkPipelineTessellationStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineTessellationStateCreateInfo {$/;"	s
VkPipelineTessellationStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineTessellationStateCreateInfo;$/;"	t	typeref:struct:VkPipelineTessellationStateCreateInfo
VkPipelineVertexInputStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineVertexInputStateCreateFlags;$/;"	t
VkPipelineVertexInputStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineVertexInputStateCreateInfo {$/;"	s
VkPipelineVertexInputStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineVertexInputStateCreateInfo;$/;"	t	typeref:struct:VkPipelineVertexInputStateCreateInfo
VkPipelineViewportStateCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkPipelineViewportStateCreateFlags;$/;"	t
VkPipelineViewportStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPipelineViewportStateCreateInfo {$/;"	s
VkPipelineViewportStateCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkPipelineViewportStateCreateInfo;$/;"	t	typeref:struct:VkPipelineViewportStateCreateInfo
VkPolygonMode	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPolygonMode {$/;"	g
VkPolygonMode	support/GLFW/deps/vulkan/vulkan.h	/^} VkPolygonMode;$/;"	t	typeref:enum:VkPolygonMode
VkPresentInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPresentInfoKHR {$/;"	s
VkPresentInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkPresentInfoKHR;$/;"	t	typeref:struct:VkPresentInfoKHR
VkPresentModeKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPresentModeKHR {$/;"	g
VkPresentModeKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkPresentModeKHR;$/;"	t	typeref:enum:VkPresentModeKHR
VkPrimitiveTopology	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkPrimitiveTopology {$/;"	g
VkPrimitiveTopology	support/GLFW/deps/vulkan/vulkan.h	/^} VkPrimitiveTopology;$/;"	t	typeref:enum:VkPrimitiveTopology
VkPushConstantRange	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkPushConstantRange {$/;"	s
VkPushConstantRange	support/GLFW/deps/vulkan/vulkan.h	/^} VkPushConstantRange;$/;"	t	typeref:struct:VkPushConstantRange
VkQueryControlFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkQueryControlFlagBits {$/;"	g
VkQueryControlFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueryControlFlagBits;$/;"	t	typeref:enum:VkQueryControlFlagBits
VkQueryControlFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkQueryControlFlags;$/;"	t
VkQueryPipelineStatisticFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkQueryPipelineStatisticFlagBits {$/;"	g
VkQueryPipelineStatisticFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueryPipelineStatisticFlagBits;$/;"	t	typeref:enum:VkQueryPipelineStatisticFlagBits
VkQueryPipelineStatisticFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkQueryPipelineStatisticFlags;$/;"	t
VkQueryPoolCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkQueryPoolCreateFlags;$/;"	t
VkQueryPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkQueryPoolCreateInfo {$/;"	s
VkQueryPoolCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueryPoolCreateInfo;$/;"	t	typeref:struct:VkQueryPoolCreateInfo
VkQueryResultFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkQueryResultFlagBits {$/;"	g
VkQueryResultFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueryResultFlagBits;$/;"	t	typeref:enum:VkQueryResultFlagBits
VkQueryResultFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkQueryResultFlags;$/;"	t
VkQueryType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkQueryType {$/;"	g
VkQueryType	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueryType;$/;"	t	typeref:enum:VkQueryType
VkQueueFamilyProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkQueueFamilyProperties {$/;"	s
VkQueueFamilyProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueueFamilyProperties;$/;"	t	typeref:struct:VkQueueFamilyProperties
VkQueueFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkQueueFlagBits {$/;"	g
VkQueueFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkQueueFlagBits;$/;"	t	typeref:enum:VkQueueFlagBits
VkQueueFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkQueueFlags;$/;"	t
VkRect2D	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkRect2D {$/;"	s
VkRect2D	support/GLFW/deps/vulkan/vulkan.h	/^} VkRect2D;$/;"	t	typeref:struct:VkRect2D
VkRenderPassBeginInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkRenderPassBeginInfo {$/;"	s
VkRenderPassBeginInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkRenderPassBeginInfo;$/;"	t	typeref:struct:VkRenderPassBeginInfo
VkRenderPassCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkRenderPassCreateFlags;$/;"	t
VkRenderPassCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkRenderPassCreateInfo {$/;"	s
VkRenderPassCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkRenderPassCreateInfo;$/;"	t	typeref:struct:VkRenderPassCreateInfo
VkResult	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkResult {$/;"	g
VkResult	support/GLFW/deps/vulkan/vulkan.h	/^} VkResult;$/;"	t	typeref:enum:VkResult
VkResult	support/GLFW/src/internal.h	/^typedef enum VkResult$/;"	g
VkResult	support/GLFW/src/internal.h	/^} VkResult;$/;"	t	typeref:enum:VkResult
VkSampleCountFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSampleCountFlagBits {$/;"	g
VkSampleCountFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkSampleCountFlagBits;$/;"	t	typeref:enum:VkSampleCountFlagBits
VkSampleCountFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSampleCountFlags;$/;"	t
VkSampleMask	support/GLFW/deps/vulkan/vulkan.h	/^typedef uint32_t VkSampleMask;$/;"	t
VkSamplerAddressMode	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSamplerAddressMode {$/;"	g
VkSamplerAddressMode	support/GLFW/deps/vulkan/vulkan.h	/^} VkSamplerAddressMode;$/;"	t	typeref:enum:VkSamplerAddressMode
VkSamplerCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSamplerCreateFlags;$/;"	t
VkSamplerCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSamplerCreateInfo {$/;"	s
VkSamplerCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSamplerCreateInfo;$/;"	t	typeref:struct:VkSamplerCreateInfo
VkSamplerMipmapMode	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSamplerMipmapMode {$/;"	g
VkSamplerMipmapMode	support/GLFW/deps/vulkan/vulkan.h	/^} VkSamplerMipmapMode;$/;"	t	typeref:enum:VkSamplerMipmapMode
VkSemaphoreCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSemaphoreCreateFlags;$/;"	t
VkSemaphoreCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSemaphoreCreateInfo {$/;"	s
VkSemaphoreCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSemaphoreCreateInfo;$/;"	t	typeref:struct:VkSemaphoreCreateInfo
VkShaderModuleCreateFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkShaderModuleCreateFlags;$/;"	t
VkShaderModuleCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkShaderModuleCreateInfo {$/;"	s
VkShaderModuleCreateInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkShaderModuleCreateInfo;$/;"	t	typeref:struct:VkShaderModuleCreateInfo
VkShaderStageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkShaderStageFlagBits {$/;"	g
VkShaderStageFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkShaderStageFlagBits;$/;"	t	typeref:enum:VkShaderStageFlagBits
VkShaderStageFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkShaderStageFlags;$/;"	t
VkSharingMode	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSharingMode {$/;"	g
VkSharingMode	support/GLFW/deps/vulkan/vulkan.h	/^} VkSharingMode;$/;"	t	typeref:enum:VkSharingMode
VkSparseBufferMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseBufferMemoryBindInfo {$/;"	s
VkSparseBufferMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseBufferMemoryBindInfo;$/;"	t	typeref:struct:VkSparseBufferMemoryBindInfo
VkSparseImageFormatFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSparseImageFormatFlagBits {$/;"	g
VkSparseImageFormatFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageFormatFlagBits;$/;"	t	typeref:enum:VkSparseImageFormatFlagBits
VkSparseImageFormatFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSparseImageFormatFlags;$/;"	t
VkSparseImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseImageFormatProperties {$/;"	s
VkSparseImageFormatProperties	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageFormatProperties;$/;"	t	typeref:struct:VkSparseImageFormatProperties
VkSparseImageMemoryBind	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryBind {$/;"	s
VkSparseImageMemoryBind	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageMemoryBind;$/;"	t	typeref:struct:VkSparseImageMemoryBind
VkSparseImageMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryBindInfo {$/;"	s
VkSparseImageMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageMemoryBindInfo;$/;"	t	typeref:struct:VkSparseImageMemoryBindInfo
VkSparseImageMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryRequirements {$/;"	s
VkSparseImageMemoryRequirements	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageMemoryRequirements;$/;"	t	typeref:struct:VkSparseImageMemoryRequirements
VkSparseImageOpaqueMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseImageOpaqueMemoryBindInfo {$/;"	s
VkSparseImageOpaqueMemoryBindInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseImageOpaqueMemoryBindInfo;$/;"	t	typeref:struct:VkSparseImageOpaqueMemoryBindInfo
VkSparseMemoryBind	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSparseMemoryBind {$/;"	s
VkSparseMemoryBind	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseMemoryBind;$/;"	t	typeref:struct:VkSparseMemoryBind
VkSparseMemoryBindFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSparseMemoryBindFlagBits {$/;"	g
VkSparseMemoryBindFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkSparseMemoryBindFlagBits;$/;"	t	typeref:enum:VkSparseMemoryBindFlagBits
VkSparseMemoryBindFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSparseMemoryBindFlags;$/;"	t
VkSpecializationInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSpecializationInfo {$/;"	s
VkSpecializationInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSpecializationInfo;$/;"	t	typeref:struct:VkSpecializationInfo
VkSpecializationMapEntry	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSpecializationMapEntry {$/;"	s
VkSpecializationMapEntry	support/GLFW/deps/vulkan/vulkan.h	/^} VkSpecializationMapEntry;$/;"	t	typeref:struct:VkSpecializationMapEntry
VkStencilFaceFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkStencilFaceFlagBits {$/;"	g
VkStencilFaceFlagBits	support/GLFW/deps/vulkan/vulkan.h	/^} VkStencilFaceFlagBits;$/;"	t	typeref:enum:VkStencilFaceFlagBits
VkStencilFaceFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkStencilFaceFlags;$/;"	t
VkStencilOp	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkStencilOp {$/;"	g
VkStencilOp	support/GLFW/deps/vulkan/vulkan.h	/^} VkStencilOp;$/;"	t	typeref:enum:VkStencilOp
VkStencilOpState	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkStencilOpState {$/;"	s
VkStencilOpState	support/GLFW/deps/vulkan/vulkan.h	/^} VkStencilOpState;$/;"	t	typeref:struct:VkStencilOpState
VkStructureType	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkStructureType {$/;"	g
VkStructureType	support/GLFW/deps/vulkan/vulkan.h	/^} VkStructureType;$/;"	t	typeref:enum:VkStructureType
VkStructureType	support/GLFW/src/internal.h	/^typedef enum VkStructureType$/;"	g
VkStructureType	support/GLFW/src/internal.h	/^} VkStructureType;$/;"	t	typeref:enum:VkStructureType
VkSubmitInfo	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSubmitInfo {$/;"	s
VkSubmitInfo	support/GLFW/deps/vulkan/vulkan.h	/^} VkSubmitInfo;$/;"	t	typeref:struct:VkSubmitInfo
VkSubpassContents	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSubpassContents {$/;"	g
VkSubpassContents	support/GLFW/deps/vulkan/vulkan.h	/^} VkSubpassContents;$/;"	t	typeref:enum:VkSubpassContents
VkSubpassDependency	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSubpassDependency {$/;"	s
VkSubpassDependency	support/GLFW/deps/vulkan/vulkan.h	/^} VkSubpassDependency;$/;"	t	typeref:struct:VkSubpassDependency
VkSubpassDescription	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSubpassDescription {$/;"	s
VkSubpassDescription	support/GLFW/deps/vulkan/vulkan.h	/^} VkSubpassDescription;$/;"	t	typeref:struct:VkSubpassDescription
VkSubpassDescriptionFlags	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSubpassDescriptionFlags;$/;"	t
VkSubresourceLayout	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSubresourceLayout {$/;"	s
VkSubresourceLayout	support/GLFW/deps/vulkan/vulkan.h	/^} VkSubresourceLayout;$/;"	t	typeref:struct:VkSubresourceLayout
VkSurfaceCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSurfaceCapabilitiesKHR {$/;"	s
VkSurfaceCapabilitiesKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkSurfaceCapabilitiesKHR;$/;"	t	typeref:struct:VkSurfaceCapabilitiesKHR
VkSurfaceFormatKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSurfaceFormatKHR {$/;"	s
VkSurfaceFormatKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkSurfaceFormatKHR;$/;"	t	typeref:struct:VkSurfaceFormatKHR
VkSurfaceKHR	support/GLFW/src/internal.h	/^typedef uint64_t VkSurfaceKHR;$/;"	t
VkSurfaceTransformFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSurfaceTransformFlagBitsKHR {$/;"	g
VkSurfaceTransformFlagBitsKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkSurfaceTransformFlagBitsKHR;$/;"	t	typeref:enum:VkSurfaceTransformFlagBitsKHR
VkSurfaceTransformFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSurfaceTransformFlagsKHR;$/;"	t
VkSwapchainCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkSwapchainCreateFlagsKHR;$/;"	t
VkSwapchainCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkSwapchainCreateInfoKHR {$/;"	s
VkSwapchainCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkSwapchainCreateInfoKHR;$/;"	t	typeref:struct:VkSwapchainCreateInfoKHR
VkSystemAllocationScope	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkSystemAllocationScope {$/;"	g
VkSystemAllocationScope	support/GLFW/deps/vulkan/vulkan.h	/^} VkSystemAllocationScope;$/;"	t	typeref:enum:VkSystemAllocationScope
VkVertexInputAttributeDescription	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkVertexInputAttributeDescription {$/;"	s
VkVertexInputAttributeDescription	support/GLFW/deps/vulkan/vulkan.h	/^} VkVertexInputAttributeDescription;$/;"	t	typeref:struct:VkVertexInputAttributeDescription
VkVertexInputBindingDescription	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkVertexInputBindingDescription {$/;"	s
VkVertexInputBindingDescription	support/GLFW/deps/vulkan/vulkan.h	/^} VkVertexInputBindingDescription;$/;"	t	typeref:struct:VkVertexInputBindingDescription
VkVertexInputRate	support/GLFW/deps/vulkan/vulkan.h	/^typedef enum VkVertexInputRate {$/;"	g
VkVertexInputRate	support/GLFW/deps/vulkan/vulkan.h	/^} VkVertexInputRate;$/;"	t	typeref:enum:VkVertexInputRate
VkViewport	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkViewport {$/;"	s
VkViewport	support/GLFW/deps/vulkan/vulkan.h	/^} VkViewport;$/;"	t	typeref:struct:VkViewport
VkWaylandSurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;$/;"	t
VkWaylandSurfaceCreateFlagsKHR	support/GLFW/src/wl_platform.h	/^typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;$/;"	t
VkWaylandSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkWaylandSurfaceCreateInfoKHR {$/;"	s
VkWaylandSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkWaylandSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWaylandSurfaceCreateInfoKHR
VkWaylandSurfaceCreateInfoKHR	support/GLFW/src/wl_platform.h	/^typedef struct VkWaylandSurfaceCreateInfoKHR$/;"	s
VkWaylandSurfaceCreateInfoKHR	support/GLFW/src/wl_platform.h	/^} VkWaylandSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWaylandSurfaceCreateInfoKHR
VkWin32SurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkWin32SurfaceCreateFlagsKHR;$/;"	t
VkWin32SurfaceCreateFlagsKHR	support/GLFW/src/win32_platform.h	/^typedef VkFlags VkWin32SurfaceCreateFlagsKHR;$/;"	t
VkWin32SurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkWin32SurfaceCreateInfoKHR {$/;"	s
VkWin32SurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkWin32SurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWin32SurfaceCreateInfoKHR
VkWin32SurfaceCreateInfoKHR	support/GLFW/src/win32_platform.h	/^typedef struct VkWin32SurfaceCreateInfoKHR$/;"	s
VkWin32SurfaceCreateInfoKHR	support/GLFW/src/win32_platform.h	/^} VkWin32SurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWin32SurfaceCreateInfoKHR
VkWriteDescriptorSet	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkWriteDescriptorSet {$/;"	s
VkWriteDescriptorSet	support/GLFW/deps/vulkan/vulkan.h	/^} VkWriteDescriptorSet;$/;"	t	typeref:struct:VkWriteDescriptorSet
VkXcbSurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkXcbSurfaceCreateFlagsKHR;$/;"	t
VkXcbSurfaceCreateFlagsKHR	support/GLFW/src/x11_platform.h	/^typedef VkFlags VkXcbSurfaceCreateFlagsKHR;$/;"	t
VkXcbSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkXcbSurfaceCreateInfoKHR {$/;"	s
VkXcbSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkXcbSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXcbSurfaceCreateInfoKHR
VkXcbSurfaceCreateInfoKHR	support/GLFW/src/x11_platform.h	/^typedef struct VkXcbSurfaceCreateInfoKHR$/;"	s
VkXcbSurfaceCreateInfoKHR	support/GLFW/src/x11_platform.h	/^} VkXcbSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXcbSurfaceCreateInfoKHR
VkXlibSurfaceCreateFlagsKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef VkFlags VkXlibSurfaceCreateFlagsKHR;$/;"	t
VkXlibSurfaceCreateFlagsKHR	support/GLFW/src/x11_platform.h	/^typedef VkFlags VkXlibSurfaceCreateFlagsKHR;$/;"	t
VkXlibSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^typedef struct VkXlibSurfaceCreateInfoKHR {$/;"	s
VkXlibSurfaceCreateInfoKHR	support/GLFW/deps/vulkan/vulkan.h	/^} VkXlibSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXlibSurfaceCreateInfoKHR
VkXlibSurfaceCreateInfoKHR	support/GLFW/src/x11_platform.h	/^typedef struct VkXlibSurfaceCreateInfoKHR$/;"	s
VkXlibSurfaceCreateInfoKHR	support/GLFW/src/x11_platform.h	/^} VkXlibSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXlibSurfaceCreateInfoKHR
Volume	optixVolumeViewer/optixVolumeViewer.h	/^struct Volume$/;"	s
Volume	optixVolumeViewer/volume.h	/^    struct Volume$/;"	s	struct:GeometryData
Volume	optixVolumeViewer/volume.h	/^    struct Volume$/;"	s	struct:MaterialData
VolumeAccel	optixVolumeViewer/optixVolumeViewer.h	/^struct VolumeAccel$/;"	s
VtxBuffer	support/imgui/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList
W	cuda/whitted.h	/^    float3                   W;$/;"	m	struct:whitted::LaunchParams
W	optixBoundValues/optixBoundValues.h	/^    float3       W;$/;"	m	struct:Params
W	optixCutouts/optixCutouts.h	/^    float3       W;$/;"	m	struct:Params
W	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Globals
W	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
W	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       W;$/;"	m	struct:Params
W	optixMotionGeometry/optixMotionGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
W	optixMultiGPU/optixMultiGPU.h	/^    float3       W;$/;"	m	struct:Params
W	optixNVLink/optixNVLink.h	/^    float3       W;$/;"	m	struct:Params
W	optixPathTracer/optixPathTracer.h	/^    float3       W;$/;"	m	struct:Params
W	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3       W;$/;"	m	struct:Params
W	optixVolumeViewer/volume.h	/^    float3                   W;$/;"	m	struct:LaunchParams
WGLCREATECONTEXT_T	support/GLFW/src/wgl_context.h	/^typedef HGLRC (WINAPI * WGLCREATECONTEXT_T)(HDC);$/;"	t
WGLDELETECONTEXT_T	support/GLFW/src/wgl_context.h	/^typedef BOOL (WINAPI * WGLDELETECONTEXT_T)(HGLRC);$/;"	t
WGLGETCURRENTDC_T	support/GLFW/src/wgl_context.h	/^typedef HDC (WINAPI * WGLGETCURRENTDC_T)(void);$/;"	t
WGLGETPROCADDRESS_T	support/GLFW/src/wgl_context.h	/^typedef PROC (WINAPI * WGLGETPROCADDRESS_T)(LPCSTR);$/;"	t
WGLMAKECURRENT_T	support/GLFW/src/wgl_context.h	/^typedef BOOL (WINAPI * WGLMAKECURRENT_T)(HDC,HGLRC);$/;"	t
WGLSHARELISTS_T	support/GLFW/src/wgl_context.h	/^typedef BOOL (WINAPI * WGLSHARELISTS_T)(HGLRC,HGLRC);$/;"	t
WGL_ACCELERATION_ARB	support/GLFW/src/wgl_context.h	37;"	d
WGL_ACCUM_ALPHA_BITS_ARB	support/GLFW/src/wgl_context.h	51;"	d
WGL_ACCUM_BITS_ARB	support/GLFW/src/wgl_context.h	47;"	d
WGL_ACCUM_BLUE_BITS_ARB	support/GLFW/src/wgl_context.h	50;"	d
WGL_ACCUM_GREEN_BITS_ARB	support/GLFW/src/wgl_context.h	49;"	d
WGL_ACCUM_RED_BITS_ARB	support/GLFW/src/wgl_context.h	48;"	d
WGL_ALPHA_BITS_ARB	support/GLFW/src/wgl_context.h	45;"	d
WGL_ALPHA_SHIFT_ARB	support/GLFW/src/wgl_context.h	46;"	d
WGL_AUX_BUFFERS_ARB	support/GLFW/src/wgl_context.h	54;"	d
WGL_BLUE_BITS_ARB	support/GLFW/src/wgl_context.h	43;"	d
WGL_BLUE_SHIFT_ARB	support/GLFW/src/wgl_context.h	44;"	d
WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	support/GLFW/src/wgl_context.h	63;"	d
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	support/GLFW/src/wgl_context.h	62;"	d
WGL_CONTEXT_DEBUG_BIT_ARB	support/GLFW/src/wgl_context.h	59;"	d
WGL_CONTEXT_ES2_PROFILE_BIT_EXT	support/GLFW/src/wgl_context.h	67;"	d
WGL_CONTEXT_FLAGS_ARB	support/GLFW/src/wgl_context.h	66;"	d
WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	support/GLFW/src/wgl_context.h	60;"	d
WGL_CONTEXT_MAJOR_VERSION_ARB	support/GLFW/src/wgl_context.h	64;"	d
WGL_CONTEXT_MINOR_VERSION_ARB	support/GLFW/src/wgl_context.h	65;"	d
WGL_CONTEXT_PROFILE_MASK_ARB	support/GLFW/src/wgl_context.h	61;"	d
WGL_CONTEXT_RELEASE_BEHAVIOR_ARB	support/GLFW/src/wgl_context.h	72;"	d
WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB	support/GLFW/src/wgl_context.h	74;"	d
WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB	support/GLFW/src/wgl_context.h	73;"	d
WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB	support/GLFW/src/wgl_context.h	70;"	d
WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB	support/GLFW/src/wgl_context.h	68;"	d
WGL_DEPTH_BITS_ARB	support/GLFW/src/wgl_context.h	52;"	d
WGL_DOUBLE_BUFFER_ARB	support/GLFW/src/wgl_context.h	56;"	d
WGL_DRAW_TO_WINDOW_ARB	support/GLFW/src/wgl_context.h	34;"	d
WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB	support/GLFW/src/wgl_context.h	58;"	d
WGL_GREEN_BITS_ARB	support/GLFW/src/wgl_context.h	41;"	d
WGL_GREEN_SHIFT_ARB	support/GLFW/src/wgl_context.h	42;"	d
WGL_LOSE_CONTEXT_ON_RESET_ARB	support/GLFW/src/wgl_context.h	69;"	d
WGL_NO_ACCELERATION_ARB	support/GLFW/src/wgl_context.h	38;"	d
WGL_NO_RESET_NOTIFICATION_ARB	support/GLFW/src/wgl_context.h	71;"	d
WGL_NUMBER_PIXEL_FORMATS_ARB	support/GLFW/src/wgl_context.h	32;"	d
WGL_PIXEL_TYPE_ARB	support/GLFW/src/wgl_context.h	35;"	d
WGL_RED_BITS_ARB	support/GLFW/src/wgl_context.h	39;"	d
WGL_RED_SHIFT_ARB	support/GLFW/src/wgl_context.h	40;"	d
WGL_SAMPLES_ARB	support/GLFW/src/wgl_context.h	57;"	d
WGL_STENCIL_BITS_ARB	support/GLFW/src/wgl_context.h	53;"	d
WGL_STEREO_ARB	support/GLFW/src/wgl_context.h	55;"	d
WGL_SUPPORT_OPENGL_ARB	support/GLFW/src/wgl_context.h	33;"	d
WGL_TYPE_RGBA_ARB	support/GLFW/src/wgl_context.h	36;"	d
WIN32_LEAN_AND_MEAN	support/GLFW/deps/glad/glad.h	12;"	d
WIN32_LEAN_AND_MEAN	support/GLFW/deps/tinycthread.h	85;"	d
WIN32_LEAN_AND_MEAN	support/GLFW/deps/tinycthread.h	90;"	d
WIN32_LEAN_AND_MEAN	support/GLFW/src/win32_platform.h	41;"	d
WIN32_LEAN_AND_MEAN	support/glad/glad.h	33;"	d
WIN32_LEAN_AND_MEAN	support/imgui/imgui.cpp	9268;"	d	file:
WIN32_LEAN_AND_MEAN	support/tinygltf/tiny_gltf.h	1583;"	d
WIN32_LEAN_AND_MEAN	support/tinygltf/tiny_gltf.h	1589;"	d
WIN32_LEAN_AND_MEAN	sutil/sutil.cpp	65;"	d	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	support/imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise by only highlighting the border after a certain time.$/;"	v	file:
WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS	support/imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     \/\/ Extend outside and inside windows. Affect FindHoveredWindow().$/;"	v	file:
WINELIB_NAME_AW	support/GLFW/deps/mingw/_mingw_dxhelper.h	100;"	d
WINELIB_NAME_AW	support/GLFW/deps/mingw/_mingw_dxhelper.h	103;"	d
WINELIB_NAME_AW	support/GLFW/deps/mingw/_mingw_dxhelper.h	105;"	d
WINGDIAPI	support/GLFW/include/GLFW/glfw3.h	107;"	d
WINGDIAPI	support/GLFW/include/GLFW/glfw3.h	4231;"	d
WINVER	support/GLFW/src/win32_platform.h	56;"	d
WINVER	support/GLFW/src/win32_platform.h	57;"	d
WM_COPYGLOBALDATA	support/GLFW/src/win32_platform.h	87;"	d
WM_DELETE_WINDOW	support/GLFW/src/x11_platform.h	/^    Atom            WM_DELETE_WINDOW;$/;"	m	struct:_GLFWlibraryX11
WM_DPICHANGED	support/GLFW/src/win32_platform.h	96;"	d
WM_DWMCOMPOSITIONCHANGED	support/GLFW/src/win32_platform.h	84;"	d
WM_MOUSEHWHEEL	support/GLFW/src/win32_platform.h	81;"	d
WM_PROTOCOLS	support/GLFW/src/x11_platform.h	/^    Atom            WM_PROTOCOLS;$/;"	m	struct:_GLFWlibraryX11
WM_STATE	support/GLFW/src/x11_platform.h	/^    Atom            WM_STATE;$/;"	m	struct:_GLFWlibraryX11
WM_UNICHAR	support/GLFW/src/win32_platform.h	90;"	d
WORD_COUNT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static constexpr uint32_t WORD_COUNT = SIZE >> 6; \/\/ Number of 64 bit words$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
WantCaptureKeyboard	support/imgui/imgui.h	/^    bool        WantCaptureKeyboard;            \/\/ When io.WantCaptureKeyboard is true, imgui will use the keyboard inputs, do not dispatch them to your main game\/application (in both cases, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).$/;"	m	struct:ImGuiIO
WantCaptureKeyboardNextFrame	support/imgui/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;$/;"	m	struct:ImGuiContext
WantCaptureMouse	support/imgui/imgui.h	/^    bool        WantCaptureMouse;               \/\/ When io.WantCaptureMouse is true, imgui will use the mouse inputs, do not dispatch them to your main game\/application (in both cases, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).$/;"	m	struct:ImGuiIO
WantCaptureMouseNextFrame	support/imgui/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture via CaptureKeyboardFromApp()\/CaptureMouseFromApp() sets those flags$/;"	m	struct:ImGuiContext
WantClose	support/imgui/imgui_demo.cpp	/^    bool        WantClose;      \/\/ Set when the document$/;"	m	struct:MyDocument	file:
WantCollapseToggle	support/imgui/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow
WantLayout	support/imgui/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar
WantSaveIniSettings	support/imgui/imgui.h	/^    bool        WantSaveIniSettings;            \/\/ When manual .ini load\/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.$/;"	m	struct:ImGuiIO
WantSetMousePos	support/imgui/imgui.h	/^    bool        WantSetMousePos;                \/\/ MousePos has been altered, back-end should reposition mouse on next frame. Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.$/;"	m	struct:ImGuiIO
WantTextInput	support/imgui/imgui.h	/^    bool        WantTextInput;                  \/\/ Mobile\/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).$/;"	m	struct:ImGuiIO
WantTextInputNextFrame	support/imgui/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext
Warning	optixMotionGeometry/tiny_obj_loader.h	/^  const std::string &Warning() const { return warning_; }$/;"	f	class:tinyobj::ObjReader
WasActive	support/imgui/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow
WcharToUTF8	support/tinygltf/tiny_gltf.h	/^static inline std::string WcharToUTF8(const std::wstring &wstr) {$/;"	f	namespace:tinygltf
WhittedState	optixWhitted/optixWhitted.cpp	/^struct WhittedState$/;"	s	file:
Width	support/imgui/imgui.h	/^        unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlas::CustomRect
Width	support/imgui/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem
Width	support/imgui/imgui_internal.h	/^    float           Width;$/;"	m	struct:ImGuiTabBarSortItem
Width	support/imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns
WidthContents	support/imgui/imgui_internal.h	/^    float               WidthContents;          \/\/ Width of actual contents, stored during BeginTabItem() call$/;"	m	struct:ImGuiTabItem
Window	support/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if user never calls OpenPopup()$/;"	m	struct:ImGuiPopupRef
Window	support/imgui/imgui_internal.h	/^    ImGuiWindow*  Window;       \/\/ Best candidate window$/;"	m	struct:ImGuiNavMoveResult
WindowBorderSize	support/imgui/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
WindowBorderSize	support/imgui/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the time of begin.$/;"	m	struct:ImGuiWindow
WindowMinSize	support/imgui/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().$/;"	m	struct:ImGuiStyle
WindowPadding	support/imgui/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle
WindowPadding	support/imgui/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time of begin.$/;"	m	struct:ImGuiWindow
WindowRenderer	optixHair/Renderers.cpp	/^WindowRenderer::WindowRenderer( HairState* pState )$/;"	f	class:WindowRenderer
WindowRenderer	optixHair/Renderers.h	/^class WindowRenderer : public Renderer$/;"	c
WindowRounding	support/imgui/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f to have rectangular windows.$/;"	m	struct:ImGuiStyle
WindowRounding	support/imgui/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time of begin.$/;"	m	struct:ImGuiWindow
WindowTitleAlign	support/imgui/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.$/;"	m	struct:ImGuiStyle
Windows	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display order, back to front$/;"	m	struct:ImGuiContext
WindowsActiveCount	support/imgui/imgui_internal.h	/^    int                     WindowsActiveCount;$/;"	m	struct:ImGuiContext
WindowsById	support/imgui/imgui_internal.h	/^    ImGuiStorage            WindowsById;$/;"	m	struct:ImGuiContext
WindowsFocusOrder	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Windows, sorted in focus order, back to front$/;"	m	struct:ImGuiContext
WindowsSortBuffer	support/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsSortBuffer;$/;"	m	struct:ImGuiContext
WriteAccessed	support/imgui/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget access the current window$/;"	m	struct:ImGuiWindow
WriteAllFn	support/imgui/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf);      \/\/ Write: Output every entries into 'out_buf'$/;"	m	struct:ImGuiSettingsHandler
WriteAttributeToMemory	support/tinyexr/tinyexr.h	/^static void WriteAttributeToMemory(std::vector<unsigned char> *out,$/;"	f	namespace:tinyexr
WriteBinaryGltfFile	support/tinygltf/tiny_gltf.h	/^static void WriteBinaryGltfFile(const std::string &output,$/;"	f	namespace:tinygltf
WriteBinaryGltfStream	support/tinygltf/tiny_gltf.h	/^static void WriteBinaryGltfStream(std::ostream &stream,$/;"	f	namespace:tinygltf
WriteChannelInfo	support/tinyexr/tinyexr.h	/^static void WriteChannelInfo(std::vector<unsigned char> &data,$/;"	f	namespace:tinyexr
WriteGltfFile	support/tinygltf/tiny_gltf.h	/^static bool WriteGltfFile(const std::string &output,$/;"	f	namespace:tinygltf
WriteGltfSceneToFile	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::WriteGltfSceneToFile(Model *model, const std::string &filename,$/;"	f	class:tinygltf::TinyGLTF
WriteGltfSceneToStream	support/tinygltf/tiny_gltf.h	/^bool TinyGLTF::WriteGltfSceneToStream(Model *model, std::ostream &stream,$/;"	f	class:tinygltf::TinyGLTF
WriteGltfStream	support/tinygltf/tiny_gltf.h	/^static bool WriteGltfStream(std::ostream &stream, const std::string &content) {$/;"	f	namespace:tinygltf
WriteImageData	support/tinygltf/tiny_gltf.h	/^  WriteImageDataFunction WriteImageData =$/;"	m	class:tinygltf::TinyGLTF
WriteImageData	support/tinygltf/tiny_gltf.h	/^bool WriteImageData(const std::string *basepath, const std::string *filename,$/;"	f	namespace:tinygltf
WriteImageDataFunction	support/tinygltf/tiny_gltf.h	/^typedef bool (*WriteImageDataFunction)(const std::string *, const std::string *,$/;"	t	namespace:tinygltf
WriteToMemory_stbi	support/tinygltf/tiny_gltf.h	/^static void WriteToMemory_stbi(void *context, void *data, int size) {$/;"	f	namespace:tinygltf
WriteWholeFile	support/tinygltf/tiny_gltf.h	/^  WriteWholeFileFunction WriteWholeFile;$/;"	m	struct:tinygltf::FsCallbacks
WriteWholeFile	support/tinygltf/tiny_gltf.h	/^bool WriteWholeFile(std::string *err, const std::string &filepath,$/;"	f	namespace:tinygltf
WriteWholeFileFunction	support/tinygltf/tiny_gltf.h	/^typedef bool (*WriteWholeFileFunction)(std::string *, const std::string &,$/;"	t	namespace:tinygltf
X	support/imgui/imgui.h	/^        unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlas::CustomRect
X0	support/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
X1	support/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
XGETXCBCONNECTION_T	support/GLFW/src/x11_platform.h	/^typedef xcb_connection_t* (* XGETXCBCONNECTION_T)(Display*);$/;"	t
XGetXCBConnection	support/GLFW/src/x11_platform.h	/^        XGETXCBCONNECTION_T XGetXCBConnection;$/;"	m	struct:_GLFWlibraryX11::__anon25
XINPUTGETCAPABILITIES_T	support/GLFW/src/win32_platform.h	/^typedef DWORD (WINAPI * XINPUTGETCAPABILITIES_T)(DWORD,DWORD,XINPUT_CAPABILITIES*);$/;"	t
XINPUTGETSTATE_T	support/GLFW/src/win32_platform.h	/^typedef DWORD (WINAPI * XINPUTGETSTATE_T)(DWORD,XINPUT_STATE*);$/;"	t
XINPUT_BATTERY_INFORMATION	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_BATTERY_INFORMATION, *PXINPUT_BATTERY_INFORMATION;$/;"	t	typeref:struct:_XINPUT_BATTERY_INFORMATION
XINPUT_CAPABILITIES	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;$/;"	t	typeref:struct:_XINPUT_CAPABILITIES
XINPUT_CAPS_VOICE_SUPPORTED	support/GLFW/deps/mingw/xinput.h	128;"	d
XINPUT_CAPS_WIRELESS	support/GLFW/src/win32_platform.h	131;"	d
XINPUT_DEVSUBTYPE_ARCADE_PAD	support/GLFW/src/win32_platform.h	152;"	d
XINPUT_DEVSUBTYPE_ARCADE_STICK	support/GLFW/deps/mingw/xinput.h	116;"	d
XINPUT_DEVSUBTYPE_ARCADE_STICK	support/GLFW/src/win32_platform.h	137;"	d
XINPUT_DEVSUBTYPE_DANCE_PAD	support/GLFW/deps/mingw/xinput.h	118;"	d
XINPUT_DEVSUBTYPE_DANCE_PAD	support/GLFW/src/win32_platform.h	143;"	d
XINPUT_DEVSUBTYPE_DRUM_KIT	support/GLFW/deps/mingw/xinput.h	120;"	d
XINPUT_DEVSUBTYPE_DRUM_KIT	support/GLFW/src/win32_platform.h	149;"	d
XINPUT_DEVSUBTYPE_FLIGHT_SICK	support/GLFW/deps/mingw/xinput.h	117;"	d
XINPUT_DEVSUBTYPE_FLIGHT_STICK	support/GLFW/src/win32_platform.h	140;"	d
XINPUT_DEVSUBTYPE_GAMEPAD	support/GLFW/deps/mingw/xinput.h	114;"	d
XINPUT_DEVSUBTYPE_GUITAR	support/GLFW/deps/mingw/xinput.h	119;"	d
XINPUT_DEVSUBTYPE_GUITAR	support/GLFW/src/win32_platform.h	146;"	d
XINPUT_DEVSUBTYPE_WHEEL	support/GLFW/deps/mingw/xinput.h	115;"	d
XINPUT_DEVSUBTYPE_WHEEL	support/GLFW/src/win32_platform.h	134;"	d
XINPUT_DEVTYPE_GAMEPAD	support/GLFW/deps/mingw/xinput.h	113;"	d
XINPUT_FLAG_GAMEPAD	support/GLFW/deps/mingw/xinput.h	129;"	d
XINPUT_GAMEPAD	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;$/;"	t	typeref:struct:_XINPUT_GAMEPAD
XINPUT_GAMEPAD_A	support/GLFW/deps/mingw/xinput.h	42;"	d
XINPUT_GAMEPAD_B	support/GLFW/deps/mingw/xinput.h	43;"	d
XINPUT_GAMEPAD_BACK	support/GLFW/deps/mingw/xinput.h	37;"	d
XINPUT_GAMEPAD_DPAD_DOWN	support/GLFW/deps/mingw/xinput.h	33;"	d
XINPUT_GAMEPAD_DPAD_LEFT	support/GLFW/deps/mingw/xinput.h	34;"	d
XINPUT_GAMEPAD_DPAD_RIGHT	support/GLFW/deps/mingw/xinput.h	35;"	d
XINPUT_GAMEPAD_DPAD_UP	support/GLFW/deps/mingw/xinput.h	32;"	d
XINPUT_GAMEPAD_LEFT_SHOULDER	support/GLFW/deps/mingw/xinput.h	40;"	d
XINPUT_GAMEPAD_LEFT_THUMB	support/GLFW/deps/mingw/xinput.h	38;"	d
XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE	support/GLFW/deps/mingw/xinput.h	101;"	d
XINPUT_GAMEPAD_RIGHT_SHOULDER	support/GLFW/deps/mingw/xinput.h	41;"	d
XINPUT_GAMEPAD_RIGHT_THUMB	support/GLFW/deps/mingw/xinput.h	39;"	d
XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE	support/GLFW/deps/mingw/xinput.h	102;"	d
XINPUT_GAMEPAD_START	support/GLFW/deps/mingw/xinput.h	36;"	d
XINPUT_GAMEPAD_TRIGGER_THRESHOLD	support/GLFW/deps/mingw/xinput.h	103;"	d
XINPUT_GAMEPAD_X	support/GLFW/deps/mingw/xinput.h	44;"	d
XINPUT_GAMEPAD_Y	support/GLFW/deps/mingw/xinput.h	45;"	d
XINPUT_KEYSTROKE	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_KEYSTROKE, *PXINPUT_KEYSTROKE;$/;"	t	typeref:struct:_XINPUT_KEYSTROKE
XINPUT_KEYSTROKE_KEYDOWN	support/GLFW/deps/mingw/xinput.h	52;"	d
XINPUT_KEYSTROKE_KEYUP	support/GLFW/deps/mingw/xinput.h	53;"	d
XINPUT_KEYSTROKE_REPEAT	support/GLFW/deps/mingw/xinput.h	54;"	d
XINPUT_STATE	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_STATE, *PXINPUT_STATE;$/;"	t	typeref:struct:_XINPUT_STATE
XINPUT_VIBRATION	support/GLFW/deps/mingw/xinput.h	/^} XINPUT_VIBRATION, *PXINPUT_VIBRATION;$/;"	t	typeref:struct:_XINPUT_VIBRATION
XInputGetCapabilities	support/GLFW/src/win32_platform.h	/^        XINPUTGETCAPABILITIES_T XInputGetCapabilities;$/;"	m	struct:_GLFWlibraryWin32::__anon14
XInputGetState	support/GLFW/src/win32_platform.h	/^        XINPUTGETSTATE_T        XInputGetState;$/;"	m	struct:_GLFWlibraryWin32::__anon14
XUSER_INDEX_ANY	support/GLFW/deps/mingw/xinput.h	157;"	d
XUSER_MAX_COUNT	support/GLFW/deps/mingw/xinput.h	156;"	d
XUSER_MAX_COUNT	support/GLFW/src/win32_platform.h	155;"	d
XdndActionCopy	support/GLFW/src/x11_platform.h	/^    Atom            XdndActionCopy;$/;"	m	struct:_GLFWlibraryX11
XdndAware	support/GLFW/src/x11_platform.h	/^    Atom            XdndAware;$/;"	m	struct:_GLFWlibraryX11
XdndDrop	support/GLFW/src/x11_platform.h	/^    Atom            XdndDrop;$/;"	m	struct:_GLFWlibraryX11
XdndEnter	support/GLFW/src/x11_platform.h	/^    Atom            XdndEnter;$/;"	m	struct:_GLFWlibraryX11
XdndFinished	support/GLFW/src/x11_platform.h	/^    Atom            XdndFinished;$/;"	m	struct:_GLFWlibraryX11
XdndLeave	support/GLFW/src/x11_platform.h	/^    Atom            XdndLeave;$/;"	m	struct:_GLFWlibraryX11
XdndPosition	support/GLFW/src/x11_platform.h	/^    Atom            XdndPosition;$/;"	m	struct:_GLFWlibraryX11
XdndSelection	support/GLFW/src/x11_platform.h	/^    Atom            XdndSelection;$/;"	m	struct:_GLFWlibraryX11
XdndStatus	support/GLFW/src/x11_platform.h	/^    Atom            XdndStatus;$/;"	m	struct:_GLFWlibraryX11
Y	support/imgui/imgui.h	/^        unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlas::CustomRect
Y0	support/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
Y1	support/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
YCbCr_to_RGB_kernel	support/tinygltf/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon99
ZERO_COPY	sutil/CUDAOutputBuffer.h	/^    ZERO_COPY   = 2, \/\/ general case, preferred for multi-gpu if not fully nvlink connected$/;"	m	class:sutil::CUDAOutputBufferType
ZFPCompressionParam	support/tinyexr/tinyexr.h	/^  ZFPCompressionParam() {$/;"	f	struct:tinyexr::ZFPCompressionParam
ZFPCompressionParam	support/tinyexr/tinyexr.h	/^struct ZFPCompressionParam {$/;"	s	namespace:tinyexr
ZIP	optixVolumeViewer/nanovdb/util/IO.h	/^                              ZIP = 1,$/;"	m	class:nanovdb::io::Codec
ZLIB_VERNUM	support/tinyexr/tinyexr.h	1215;"	d
ZLIB_VERSION	support/tinyexr/tinyexr.h	1214;"	d
ZLIB_VER_MAJOR	support/tinyexr/tinyexr.h	1216;"	d
ZLIB_VER_MINOR	support/tinyexr/tinyexr.h	1217;"	d
ZLIB_VER_REVISION	support/tinyexr/tinyexr.h	1218;"	d
ZLIB_VER_SUBREVISION	support/tinyexr/tinyexr.h	1219;"	d
Z_BEST_COMPRESSION	support/tinyexr/tinyexr.h	1182;"	d
Z_BEST_SPEED	support/tinyexr/tinyexr.h	1181;"	d
Z_BLOCK	support/tinyexr/tinyexr.h	1169;"	d
Z_BUF_ERROR	support/tinyexr/tinyexr.h	1177;"	d
Z_DATA_ERROR	support/tinyexr/tinyexr.h	1175;"	d
Z_DEFAULT_COMPRESSION	support/tinyexr/tinyexr.h	1183;"	d
Z_DEFAULT_STRATEGY	support/tinyexr/tinyexr.h	1184;"	d
Z_DEFAULT_WINDOW_BITS	support/tinyexr/tinyexr.h	1190;"	d
Z_DEFLATED	support/tinyexr/tinyexr.h	1189;"	d
Z_ERRNO	support/tinyexr/tinyexr.h	1173;"	d
Z_FILTERED	support/tinyexr/tinyexr.h	1185;"	d
Z_FINISH	support/tinyexr/tinyexr.h	1168;"	d
Z_FIXED	support/tinyexr/tinyexr.h	1188;"	d
Z_FULL_FLUSH	support/tinyexr/tinyexr.h	1167;"	d
Z_HUFFMAN_ONLY	support/tinyexr/tinyexr.h	1186;"	d
Z_MEM_ERROR	support/tinyexr/tinyexr.h	1176;"	d
Z_NEED_DICT	support/tinyexr/tinyexr.h	1172;"	d
Z_NO_COMPRESSION	support/tinyexr/tinyexr.h	1180;"	d
Z_NO_FLUSH	support/tinyexr/tinyexr.h	1164;"	d
Z_NULL	support/tinyexr/tinyexr.h	1163;"	d
Z_OK	support/tinyexr/tinyexr.h	1170;"	d
Z_PARAM_ERROR	support/tinyexr/tinyexr.h	1179;"	d
Z_PARTIAL_FLUSH	support/tinyexr/tinyexr.h	1165;"	d
Z_RLE	support/tinyexr/tinyexr.h	1187;"	d
Z_STREAM_END	support/tinyexr/tinyexr.h	1171;"	d
Z_STREAM_ERROR	support/tinyexr/tinyexr.h	1174;"	d
Z_SYNC_FLUSH	support/tinyexr/tinyexr.h	1166;"	d
Z_VERSION_ERROR	support/tinyexr/tinyexr.h	1178;"	d
ZeroCrossing	optixVolumeViewer/nanovdb/util/HDDA.h	/^inline __hostdev__ bool ZeroCrossing(RayT& ray, AccT& acc, Coord& ijk, typename AccT::ValueType& v, float& t)$/;"	f	namespace:nanovdb
ZeroCrossingNode	optixVolumeViewer/nanovdb/util/HDDA.h	/^inline __hostdev__ bool ZeroCrossingNode(RayT& ray, const NodeT& node, float v0, nanovdb::Coord& ijk, float& v, float& t)$/;"	f	namespace:nanovdb
_ANONYMOUS_STRUCT	support/GLFW/deps/mingw/_mingw_dxhelper.h	30;"	d
_ANONYMOUS_STRUCT	support/GLFW/deps/mingw/_mingw_dxhelper.h	33;"	d
_ANONYMOUS_UNION	support/GLFW/deps/mingw/_mingw_dxhelper.h	29;"	d
_ANONYMOUS_UNION	support/GLFW/deps/mingw/_mingw_dxhelper.h	32;"	d
_CONDITION_EVENT_ALL	support/GLFW/deps/tinycthread.c	137;"	d	file:
_CONDITION_EVENT_ONE	support/GLFW/deps/tinycthread.c	136;"	d	file:
_CPOINT	support/GLFW/deps/mingw/dinput.h	/^typedef struct _CPOINT {$/;"	s
_CRT_NONSTDC_NO_DEPRECATE	support/tinygltf/stb_image_write.h	210;"	d
_CRT_SECURE_NO_WARNINGS	support/imgui/imgui.cpp	927;"	d	file:
_CRT_SECURE_NO_WARNINGS	support/imgui/imgui_demo.cpp	48;"	d	file:
_CRT_SECURE_NO_WARNINGS	support/imgui/imgui_draw.cpp	25;"	d	file:
_CRT_SECURE_NO_WARNINGS	support/imgui/imgui_impl_opengl3.cpp	58;"	d	file:
_CRT_SECURE_NO_WARNINGS	support/imgui/imgui_widgets.cpp	31;"	d	file:
_CRT_SECURE_NO_WARNINGS	support/tinygltf/stb_image_write.h	207;"	d
_Channels	support/imgui/imgui.h	/^    ImVector<ImDrawChannel> _Channels;          \/\/ [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)$/;"	m	struct:ImDrawList
_ChannelsCount	support/imgui/imgui.h	/^    int                     _ChannelsCount;     \/\/ [Internal] number of active channels (1+)$/;"	m	struct:ImDrawList
_ChannelsCurrent	support/imgui/imgui.h	/^    int                     _ChannelsCurrent;   \/\/ [Internal] current channel number (0)$/;"	m	struct:ImDrawList
_ClipRectStack	support/imgui/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList
_DIACTIONA	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIACTIONA {$/;"	s
_DIACTIONFORMATA	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIACTIONFORMATA {$/;"	s
_DIACTIONFORMATW	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIACTIONFORMATW {$/;"	s
_DIACTIONW	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIACTIONW {$/;"	s
_DICOLORSET	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DICOLORSET {$/;"	s
_DICONFIGUREDEVICESPARAMSA	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DICONFIGUREDEVICESPARAMSA {$/;"	s
_DICONFIGUREDEVICESPARAMSW	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DICONFIGUREDEVICESPARAMSW {$/;"	s
_DIDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIDATAFORMAT {$/;"	s
_DIDEVICEIMAGEINFOA	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIDEVICEIMAGEINFOA {$/;"	s
_DIDEVICEIMAGEINFOHEADERA	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIDEVICEIMAGEINFOHEADERA {$/;"	s
_DIDEVICEIMAGEINFOHEADERW	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIDEVICEIMAGEINFOHEADERW {$/;"	s
_DIDEVICEIMAGEINFOW	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIDEVICEIMAGEINFOW {$/;"	s
_DIOBJECTDATAFORMAT	support/GLFW/deps/mingw/dinput.h	/^typedef struct _DIOBJECTDATAFORMAT {$/;"	s
_Data	support/imgui/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)$/;"	m	struct:ImDrawList
_DeepImage	support/tinyexr/tinyexr.h	/^typedef struct _DeepImage {$/;"	s
_EXRAttribute	support/tinyexr/tinyexr.h	/^typedef struct _EXRAttribute {$/;"	s
_EXRChannelInfo	support/tinyexr/tinyexr.h	/^typedef struct _EXRChannelInfo {$/;"	s
_EXRHeader	support/tinyexr/tinyexr.h	/^typedef struct _EXRHeader {$/;"	s
_EXRImage	support/tinyexr/tinyexr.h	/^typedef struct _EXRImage {$/;"	s
_EXRMultiPartHeader	support/tinyexr/tinyexr.h	/^typedef struct _EXRMultiPartHeader {$/;"	s
_EXRMultiPartImage	support/tinyexr/tinyexr.h	/^typedef struct _EXRMultiPartImage {$/;"	s
_EXRTile	support/tinyexr/tinyexr.h	/^typedef struct _EXRTile {$/;"	s
_EXRVersion	support/tinyexr/tinyexr.h	/^typedef struct _EXRVersion {$/;"	s
_FEATURES_H	support/GLFW/deps/tinycthread.h	62;"	d
_GLAD_IS_SOME_NEW_VERSION	support/glad/glad.c	159;"	d	file:
_GLFW_BUILD_DLL	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/support/GLFW/src/glfw_config.h	49;"	d
_GLFW_CONCAT_VERSION	support/GLFW/src/internal.h	211;"	d
_GLFW_EGL_CONTEXT_STATE	support/GLFW/src/cocoa_platform.h	56;"	d
_GLFW_EGL_CONTEXT_STATE	support/GLFW/src/egl_context.h	152;"	d
_GLFW_EGL_CONTEXT_STATE	support/GLFW/src/internal.h	/^    _GLFW_EGL_CONTEXT_STATE;$/;"	m	struct:_GLFWcontext
_GLFW_EGL_LIBRARY_CONTEXT_STATE	support/GLFW/src/cocoa_platform.h	57;"	d
_GLFW_EGL_LIBRARY_CONTEXT_STATE	support/GLFW/src/egl_context.h	153;"	d
_GLFW_EGL_LIBRARY_CONTEXT_STATE	support/GLFW/src/internal.h	/^    _GLFW_EGL_LIBRARY_CONTEXT_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_EGL_NATIVE_DISPLAY	support/GLFW/src/mir_platform.h	61;"	d
_GLFW_EGL_NATIVE_DISPLAY	support/GLFW/src/win32_platform.h	218;"	d
_GLFW_EGL_NATIVE_DISPLAY	support/GLFW/src/wl_platform.h	62;"	d
_GLFW_EGL_NATIVE_DISPLAY	support/GLFW/src/x11_platform.h	98;"	d
_GLFW_EGL_NATIVE_WINDOW	support/GLFW/src/mir_platform.h	60;"	d
_GLFW_EGL_NATIVE_WINDOW	support/GLFW/src/win32_platform.h	217;"	d
_GLFW_EGL_NATIVE_WINDOW	support/GLFW/src/wl_platform.h	61;"	d
_GLFW_EGL_NATIVE_WINDOW	support/GLFW/src/x11_platform.h	97;"	d
_GLFW_KEY_INVALID	support/GLFW/src/win32_window.c	37;"	d	file:
_GLFW_MAKE_VERSION	support/GLFW/src/internal.h	212;"	d
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/glx_context.h	111;"	d
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_CONTEXT_STATE;$/;"	m	struct:_GLFWcontext
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/mir_platform.h	68;"	d
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/nsgl_context.h	30;"	d
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/wgl_context.h	104;"	d
_GLFW_PLATFORM_CONTEXT_STATE	support/GLFW/src/wl_platform.h	69;"	d
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/cocoa_platform.h	54;"	d
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_CURSOR_STATE;$/;"	m	struct:_GLFWcursor
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/mir_platform.h	66;"	d
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/win32_platform.h	225;"	d
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/wl_platform.h	67;"	d
_GLFW_PLATFORM_CURSOR_STATE	support/GLFW/src/x11_platform.h	103;"	d
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/glx_context.h	112;"	d
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_LIBRARY_CONTEXT_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/mir_platform.h	69;"	d
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/nsgl_context.h	31;"	d
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/wgl_context.h	105;"	d
_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE	support/GLFW/src/wl_platform.h	70;"	d
_GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE	support/GLFW/src/cocoa_joystick.h	35;"	d
_GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE	support/GLFW/src/linux_joystick.h	32;"	d
_GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE	support/GLFW/src/win32_joystick.h	30;"	d
_GLFW_PLATFORM_LIBRARY_TIME_STATE	support/GLFW/src/cocoa_platform.h	52;"	d
_GLFW_PLATFORM_LIBRARY_TIME_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_LIBRARY_TIME_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_PLATFORM_LIBRARY_TIME_STATE	support/GLFW/src/posix_time.h	31;"	d
_GLFW_PLATFORM_LIBRARY_TIME_STATE	support/GLFW/src/win32_platform.h	222;"	d
_GLFW_PLATFORM_LIBRARY_TLS_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_LIBRARY_TLS_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_PLATFORM_LIBRARY_TLS_STATE	support/GLFW/src/posix_tls.h	33;"	d
_GLFW_PLATFORM_LIBRARY_TLS_STATE	support/GLFW/src/win32_platform.h	223;"	d
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/cocoa_platform.h	51;"	d
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_LIBRARY_WINDOW_STATE;$/;"	m	struct:_GLFWlibrary
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/mir_platform.h	65;"	d
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/win32_platform.h	221;"	d
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/wl_platform.h	65;"	d
_GLFW_PLATFORM_LIBRARY_WINDOW_STATE	support/GLFW/src/x11_platform.h	101;"	d
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/cocoa_platform.h	53;"	d
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_MONITOR_STATE;$/;"	m	struct:_GLFWmonitor
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/mir_platform.h	64;"	d
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/win32_platform.h	224;"	d
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/wl_platform.h	66;"	d
_GLFW_PLATFORM_MONITOR_STATE	support/GLFW/src/x11_platform.h	102;"	d
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/cocoa_platform.h	50;"	d
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/internal.h	/^    _GLFW_PLATFORM_WINDOW_STATE;$/;"	m	struct:_GLFWwindow
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/mir_platform.h	63;"	d
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/win32_platform.h	220;"	d
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/wl_platform.h	64;"	d
_GLFW_PLATFORM_WINDOW_STATE	support/GLFW/src/x11_platform.h	100;"	d
_GLFW_PRESENCE_ONLY	support/GLFW/src/win32_joystick.c	34;"	d	file:
_GLFW_RECREATION_IMPOSSIBLE	support/GLFW/src/wgl_context.h	102;"	d
_GLFW_RECREATION_NOT_NEEDED	support/GLFW/src/wgl_context.h	100;"	d
_GLFW_RECREATION_REQUIRED	support/GLFW/src/wgl_context.h	101;"	d
_GLFW_REQUIRE_INIT	support/GLFW/src/internal.h	218;"	d
_GLFW_REQUIRE_INIT_OR_RETURN	support/GLFW/src/internal.h	224;"	d
_GLFW_STICK	support/GLFW/src/input.c	35;"	d	file:
_GLFW_SWAP_POINTERS	support/GLFW/src/internal.h	232;"	d
_GLFW_TYPE_AXIS	support/GLFW/src/win32_joystick.c	37;"	d	file:
_GLFW_TYPE_BUTTON	support/GLFW/src/win32_joystick.c	39;"	d	file:
_GLFW_TYPE_POV	support/GLFW/src/win32_joystick.c	40;"	d	file:
_GLFW_TYPE_SLIDER	support/GLFW/src/win32_joystick.c	38;"	d	file:
_GLFW_UPDATE_STATE	support/GLFW/src/win32_joystick.c	35;"	d	file:
_GLFW_VERSION_NUMBER	support/GLFW/src/internal.h	213;"	d
_GLFW_WNDCLASSNAME	support/GLFW/src/win32_platform.h	211;"	d
_GLFW_X11	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/support/GLFW/src/glfw_config.h	38;"	d
_GLFWcontext	support/GLFW/src/internal.h	/^struct _GLFWcontext$/;"	s
_GLFWcontext	support/GLFW/src/internal.h	/^typedef struct _GLFWcontext     _GLFWcontext;$/;"	t	typeref:struct:_GLFWcontext
_GLFWcontextEGL	support/GLFW/src/egl_context.h	/^typedef struct _GLFWcontextEGL$/;"	s
_GLFWcontextEGL	support/GLFW/src/egl_context.h	/^} _GLFWcontextEGL;$/;"	t	typeref:struct:_GLFWcontextEGL
_GLFWcontextGLX	support/GLFW/src/glx_context.h	/^typedef struct _GLFWcontextGLX$/;"	s
_GLFWcontextGLX	support/GLFW/src/glx_context.h	/^} _GLFWcontextGLX;$/;"	t	typeref:struct:_GLFWcontextGLX
_GLFWcontextNSGL	support/GLFW/src/nsgl_context.h	/^typedef struct _GLFWcontextNSGL$/;"	s
_GLFWcontextNSGL	support/GLFW/src/nsgl_context.h	/^} _GLFWcontextNSGL;$/;"	t	typeref:struct:_GLFWcontextNSGL
_GLFWcontextWGL	support/GLFW/src/wgl_context.h	/^typedef struct _GLFWcontextWGL$/;"	s
_GLFWcontextWGL	support/GLFW/src/wgl_context.h	/^} _GLFWcontextWGL;$/;"	t	typeref:struct:_GLFWcontextWGL
_GLFWctxconfig	support/GLFW/src/internal.h	/^struct _GLFWctxconfig$/;"	s
_GLFWctxconfig	support/GLFW/src/internal.h	/^typedef struct _GLFWctxconfig   _GLFWctxconfig;$/;"	t	typeref:struct:_GLFWctxconfig
_GLFWcursor	support/GLFW/src/internal.h	/^struct _GLFWcursor$/;"	s
_GLFWcursor	support/GLFW/src/internal.h	/^typedef struct _GLFWcursor      _GLFWcursor;$/;"	t	typeref:struct:_GLFWcursor
_GLFWcursorMir	support/GLFW/src/mir_platform.h	/^typedef struct _GLFWcursorMir$/;"	s
_GLFWcursorMir	support/GLFW/src/mir_platform.h	/^} _GLFWcursorMir;$/;"	t	typeref:struct:_GLFWcursorMir
_GLFWcursorNS	support/GLFW/src/cocoa_platform.h	/^typedef struct _GLFWcursorNS$/;"	s
_GLFWcursorNS	support/GLFW/src/cocoa_platform.h	/^} _GLFWcursorNS;$/;"	t	typeref:struct:_GLFWcursorNS
_GLFWcursorWayland	support/GLFW/src/wl_platform.h	/^typedef struct _GLFWcursorWayland$/;"	s
_GLFWcursorWayland	support/GLFW/src/wl_platform.h	/^} _GLFWcursorWayland;$/;"	t	typeref:struct:_GLFWcursorWayland
_GLFWcursorWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWcursorWin32$/;"	s
_GLFWcursorWin32	support/GLFW/src/win32_platform.h	/^} _GLFWcursorWin32;$/;"	t	typeref:struct:_GLFWcursorWin32
_GLFWcursorX11	support/GLFW/src/x11_platform.h	/^typedef struct _GLFWcursorX11$/;"	s
_GLFWcursorX11	support/GLFW/src/x11_platform.h	/^} _GLFWcursorX11;$/;"	t	typeref:struct:_GLFWcursorX11
_GLFWdestroycontextfun	support/GLFW/src/internal.h	/^typedef void (* _GLFWdestroycontextfun)(_GLFWwindow*);$/;"	t
_GLFWextensionsupportedfun	support/GLFW/src/internal.h	/^typedef int (* _GLFWextensionsupportedfun)(const char*);$/;"	t
_GLFWfbconfig	support/GLFW/src/internal.h	/^struct _GLFWfbconfig$/;"	s
_GLFWfbconfig	support/GLFW/src/internal.h	/^typedef struct _GLFWfbconfig    _GLFWfbconfig;$/;"	t	typeref:struct:_GLFWfbconfig
_GLFWgetprocaddressfun	support/GLFW/src/internal.h	/^typedef GLFWglproc (* _GLFWgetprocaddressfun)(const char*);$/;"	t
_GLFWjoylistLinux	support/GLFW/src/linux_joystick.h	/^typedef struct _GLFWjoylistLinux$/;"	s
_GLFWjoylistLinux	support/GLFW/src/linux_joystick.h	/^} _GLFWjoylistLinux;$/;"	t	typeref:struct:_GLFWjoylistLinux
_GLFWjoyobjectWin32	support/GLFW/src/win32_joystick.h	/^typedef struct _GLFWjoyobjectWin32$/;"	s
_GLFWjoyobjectWin32	support/GLFW/src/win32_joystick.h	/^} _GLFWjoyobjectWin32;$/;"	t	typeref:struct:_GLFWjoyobjectWin32
_GLFWjoystickLinux	support/GLFW/src/linux_joystick.h	/^typedef struct _GLFWjoystickLinux$/;"	s
_GLFWjoystickLinux	support/GLFW/src/linux_joystick.h	/^} _GLFWjoystickLinux;$/;"	t	typeref:struct:_GLFWjoystickLinux
_GLFWjoystickNS	support/GLFW/src/cocoa_joystick.h	/^typedef struct _GLFWjoystickNS$/;"	s
_GLFWjoystickNS	support/GLFW/src/cocoa_joystick.h	/^} _GLFWjoystickNS;$/;"	t	typeref:struct:_GLFWjoystickNS
_GLFWjoystickWin32	support/GLFW/src/win32_joystick.h	/^typedef struct _GLFWjoystickWin32$/;"	s
_GLFWjoystickWin32	support/GLFW/src/win32_joystick.h	/^} _GLFWjoystickWin32;$/;"	t	typeref:struct:_GLFWjoystickWin32
_GLFWlibrary	support/GLFW/src/internal.h	/^struct _GLFWlibrary$/;"	s
_GLFWlibrary	support/GLFW/src/internal.h	/^typedef struct _GLFWlibrary     _GLFWlibrary;$/;"	t	typeref:struct:_GLFWlibrary
_GLFWlibraryEGL	support/GLFW/src/egl_context.h	/^typedef struct _GLFWlibraryEGL$/;"	s
_GLFWlibraryEGL	support/GLFW/src/egl_context.h	/^} _GLFWlibraryEGL;$/;"	t	typeref:struct:_GLFWlibraryEGL
_GLFWlibraryGLX	support/GLFW/src/glx_context.h	/^typedef struct _GLFWlibraryGLX$/;"	s
_GLFWlibraryGLX	support/GLFW/src/glx_context.h	/^} _GLFWlibraryGLX;$/;"	t	typeref:struct:_GLFWlibraryGLX
_GLFWlibraryMir	support/GLFW/src/mir_platform.h	/^typedef struct _GLFWlibraryMir$/;"	s
_GLFWlibraryMir	support/GLFW/src/mir_platform.h	/^} _GLFWlibraryMir;$/;"	t	typeref:struct:_GLFWlibraryMir
_GLFWlibraryNS	support/GLFW/src/cocoa_platform.h	/^typedef struct _GLFWlibraryNS$/;"	s
_GLFWlibraryNS	support/GLFW/src/cocoa_platform.h	/^} _GLFWlibraryNS;$/;"	t	typeref:struct:_GLFWlibraryNS
_GLFWlibraryNSGL	support/GLFW/src/nsgl_context.h	/^typedef struct _GLFWlibraryNSGL$/;"	s
_GLFWlibraryNSGL	support/GLFW/src/nsgl_context.h	/^} _GLFWlibraryNSGL;$/;"	t	typeref:struct:_GLFWlibraryNSGL
_GLFWlibraryWGL	support/GLFW/src/wgl_context.h	/^typedef struct _GLFWlibraryWGL$/;"	s
_GLFWlibraryWGL	support/GLFW/src/wgl_context.h	/^} _GLFWlibraryWGL;$/;"	t	typeref:struct:_GLFWlibraryWGL
_GLFWlibraryWayland	support/GLFW/src/wl_platform.h	/^typedef struct _GLFWlibraryWayland$/;"	s
_GLFWlibraryWayland	support/GLFW/src/wl_platform.h	/^} _GLFWlibraryWayland;$/;"	t	typeref:struct:_GLFWlibraryWayland
_GLFWlibraryWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWlibraryWin32$/;"	s
_GLFWlibraryWin32	support/GLFW/src/win32_platform.h	/^} _GLFWlibraryWin32;$/;"	t	typeref:struct:_GLFWlibraryWin32
_GLFWlibraryX11	support/GLFW/src/x11_platform.h	/^typedef struct _GLFWlibraryX11$/;"	s
_GLFWlibraryX11	support/GLFW/src/x11_platform.h	/^} _GLFWlibraryX11;$/;"	t	typeref:struct:_GLFWlibraryX11
_GLFWmakecontextcurrentfun	support/GLFW/src/internal.h	/^typedef void (* _GLFWmakecontextcurrentfun)(_GLFWwindow*);$/;"	t
_GLFWmonitor	support/GLFW/src/internal.h	/^struct _GLFWmonitor$/;"	s
_GLFWmonitor	support/GLFW/src/internal.h	/^typedef struct _GLFWmonitor     _GLFWmonitor;$/;"	t	typeref:struct:_GLFWmonitor
_GLFWmonitorMir	support/GLFW/src/mir_platform.h	/^typedef struct _GLFWmonitorMir$/;"	s
_GLFWmonitorMir	support/GLFW/src/mir_platform.h	/^} _GLFWmonitorMir;$/;"	t	typeref:struct:_GLFWmonitorMir
_GLFWmonitorNS	support/GLFW/src/cocoa_platform.h	/^typedef struct _GLFWmonitorNS$/;"	s
_GLFWmonitorNS	support/GLFW/src/cocoa_platform.h	/^} _GLFWmonitorNS;$/;"	t	typeref:struct:_GLFWmonitorNS
_GLFWmonitorWayland	support/GLFW/src/wl_platform.h	/^typedef struct _GLFWmonitorWayland$/;"	s
_GLFWmonitorWayland	support/GLFW/src/wl_platform.h	/^} _GLFWmonitorWayland;$/;"	t	typeref:struct:_GLFWmonitorWayland
_GLFWmonitorWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWmonitorWin32$/;"	s
_GLFWmonitorWin32	support/GLFW/src/win32_platform.h	/^} _GLFWmonitorWin32;$/;"	t	typeref:struct:_GLFWmonitorWin32
_GLFWmonitorX11	support/GLFW/src/x11_platform.h	/^typedef struct _GLFWmonitorX11$/;"	s
_GLFWmonitorX11	support/GLFW/src/x11_platform.h	/^} _GLFWmonitorX11;$/;"	t	typeref:struct:_GLFWmonitorX11
_GLFWobjenumWin32	support/GLFW/src/win32_joystick.c	/^typedef struct _GLFWobjenumWin32$/;"	s	file:
_GLFWobjenumWin32	support/GLFW/src/win32_joystick.c	/^} _GLFWobjenumWin32;$/;"	t	typeref:struct:_GLFWobjenumWin32	file:
_GLFWswapbuffersfun	support/GLFW/src/internal.h	/^typedef void (* _GLFWswapbuffersfun)(_GLFWwindow*);$/;"	t
_GLFWswapintervalfun	support/GLFW/src/internal.h	/^typedef void (* _GLFWswapintervalfun)(int);$/;"	t
_GLFWtimeNS	support/GLFW/src/cocoa_platform.h	/^typedef struct _GLFWtimeNS$/;"	s
_GLFWtimeNS	support/GLFW/src/cocoa_platform.h	/^} _GLFWtimeNS;$/;"	t	typeref:struct:_GLFWtimeNS
_GLFWtimePOSIX	support/GLFW/src/posix_time.h	/^typedef struct _GLFWtimePOSIX$/;"	s
_GLFWtimePOSIX	support/GLFW/src/posix_time.h	/^} _GLFWtimePOSIX;$/;"	t	typeref:struct:_GLFWtimePOSIX
_GLFWtimeWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWtimeWin32$/;"	s
_GLFWtimeWin32	support/GLFW/src/win32_platform.h	/^} _GLFWtimeWin32;$/;"	t	typeref:struct:_GLFWtimeWin32
_GLFWtlsPOSIX	support/GLFW/src/posix_tls.h	/^typedef struct _GLFWtlsPOSIX$/;"	s
_GLFWtlsPOSIX	support/GLFW/src/posix_tls.h	/^} _GLFWtlsPOSIX;$/;"	t	typeref:struct:_GLFWtlsPOSIX
_GLFWtlsWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWtlsWin32$/;"	s
_GLFWtlsWin32	support/GLFW/src/win32_platform.h	/^} _GLFWtlsWin32;$/;"	t	typeref:struct:_GLFWtlsWin32
_GLFWvidmodeWayland	support/GLFW/src/wl_monitor.c	/^struct _GLFWvidmodeWayland$/;"	s	file:
_GLFWvidmodeWayland	support/GLFW/src/wl_platform.h	/^typedef struct _GLFWvidmodeWayland _GLFWvidmodeWayland;$/;"	t	typeref:struct:_GLFWvidmodeWayland
_GLFWwindow	support/GLFW/src/internal.h	/^struct _GLFWwindow$/;"	s
_GLFWwindow	support/GLFW/src/internal.h	/^typedef struct _GLFWwindow      _GLFWwindow;$/;"	t	typeref:struct:_GLFWwindow
_GLFWwindowMir	support/GLFW/src/mir_platform.h	/^typedef struct _GLFWwindowMir$/;"	s
_GLFWwindowMir	support/GLFW/src/mir_platform.h	/^} _GLFWwindowMir;$/;"	t	typeref:struct:_GLFWwindowMir
_GLFWwindowNS	support/GLFW/src/cocoa_platform.h	/^typedef struct _GLFWwindowNS$/;"	s
_GLFWwindowNS	support/GLFW/src/cocoa_platform.h	/^} _GLFWwindowNS;$/;"	t	typeref:struct:_GLFWwindowNS
_GLFWwindowWayland	support/GLFW/src/wl_platform.h	/^typedef struct _GLFWwindowWayland$/;"	s
_GLFWwindowWayland	support/GLFW/src/wl_platform.h	/^} _GLFWwindowWayland;$/;"	t	typeref:struct:_GLFWwindowWayland
_GLFWwindowWin32	support/GLFW/src/win32_platform.h	/^typedef struct _GLFWwindowWin32$/;"	s
_GLFWwindowWin32	support/GLFW/src/win32_platform.h	/^} _GLFWwindowWin32;$/;"	t	typeref:struct:_GLFWwindowWin32
_GLFWwindowX11	support/GLFW/src/x11_platform.h	/^typedef struct _GLFWwindowX11$/;"	s
_GLFWwindowX11	support/GLFW/src/x11_platform.h	/^} _GLFWwindowX11;$/;"	t	typeref:struct:_GLFWwindowX11
_GLFWwndconfig	support/GLFW/src/internal.h	/^struct _GLFWwndconfig$/;"	s
_GLFWwndconfig	support/GLFW/src/internal.h	/^typedef struct _GLFWwndconfig   _GLFWwndconfig;$/;"	t	typeref:struct:_GLFWwndconfig
_GNU_SOURCE	support/GLFW/deps/tinycthread.h	64;"	d
_GNU_SOURCE	support/GLFW/src/linux_joystick.c	28;"	d	file:
_GNU_SOURCE	support/GLFW/src/wl_window.c	27;"	d	file:
_IdxWritePtr	support/imgui/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)$/;"	m	struct:ImDrawList
_NET_WM_STATE_ADD	support/GLFW/src/x11_window.c	44;"	d	file:
_NET_WM_STATE_REMOVE	support/GLFW/src/x11_window.c	43;"	d	file:
_NET_WM_STATE_TOGGLE	support/GLFW/src/x11_window.c	45;"	d	file:
_NV_OF_BOOL	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_BOOL$/;"	g
_NV_OF_BUFFER_DESCRIPTOR	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_BUFFER_DESCRIPTOR$/;"	s
_NV_OF_BUFFER_FORMAT	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_BUFFER_FORMAT$/;"	g
_NV_OF_BUFFER_STRIDE	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef struct _NV_OF_BUFFER_STRIDE$/;"	s
_NV_OF_BUFFER_USAGE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_BUFFER_USAGE$/;"	g
_NV_OF_CAPS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_CAPS$/;"	g
_NV_OF_CUDA_API_FUNCTION_LIST	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef struct _NV_OF_CUDA_API_FUNCTION_LIST$/;"	s
_NV_OF_CUDA_BUFFER_STRIDE_INFO	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef struct _NV_OF_CUDA_BUFFER_STRIDE_INFO$/;"	s
_NV_OF_CUDA_BUFFER_TYPE	optixOpticalFlow/nvOpticalFlowCuda.h	/^typedef enum _NV_OF_CUDA_BUFFER_TYPE$/;"	g
_NV_OF_EXECUTE_INPUT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_EXECUTE_INPUT_PARAMS$/;"	s
_NV_OF_EXECUTE_OUTPUT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_EXECUTE_OUTPUT_PARAMS$/;"	s
_NV_OF_FLOW_VECTOR	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_FLOW_VECTOR$/;"	s
_NV_OF_HINT_VECTOR_GRID_SIZE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_HINT_VECTOR_GRID_SIZE$/;"	g
_NV_OF_INIT_PARAMS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_INIT_PARAMS$/;"	s
_NV_OF_MODE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_MODE$/;"	g
_NV_OF_OUTPUT_VECTOR_GRID_SIZE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_OUTPUT_VECTOR_GRID_SIZE$/;"	g
_NV_OF_PERF_LEVEL	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_PERF_LEVEL$/;"	g
_NV_OF_STATUS	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_STATUS$/;"	g
_NV_OF_STEREO_DISPARITY	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef struct _NV_OF_STEREO_DISPARITY$/;"	s
_NV_OF_STEREO_DISPARITY_RANGE	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef enum _NV_OF_STEREO_DISPARITY_RANGE$/;"	g
_NV_OPTICALFLOW_COMMON_H_	optixOpticalFlow/nvOpticalFlowCommon.h	38;"	d
_NV_OPTICALFLOW_CUDA_H_	optixOpticalFlow/nvOpticalFlowCuda.h	37;"	d
_OwnerName	support/imgui/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debugging$/;"	m	struct:ImDrawList
_POSIX_C_SOURCE	support/GLFW/deps/tinycthread.h	67;"	d
_POSIX_C_SOURCE	support/GLFW/deps/tinycthread.h	68;"	d
_Path	support/imgui/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList
_STRUCT_NAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	37;"	d
_STRUCT_NAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	40;"	d
_TINYCTHREAD_H_	support/GLFW/deps/tinycthread.h	25;"	d
_TTHREAD_EMULATE_CLOCK_GETTIME_	support/GLFW/deps/tinycthread.h	109;"	d
_TTHREAD_PLATFORM_DEFINED_	support/GLFW/deps/tinycthread.h	57;"	d
_TTHREAD_POSIX_	support/GLFW/deps/tinycthread.h	55;"	d
_TTHREAD_WIN32_	support/GLFW/deps/tinycthread.h	53;"	d
_TextureIdStack	support/imgui/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList
_Thread_local	support/GLFW/deps/tinycthread.h	159;"	d
_Thread_local	support/GLFW/deps/tinycthread.h	161;"	d
_UNION_NAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	36;"	d
_UNION_NAME	support/GLFW/deps/mingw/_mingw_dxhelper.h	39;"	d
_VtxCurrentIdx	support/imgui/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] == VtxBuffer.Size$/;"	m	struct:ImDrawList
_VtxWritePtr	support/imgui/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)$/;"	m	struct:ImDrawList
_WIN32	support/GLFW/include/GLFW/glfw3.h	90;"	d
_WIN32_WINNT	support/GLFW/src/win32_platform.h	60;"	d
_WIN32_WINNT	support/GLFW/src/win32_platform.h	61;"	d
_XINPUT_BATTERY_INFORMATION	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_BATTERY_INFORMATION$/;"	s
_XINPUT_CAPABILITIES	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_CAPABILITIES {$/;"	s
_XINPUT_GAMEPAD	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_GAMEPAD {$/;"	s
_XINPUT_KEYSTROKE	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_KEYSTROKE {$/;"	s
_XINPUT_STATE	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_STATE {$/;"	s
_XINPUT_VIBRATION	support/GLFW/deps/mingw/xinput.h	/^typedef struct _XINPUT_VIBRATION {$/;"	s
_XOPEN_SOURCE	support/GLFW/deps/tinycthread.h	71;"	d
_XOPEN_SOURCE	support/GLFW/deps/tinycthread.h	72;"	d
__ANONYMOUS_DEFINED	support/GLFW/deps/mingw/_mingw_dxhelper.h	27;"	d
__DINPUT_INCLUDED__	support/GLFW/deps/mingw/dinput.h	20;"	d
__GLXextproc	support/GLFW/src/glx_context.h	/^typedef void (*__GLXextproc)(void);$/;"	t
__GNU_EXTENSION	support/GLFW/deps/mingw/_mingw_dxhelper.h	20;"	d
__GNU_EXTENSION	support/GLFW/deps/mingw/_mingw_dxhelper.h	22;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	support/imgui/imstb_truetype.h	501;"	d
__UNDEF_LEAN_AND_MEAN	support/GLFW/deps/tinycthread.h	86;"	d
__UNDEF_LEAN_AND_MEAN	support/GLFW/deps/tinycthread.h	91;"	d
__WINE_XINPUT_H	support/GLFW/deps/mingw/xinput.h	21;"	d
__gl_h_	support/GLFW/deps/glad/glad.h	8;"	d
__gl_h_	support/glad/glad.h	29;"	d
__glad_h_	support/GLFW/deps/glad/glad.h	3;"	d
__glad_h_	support/glad/glad.h	24;"	d
__has_include	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	17;"	d	file:
__has_include	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	11;"	d	file:
__hostdev__	optixVolumeViewer/nanovdb/NanoVDB.h	152;"	d
__hostdev__	optixVolumeViewer/nanovdb/NanoVDB.h	154;"	d
__khrplatform_h_	support/GLFW/deps/KHR/khrplatform.h	2;"	d
__khrplatform_h_	support/KHR/khrplatform.h	2;"	d
__line_t	optixMotionGeometry/tiny_obj_loader.h	/^struct __line_t {$/;"	s	namespace:tinyobj
__points_t	optixMotionGeometry/tiny_obj_loader.h	/^struct __points_t {$/;"	s	namespace:tinyobj
_cnd_timedwait_win32	support/GLFW/deps/tinycthread.c	/^static int _cnd_timedwait_win32(cnd_t *cond, mtx_t *mtx, DWORD timeout)$/;"	f	file:
_glfw	support/GLFW/src/init.c	/^_GLFWlibrary _glfw;$/;"	v
_glfw3_cocoa_joystick_h_	support/GLFW/src/cocoa_joystick.h	28;"	d
_glfw3_cocoa_platform_h_	support/GLFW/src/cocoa_platform.h	28;"	d
_glfw3_egl_context_h_	support/GLFW/src/egl_context.h	29;"	d
_glfw3_glx_context_h_	support/GLFW/src/glx_context.h	29;"	d
_glfw3_h_	support/GLFW/include/GLFW/glfw3.h	30;"	d
_glfw3_internal_h_	support/GLFW/src/internal.h	29;"	d
_glfw3_linux_joystick_h_	support/GLFW/src/linux_joystick.h	28;"	d
_glfw3_mir_platform_h_	support/GLFW/src/mir_platform.h	28;"	d
_glfw3_native_h_	support/GLFW/include/GLFW/glfw3native.h	30;"	d
_glfw3_nsgl_context_h_	support/GLFW/src/nsgl_context.h	28;"	d
_glfw3_posix_time_h_	support/GLFW/src/posix_time.h	29;"	d
_glfw3_posix_tls_h_	support/GLFW/src/posix_tls.h	29;"	d
_glfw3_wayland_platform_h_	support/GLFW/src/wl_platform.h	28;"	d
_glfw3_wgl_context_h_	support/GLFW/src/wgl_context.h	29;"	d
_glfw3_win32_joystick_h_	support/GLFW/src/win32_joystick.h	28;"	d
_glfw3_win32_platform_h_	support/GLFW/src/win32_platform.h	29;"	d
_glfw3_x11_platform_h_	support/GLFW/src/x11_platform.h	29;"	d
_glfw3_xkb_unicode_h_	support/GLFW/src/xkb_unicode.h	28;"	d
_glfwAddOutputWayland	support/GLFW/src/wl_monitor.c	/^void _glfwAddOutputWayland(uint32_t name, uint32_t version)$/;"	f
_glfwAllocGammaArrays	support/GLFW/src/monitor.c	/^void _glfwAllocGammaArrays(GLFWgammaramp* ramp, unsigned int size)$/;"	f
_glfwAllocMonitor	support/GLFW/src/monitor.c	/^_GLFWmonitor* _glfwAllocMonitor(const char* name, int widthMM, int heightMM)$/;"	f
_glfwChooseFBConfig	support/GLFW/src/context.c	/^const _GLFWfbconfig* _glfwChooseFBConfig(const _GLFWfbconfig* desired,$/;"	f
_glfwChooseVideoMode	support/GLFW/src/monitor.c	/^const GLFWvidmode* _glfwChooseVideoMode(_GLFWmonitor* monitor,$/;"	f
_glfwChooseVisualEGL	support/GLFW/src/egl_context.c	/^GLFWbool _glfwChooseVisualEGL(const _GLFWctxconfig* ctxconfig,$/;"	f
_glfwChooseVisualGLX	support/GLFW/src/glx_context.c	/^GLFWbool _glfwChooseVisualGLX(const _GLFWctxconfig* ctxconfig,$/;"	f
_glfwCompareVideoModes	support/GLFW/src/monitor.c	/^int _glfwCompareVideoModes(const GLFWvidmode* fm, const GLFWvidmode* sm)$/;"	f
_glfwCreateContextEGL	support/GLFW/src/egl_context.c	/^GLFWbool _glfwCreateContextEGL(_GLFWwindow* window,$/;"	f
_glfwCreateContextGLX	support/GLFW/src/glx_context.c	/^GLFWbool _glfwCreateContextGLX(_GLFWwindow* window,$/;"	f
_glfwCreateContextWGL	support/GLFW/src/wgl_context.c	/^GLFWbool _glfwCreateContextWGL(_GLFWwindow* window,$/;"	f
_glfwCreateCursorX11	support/GLFW/src/x11_init.c	/^Cursor _glfwCreateCursorX11(const GLFWimage* image, int xhot, int yhot)$/;"	f
_glfwCreateUTF8FromWideStringWin32	support/GLFW/src/win32_init.c	/^char* _glfwCreateUTF8FromWideStringWin32(const WCHAR* source)$/;"	f
_glfwCreateWideStringFromUTF8Win32	support/GLFW/src/win32_init.c	/^WCHAR* _glfwCreateWideStringFromUTF8Win32(const char* source)$/;"	f
_glfwDataFormat	support/GLFW/src/win32_joystick.c	/^static const DIDATAFORMAT _glfwDataFormat =$/;"	v	file:
_glfwDeleteEventQueueMir	support/GLFW/src/mir_window.c	/^void _glfwDeleteEventQueueMir(EventQueue* queue)$/;"	f
_glfwDetectJoystickConnectionWin32	support/GLFW/src/win32_joystick.c	/^void _glfwDetectJoystickConnectionWin32(void)$/;"	f
_glfwDetectJoystickDisconnectionWin32	support/GLFW/src/win32_joystick.c	/^void _glfwDetectJoystickDisconnectionWin32(void)$/;"	f
_glfwErrorCallback	support/GLFW/src/init.c	/^static GLFWerrorfun _glfwErrorCallback = NULL;$/;"	v	file:
_glfwFreeGammaArrays	support/GLFW/src/monitor.c	/^void _glfwFreeGammaArrays(GLFWgammaramp* ramp)$/;"	f
_glfwFreeMonitor	support/GLFW/src/monitor.c	/^void _glfwFreeMonitor(_GLFWmonitor* monitor)$/;"	f
_glfwFreeMonitors	support/GLFW/src/monitor.c	/^void _glfwFreeMonitors(_GLFWmonitor** monitors, int count)$/;"	f
_glfwGetVulkanResultString	support/GLFW/src/vulkan.c	/^const char* _glfwGetVulkanResultString(VkResult result)$/;"	f
_glfwGetWindowPropertyX11	support/GLFW/src/x11_window.c	/^unsigned long _glfwGetWindowPropertyX11(Window window,$/;"	f
_glfwGrabErrorHandlerX11	support/GLFW/src/x11_init.c	/^void _glfwGrabErrorHandlerX11(void)$/;"	f
_glfwInitEGL	support/GLFW/src/egl_context.c	/^GLFWbool _glfwInitEGL(void)$/;"	f
_glfwInitEventQueueMir	support/GLFW/src/mir_window.c	/^void _glfwInitEventQueueMir(EventQueue* queue)$/;"	f
_glfwInitGLX	support/GLFW/src/glx_context.c	/^GLFWbool _glfwInitGLX(void)$/;"	f
_glfwInitJoysticksLinux	support/GLFW/src/linux_joystick.c	/^GLFWbool _glfwInitJoysticksLinux(void)$/;"	f
_glfwInitJoysticksWin32	support/GLFW/src/win32_joystick.c	/^void _glfwInitJoysticksWin32(void)$/;"	f
_glfwInitThreadLocalStoragePOSIX	support/GLFW/src/posix_tls.c	/^GLFWbool _glfwInitThreadLocalStoragePOSIX(void)$/;"	f
_glfwInitThreadLocalStorageWin32	support/GLFW/src/win32_tls.c	/^GLFWbool _glfwInitThreadLocalStorageWin32(void)$/;"	f
_glfwInitTimerNS	support/GLFW/src/cocoa_time.c	/^void _glfwInitTimerNS(void)$/;"	f
_glfwInitTimerPOSIX	support/GLFW/src/posix_time.c	/^void _glfwInitTimerPOSIX(void)$/;"	f
_glfwInitTimerWin32	support/GLFW/src/win32_time.c	/^void _glfwInitTimerWin32(void)$/;"	f
_glfwInitVulkan	support/GLFW/src/vulkan.c	/^GLFWbool _glfwInitVulkan(void)$/;"	f
_glfwInitWGL	support/GLFW/src/wgl_context.c	/^GLFWbool _glfwInitWGL(void)$/;"	f
_glfwInitialized	support/GLFW/src/init.c	/^GLFWbool _glfwInitialized = GLFW_FALSE;$/;"	v
_glfwInputChar	support/GLFW/src/input.c	/^void _glfwInputChar(_GLFWwindow* window, unsigned int codepoint, int mods, GLFWbool plain)$/;"	f
_glfwInputCursorEnter	support/GLFW/src/input.c	/^void _glfwInputCursorEnter(_GLFWwindow* window, GLFWbool entered)$/;"	f
_glfwInputCursorPos	support/GLFW/src/input.c	/^void _glfwInputCursorPos(_GLFWwindow* window, double xpos, double ypos)$/;"	f
_glfwInputDrop	support/GLFW/src/input.c	/^void _glfwInputDrop(_GLFWwindow* window, int count, const char** paths)$/;"	f
_glfwInputError	support/GLFW/src/init.c	/^void _glfwInputError(int error, const char* format, ...)$/;"	f
_glfwInputErrorX11	support/GLFW/src/x11_init.c	/^void _glfwInputErrorX11(int error, const char* message)$/;"	f
_glfwInputFramebufferSize	support/GLFW/src/window.c	/^void _glfwInputFramebufferSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwInputJoystickChange	support/GLFW/src/input.c	/^void _glfwInputJoystickChange(int joy, int event)$/;"	f
_glfwInputKey	support/GLFW/src/input.c	/^void _glfwInputKey(_GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f
_glfwInputMonitorChange	support/GLFW/src/monitor.c	/^void _glfwInputMonitorChange(void)$/;"	f
_glfwInputMonitorWindowChange	support/GLFW/src/monitor.c	/^void _glfwInputMonitorWindowChange(_GLFWmonitor* monitor, _GLFWwindow* window)$/;"	f
_glfwInputMouseClick	support/GLFW/src/input.c	/^void _glfwInputMouseClick(_GLFWwindow* window, int button, int action, int mods)$/;"	f
_glfwInputScroll	support/GLFW/src/input.c	/^void _glfwInputScroll(_GLFWwindow* window, double xoffset, double yoffset)$/;"	f
_glfwInputWindowCloseRequest	support/GLFW/src/window.c	/^void _glfwInputWindowCloseRequest(_GLFWwindow* window)$/;"	f
_glfwInputWindowDamage	support/GLFW/src/window.c	/^void _glfwInputWindowDamage(_GLFWwindow* window)$/;"	f
_glfwInputWindowFocus	support/GLFW/src/window.c	/^void _glfwInputWindowFocus(_GLFWwindow* window, GLFWbool focused)$/;"	f
_glfwInputWindowIconify	support/GLFW/src/window.c	/^void _glfwInputWindowIconify(_GLFWwindow* window, GLFWbool iconified)$/;"	f
_glfwInputWindowMonitorChange	support/GLFW/src/window.c	/^void _glfwInputWindowMonitorChange(_GLFWwindow* window, _GLFWmonitor* monitor)$/;"	f
_glfwInputWindowPos	support/GLFW/src/window.c	/^void _glfwInputWindowPos(_GLFWwindow* window, int x, int y)$/;"	f
_glfwInputWindowSize	support/GLFW/src/window.c	/^void _glfwInputWindowSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwIsPrintable	support/GLFW/src/input.c	/^GLFWbool _glfwIsPrintable(int key)$/;"	f
_glfwIsValidContextConfig	support/GLFW/src/context.c	/^GLFWbool _glfwIsValidContextConfig(const _GLFWctxconfig* ctxconfig)$/;"	f
_glfwKeySym2Unicode	support/GLFW/src/xkb_unicode.c	/^long _glfwKeySym2Unicode(unsigned int keysym)$/;"	f
_glfwObjectDataFormats	support/GLFW/src/win32_joystick.c	/^static DIOBJECTDATAFORMAT _glfwObjectDataFormats[] =$/;"	v	file:
_glfwPlatformCreateCursor	support/GLFW/src/mir_window.c	/^int _glfwPlatformCreateCursor(_GLFWcursor* cursor,$/;"	f
_glfwPlatformCreateCursor	support/GLFW/src/win32_window.c	/^int _glfwPlatformCreateCursor(_GLFWcursor* cursor,$/;"	f
_glfwPlatformCreateCursor	support/GLFW/src/wl_window.c	/^int _glfwPlatformCreateCursor(_GLFWcursor* cursor,$/;"	f
_glfwPlatformCreateCursor	support/GLFW/src/x11_window.c	/^int _glfwPlatformCreateCursor(_GLFWcursor* cursor,$/;"	f
_glfwPlatformCreateStandardCursor	support/GLFW/src/mir_window.c	/^int _glfwPlatformCreateStandardCursor(_GLFWcursor* cursor, int shape)$/;"	f
_glfwPlatformCreateStandardCursor	support/GLFW/src/win32_window.c	/^int _glfwPlatformCreateStandardCursor(_GLFWcursor* cursor, int shape)$/;"	f
_glfwPlatformCreateStandardCursor	support/GLFW/src/wl_window.c	/^int _glfwPlatformCreateStandardCursor(_GLFWcursor* cursor, int shape)$/;"	f
_glfwPlatformCreateStandardCursor	support/GLFW/src/x11_window.c	/^int _glfwPlatformCreateStandardCursor(_GLFWcursor* cursor, int shape)$/;"	f
_glfwPlatformCreateWindow	support/GLFW/src/mir_window.c	/^int _glfwPlatformCreateWindow(_GLFWwindow* window,$/;"	f
_glfwPlatformCreateWindow	support/GLFW/src/win32_window.c	/^int _glfwPlatformCreateWindow(_GLFWwindow* window,$/;"	f
_glfwPlatformCreateWindow	support/GLFW/src/wl_window.c	/^int _glfwPlatformCreateWindow(_GLFWwindow* window,$/;"	f
_glfwPlatformCreateWindow	support/GLFW/src/x11_window.c	/^int _glfwPlatformCreateWindow(_GLFWwindow* window,$/;"	f
_glfwPlatformCreateWindowSurface	support/GLFW/src/mir_window.c	/^VkResult _glfwPlatformCreateWindowSurface(VkInstance instance,$/;"	f
_glfwPlatformCreateWindowSurface	support/GLFW/src/win32_window.c	/^VkResult _glfwPlatformCreateWindowSurface(VkInstance instance,$/;"	f
_glfwPlatformCreateWindowSurface	support/GLFW/src/wl_window.c	/^VkResult _glfwPlatformCreateWindowSurface(VkInstance instance,$/;"	f
_glfwPlatformCreateWindowSurface	support/GLFW/src/x11_window.c	/^VkResult _glfwPlatformCreateWindowSurface(VkInstance instance,$/;"	f
_glfwPlatformDestroyCursor	support/GLFW/src/mir_window.c	/^void _glfwPlatformDestroyCursor(_GLFWcursor* cursor)$/;"	f
_glfwPlatformDestroyCursor	support/GLFW/src/win32_window.c	/^void _glfwPlatformDestroyCursor(_GLFWcursor* cursor)$/;"	f
_glfwPlatformDestroyCursor	support/GLFW/src/wl_window.c	/^void _glfwPlatformDestroyCursor(_GLFWcursor* cursor)$/;"	f
_glfwPlatformDestroyCursor	support/GLFW/src/x11_window.c	/^void _glfwPlatformDestroyCursor(_GLFWcursor* cursor)$/;"	f
_glfwPlatformDestroyWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformDestroyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformDestroyWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformDestroyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformDestroyWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformDestroyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformDestroyWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformDestroyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformFocusWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformFocusWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformFocusWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformFocusWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformFocusWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformFocusWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformFocusWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformFocusWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformGetClipboardString	support/GLFW/src/mir_window.c	/^const char* _glfwPlatformGetClipboardString(_GLFWwindow* window)$/;"	f
_glfwPlatformGetClipboardString	support/GLFW/src/win32_window.c	/^const char* _glfwPlatformGetClipboardString(_GLFWwindow* window)$/;"	f
_glfwPlatformGetClipboardString	support/GLFW/src/wl_window.c	/^const char* _glfwPlatformGetClipboardString(_GLFWwindow* window)$/;"	f
_glfwPlatformGetClipboardString	support/GLFW/src/x11_window.c	/^const char* _glfwPlatformGetClipboardString(_GLFWwindow* window)$/;"	f
_glfwPlatformGetCurrentContext	support/GLFW/src/posix_tls.c	/^_GLFWwindow* _glfwPlatformGetCurrentContext(void)$/;"	f
_glfwPlatformGetCurrentContext	support/GLFW/src/win32_tls.c	/^_GLFWwindow* _glfwPlatformGetCurrentContext(void)$/;"	f
_glfwPlatformGetCursorPos	support/GLFW/src/mir_window.c	/^void _glfwPlatformGetCursorPos(_GLFWwindow* window, double* xpos, double* ypos)$/;"	f
_glfwPlatformGetCursorPos	support/GLFW/src/win32_window.c	/^void _glfwPlatformGetCursorPos(_GLFWwindow* window, double* xpos, double* ypos)$/;"	f
_glfwPlatformGetCursorPos	support/GLFW/src/wl_window.c	/^void _glfwPlatformGetCursorPos(_GLFWwindow* window, double* xpos, double* ypos)$/;"	f
_glfwPlatformGetCursorPos	support/GLFW/src/x11_window.c	/^void _glfwPlatformGetCursorPos(_GLFWwindow* window, double* xpos, double* ypos)$/;"	f
_glfwPlatformGetFramebufferSize	support/GLFW/src/mir_window.c	/^void _glfwPlatformGetFramebufferSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetFramebufferSize	support/GLFW/src/win32_window.c	/^void _glfwPlatformGetFramebufferSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetFramebufferSize	support/GLFW/src/wl_window.c	/^void _glfwPlatformGetFramebufferSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetFramebufferSize	support/GLFW/src/x11_window.c	/^void _glfwPlatformGetFramebufferSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetGammaRamp	support/GLFW/src/mir_monitor.c	/^void _glfwPlatformGetGammaRamp(_GLFWmonitor* monitor, GLFWgammaramp* ramp)$/;"	f
_glfwPlatformGetGammaRamp	support/GLFW/src/win32_monitor.c	/^void _glfwPlatformGetGammaRamp(_GLFWmonitor* monitor, GLFWgammaramp* ramp)$/;"	f
_glfwPlatformGetGammaRamp	support/GLFW/src/wl_monitor.c	/^void _glfwPlatformGetGammaRamp(_GLFWmonitor* monitor, GLFWgammaramp* ramp)$/;"	f
_glfwPlatformGetGammaRamp	support/GLFW/src/x11_monitor.c	/^void _glfwPlatformGetGammaRamp(_GLFWmonitor* monitor, GLFWgammaramp* ramp)$/;"	f
_glfwPlatformGetJoystickAxes	support/GLFW/src/linux_joystick.c	/^const float* _glfwPlatformGetJoystickAxes(int joy, int* count)$/;"	f
_glfwPlatformGetJoystickAxes	support/GLFW/src/win32_joystick.c	/^const float* _glfwPlatformGetJoystickAxes(int joy, int* count)$/;"	f
_glfwPlatformGetJoystickButtons	support/GLFW/src/linux_joystick.c	/^const unsigned char* _glfwPlatformGetJoystickButtons(int joy, int* count)$/;"	f
_glfwPlatformGetJoystickButtons	support/GLFW/src/win32_joystick.c	/^const unsigned char* _glfwPlatformGetJoystickButtons(int joy, int* count)$/;"	f
_glfwPlatformGetJoystickName	support/GLFW/src/linux_joystick.c	/^const char* _glfwPlatformGetJoystickName(int joy)$/;"	f
_glfwPlatformGetJoystickName	support/GLFW/src/win32_joystick.c	/^const char* _glfwPlatformGetJoystickName(int joy)$/;"	f
_glfwPlatformGetKeyName	support/GLFW/src/mir_window.c	/^const char* _glfwPlatformGetKeyName(int key, int scancode)$/;"	f
_glfwPlatformGetKeyName	support/GLFW/src/win32_window.c	/^const char* _glfwPlatformGetKeyName(int key, int scancode)$/;"	f
_glfwPlatformGetKeyName	support/GLFW/src/wl_window.c	/^const char* _glfwPlatformGetKeyName(int key, int scancode)$/;"	f
_glfwPlatformGetKeyName	support/GLFW/src/x11_window.c	/^const char* _glfwPlatformGetKeyName(int key, int scancode)$/;"	f
_glfwPlatformGetMonitorPos	support/GLFW/src/mir_monitor.c	/^void _glfwPlatformGetMonitorPos(_GLFWmonitor* monitor, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetMonitorPos	support/GLFW/src/win32_monitor.c	/^void _glfwPlatformGetMonitorPos(_GLFWmonitor* monitor, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetMonitorPos	support/GLFW/src/wl_monitor.c	/^void _glfwPlatformGetMonitorPos(_GLFWmonitor* monitor, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetMonitorPos	support/GLFW/src/x11_monitor.c	/^void _glfwPlatformGetMonitorPos(_GLFWmonitor* monitor, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetMonitors	support/GLFW/src/mir_monitor.c	/^_GLFWmonitor** _glfwPlatformGetMonitors(int* count)$/;"	f
_glfwPlatformGetMonitors	support/GLFW/src/win32_monitor.c	/^_GLFWmonitor** _glfwPlatformGetMonitors(int* count)$/;"	f
_glfwPlatformGetMonitors	support/GLFW/src/wl_monitor.c	/^_GLFWmonitor** _glfwPlatformGetMonitors(int* count)$/;"	f
_glfwPlatformGetMonitors	support/GLFW/src/x11_monitor.c	/^_GLFWmonitor** _glfwPlatformGetMonitors(int* count)$/;"	f
_glfwPlatformGetPhysicalDevicePresentationSupport	support/GLFW/src/mir_window.c	/^int _glfwPlatformGetPhysicalDevicePresentationSupport(VkInstance instance,$/;"	f
_glfwPlatformGetPhysicalDevicePresentationSupport	support/GLFW/src/win32_window.c	/^int _glfwPlatformGetPhysicalDevicePresentationSupport(VkInstance instance,$/;"	f
_glfwPlatformGetPhysicalDevicePresentationSupport	support/GLFW/src/wl_window.c	/^int _glfwPlatformGetPhysicalDevicePresentationSupport(VkInstance instance,$/;"	f
_glfwPlatformGetPhysicalDevicePresentationSupport	support/GLFW/src/x11_window.c	/^int _glfwPlatformGetPhysicalDevicePresentationSupport(VkInstance instance,$/;"	f
_glfwPlatformGetRequiredInstanceExtensions	support/GLFW/src/mir_window.c	/^char** _glfwPlatformGetRequiredInstanceExtensions(uint32_t* count)$/;"	f
_glfwPlatformGetRequiredInstanceExtensions	support/GLFW/src/win32_window.c	/^char** _glfwPlatformGetRequiredInstanceExtensions(uint32_t* count)$/;"	f
_glfwPlatformGetRequiredInstanceExtensions	support/GLFW/src/wl_window.c	/^char** _glfwPlatformGetRequiredInstanceExtensions(uint32_t* count)$/;"	f
_glfwPlatformGetRequiredInstanceExtensions	support/GLFW/src/x11_window.c	/^char** _glfwPlatformGetRequiredInstanceExtensions(uint32_t* count)$/;"	f
_glfwPlatformGetTimerFrequency	support/GLFW/src/cocoa_time.c	/^uint64_t _glfwPlatformGetTimerFrequency(void)$/;"	f
_glfwPlatformGetTimerFrequency	support/GLFW/src/posix_time.c	/^uint64_t _glfwPlatformGetTimerFrequency(void)$/;"	f
_glfwPlatformGetTimerFrequency	support/GLFW/src/win32_time.c	/^uint64_t _glfwPlatformGetTimerFrequency(void)$/;"	f
_glfwPlatformGetTimerValue	support/GLFW/src/cocoa_time.c	/^uint64_t _glfwPlatformGetTimerValue(void)$/;"	f
_glfwPlatformGetTimerValue	support/GLFW/src/posix_time.c	/^uint64_t _glfwPlatformGetTimerValue(void)$/;"	f
_glfwPlatformGetTimerValue	support/GLFW/src/win32_time.c	/^uint64_t _glfwPlatformGetTimerValue(void)$/;"	f
_glfwPlatformGetVersionString	support/GLFW/src/mir_init.c	/^const char* _glfwPlatformGetVersionString(void)$/;"	f
_glfwPlatformGetVersionString	support/GLFW/src/win32_init.c	/^const char* _glfwPlatformGetVersionString(void)$/;"	f
_glfwPlatformGetVersionString	support/GLFW/src/wl_init.c	/^const char* _glfwPlatformGetVersionString(void)$/;"	f
_glfwPlatformGetVersionString	support/GLFW/src/x11_init.c	/^const char* _glfwPlatformGetVersionString(void)$/;"	f
_glfwPlatformGetVideoMode	support/GLFW/src/mir_monitor.c	/^void _glfwPlatformGetVideoMode(_GLFWmonitor* monitor, GLFWvidmode* mode)$/;"	f
_glfwPlatformGetVideoMode	support/GLFW/src/win32_monitor.c	/^void _glfwPlatformGetVideoMode(_GLFWmonitor* monitor, GLFWvidmode* mode)$/;"	f
_glfwPlatformGetVideoMode	support/GLFW/src/wl_monitor.c	/^void _glfwPlatformGetVideoMode(_GLFWmonitor* monitor, GLFWvidmode* mode)$/;"	f
_glfwPlatformGetVideoMode	support/GLFW/src/x11_monitor.c	/^void _glfwPlatformGetVideoMode(_GLFWmonitor* monitor, GLFWvidmode* mode)$/;"	f
_glfwPlatformGetVideoModes	support/GLFW/src/mir_monitor.c	/^GLFWvidmode* _glfwPlatformGetVideoModes(_GLFWmonitor* monitor, int* found)$/;"	f
_glfwPlatformGetVideoModes	support/GLFW/src/win32_monitor.c	/^GLFWvidmode* _glfwPlatformGetVideoModes(_GLFWmonitor* monitor, int* count)$/;"	f
_glfwPlatformGetVideoModes	support/GLFW/src/wl_monitor.c	/^GLFWvidmode* _glfwPlatformGetVideoModes(_GLFWmonitor* monitor, int* found)$/;"	f
_glfwPlatformGetVideoModes	support/GLFW/src/x11_monitor.c	/^GLFWvidmode* _glfwPlatformGetVideoModes(_GLFWmonitor* monitor, int* count)$/;"	f
_glfwPlatformGetWindowFrameSize	support/GLFW/src/mir_window.c	/^void _glfwPlatformGetWindowFrameSize(_GLFWwindow* window,$/;"	f
_glfwPlatformGetWindowFrameSize	support/GLFW/src/win32_window.c	/^void _glfwPlatformGetWindowFrameSize(_GLFWwindow* window,$/;"	f
_glfwPlatformGetWindowFrameSize	support/GLFW/src/wl_window.c	/^void _glfwPlatformGetWindowFrameSize(_GLFWwindow* window,$/;"	f
_glfwPlatformGetWindowFrameSize	support/GLFW/src/x11_window.c	/^void _glfwPlatformGetWindowFrameSize(_GLFWwindow* window,$/;"	f
_glfwPlatformGetWindowPos	support/GLFW/src/mir_window.c	/^void _glfwPlatformGetWindowPos(_GLFWwindow* window, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetWindowPos	support/GLFW/src/win32_window.c	/^void _glfwPlatformGetWindowPos(_GLFWwindow* window, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetWindowPos	support/GLFW/src/wl_window.c	/^void _glfwPlatformGetWindowPos(_GLFWwindow* window, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetWindowPos	support/GLFW/src/x11_window.c	/^void _glfwPlatformGetWindowPos(_GLFWwindow* window, int* xpos, int* ypos)$/;"	f
_glfwPlatformGetWindowSize	support/GLFW/src/mir_window.c	/^void _glfwPlatformGetWindowSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetWindowSize	support/GLFW/src/win32_window.c	/^void _glfwPlatformGetWindowSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetWindowSize	support/GLFW/src/wl_window.c	/^void _glfwPlatformGetWindowSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformGetWindowSize	support/GLFW/src/x11_window.c	/^void _glfwPlatformGetWindowSize(_GLFWwindow* window, int* width, int* height)$/;"	f
_glfwPlatformHideWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformHideWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformHideWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformHideWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformHideWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformHideWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformHideWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformHideWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformIconifyWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformIconifyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformIconifyWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformIconifyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformIconifyWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformIconifyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformIconifyWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformIconifyWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformInit	support/GLFW/src/mir_init.c	/^int _glfwPlatformInit(void)$/;"	f
_glfwPlatformInit	support/GLFW/src/win32_init.c	/^int _glfwPlatformInit(void)$/;"	f
_glfwPlatformInit	support/GLFW/src/wl_init.c	/^int _glfwPlatformInit(void)$/;"	f
_glfwPlatformInit	support/GLFW/src/x11_init.c	/^int _glfwPlatformInit(void)$/;"	f
_glfwPlatformIsSameMonitor	support/GLFW/src/mir_monitor.c	/^GLFWbool _glfwPlatformIsSameMonitor(_GLFWmonitor* first, _GLFWmonitor* second)$/;"	f
_glfwPlatformIsSameMonitor	support/GLFW/src/win32_monitor.c	/^GLFWbool _glfwPlatformIsSameMonitor(_GLFWmonitor* first, _GLFWmonitor* second)$/;"	f
_glfwPlatformIsSameMonitor	support/GLFW/src/wl_monitor.c	/^GLFWbool _glfwPlatformIsSameMonitor(_GLFWmonitor* first, _GLFWmonitor* second)$/;"	f
_glfwPlatformIsSameMonitor	support/GLFW/src/x11_monitor.c	/^GLFWbool _glfwPlatformIsSameMonitor(_GLFWmonitor* first, _GLFWmonitor* second)$/;"	f
_glfwPlatformJoystickPresent	support/GLFW/src/linux_joystick.c	/^int _glfwPlatformJoystickPresent(int joy)$/;"	f
_glfwPlatformJoystickPresent	support/GLFW/src/win32_joystick.c	/^int _glfwPlatformJoystickPresent(int joy)$/;"	f
_glfwPlatformMaximizeWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformMaximizeWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformMaximizeWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformMaximizeWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformMaximizeWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformMaximizeWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformMaximizeWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformMaximizeWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformPollEvents	support/GLFW/src/mir_window.c	/^void _glfwPlatformPollEvents(void)$/;"	f
_glfwPlatformPollEvents	support/GLFW/src/win32_window.c	/^void _glfwPlatformPollEvents(void)$/;"	f
_glfwPlatformPollEvents	support/GLFW/src/wl_window.c	/^void _glfwPlatformPollEvents(void)$/;"	f
_glfwPlatformPollEvents	support/GLFW/src/x11_window.c	/^void _glfwPlatformPollEvents(void)$/;"	f
_glfwPlatformPostEmptyEvent	support/GLFW/src/mir_window.c	/^void _glfwPlatformPostEmptyEvent(void)$/;"	f
_glfwPlatformPostEmptyEvent	support/GLFW/src/win32_window.c	/^void _glfwPlatformPostEmptyEvent(void)$/;"	f
_glfwPlatformPostEmptyEvent	support/GLFW/src/wl_window.c	/^void _glfwPlatformPostEmptyEvent(void)$/;"	f
_glfwPlatformPostEmptyEvent	support/GLFW/src/x11_window.c	/^void _glfwPlatformPostEmptyEvent(void)$/;"	f
_glfwPlatformRestoreWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformRestoreWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformRestoreWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformRestoreWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformRestoreWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformRestoreWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformRestoreWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformRestoreWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformSetClipboardString	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetClipboardString(_GLFWwindow* window, const char* string)$/;"	f
_glfwPlatformSetClipboardString	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetClipboardString(_GLFWwindow* window, const char* string)$/;"	f
_glfwPlatformSetClipboardString	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetClipboardString(_GLFWwindow* window, const char* string)$/;"	f
_glfwPlatformSetClipboardString	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetClipboardString(_GLFWwindow* window, const char* string)$/;"	f
_glfwPlatformSetCurrentContext	support/GLFW/src/posix_tls.c	/^void _glfwPlatformSetCurrentContext(_GLFWwindow* context)$/;"	f
_glfwPlatformSetCurrentContext	support/GLFW/src/win32_tls.c	/^void _glfwPlatformSetCurrentContext(_GLFWwindow* context)$/;"	f
_glfwPlatformSetCursor	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetCursor(_GLFWwindow* window, _GLFWcursor* cursor)$/;"	f
_glfwPlatformSetCursor	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetCursor(_GLFWwindow* window, _GLFWcursor* cursor)$/;"	f
_glfwPlatformSetCursor	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetCursor(_GLFWwindow* window, _GLFWcursor* cursor)$/;"	f
_glfwPlatformSetCursor	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetCursor(_GLFWwindow* window, _GLFWcursor* cursor)$/;"	f
_glfwPlatformSetCursorMode	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetCursorMode(_GLFWwindow* window, int mode)$/;"	f
_glfwPlatformSetCursorMode	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetCursorMode(_GLFWwindow* window, int mode)$/;"	f
_glfwPlatformSetCursorMode	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetCursorMode(_GLFWwindow* window, int mode)$/;"	f
_glfwPlatformSetCursorMode	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetCursorMode(_GLFWwindow* window, int mode)$/;"	f
_glfwPlatformSetCursorPos	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetCursorPos(_GLFWwindow* window, double xpos, double ypos)$/;"	f
_glfwPlatformSetCursorPos	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetCursorPos(_GLFWwindow* window, double xpos, double ypos)$/;"	f
_glfwPlatformSetCursorPos	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetCursorPos(_GLFWwindow* window, double x, double y)$/;"	f
_glfwPlatformSetCursorPos	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetCursorPos(_GLFWwindow* window, double x, double y)$/;"	f
_glfwPlatformSetGammaRamp	support/GLFW/src/mir_monitor.c	/^void _glfwPlatformSetGammaRamp(_GLFWmonitor* monitor, const GLFWgammaramp* ramp)$/;"	f
_glfwPlatformSetGammaRamp	support/GLFW/src/win32_monitor.c	/^void _glfwPlatformSetGammaRamp(_GLFWmonitor* monitor, const GLFWgammaramp* ramp)$/;"	f
_glfwPlatformSetGammaRamp	support/GLFW/src/wl_monitor.c	/^void _glfwPlatformSetGammaRamp(_GLFWmonitor* monitor, const GLFWgammaramp* ramp)$/;"	f
_glfwPlatformSetGammaRamp	support/GLFW/src/x11_monitor.c	/^void _glfwPlatformSetGammaRamp(_GLFWmonitor* monitor, const GLFWgammaramp* ramp)$/;"	f
_glfwPlatformSetWindowAspectRatio	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowAspectRatio(_GLFWwindow* window, int numer, int denom)$/;"	f
_glfwPlatformSetWindowAspectRatio	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowAspectRatio(_GLFWwindow* window, int numer, int denom)$/;"	f
_glfwPlatformSetWindowAspectRatio	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowAspectRatio(_GLFWwindow* window, int numer, int denom)$/;"	f
_glfwPlatformSetWindowAspectRatio	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowAspectRatio(_GLFWwindow* window, int numer, int denom)$/;"	f
_glfwPlatformSetWindowIcon	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowIcon(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowIcon	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowIcon(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowIcon	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowIcon(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowIcon	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowIcon(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowMonitor	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowMonitor(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowMonitor	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowMonitor(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowMonitor	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowMonitor(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowMonitor	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowMonitor(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowPos	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowPos(_GLFWwindow* window, int xpos, int ypos)$/;"	f
_glfwPlatformSetWindowPos	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowPos(_GLFWwindow* window, int xpos, int ypos)$/;"	f
_glfwPlatformSetWindowPos	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowPos(_GLFWwindow* window, int xpos, int ypos)$/;"	f
_glfwPlatformSetWindowPos	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowPos(_GLFWwindow* window, int xpos, int ypos)$/;"	f
_glfwPlatformSetWindowSize	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwPlatformSetWindowSize	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwPlatformSetWindowSize	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwPlatformSetWindowSize	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowSize(_GLFWwindow* window, int width, int height)$/;"	f
_glfwPlatformSetWindowSizeLimits	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowSizeLimits(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowSizeLimits	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowSizeLimits(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowSizeLimits	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowSizeLimits(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowSizeLimits	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowSizeLimits(_GLFWwindow* window,$/;"	f
_glfwPlatformSetWindowTitle	support/GLFW/src/mir_window.c	/^void _glfwPlatformSetWindowTitle(_GLFWwindow* window, const char* title)$/;"	f
_glfwPlatformSetWindowTitle	support/GLFW/src/win32_window.c	/^void _glfwPlatformSetWindowTitle(_GLFWwindow* window, const char* title)$/;"	f
_glfwPlatformSetWindowTitle	support/GLFW/src/wl_window.c	/^void _glfwPlatformSetWindowTitle(_GLFWwindow* window, const char* title)$/;"	f
_glfwPlatformSetWindowTitle	support/GLFW/src/x11_window.c	/^void _glfwPlatformSetWindowTitle(_GLFWwindow* window, const char* title)$/;"	f
_glfwPlatformShowWindow	support/GLFW/src/mir_window.c	/^void _glfwPlatformShowWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformShowWindow	support/GLFW/src/win32_window.c	/^void _glfwPlatformShowWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformShowWindow	support/GLFW/src/wl_window.c	/^void _glfwPlatformShowWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformShowWindow	support/GLFW/src/x11_window.c	/^void _glfwPlatformShowWindow(_GLFWwindow* window)$/;"	f
_glfwPlatformTerminate	support/GLFW/src/mir_init.c	/^void _glfwPlatformTerminate(void)$/;"	f
_glfwPlatformTerminate	support/GLFW/src/win32_init.c	/^void _glfwPlatformTerminate(void)$/;"	f
_glfwPlatformTerminate	support/GLFW/src/wl_init.c	/^void _glfwPlatformTerminate(void)$/;"	f
_glfwPlatformTerminate	support/GLFW/src/x11_init.c	/^void _glfwPlatformTerminate(void)$/;"	f
_glfwPlatformWaitEvents	support/GLFW/src/mir_window.c	/^void _glfwPlatformWaitEvents(void)$/;"	f
_glfwPlatformWaitEvents	support/GLFW/src/win32_window.c	/^void _glfwPlatformWaitEvents(void)$/;"	f
_glfwPlatformWaitEvents	support/GLFW/src/wl_window.c	/^void _glfwPlatformWaitEvents(void)$/;"	f
_glfwPlatformWaitEvents	support/GLFW/src/x11_window.c	/^void _glfwPlatformWaitEvents(void)$/;"	f
_glfwPlatformWaitEventsTimeout	support/GLFW/src/mir_window.c	/^void _glfwPlatformWaitEventsTimeout(double timeout)$/;"	f
_glfwPlatformWaitEventsTimeout	support/GLFW/src/win32_window.c	/^void _glfwPlatformWaitEventsTimeout(double timeout)$/;"	f
_glfwPlatformWaitEventsTimeout	support/GLFW/src/wl_window.c	/^void _glfwPlatformWaitEventsTimeout(double timeout)$/;"	f
_glfwPlatformWaitEventsTimeout	support/GLFW/src/x11_window.c	/^void _glfwPlatformWaitEventsTimeout(double timeout)$/;"	f
_glfwPlatformWindowFocused	support/GLFW/src/mir_window.c	/^int _glfwPlatformWindowFocused(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowFocused	support/GLFW/src/win32_window.c	/^int _glfwPlatformWindowFocused(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowFocused	support/GLFW/src/wl_window.c	/^int _glfwPlatformWindowFocused(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowFocused	support/GLFW/src/x11_window.c	/^int _glfwPlatformWindowFocused(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowIconified	support/GLFW/src/mir_window.c	/^int _glfwPlatformWindowIconified(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowIconified	support/GLFW/src/win32_window.c	/^int _glfwPlatformWindowIconified(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowIconified	support/GLFW/src/wl_window.c	/^int _glfwPlatformWindowIconified(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowIconified	support/GLFW/src/x11_window.c	/^int _glfwPlatformWindowIconified(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowMaximized	support/GLFW/src/mir_window.c	/^int _glfwPlatformWindowMaximized(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowMaximized	support/GLFW/src/win32_window.c	/^int _glfwPlatformWindowMaximized(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowMaximized	support/GLFW/src/wl_window.c	/^int _glfwPlatformWindowMaximized(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowMaximized	support/GLFW/src/x11_window.c	/^int _glfwPlatformWindowMaximized(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowVisible	support/GLFW/src/mir_window.c	/^int _glfwPlatformWindowVisible(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowVisible	support/GLFW/src/win32_window.c	/^int _glfwPlatformWindowVisible(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowVisible	support/GLFW/src/wl_window.c	/^int _glfwPlatformWindowVisible(_GLFWwindow* window)$/;"	f
_glfwPlatformWindowVisible	support/GLFW/src/x11_window.c	/^int _glfwPlatformWindowVisible(_GLFWwindow* window)$/;"	f
_glfwPollJoystickEvents	support/GLFW/src/linux_joystick.c	/^void _glfwPollJoystickEvents(void)$/;"	f
_glfwRefreshContextAttribs	support/GLFW/src/context.c	/^GLFWbool _glfwRefreshContextAttribs(const _GLFWctxconfig* ctxconfig)$/;"	f
_glfwRegisterWindowClassWin32	support/GLFW/src/win32_window.c	/^GLFWbool _glfwRegisterWindowClassWin32(void)$/;"	f
_glfwReleaseErrorHandlerX11	support/GLFW/src/x11_init.c	/^void _glfwReleaseErrorHandlerX11(void)$/;"	f
_glfwRestoreVideoModeWin32	support/GLFW/src/win32_monitor.c	/^void _glfwRestoreVideoModeWin32(_GLFWmonitor* monitor)$/;"	f
_glfwRestoreVideoModeX11	support/GLFW/src/x11_monitor.c	/^void _glfwRestoreVideoModeX11(_GLFWmonitor* monitor)$/;"	f
_glfwSetVideoModeWin32	support/GLFW/src/win32_monitor.c	/^GLFWbool _glfwSetVideoModeWin32(_GLFWmonitor* monitor, const GLFWvidmode* desired)$/;"	f
_glfwSetVideoModeX11	support/GLFW/src/x11_monitor.c	/^GLFWbool _glfwSetVideoModeX11(_GLFWmonitor* monitor, const GLFWvidmode* desired)$/;"	f
_glfwSplitBPP	support/GLFW/src/monitor.c	/^void _glfwSplitBPP(int bpp, int* red, int* green, int* blue)$/;"	f
_glfwStringInExtensionString	support/GLFW/src/context.c	/^GLFWbool _glfwStringInExtensionString(const char* string, const char* extensions)$/;"	f
_glfwTerminateEGL	support/GLFW/src/egl_context.c	/^void _glfwTerminateEGL(void)$/;"	f
_glfwTerminateGLX	support/GLFW/src/glx_context.c	/^void _glfwTerminateGLX(void)$/;"	f
_glfwTerminateJoysticksLinux	support/GLFW/src/linux_joystick.c	/^void _glfwTerminateJoysticksLinux(void)$/;"	f
_glfwTerminateJoysticksWin32	support/GLFW/src/win32_joystick.c	/^void _glfwTerminateJoysticksWin32(void)$/;"	f
_glfwTerminateThreadLocalStoragePOSIX	support/GLFW/src/posix_tls.c	/^void _glfwTerminateThreadLocalStoragePOSIX(void)$/;"	f
_glfwTerminateThreadLocalStorageWin32	support/GLFW/src/win32_tls.c	/^void _glfwTerminateThreadLocalStorageWin32(void)$/;"	f
_glfwTerminateVulkan	support/GLFW/src/vulkan.c	/^void _glfwTerminateVulkan(void)$/;"	f
_glfwTerminateWGL	support/GLFW/src/wgl_context.c	/^void _glfwTerminateWGL(void)$/;"	f
_glfwUnregisterWindowClassWin32	support/GLFW/src/win32_window.c	/^void _glfwUnregisterWindowClassWin32(void)$/;"	f
_glfw_ChangeWindowMessageFilterEx	support/GLFW/src/win32_platform.h	181;"	d
_glfw_DirectInput8Create	support/GLFW/src/win32_platform.h	175;"	d
_glfw_DwmFlush	support/GLFW/src/win32_platform.h	187;"	d
_glfw_DwmIsCompositionEnabled	support/GLFW/src/win32_platform.h	186;"	d
_glfw_SetProcessDPIAware	support/GLFW/src/win32_platform.h	180;"	d
_glfw_SetProcessDpiAwareness	support/GLFW/src/win32_platform.h	191;"	d
_glfw_XInputGetCapabilities	support/GLFW/src/win32_platform.h	170;"	d
_glfw_XInputGetState	support/GLFW/src/win32_platform.h	171;"	d
_glfw_dlclose	support/GLFW/src/cocoa_platform.h	47;"	d
_glfw_dlclose	support/GLFW/src/mir_platform.h	57;"	d
_glfw_dlclose	support/GLFW/src/win32_platform.h	214;"	d
_glfw_dlclose	support/GLFW/src/wl_platform.h	58;"	d
_glfw_dlclose	support/GLFW/src/x11_platform.h	94;"	d
_glfw_dlopen	support/GLFW/src/cocoa_platform.h	46;"	d
_glfw_dlopen	support/GLFW/src/mir_platform.h	56;"	d
_glfw_dlopen	support/GLFW/src/win32_platform.h	213;"	d
_glfw_dlopen	support/GLFW/src/wl_platform.h	57;"	d
_glfw_dlopen	support/GLFW/src/x11_platform.h	93;"	d
_glfw_dlsym	support/GLFW/src/cocoa_platform.h	48;"	d
_glfw_dlsym	support/GLFW/src/mir_platform.h	58;"	d
_glfw_dlsym	support/GLFW/src/win32_platform.h	215;"	d
_glfw_dlsym	support/GLFW/src/wl_platform.h	59;"	d
_glfw_dlsym	support/GLFW/src/x11_platform.h	95;"	d
_glfw_timeGetTime	support/GLFW/src/win32_platform.h	165;"	d
_grow_capacity	support/imgui/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity\/2) : 8; return new_capacity > sz ? new_capacity : sz; }$/;"	f	struct:ImVector
_json	support/tinygltf/json.hpp	/^inline nlohmann::json operator "" _json(const char* s, std::size_t n)$/;"	f
_json_pointer	support/tinygltf/json.hpp	/^inline nlohmann::json::json_pointer operator "" _json_pointer(const char* s, std::size_t n)$/;"	f
_thrd_wrapper_function	support/GLFW/deps/tinycthread.c	/^static unsigned WINAPI _thrd_wrapper_function(void * aArg)$/;"	f	file:
_thread_start_info	support/GLFW/deps/tinycthread.c	/^} _thread_start_info;$/;"	t	typeref:struct:__anon28	file:
_ttherad_timespec	support/GLFW/deps/tinycthread.h	/^struct _ttherad_timespec {$/;"	s
_tthread_clock_gettime	support/GLFW/deps/tinycthread.c	/^int _tthread_clock_gettime(clockid_t clk_id, struct timespec *ts)$/;"	f
_tthread_clockid_t	support/GLFW/deps/tinycthread.h	/^typedef int _tthread_clockid_t;$/;"	t
a	support/GLFW/deps/vulkan/vulkan.h	/^    VkComponentSwizzle    a;$/;"	m	struct:VkComponentMapping
aabb	optixHair/Hair.h	/^    sutil::Aabb  aabb() const { return m_aabb; }$/;"	f	class:Hair
aabb	optixHair/Head.h	/^    virtual sutil::Aabb aabb() const { return m_aabb; }$/;"	f	class:Head
aabb	optixHair/optixHair.h	/^    sutil::Aabb aabb;$/;"	m	struct:HairState
aabb	optixVolumeViewer/optixVolumeViewer.h	/^    sutil::Aabb aabb;$/;"	m	struct:Cube
aabb	optixVolumeViewer/optixVolumeViewer.h	/^    sutil::Aabb aabb;$/;"	m	struct:Plane
aabb	sutil/Scene.h	/^    SUTILAPI sutil::Aabb                                    aabb() const              { return m_scene_aabb; }$/;"	f	class:sutil::Scene
acceleration3	cuda/curve.h	/^    __device__ __forceinline__ float3 acceleration3( float u ) const { return make_float3( 0.f ); }$/;"	f	struct:LinearInterpolator
acceleration3	cuda/curve.h	/^    __device__ __forceinline__ float3 acceleration3( float u ) const$/;"	f	struct:CubicInterpolator
acceleration3	cuda/curve.h	/^    __device__ __forceinline__ float3 acceleration3( float u ) const$/;"	f	struct:QuadraticInterpolator
acceleration4	cuda/curve.h	/^    __device__ __forceinline__ float4 acceleration4( float u ) const { return make_float4( 0.f ); }$/;"	f	struct:LinearInterpolator
acceleration4	cuda/curve.h	/^    __device__ __forceinline__ float4 acceleration4( float u ) const$/;"	f	struct:CubicInterpolator
acceleration4	cuda/curve.h	/^    __device__ __forceinline__ float4 acceleration4( float u ) const$/;"	f	struct:QuadraticInterpolator
accept	support/tinygltf/json.hpp	/^    bool accept(const bool strict = true)$/;"	f	class:nlohmann::detail::parser
accept	support/tinygltf/json.hpp	/^    static bool accept(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json
accept	support/tinygltf/json.hpp	/^    static bool accept(detail::input_adapter&& i)$/;"	f	class:nlohmann::basic_json
accessors	support/tinygltf/tiny_gltf.h	/^  std::vector<Accessor> accessors;$/;"	m	class:tinygltf::Model
accumAlphaBits	support/GLFW/src/internal.h	/^    int         accumAlphaBits;$/;"	m	struct:_GLFWfbconfig
accumBlueBits	support/GLFW/src/internal.h	/^    int         accumBlueBits;$/;"	m	struct:_GLFWfbconfig
accumBuffer	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<float4> accumBuffer;$/;"	m	struct:DisplacedMicromeshState	file:
accumBuffer	optixHair/optixHair.h	/^    sutil::CUDAOutputBuffer<float4> accumBuffer = sutil::CUDAOutputBuffer<float4>(sutil::CUDAOutputBufferType::CUDA_DEVICE, 1, 1);$/;"	m	struct:HairState
accumGreenBits	support/GLFW/src/internal.h	/^    int         accumGreenBits;$/;"	m	struct:_GLFWfbconfig
accumRedBits	support/GLFW/src/internal.h	/^    int         accumRedBits;$/;"	m	struct:_GLFWfbconfig
accum_buffer	cuda/whitted.h	/^    float4*                  accum_buffer;$/;"	m	struct:whitted::LaunchParams
accum_buffer	optixBoundValues/optixBoundValues.h	/^    float4*      accum_buffer;$/;"	m	struct:Params
accum_buffer	optixCutouts/optixCutouts.h	/^    float4*      accum_buffer;$/;"	m	struct:Params
accum_buffer	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float4*                accum_buffer;$/;"	m	struct:Globals
accum_buffer	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float4*      accum_buffer;$/;"	m	struct:Params
accum_buffer	optixPathTracer/optixPathTracer.h	/^    float4*      accum_buffer;$/;"	m	struct:Params
accum_buffer	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float4*      accum_buffer;$/;"	m	struct:Params
accum_buffer	optixVolumeViewer/volume.h	/^    float4*                  accum_buffer;$/;"	m	struct:LaunchParams
acquireMonitor	support/GLFW/src/win32_window.c	/^static GLFWbool acquireMonitor(_GLFWwindow* window)$/;"	f	file:
acquireMonitor	support/GLFW/src/x11_window.c	/^static GLFWbool acquireMonitor(_GLFWwindow* window)$/;"	f	file:
activeVoxelCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const uint64_t& activeVoxelCount() const { return DataType::mActiveVoxelCount; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
activeVoxelCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const uint64_t& activeVoxelCount() const { return this->root().activeVoxelCount(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
activeVoxelCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const uint64_t& activeVoxelCount() const { return this->tree().activeVoxelCount(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
activeVoxelCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t                 activeVoxelCount() const { return this->grid().activeVoxelCount(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
active_head	support/imgui/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context
adapterName	support/GLFW/src/win32_platform.h	/^    WCHAR               adapterName[32];$/;"	m	struct:_GLFWmonitorWin32
add	optixHair/ProgramGroups.cpp	/^void ProgramGroups::add( const OptixProgramGroupDesc& programGroupDescriptor, const std::string& name )$/;"	f	class:ProgramGroups
add	optixVolumeViewer/nanovdb/util/IO.h	/^inline void Segment::add(const GridHandle<BufferT>& h)$/;"	f	class:nanovdb::io::Codec::Segment
add	support/tinygltf/json.hpp	/^    void add(int c)$/;"	f	class:nlohmann::detail::lexer
addBuffer	sutil/Scene.cpp	/^void Scene::addBuffer( const uint64_t buf_size, const void* data )$/;"	f	class:sutil::Scene
addCamera	sutil/Scene.h	/^    SUTILAPI void addCamera  ( const Camera& camera            )    { m_cameras.push_back( camera );     }$/;"	f	class:sutil::Scene
addFlow	optixDenoiser/OptiXDenoiser.h	/^static void addFlow($/;"	f
addFume	optixMotionGeometry/optixMotionGeometry.cpp	/^void addFume( MotionGeometryState& state )$/;"	f
addImage	sutil/Scene.cpp	/^void Scene::addImage($/;"	f	class:sutil::Scene
addInstance	sutil/Scene.h	/^    SUTILAPI void addInstance( std::shared_ptr<Instance> instance ) { m_instances.push_back( instance ); }$/;"	f	class:sutil::Scene
addMaterial	sutil/Scene.h	/^    SUTILAPI void addMaterial( const MaterialData& mtl    )         { m_materials.push_back( mtl );      }$/;"	f	class:sutil::Scene
addMesh	sutil/Scene.h	/^    SUTILAPI void addMesh    ( std::shared_ptr<MeshGroup> mesh )    { m_meshes.push_back( mesh );        }$/;"	f	class:sutil::Scene
addNewEvent	support/GLFW/src/mir_window.c	/^static void addNewEvent(MirSurface* surface, const MirEvent* event, void* context)$/;"	f	file:
addSampler	sutil/Scene.cpp	/^ void Scene::addSampler($/;"	f	class:sutil::Scene
addWork	lib/CompileWithTasks.h	/^    void addWork( FunctionType&& function )$/;"	f	struct:optix::CompileWithTasks::ThreadPool
additionalValues	support/tinygltf/tiny_gltf.h	/^  ParameterMap additionalValues;$/;"	m	struct:tinygltf::Material
addressModeU	support/GLFW/deps/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeU;$/;"	m	struct:VkSamplerCreateInfo
addressModeV	support/GLFW/deps/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeV;$/;"	m	struct:VkSamplerCreateInfo
addressModeW	support/GLFW/deps/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeW;$/;"	m	struct:VkSamplerCreateInfo
adl_serializer	support/tinygltf/json.hpp	/^struct adl_serializer$/;"	s	namespace:nlohmann
adler	support/tinyexr/tinyexr.h	/^  mz_ulong adler;     \/\/ adler32 of the source or uncompressed data$/;"	m	struct:tinyexr::miniz::mz_stream_s
adler32	support/tinyexr/tinyexr.h	1210;"	d
affineIdentity	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<3,4> Matrix<3,4>::affineIdentity()$/;"	f	class:sutil::Matrix
albedo	optixDenoiser/OptiXDenoiser.h	/^        float*    albedo    = nullptr;$/;"	m	struct:OptiXDenoiser::Data
align	support/imgui/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context
alignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    alignment;$/;"	m	struct:VkMemoryRequirements
all_a	support/tinygltf/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon107
alloc	sutil/CuBuffer.h	/^    void alloc( size_t count )$/;"	f	class:CuBuffer
allocAndUpload	sutil/CuBuffer.h	/^    void allocAndUpload( const std::vector<T>& data )$/;"	f	class:CuBuffer
allocAndUpload	sutil/CuBuffer.h	/^    void allocAndUpload( size_t count, const T* data )$/;"	f	class:CuBuffer
allocAndUpload	sutil/CuBuffer.h	/^    void allocAndUpload( std::initializer_list<T> data )$/;"	f	class:CuBuffer
allocIOBuffers	optixMultiGPU/optixMultiGPU.cpp	/^void allocIOBuffers( PathTracerState& state, int num_gpus )$/;"	f
allocIOBuffers	optixNVLink/optixNVLink.cpp	/^void allocIOBuffers( PerDeviceSampleState& pd_state, int num_gpus )$/;"	f
allocIfRequired	sutil/CuBuffer.h	/^    void allocIfRequired( size_t count )$/;"	f	class:CuBuffer
alloc_func	support/tinyexr/tinyexr.h	1191;"	d
alloca	support/imgui/imgui_draw.cpp	41;"	d	file:
allocateSBT	optixBoundValues/optixBoundValues.cpp	/^void allocateSBT( PathTracerState& state )$/;"	f
allocateSBT	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void allocateSBT( PathTracerState& state )$/;"	f
allocated	support/GLFW/src/posix_tls.h	/^    GLFWbool        allocated;$/;"	m	struct:_GLFWtlsPOSIX
allocated	support/GLFW/src/win32_platform.h	/^    GLFWbool        allocated;$/;"	m	struct:_GLFWtlsWin32
allocationSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize       allocationSize;$/;"	m	struct:VkMemoryAllocateInfo
allow_exceptions	support/tinygltf/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
allow_exceptions	support/tinygltf/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::json_sax_dom_parser
allow_exceptions	support/tinygltf/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::parser
alphaBits	support/GLFW/src/internal.h	/^    int         alphaBits;$/;"	m	struct:_GLFWfbconfig
alphaBlendOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendOp                alphaBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState
alphaCutoff	support/tinygltf/tiny_gltf.h	/^  double alphaCutoff;                  \/\/ default 0.5$/;"	m	struct:tinygltf::Material
alphaMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagBitsKHR    alphaMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
alphaMode	support/tinygltf/tiny_gltf.h	/^  std::string alphaMode;               \/\/ default "OPAQUE"$/;"	m	struct:tinygltf::Material
alphaToCoverageEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                 alphaToCoverageEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
alphaToOne	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    alphaToOne;$/;"	m	struct:VkPhysicalDeviceFeatures
alphaToOneEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                 alphaToOneEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
alpha_cutoff	cuda/MaterialData.h	/^    float                alpha_cutoff    = 0.f;$/;"	m	struct:MaterialData
alpha_mode	cuda/MaterialData.h	/^    AlphaMode            alpha_mode      = ALPHA_MODE_OPAQUE;$/;"	m	struct:MaterialData
alpha_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string alpha_texname;               \/\/ map_d$/;"	m	struct:tinyobj::material_t
alpha_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t alpha_texopt;$/;"	m	struct:tinyobj::material_t
alt_mask	support/GLFW/src/wl_platform.h	/^        xkb_mod_mask_t          alt_mask;$/;"	m	struct:_GLFWlibraryWayland::__anon19
ambient	cuda/Light.h	/^        Ambient ambient;$/;"	m	union:Light::Type::__anon2
ambient	optixMotionGeometry/tiny_obj_loader.h	/^  real_t ambient[3];$/;"	m	struct:tinyobj::material_t
ambient_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string ambient_texname;             \/\/ map_Ka$/;"	m	struct:tinyobj::material_t
ambient_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t ambient_texopt;$/;"	m	struct:tinyobj::material_t
anchor	cuda/GeometryData.h	/^        float3 anchor;$/;"	m	struct:GeometryData::Parallelogram
anchor	support/tinygltf/json.hpp	/^    IteratorType anchor;$/;"	m	class:nlohmann::detail::iteration_proxy_value
anchor	support/tinygltf/json.hpp	/^    explicit iteration_proxy_value(IteratorType it) noexcept : anchor(it) {}$/;"	f	class:nlohmann::detail::iteration_proxy_value
animations	support/tinygltf/tiny_gltf.h	/^  std::vector<Animation> animations;$/;"	m	class:tinygltf::Model
anisotropy	optixMotionGeometry/tiny_obj_loader.h	/^  real_t anisotropy;           \/\/ aniso. [0, 1] default 0$/;"	m	struct:tinyobj::material_t
anisotropyEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                anisotropyEnable;$/;"	m	struct:VkSamplerCreateInfo
anisotropy_rotation	optixMotionGeometry/tiny_obj_loader.h	/^  real_t anisotropy_rotation;  \/\/ anisor. [0, 1] default 0$/;"	m	struct:tinyobj::material_t
ao	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    bool                   ao;$/;"	m	struct:Globals
ao	optixMotionGeometry/optixMotionGeometry.h	/^    bool                   ao;$/;"	m	struct:Params
aovs	optixDenoiser/OptiXDenoiser.h	/^        std::vector< float* > aovs;     \/\/ input AOVs$/;"	m	struct:OptiXDenoiser::Data
api	support/GLFW/src/win32_platform.h	/^        IDirectInput8W*      api;$/;"	m	struct:_GLFWlibraryWin32::__anon13
apiVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                            apiVersion;$/;"	m	struct:VkPhysicalDeviceProperties
apiVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           apiVersion;$/;"	m	struct:VkApplicationInfo
app14_color_transform	support/tinygltf/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon99
append	support/imgui/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer
append_exponent	support/tinygltf/json.hpp	/^inline char* append_exponent(char* buf, int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl
appendf	support/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer
appendfv	support/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer
applicationVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           applicationVersion;$/;"	m	struct:VkApplicationInfo
applyAspectRatio	support/GLFW/src/win32_window.c	/^static void applyAspectRatio(_GLFWwindow* window, int edge, RECT* area)$/;"	f	file:
applyFlow	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::applyFlow()$/;"	f	class:OptiXDenoiser
applyIJT	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyIJT(const Vec3T& xyz) const { return matMultT(mInvMatD, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyIJTF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyIJTF(const Vec3T& xyz) const { return matMultT(mInvMatF, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyInverseJacobian	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyInverseJacobian(const Vec3T& xyz) const { return matMult(mInvMatD, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyInverseJacobianF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyInverseJacobianF(const Vec3T& xyz) const { return matMult(mInvMatF, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyInverseMap	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyInverseMap(const Vec3T& xyz) const$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyInverseMap	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray applyInverseMap(const MapType& map) const$/;"	f	class:nanovdb::Ray
applyInverseMapF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyInverseMapF(const Vec3T& xyz) const$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyInverseMapF	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray applyInverseMapF(const MapType& map) const$/;"	f	class:nanovdb::Ray
applyJacobian	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyJacobian(const Vec3T& xyz) const { return matMult(mMatD, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyJacobianF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyJacobianF(const Vec3T& xyz) const { return matMult(mMatF, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyLut	support/tinyexr/tinyexr.h	/^static void applyLut(const unsigned short lut[USHORT_RANGE],$/;"	f	namespace:tinyexr
applyMap	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyMap(const Vec3T& xyz) const { return matMult(mMatD, mVecD, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyMap	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray applyMap(const MapType& map) const$/;"	f	class:nanovdb::Ray
applyMapF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T applyMapF(const Vec3T& xyz) const { return matMult(mMatF, mVecF, xyz); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
applyMapF	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray applyMapF(const MapType& map) const$/;"	f	class:nanovdb::Ray
area	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::area() const$/;"	f	class:sutil::Aabb
array	support/tinygltf/json.hpp	/^        array_t* array;$/;"	m	union:nlohmann::basic_json::json_value
array	support/tinygltf/json.hpp	/^    array,            \/\/\/< array (ordered collection of values)$/;"	m	class:nlohmann::detail::value_t
array	support/tinygltf/json.hpp	/^    static basic_json array(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json
array	sutil/sutil.h	/^    cudaArray_t         array;$/;"	m	struct:sutil::Texture
arrayLayer	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              arrayLayer;$/;"	m	struct:VkImageSubresource
arrayLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 arrayLayers;$/;"	m	struct:VkImageCreateInfo
arrayPitch	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    arrayPitch;$/;"	m	struct:VkSubresourceLayout
array_end	support/tinygltf/json.hpp	/^        array_end,$/;"	m	class:nlohmann::detail::parser::parse_event_t
array_index	support/tinygltf/json.hpp	/^    static int array_index(const std::string& s)$/;"	f	class:nlohmann::json_pointer
array_index	support/tinygltf/json.hpp	/^    std::size_t array_index = 0;$/;"	m	class:nlohmann::detail::iteration_proxy_value
array_index_last	support/tinygltf/json.hpp	/^    mutable std::size_t array_index_last = 0;$/;"	m	class:nlohmann::detail::iteration_proxy_value
array_index_str	support/tinygltf/json.hpp	/^    mutable std::string array_index_str = "0";$/;"	m	class:nlohmann::detail::iteration_proxy_value
array_of_unicode_codepoints	support/imgui/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon68
array_start	support/tinygltf/json.hpp	/^        array_start,$/;"	m	class:nlohmann::detail::parser::parse_event_t
array_value_	support/tinygltf/tiny_gltf.h	/^  Array array_value_;$/;"	m	class:tinygltf::Value
asReal	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox<Vec3<RealT>> asReal() const$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
asVec3d	optixVolumeViewer/nanovdb/NanoVDB.h	/^Vec3d Coord::asVec3d() const { return Vec3d(double(mVec[0]), double(mVec[1]), double(mVec[2])); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
asVec3s	optixVolumeViewer/nanovdb/NanoVDB.h	/^Vec3f Coord::asVec3s() const { return Vec3f(float(mVec[0]), float(mVec[1]), float(mVec[2])); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
as_is	support/tinygltf/tiny_gltf.h	/^  bool as_is;$/;"	m	struct:tinygltf::Image
aspectMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageAspectFlags          aspectMask;$/;"	m	struct:VkSparseImageFormatProperties
aspectMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkClearAttachment
aspectMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresource
aspectMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceLayers
aspectMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceRange
aspectRatio	support/tinygltf/tiny_gltf.h	/^  double aspectRatio;  \/\/ min > 0$/;"	m	struct:tinygltf::PerspectiveCamera
aspectRatio	sutil/Camera.h	/^    SUTILAPI const float& aspectRatio() const { return m_aspectRatio; }$/;"	f	class:sutil::Camera
assert	cuda/GeometryData.h	37;"	d
assertCond	sutil/Exception.h	/^inline void assertCond( bool result, const char* cond, const char* file, unsigned int line )$/;"	f	namespace:sutil
assertCondMsg	sutil/Exception.h	/^inline void assertCondMsg( bool               result,$/;"	f	namespace:sutil
assertFailMsg	sutil/Exception.h	/^[[noreturn]] inline void assertFailMsg( const std::string& msg, const char* file, unsigned int line )$/;"	f	namespace:sutil
asset	support/tinygltf/tiny_gltf.h	/^  Asset asset;$/;"	m	class:tinygltf::Model
asset_manager	support/tinygltf/tiny_gltf.h	/^AAssetManager *asset_manager = nullptr;$/;"	m	namespace:tinygltf
at	support/tinygltf/json.hpp	/^    const_reference at(const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json
at	support/tinygltf/json.hpp	/^    const_reference at(const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json
at	support/tinygltf/json.hpp	/^    const_reference at(size_type idx) const$/;"	f	class:nlohmann::basic_json
at	support/tinygltf/json.hpp	/^    reference at(const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json
at	support/tinygltf/json.hpp	/^    reference at(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json
at	support/tinygltf/json.hpp	/^    reference at(size_type idx)$/;"	f	class:nlohmann::basic_json
attachment	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t         attachment;$/;"	m	struct:VkAttachmentReference
attachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                      attachmentCount;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
attachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          attachmentCount;$/;"	m	struct:VkRenderPassCreateInfo
attachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    attachmentCount;$/;"	m	struct:VkFramebufferCreateInfo
attenuation	optixBoundValues/optixBoundValues.h	/^    float3       attenuation;$/;"	m	struct:RadiancePRD
attenuation	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       attenuation;$/;"	m	struct:RadiancePRD
attenuation	optixPathTracer/optixPathTracer.h	/^    float3       attenuation;$/;"	m	struct:RadiancePRD
attrib_	optixMotionGeometry/tiny_obj_loader.h	/^  attrib_t attrib_;$/;"	m	class:tinyobj::ObjReader
attrib_t	optixMotionGeometry/tiny_obj_loader.h	/^  attrib_t() {}$/;"	f	struct:tinyobj::attrib_t
attrib_t	optixMotionGeometry/tiny_obj_loader.h	/^struct attrib_t {$/;"	s	namespace:tinyobj
attributes	support/tinyexr/tinyexr.h	/^  std::vector<EXRAttribute> attributes;$/;"	m	struct:tinyexr::HeaderInfo
attributes	support/tinygltf/tiny_gltf.h	/^  std::map<std::string, int> attributes;  \/\/ (required) A dictionary object of$/;"	m	struct:tinygltf::Primitive
autoIconify	support/GLFW/src/internal.h	/^    GLFWbool            autoIconify;$/;"	m	struct:_GLFWwindow
autoIconify	support/GLFW/src/internal.h	/^    GLFWbool      autoIconify;$/;"	m	struct:_GLFWwndconfig
autoreleasePool	support/GLFW/src/cocoa_platform.h	/^    id                  autoreleasePool;$/;"	m	struct:_GLFWlibraryNS
auxBuffers	support/GLFW/src/internal.h	/^    int         auxBuffers;$/;"	m	struct:_GLFWfbconfig
avail_in	support/tinyexr/tinyexr.h	/^  unsigned int avail_in;         \/\/ number of bytes available at next_in$/;"	m	struct:tinyexr::miniz::mz_stream_s
avail_out	support/tinyexr/tinyexr.h	/^  unsigned int avail_out;   \/\/ number of bytes that can be written to next_out$/;"	m	struct:tinyexr::miniz::mz_stream_s
available	support/GLFW/src/internal.h	/^        GLFWbool        available;$/;"	m	struct:_GLFWlibrary::__anon10
available	support/GLFW/src/x11_platform.h	/^        GLFWbool    available;$/;"	m	struct:_GLFWlibraryX11::__anon20
available	support/GLFW/src/x11_platform.h	/^        GLFWbool    available;$/;"	m	struct:_GLFWlibraryX11::__anon21
available	support/GLFW/src/x11_platform.h	/^        GLFWbool    available;$/;"	m	struct:_GLFWlibraryX11::__anon24
available	support/GLFW/src/x11_platform.h	/^        GLFWbool    available;$/;"	m	struct:_GLFWlibraryX11::__anon26
average	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& average() const { return DataType::average(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
average	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& average() const { return DataType::mAverage; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
average	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& average() const { return DataType::mAverage; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
axes	support/GLFW/src/cocoa_joystick.h	/^    float*          axes;$/;"	m	struct:_GLFWjoystickNS
axes	support/GLFW/src/linux_joystick.h	/^    float*          axes;$/;"	m	struct:_GLFWjoystickLinux
axes	support/GLFW/src/win32_joystick.h	/^    float*                  axes;$/;"	m	struct:_GLFWjoystickWin32
axisCount	support/GLFW/src/linux_joystick.h	/^    int             axisCount;$/;"	m	struct:_GLFWjoystickLinux
axisCount	support/GLFW/src/win32_joystick.c	/^    int                     axisCount;$/;"	m	struct:_GLFWobjenumWin32	file:
axisCount	support/GLFW/src/win32_joystick.h	/^    int                     axisCount;$/;"	m	struct:_GLFWjoystickWin32
axisElements	support/GLFW/src/cocoa_joystick.h	/^    CFMutableArrayRef axisElements;$/;"	m	struct:_GLFWjoystickNS
b	optixCustomPrimitive/optixCustomPrimitive.h	/^    float r, g, b;$/;"	m	struct:MissData
b	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:MissData
b	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:RayGenData
b	optixHello/optixHello.h	/^    float r,g,b;$/;"	m	struct:RayGenData
b	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:MissData
b	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:RayGenData
b	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:MissData
b	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:RayGenData
b	optixSphere/optixSphere.h	/^    float r, g, b;$/;"	m	struct:MissData
b	support/GLFW/deps/vulkan/vulkan.h	/^    VkComponentSwizzle    b;$/;"	m	struct:VkComponentMapping
b	support/imgui/imgui.h	/^        const char* b;$/;"	m	struct:ImGuiTextFilter::TextRange
bLeftTrigger	support/GLFW/deps/mingw/xinput.h	/^    BYTE bLeftTrigger;$/;"	m	struct:_XINPUT_GAMEPAD
bRightTrigger	support/GLFW/deps/mingw/xinput.h	/^    BYTE bRightTrigger;$/;"	m	struct:_XINPUT_GAMEPAD
back	support/GLFW/deps/vulkan/vulkan.h	/^    VkStencilOpState                          back;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
back	support/imgui/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }$/;"	f	struct:ImVector
back	support/imgui/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[Size - 1]; }$/;"	f	struct:ImVector
back	support/tinygltf/json.hpp	/^    const_reference back() const$/;"	f	class:nlohmann::basic_json
back	support/tinygltf/json.hpp	/^    reference back()$/;"	f	class:nlohmann::basic_json
background	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& background() const { return DataType::mBackground; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
background	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& background() const { return this->root().background(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
background	support/tinygltf/stb_image.h	/^   stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anon110
base	support/GLFW/src/wl_monitor.c	/^    GLFWvidmode         base;$/;"	m	struct:_GLFWvidmodeWayland	file:
base64_decode	support/tinygltf/tiny_gltf.h	/^std::string base64_decode(std::string const &encoded_string) {$/;"	f	namespace:tinygltf
base64_encode	support/tinygltf/tiny_gltf.h	/^std::string base64_encode(unsigned char const *bytes_to_encode,$/;"	f	namespace:tinygltf
baseArrayLayer	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceLayers
baseArrayLayer	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceRange
baseArrayLayer	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    baseArrayLayer;$/;"	m	struct:VkClearRect
baseColorFactor	support/tinygltf/tiny_gltf.h	/^  std::vector<double> baseColorFactor;  \/\/ len = 4. default [1,1,1,1]$/;"	m	struct:tinygltf::PbrMetallicRoughness
baseColorTexture	support/tinygltf/tiny_gltf.h	/^  TextureInfo baseColorTexture;$/;"	m	struct:tinygltf::PbrMetallicRoughness
baseMipLevel	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              baseMipLevel;$/;"	m	struct:VkImageSubresourceRange
baseP	optixMotionGeometry/optixMotionGeometry.cpp	/^    float3 baseP;$/;"	m	class:ExhaustFume	file:
basePipelineHandle	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipeline                                       basePipelineHandle;$/;"	m	struct:VkGraphicsPipelineCreateInfo
basePipelineHandle	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipeline                         basePipelineHandle;$/;"	m	struct:VkComputePipelineCreateInfo
basePipelineIndex	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t                                          basePipelineIndex;$/;"	m	struct:VkGraphicsPipelineCreateInfo
basePipelineIndex	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t                            basePipelineIndex;$/;"	m	struct:VkComputePipelineCreateInfo
base_color	cuda/MaterialData.h	/^        float4               base_color;$/;"	m	struct:MaterialData::Pbr
base_color	optixVolumeViewer/volume.h	/^        float3 base_color;$/;"	m	struct:MaterialData::Lambert
base_color_tex	cuda/MaterialData.h	/^        Texture              base_color_tex;$/;"	m	struct:MaterialData::Pbr
base_iterator	support/tinygltf/json.hpp	/^        : base_iterator(it) {}$/;"	f	class:nlohmann::detail::json_reverse_iterator
base_iterator	support/tinygltf/json.hpp	/^    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}$/;"	f	class:nlohmann::detail::json_reverse_iterator
baseline_y_delta	support/imgui/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon85
basic_json	support/tinygltf/json.hpp	/^        : basic_json(value_t::null)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(InputIT first, InputIT last)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(const BasicJsonType& val)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(const basic_json& other)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(const detail::json_ref<basic_json>& ref)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(const value_t v)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(initializer_list_t init,$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^    basic_json(size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json
basic_json	support/tinygltf/json.hpp	/^class basic_json$/;"	c	namespace:nlohmann
bbox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ BBox<CoordT> bbox() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
bbox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<CoordType>& bbox() const { return DataType::mBBox; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
bbox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<CoordType>& bbox() const { return DataType::mBBox; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
bbox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<CoordType>& bbox() const { return this->root().bbox(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
begin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Iterator begin() const { return Iterator{*this}; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
begin	support/imgui/imgui.h	/^        const char*     begin() const   { return b; }$/;"	f	struct:ImGuiTextFilter::TextRange
begin	support/imgui/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }$/;"	f	struct:ImGuiTextBuffer
begin	support/imgui/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector
begin	support/imgui/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector
beginFrameImGui	sutil/sutil.cpp	/^void beginFrameImGui()$/;"	f	namespace:sutil
beginOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Iterator beginOn() const { return Iterator(this->findFirstOn(), this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
begin_array	support/tinygltf/json.hpp	/^        begin_array,      \/\/\/< the character for array begin `[`$/;"	m	class:nlohmann::detail::lexer::token_type
begin_object	support/tinygltf/json.hpp	/^        begin_object,     \/\/\/< the character for object begin `{`$/;"	m	class:nlohmann::detail::lexer::token_type
begin_value	support/tinygltf/json.hpp	/^    static constexpr difference_type begin_value = 0;$/;"	m	class:nlohmann::detail::primitive_iterator_t
bg_color	optixBoundValues/optixBoundValues.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixCurves/optixCurves.h	/^    float3 bg_color;$/;"	m	struct:MissData
bg_color	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixDynamicGeometry/optixDynamicGeometry.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixMotionGeometry/optixMotionGeometry.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixOpacityMicromap/optixOpacityMicromap.h	/^    float3 bg_color;$/;"	m	struct:MissData
bg_color	optixPathTracer/optixPathTracer.h	/^    float4 bg_color;$/;"	m	struct:MissData
bg_color	optixRibbons/optixRibbons.h	/^    float3 bg_color;$/;"	m	struct:MissData
bg_color	optixTriangle/optixTriangle.h	/^    float3 bg_color;$/;"	m	struct:MissData
bgindex	support/tinygltf/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon110
bigIcon	support/GLFW/src/win32_platform.h	/^    HICON               bigIcon;$/;"	m	struct:_GLFWwindowWin32
bilerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float bilerp(const float x00, const float x10, const float x01, const float x11,$/;"	f
bilerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 bilerp(const float2& x00, const float2& x10, const float2& x01, const float2& x11,$/;"	f
bilerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 bilerp(const float3& x00, const float3& x10, const float3& x01, const float3& x11,$/;"	f
bilerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 bilerp(const float4& x00, const float4& x10, const float4& x01, const float4& x11,$/;"	f
bin_data_	support/tinygltf/tiny_gltf.h	/^  const unsigned char *bin_data_ = nullptr;$/;"	m	class:tinygltf::TinyGLTF
bin_size_	support/tinygltf/tiny_gltf.h	/^  size_t bin_size_ = 0;$/;"	m	class:tinygltf::TinyGLTF
binary_reader	support/tinygltf/json.hpp	/^    explicit binary_reader(input_adapter_t adapter) : ia(std::move(adapter))$/;"	f	class:nlohmann::detail::binary_reader
binary_reader	support/tinygltf/json.hpp	/^class binary_reader$/;"	c	namespace:nlohmann::detail
binary_value_	support/tinygltf/tiny_gltf.h	/^  std::vector<unsigned char> binary_value_;$/;"	m	class:tinygltf::Value
binary_writer	support/tinygltf/json.hpp	/^    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(adapter)$/;"	f	class:nlohmann::detail::binary_writer
binary_writer	support/tinygltf/json.hpp	/^class binary_writer$/;"	c	namespace:nlohmann::detail
bindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          bindCount;$/;"	m	struct:VkSparseImageMemoryBindInfo
bindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseBufferMemoryBindInfo
bindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo
binding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              binding;$/;"	m	struct:VkDescriptorSetLayoutBinding
binding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t             binding;$/;"	m	struct:VkVertexInputBindingDescription
binding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    binding;$/;"	m	struct:VkVertexInputAttributeDescription
bindingCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                               bindingCount;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo
bitCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t bitCount() { return SIZE; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
bitmapFromData	support/tinyexr/tinyexr.h	/^static void bitmapFromData(const unsigned short data[\/*nData*\/], int nData,$/;"	f	namespace:tinyexr
bits	support/tinygltf/tiny_gltf.h	/^  int bits;        \/\/ bit depth per channel. 8(byte), 16 or 32.$/;"	m	struct:tinygltf::Image
bits_per_channel	support/tinygltf/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon96
blanking	support/GLFW/src/x11_platform.h	/^        int         blanking;$/;"	m	struct:_GLFWlibraryX11::__anon22
blendConstants	support/GLFW/deps/vulkan/vulkan.h	/^    float                                         blendConstants[4];$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
blendEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                 blendEnable;$/;"	m	struct:VkPipelineColorBlendAttachmentState
blendu	optixMotionGeometry/tiny_obj_loader.h	/^  bool blendu;   \/\/ -blendu (default on)$/;"	m	struct:tinyobj::texture_option_t
blendv	optixMotionGeometry/tiny_obj_loader.h	/^  bool blendv;   \/\/ -blendv (default on)$/;"	m	struct:tinyobj::texture_option_t
blindData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const void* blindData(uint32_t n) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
blindDataCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int                blindDataCount() const { return this->grid().blindDataCount(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
blindDataCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int blindDataCount() const { return DataType::mBlindMetadataCount; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
blindMetaData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const GridBlindMetaData& blindMetaData(int n) const { return DataType::blindMetaData(n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
blindMetaData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const GridBlindMetaData& blindMetaData(int n) const { return this->grid().blindMetaData(n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
blue	support/GLFW/include/GLFW/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp
blueBits	support/GLFW/include/GLFW/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode
blueBits	support/GLFW/src/internal.h	/^    int         blueBits;$/;"	m	struct:_GLFWfbconfig
bool_value	support/tinygltf/tiny_gltf.h	/^  bool bool_value = false;$/;"	m	struct:tinygltf::Parameter
boolean	support/tinygltf/json.hpp	/^        boolean_t boolean;$/;"	m	union:nlohmann::basic_json::json_value
boolean	support/tinygltf/json.hpp	/^        json_value(boolean_t v) noexcept : boolean(v) {}$/;"	f	union:nlohmann::basic_json::json_value
boolean	support/tinygltf/json.hpp	/^    bool boolean(bool \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
boolean	support/tinygltf/json.hpp	/^    bool boolean(bool val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
boolean	support/tinygltf/json.hpp	/^    bool boolean(bool val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
boolean	support/tinygltf/json.hpp	/^    boolean,          \/\/\/< boolean value$/;"	m	class:nlohmann::detail::value_t
boolean_value_	support/tinygltf/tiny_gltf.h	/^  bool boolean_value_ = false;$/;"	m	class:tinygltf::Value
borderColor	support/GLFW/deps/vulkan/vulkan.h	/^    VkBorderColor           borderColor;$/;"	m	struct:VkSamplerCreateInfo
bottom_y	support/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80
bound_values	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    std::vector<OptixModuleCompileBoundValueEntry> bound_values;$/;"	m	struct:CompileOperation	file:
boundaries	support/tinygltf/json.hpp	/^struct boundaries$/;"	s	namespace:nlohmann::detail::dtoa_impl
bounds	support/imgui/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon78
bpp	support/tinygltf/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon107
brightness	optixMotionGeometry/tiny_obj_loader.h	/^  real_t brightness;        \/\/ base_value in -mm option (default 0)$/;"	m	struct:tinyobj::texture_option_t
buffer	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    BufferT&       buffer() { return mBuffer; }$/;"	f	class:nanovdb::GridHandle
buffer	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    const BufferT& buffer() const { return mBuffer; }$/;"	f	class:nanovdb::GridHandle
buffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkBuffer                     buffer;$/;"	m	struct:VkSparseBufferMemoryBindInfo
buffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkBuffer                   buffer;$/;"	m	struct:VkBufferViewCreateInfo
buffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkBuffer           buffer;$/;"	m	struct:VkBufferMemoryBarrier
buffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkBuffer        buffer;$/;"	m	struct:VkDescriptorBufferInfo
buffer	support/GLFW/src/wl_platform.h	/^    struct wl_buffer*           buffer;$/;"	m	struct:_GLFWcursorWayland	typeref:struct:_GLFWcursorWayland::wl_buffer
bufferBindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    bufferBindCount;$/;"	m	struct:VkBindSparseInfo
bufferFeatures	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormatFeatureFlags    bufferFeatures;$/;"	m	struct:VkFormatProperties
bufferFormat	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_FORMAT             bufferFormat;                    \/**< [in]: Buffer format. *\/$/;"	m	struct:_NV_OF_BUFFER_DESCRIPTOR
bufferImageGranularity	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          bufferImageGranularity;$/;"	m	struct:VkPhysicalDeviceLimits
bufferImageHeight	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    bufferImageHeight;$/;"	m	struct:VkBufferImageCopy
bufferOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize                bufferOffset;$/;"	m	struct:VkBufferImageCopy
bufferRays	optixRaycasting/optixRaycasting.cpp	/^void bufferRays( RaycastingState& state )$/;"	f
bufferRowLength	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    bufferRowLength;$/;"	m	struct:VkBufferImageCopy
bufferUsage	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BUFFER_USAGE              bufferUsage;                     \/**< [in]: To specify buffer usage type.$/;"	m	struct:_NV_OF_BUFFER_DESCRIPTOR
bufferView	support/tinygltf/tiny_gltf.h	/^      int bufferView;$/;"	m	struct:tinygltf::Accessor::__anon115::__anon116
bufferView	support/tinygltf/tiny_gltf.h	/^      int bufferView;$/;"	m	struct:tinygltf::Accessor::__anon115::__anon117
bufferView	support/tinygltf/tiny_gltf.h	/^  int bufferView;        \/\/ (required if no uri)$/;"	m	struct:tinygltf::Image
bufferView	support/tinygltf/tiny_gltf.h	/^  int bufferView;  \/\/ optional in spec but required here since sparse accessor$/;"	m	struct:tinygltf::Accessor
bufferViewFromGLTF	sutil/Scene.cpp	/^BufferView<T> bufferViewFromGLTF( const tinygltf::Model& model, Scene& scene, const int32_t accessor_idx )$/;"	f	namespace:sutil::__anon123
bufferViews	support/tinygltf/tiny_gltf.h	/^  std::vector<BufferView> bufferViews;$/;"	m	class:tinygltf::Model
buffer_sizes	optixVolumeViewer/optixVolumeViewer.h	/^    OptixAccelBufferSizes  buffer_sizes    = {};$/;"	m	struct:IAS
buffer_start	support/tinygltf/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon94
buffers	support/tinygltf/tiny_gltf.h	/^  std::vector<Buffer> buffers;$/;"	m	class:tinygltf::Model
buflen	support/tinygltf/stb_image.h	/^   int buflen;$/;"	m	struct:__anon94
buildAndCompact	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void buildAndCompact( OptixDeviceContext                  context,$/;"	f
buildCheckerboardOpacityMicromap	optixCutouts/optixCutouts.cpp	/^void buildCheckerboardOpacityMicromap( CutoutsState& state )$/;"	f
buildCubeAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void buildCubeAccel( CubeAccel& cube_accel, const Cube& cube, const OptixDeviceContext& context )$/;"	f
buildDMMArray	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void buildDMMArray( OptixDeviceContext context, CUstream cuStream, CuBuffer<>& buildTemp, MeshData& mesh, unsigned int dmmSubdivisionLevel )$/;"	f
buildFlags	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    unsigned int                   buildFlags = 0;$/;"	m	struct:DisplacedMicromeshState	file:
buildFlags	optixHair/optixHair.h	/^    unsigned int buildFlags = OPTIX_BUILD_FLAG_ALLOW_COMPACTION | OPTIX_BUILD_FLAG_ALLOW_RANDOM_VERTEX_ACCESS | OPTIX_BUILD_FLAG_PREFER_FAST_TRACE;$/;"	m	struct:HairState
buildGAS	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void buildGAS( SampleState& state )$/;"	f
buildGAS	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void buildGAS( SimpleMotionBlurState& state )$/;"	f
buildGas	optixCallablePrograms/optixCallablePrograms.cpp	/^static void buildGas( const CallableProgramsState&  state,$/;"	f	file:
buildGas	optixConsole/optixConsole.cpp	/^static void buildGas( const OptixConsoleState&      state,$/;"	f	file:
buildGas	optixWhitted/optixWhitted.cpp	/^static void buildGas($/;"	f	file:
buildGeomAccel	optixCutouts/optixCutouts.cpp	/^void buildGeomAccel( CutoutsState& state )$/;"	f
buildIAS	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void buildIAS( SampleState& state )$/;"	f
buildIAS	optixVolumeViewer/optixVolumeViewer.cpp	/^void buildIAS( IAS& ias, int rayTypeCount, $/;"	f
buildInstanceAccel	optixCutouts/optixCutouts.cpp	/^void buildInstanceAccel( CutoutsState& state )$/;"	f
buildInstanceAccel	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void buildInstanceAccel( SimpleMotionBlurState& state )$/;"	f
buildInstanceAccel	sutil/Scene.cpp	/^void Scene::buildInstanceAccel( int rayTypeCount )$/;"	f	class:sutil::Scene
buildMergedGAS	optixMotionGeometry/optixMotionGeometry.cpp	/^void buildMergedGAS( MotionGeometryState& state, const sutil::Scene& scene, CUdeviceptr& gasData, OptixTraversableHandle& gasHandle, sutil::Aabb& aabb )$/;"	f
buildMeshAccel	optixBoundValues/optixBoundValues.cpp	/^void buildMeshAccel( PathTracerState& state )$/;"	f
buildMeshAccel	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void buildMeshAccel( DisplacedMicromeshState& state )$/;"	f
buildMeshAccel	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void buildMeshAccel( DynamicGeometryState& state )$/;"	f
buildMeshAccel	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void buildMeshAccel( PathTracerState& state )$/;"	f
buildMeshAccel	optixMotionGeometry/optixMotionGeometry.cpp	/^void buildMeshAccel( MotionGeometryState& state )$/;"	f
buildMeshAccel	optixMultiGPU/optixMultiGPU.cpp	/^void buildMeshAccel( PathTracerState& state )$/;"	f
buildMeshAccel	optixNVLink/optixNVLink.cpp	/^void buildMeshAccel( PerDeviceSampleState& pd_state )$/;"	f
buildMeshAccel	optixPathTracer/optixPathTracer.cpp	/^void buildMeshAccel( PathTracerState& state )$/;"	f
buildMeshAccels	sutil/Scene.cpp	/^void Scene::buildMeshAccels()$/;"	f	class:sutil::Scene
buildPlaneAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void buildPlaneAccel( PlaneAccel& plane_accel, const Plane& plane, const OptixDeviceContext& context )$/;"	f
buildSRT	optixMotionGeometry/motionHelper.hpp	/^OptixSRTData buildSRT( const float3&     scale,$/;"	f	namespace:__anon4
buildSRT	optixMotionGeometry/motionHelper.hpp	/^OptixSRTData buildSRT( const float3& scale, const Quaternion& q, const float3& translation )$/;"	f	namespace:__anon4
buildVolumeAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void buildVolumeAccel( VolumeAccel& accel, const Volume& volume, const OptixDeviceContext& context )$/;"	f
build_input	optixVolumeViewer/optixVolumeViewer.h	/^    OptixBuildInput        build_input     = {};$/;"	m	struct:IAS
builtinModule	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixModule                    builtinModule = 0;$/;"	m	struct:DisplacedMicromeshState	file:
bump_multiplier	optixMotionGeometry/tiny_obj_loader.h	/^  real_t bump_multiplier;  \/\/ -bm (for bump maps only, default 1.0)$/;"	m	struct:tinyobj::texture_option_t
bump_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string bump_texname;                \/\/ map_bump, map_Bump, bump$/;"	m	struct:tinyobj::material_t
bump_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t bump_texopt;$/;"	m	struct:tinyobj::material_t
bundle	support/GLFW/src/cocoa_platform.h	/^        CFBundleRef     bundle;$/;"	m	struct:_GLFWlibraryNS::__anon27
buttonCount	support/GLFW/src/linux_joystick.h	/^    int             buttonCount;$/;"	m	struct:_GLFWjoystickLinux
buttonCount	support/GLFW/src/win32_joystick.c	/^    int                     buttonCount;$/;"	m	struct:_GLFWobjenumWin32	file:
buttonCount	support/GLFW/src/win32_joystick.h	/^    int                     buttonCount;$/;"	m	struct:_GLFWjoystickWin32
buttonElements	support/GLFW/src/cocoa_joystick.h	/^    CFMutableArrayRef buttonElements;$/;"	m	struct:_GLFWjoystickNS
buttons	support/GLFW/src/cocoa_joystick.h	/^    unsigned char*  buttons;$/;"	m	struct:_GLFWjoystickNS
buttons	support/GLFW/src/linux_joystick.h	/^    unsigned char*  buttons;$/;"	m	struct:_GLFWjoystickLinux
buttons	support/GLFW/src/win32_joystick.h	/^    unsigned char*          buttons;$/;"	m	struct:_GLFWjoystickWin32
byte	support/tinygltf/json.hpp	/^    const std::size_t byte;$/;"	m	class:nlohmann::detail::parse_error
byteOffset	support/tinygltf/tiny_gltf.h	/^      int byteOffset;$/;"	m	struct:tinygltf::Accessor::__anon115::__anon116
byteOffset	support/tinygltf/tiny_gltf.h	/^      int byteOffset;$/;"	m	struct:tinygltf::Accessor::__anon115::__anon117
byteOffset	support/tinygltf/tiny_gltf.h	/^  size_t byteOffset;$/;"	m	struct:tinygltf::Accessor
byteSize	optixMotionGeometry/motionHelper.hpp	/^    size_t byteSize() const { return m_numTransforms * Derived::byteSizePerTransform( m_numKeys ); }$/;"	f	class:__anon4::MotionTransformArrayBase
byteSize	sutil/CuBuffer.h	/^    size_t byteSize() const { return m_count * sizeof( T ); }$/;"	f	class:CuBuffer
byteSizePerTransform	optixMotionGeometry/motionHelper.hpp	/^    size_t byteSizePerTransform() const { return Derived::byteSizePerTransform( m_numKeys ); }$/;"	f	class:__anon4::MotionTransformArrayBase
byteSizePerTransform	optixMotionGeometry/motionHelper.hpp	/^    static size_t byteSizePerTransform( unsigned int numKeys )$/;"	f	class:__anon4::MatrixMotionTransformArray
byteSizePerTransform	optixMotionGeometry/motionHelper.hpp	/^    static size_t byteSizePerTransform( unsigned int numKeys )$/;"	f	class:__anon4::SRTMotionTransformArray
cAreaFill	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cAreaFill;$/;"	m	struct:_DICOLORSET
cAxes	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cAxes;$/;"	m	struct:DIEFFECT
cAxes	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cAxes;$/;"	m	struct:DIEFFECT_DX5
cBorder	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cBorder;$/;"	m	struct:_DICOLORSET
cCalloutHighlight	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cCalloutHighlight;$/;"	m	struct:_DICOLORSET
cCalloutLine	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cCalloutLine;$/;"	m	struct:_DICOLORSET
cChannels	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cChannels;$/;"	m	struct:DICUSTOMFORCE
cControlFill	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cControlFill;$/;"	m	struct:_DICOLORSET
cHighlightFill	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cHighlightFill;$/;"	m	struct:_DICOLORSET
cSamples	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cSamples;$/;"	m	struct:DICUSTOMFORCE
cTextFore	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cTextFore;$/;"	m	struct:_DICOLORSET
cTextHighlight	support/GLFW/deps/mingw/dinput.h	/^	D3DCOLOR	cTextHighlight;$/;"	m	struct:_DICOLORSET
c_str	optixVolumeViewer/nanovdb/NanoVDB.h	/^    const char* c_str() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
c_str	support/imgui/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer
cached_power	support/tinygltf/json.hpp	/^struct cached_power \/\/ c = f * 2^e ~= 10^k$/;"	s	namespace:nlohmann::detail::dtoa_impl
calc_bson_array_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)$/;"	f	class:nlohmann::detail::binary_writer
calc_bson_element_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_element_size(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
calc_bson_entry_header_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_entry_header_size(const string_t& name)$/;"	f	class:nlohmann::detail::binary_writer
calc_bson_integer_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_integer_size(const std::int64_t value)$/;"	f	class:nlohmann::detail::binary_writer
calc_bson_object_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)$/;"	f	class:nlohmann::detail::binary_writer
calc_bson_string_size	support/tinygltf/json.hpp	/^    static std::size_t calc_bson_string_size(const string_t& value)$/;"	f	class:nlohmann::detail::binary_writer
calculateRefreshRate	support/GLFW/src/x11_monitor.c	/^static int calculateRefreshRate(const XRRModeInfo* mi)$/;"	f	file:
callable_prog_groups	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixProgramGroup           callable_prog_groups[3]  = {};$/;"	m	struct:CallableProgramsState	file:
callback	support/GLFW/src/wl_platform.h	/^    struct wl_callback*         callback;$/;"	m	struct:_GLFWwindowWayland	typeref:struct:_GLFWwindowWayland::wl_callback
callback	support/tinygltf/json.hpp	/^    const parser_callback_t callback = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
callback	support/tinygltf/json.hpp	/^    const parser_callback_t callback = nullptr;$/;"	m	class:nlohmann::detail::parser
callback_t	optixMotionGeometry/tiny_obj_loader.h	/^  callback_t()$/;"	f	struct:tinyobj::callback_t
callback_t	optixMotionGeometry/tiny_obj_loader.h	/^struct callback_t {$/;"	s	namespace:tinyobj
callbacks	support/GLFW/src/internal.h	/^    } callbacks;$/;"	m	struct:_GLFWlibrary	typeref:struct:_GLFWlibrary::__anon11
callbacks	support/GLFW/src/internal.h	/^    } callbacks;$/;"	m	struct:_GLFWwindow	typeref:struct:_GLFWwindow::__anon8
cam_eye	optixCurves/optixCurves.h	/^    float3                 cam_eye;$/;"	m	struct:Params
cam_eye	optixCustomPrimitive/optixCustomPrimitive.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3                 cam_eye;$/;"	m	struct:Params
cam_eye	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixMotionGeometry/optixMotionGeometry.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixOpacityMicromap/optixOpacityMicromap.h	/^    float3                 cam_eye;$/;"	m	struct:Params
cam_eye	optixRibbons/optixRibbons.h	/^    float3                 cam_eye;$/;"	m	struct:Params
cam_eye	optixSphere/optixSphere.h	/^    float3 cam_eye;$/;"	m	struct:RayGenData
cam_eye	optixTriangle/optixTriangle.h	/^    float3                 cam_eye;$/;"	m	struct:Params
cam_u	optixCurves/optixCurves.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_u	optixOpacityMicromap/optixOpacityMicromap.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_u	optixRibbons/optixRibbons.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_u	optixTriangle/optixTriangle.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_v	optixCurves/optixCurves.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_v	optixOpacityMicromap/optixOpacityMicromap.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_v	optixRibbons/optixRibbons.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_v	optixTriangle/optixTriangle.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_w	optixCurves/optixCurves.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_w	optixOpacityMicromap/optixOpacityMicromap.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_w	optixRibbons/optixRibbons.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
cam_w	optixTriangle/optixTriangle.h	/^    float3                 cam_u, cam_v, cam_w;$/;"	m	struct:Params
camera	optixBoundValues/optixBoundValues.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixCallablePrograms/optixCallablePrograms.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixCutouts/optixCutouts.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixDynamicGeometry/optixDynamicGeometry.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixHair/optixHair.h	/^    sutil::Camera camera = {};$/;"	m	struct:HairState
camera	optixMeshViewer/optixMeshViewer.cpp	/^sutil::Camera     camera;$/;"	v
camera	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixMotionGeometry/optixMotionGeometry.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixMultiGPU/optixMultiGPU.cpp	/^sutil::Camera     camera;$/;"	v
camera	optixNVLink/optixNVLink.cpp	/^sutil::Camera     camera;$/;"	v
camera	optixPathTracer/optixPathTracer.cpp	/^sutil::Camera    camera;$/;"	v
camera	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^sutil::Camera     camera;$/;"	v
camera	optixVolumeViewer/optixVolumeViewer.cpp	/^sutil::Camera     camera;$/;"	v
camera	optixWhitted/optixWhitted.cpp	/^sutil::Camera     camera;$/;"	v
camera	support/tinygltf/tiny_gltf.h	/^  int camera;  \/\/ the index of the camera referenced by this node$/;"	m	class:tinygltf::Node
camera	sutil/Scene.cpp	/^sutil::Camera sutil::Scene::camera() const$/;"	f	class:sutil::sutil::Scene
camera_changed	optixBoundValues/optixBoundValues.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixCallablePrograms/optixCallablePrograms.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixCutouts/optixCutouts.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixDynamicGeometry/optixDynamicGeometry.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixMeshViewer/optixMeshViewer.cpp	/^bool              camera_changed = true;$/;"	v
camera_changed	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixMotionGeometry/optixMotionGeometry.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixMultiGPU/optixMultiGPU.cpp	/^bool              camera_changed = true;$/;"	v
camera_changed	optixNVLink/optixNVLink.cpp	/^bool              camera_changed = true;$/;"	v
camera_changed	optixPathTracer/optixPathTracer.cpp	/^bool             camera_changed = true;$/;"	v
camera_changed	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^bool              camera_changed = true;$/;"	v
camera_changed	optixVolumeViewer/optixVolumeViewer.cpp	/^bool              camera_changed = true;$/;"	v
camera_changed	optixWhitted/optixWhitted.cpp	/^bool              camera_changed = true;$/;"	v
camera_module	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixModule                 camera_module            = 0;$/;"	m	struct:CallableProgramsState	file:
camera_module	optixConsole/optixConsole.cpp	/^    OptixModule camera_module   = 0;$/;"	m	struct:OptixConsoleState	file:
camera_module	optixWhitted/optixWhitted.cpp	/^    OptixModule                 camera_module             = 0;$/;"	m	struct:WhittedState	file:
camera_u	optixCustomPrimitive/optixCustomPrimitive.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_u	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_u	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_u	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3                 camera_u, camera_v, camera_w;$/;"	m	struct:Params
camera_u	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_u	optixMotionGeometry/optixMotionGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_u	optixSphere/optixSphere.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixCustomPrimitive/optixCustomPrimitive.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3                 camera_u, camera_v, camera_w;$/;"	m	struct:Params
camera_v	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixMotionGeometry/optixMotionGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_v	optixSphere/optixSphere.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixCustomPrimitive/optixCustomPrimitive.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3                 camera_u, camera_v, camera_w;$/;"	m	struct:Params
camera_w	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixMotionGeometry/optixMotionGeometry.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
camera_w	optixSphere/optixSphere.h	/^    float3 camera_u, camera_v, camera_w;$/;"	m	struct:RayGenData
cameras	support/tinygltf/tiny_gltf.h	/^  std::vector<Camera> cameras;$/;"	m	class:tinygltf::Model
capacity	support/imgui/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector
capacity	sutil/CuBuffer.h	/^    size_t capacity() const { return m_allocCount; }$/;"	f	class:CuBuffer
capacityByteSize	sutil/CuBuffer.h	/^    size_t capacityByteSize() const { return m_allocCount * sizeof( T ); }$/;"	f	class:CuBuffer
catmull_rom	optixDenoiser/OptiXDenoiser.h	/^inline float catmull_rom($/;"	f
cbInBuffer	support/GLFW/deps/mingw/dinput.h	/^	DWORD	cbInBuffer;$/;"	m	struct:DIEFFESCAPE
cbOutBuffer	support/GLFW/deps/mingw/dinput.h	/^	DWORD	cbOutBuffer;$/;"	m	struct:DIEFFESCAPE
cbSize	support/GLFW/src/win32_platform.h	/^    DWORD cbSize;$/;"	m	struct:tagCHANGEFILTERSTRUCT
cbTypeSpecificParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cbTypeSpecificParams;$/;"	m	struct:DIEFFECT
cbTypeSpecificParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			cbTypeSpecificParams;$/;"	m	struct:DIEFFECT_DX5
cbor	support/tinygltf/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	m	class:nlohmann::detail::input_format_t
cdata	support/imgui/imstb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
ceil	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord ceil() const { return Coord(Ceil(mVec[0]), Ceil(mVec[1]), Ceil(mVec[2])); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
center	cuda/GeometryData.h	/^        float3 center;$/;"	m	struct:GeometryData::Sphere
center	cuda/GeometryData.h	/^        float3 center;$/;"	m	struct:GeometryData::SphereShell
center	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3     center;$/;"	m	struct:HitGroupData
center	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3 center;$/;"	m	struct:SphereData
center	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::center( int dim ) const$/;"	f	class:sutil::Aabb
center	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float3 Aabb::center() const$/;"	f	class:sutil::Aabb
centerCursor	support/GLFW/src/win32_window.c	/^static void centerCursor(_GLFWwindow* window)$/;"	f	file:
centerCursor	support/GLFW/src/x11_window.c	/^static void centerCursor(_GLFWwindow* window)$/;"	f	file:
cff	support/imgui/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo
channel	support/tinygltf/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon108
channel_names	support/tinyexr/tinyexr.h	/^  const char **channel_names;$/;"	m	struct:_DeepImage
channel_order	support/tinygltf/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon96
channels	support/tinyexr/tinyexr.h	/^  EXRChannelInfo *channels;  \/\/ [num_channels]$/;"	m	struct:_EXRHeader
channels	support/tinyexr/tinyexr.h	/^  std::vector<tinyexr::ChannelInfo> channels;$/;"	m	struct:tinyexr::HeaderInfo
channels	support/tinygltf/tiny_gltf.h	/^  std::vector<AnimationChannel> channels;$/;"	m	struct:tinygltf::Animation
charCallback	optixBoundValues/optixBoundValues.cpp	/^static void charCallback( GLFWwindow* window, unsigned int codepoint )$/;"	f	file:
charCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void charCallback( GLFWwindow* window, unsigned int codepoint )$/;"	f	file:
charCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void charCallback( GLFWwindow* window, unsigned int codepoint )$/;"	f	file:
char_storage	support/imgui/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon82
character	support/GLFW/src/internal.h	/^        GLFWcharfun             character;$/;"	m	struct:_GLFWwindow::__anon8
chardata_for_range	support/imgui/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon68
charf	support/tinyexr/tinyexr.h	/^typedef char charf;$/;"	t
charmods	support/GLFW/src/internal.h	/^        GLFWcharmodsfun         charmods;$/;"	m	struct:_GLFWwindow::__anon8
chars_read	support/tinygltf/json.hpp	/^    std::size_t chars_read = 0;$/;"	m	class:nlohmann::detail::binary_reader
chars_read_current_line	support/tinygltf/json.hpp	/^    std::size_t chars_read_current_line = 0;$/;"	m	struct:nlohmann::detail::position_t
chars_read_total	support/tinygltf/json.hpp	/^    std::size_t chars_read_total = 0;$/;"	m	struct:nlohmann::detail::position_t
charstrings	support/imgui/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo
check	lib/CompileWithTasks.h	/^inline void check( OptixResult res, const char* call, const char* file, unsigned int line )$/;"	f	namespace:optix::CompileWithTasks
checkGLError	sutil/Exception.h	/^inline void checkGLError()$/;"	f	namespace:sutil
checkPtr	optixVolumeViewer/nanovdb/util/HostBuffer.h	23;"	d
checkScaleChange	support/GLFW/src/wl_window.c	/^static void checkScaleChange(_GLFWwindow* window)$/;"	f	file:
checker	cuda/MaterialData.h	/^        CheckerPhong checker;$/;"	m	union:MaterialData::__anon1
checksum	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t                 checksum() const { return this->grid().checksum(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
checksum	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t checksum() const { return DataType::mChecksum; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
childMask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const MaskType<LOG2DIM>& childMask() const { return DataType::mChildMask; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
children	support/tinygltf/tiny_gltf.h	/^  std::vector<int> children;$/;"	m	class:tinygltf::Node
chooseEGLConfig	support/GLFW/src/egl_context.c	/^static GLFWbool chooseEGLConfig(const _GLFWctxconfig* ctxconfig,$/;"	f	file:
chooseGLXFBConfig	support/GLFW/src/glx_context.c	/^static GLFWbool chooseGLXFBConfig(const _GLFWfbconfig* desired, GLXFBConfig* result)$/;"	f	file:
chooseImage	support/GLFW/src/win32_window.c	/^static const GLFWimage* chooseImage(int count, const GLFWimage* images,$/;"	f	file:
choosePixelFormat	support/GLFW/src/wgl_context.c	/^static int choosePixelFormat(_GLFWwindow* window, const _GLFWfbconfig* desired)$/;"	f	file:
chunk_count	support/tinyexr/tinyexr.h	/^  int chunk_count;$/;"	m	struct:_EXRHeader
chunk_count	support/tinyexr/tinyexr.h	/^  int chunk_count;$/;"	m	struct:tinyexr::HeaderInfo
clamp	optixMotionGeometry/tiny_obj_loader.h	/^  bool clamp;    \/\/ -clamp (default false)$/;"	m	struct:tinyobj::texture_option_t
clamp	sutil/PPMLoader.cpp	/^float clamp( float f, float a, float b )$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float clamp( const float f, const float a, const float b )$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 clamp(const float2& v, const float a, const float b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 clamp(const float2& v, const float2& a, const float2& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 clamp(const float3& v, const float a, const float b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 clamp(const float3& v, const float3& a, const float3& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 clamp(const float4& v, const float a, const float b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 clamp(const float4& v, const float4& a, const float4& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int clamp(const int f, const int a, const int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 clamp(const int2& v, const int a, const int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 clamp(const int2& v, const int2& a, const int2& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 clamp(const int3& v, const int a, const int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 clamp(const int3& v, const int3& a, const int3& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 clamp(const int4& v, const int a, const int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 clamp(const int4& v, const int4& a, const int4& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long clamp(const long long f, const long long a, const long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 clamp(const longlong2& v, const long long a, const long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 clamp(const longlong2& v, const longlong2& a, const longlong2& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 clamp(const longlong3& v, const long long a, const long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 clamp(const longlong3& v, const longlong3& a, const longlong3& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 clamp(const longlong4& v, const long long a, const long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 clamp(const longlong4& v, const longlong4& a, const longlong4& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 clamp(const uint2& v, const uint2& a, const uint2& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 clamp(const uint2& v, const unsigned int a, const unsigned int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 clamp(const uint3& v, const uint3& a, const uint3& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 clamp(const uint3& v, const unsigned int a, const unsigned int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 clamp(const uint4& v, const uint4& a, const uint4& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 clamp(const uint4& v, const unsigned int a, const unsigned int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 clamp(const ulonglong2& v, const ulonglong2& a, const ulonglong2& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 clamp(const ulonglong2& v, const unsigned long long a, const unsigned long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 clamp(const ulonglong3& v, const ulonglong3& a, const ulonglong3& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 clamp(const ulonglong3& v, const unsigned long long a, const unsigned long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 clamp(const ulonglong4& v, const ulonglong4& a, const ulonglong4& b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 clamp(const ulonglong4& v, const unsigned long long a, const unsigned long long b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int clamp(const unsigned int f, const unsigned int a, const unsigned int b)$/;"	f
clamp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long clamp(const unsigned long long f, const unsigned long long a, const unsigned long long b)$/;"	f
cleanup	optixMeshViewer/optixMeshViewer.cpp	/^void cleanup()$/;"	f
cleanup	optixRaycasting/optixRaycasting.cpp	/^void cleanup( RaycastingState& state )$/;"	f
cleanup	sutil/Scene.cpp	/^void sutil::Scene::cleanup()$/;"	f	class:sutil::sutil::Scene
cleanupCube	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupCube( Cube& cube )$/;"	f
cleanupCubeAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupCubeAccel( CubeAccel& cube_accel )$/;"	f
cleanupIAS	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupIAS( IAS& ias )$/;"	f
cleanupLaunchParams	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupLaunchParams( Params& launch_params )$/;"	f
cleanupPlane	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupPlane( Plane& plane )$/;"	f
cleanupPlaneAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupPlaneAccel( PlaneAccel& plane_accel )$/;"	f
cleanupProgramGroups	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupProgramGroups( ProgramGroups& program_groups )$/;"	f
cleanupSBT	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupSBT( OptixShaderBindingTable& sbt )$/;"	f
cleanupState	optixBoundValues/optixBoundValues.cpp	/^void cleanupState( PathTracerState& state )$/;"	f
cleanupState	optixCallablePrograms/optixCallablePrograms.cpp	/^void cleanupState( CallableProgramsState& state )$/;"	f
cleanupState	optixConsole/optixConsole.cpp	/^void cleanupState( OptixConsoleState& state )$/;"	f
cleanupState	optixCutouts/optixCutouts.cpp	/^void cleanupState( CutoutsState& state )$/;"	f
cleanupState	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void cleanupState( DisplacedMicromeshState& state )$/;"	f
cleanupState	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void cleanupState( DynamicGeometryState& state )$/;"	f
cleanupState	optixHair/optixHair.cpp	/^void cleanupState( HairState* pState )$/;"	f
cleanupState	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void cleanupState( PathTracerState& state )$/;"	f
cleanupState	optixMotionGeometry/optixMotionGeometry.cpp	/^void cleanupState( MotionGeometryState& state )$/;"	f
cleanupState	optixMultiGPU/optixMultiGPU.cpp	/^void cleanupState( PathTracerState& state )$/;"	f
cleanupState	optixNVLink/optixNVLink.cpp	/^void cleanupState( PerDeviceSampleState& pd_state )$/;"	f
cleanupState	optixPathTracer/optixPathTracer.cpp	/^void cleanupState( PathTracerState& state )$/;"	f
cleanupState	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void cleanupState( SimpleMotionBlurState& state )$/;"	f
cleanupState	optixWhitted/optixWhitted.cpp	/^void cleanupState( WhittedState& state )$/;"	f
cleanupUI	sutil/sutil.cpp	/^void cleanupUI( GLFWwindow* window )$/;"	f	namespace:sutil
cleanupVolume	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupVolume( Volume& volume )$/;"	f
cleanupVolumeAccel	optixVolumeViewer/optixVolumeViewer.cpp	/^void cleanupVolumeAccel( VolumeAccel& accel )$/;"	f
clear	optixMotionGeometry/tiny_obj_loader.h	/^  void clear() {$/;"	f	struct:tinyobj::PrimGroup
clear	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^inline void HostBuffer::clear()$/;"	f	class:nanovdb::HostBuffer
clear	support/imgui/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }$/;"	f	struct:ImVector
clear	support/imgui/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer
clear	support/tinyexr/tinyexr.h	/^  void clear() {$/;"	f	struct:tinyexr::HeaderInfo
clearValue	support/GLFW/deps/vulkan/vulkan.h	/^    VkClearValue          clearValue;$/;"	m	struct:VkClearAttachment
clearValueCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t               clearValueCount;$/;"	m	struct:VkRenderPassBeginInfo
clearcoat_roughness	optixMotionGeometry/tiny_obj_loader.h	/^  real_t clearcoat_roughness;  \/\/ [0, 1] default 0$/;"	m	struct:tinyobj::material_t
clearcoat_thickness	optixMotionGeometry/tiny_obj_loader.h	/^  real_t clearcoat_thickness;  \/\/ [0, 1] default 0$/;"	m	struct:tinyobj::material_t
client	support/GLFW/src/egl_context.h	/^   void*            client;$/;"	m	struct:_GLFWcontextEGL
client	support/GLFW/src/internal.h	/^    int                 client;$/;"	m	struct:_GLFWcontext
client	support/GLFW/src/internal.h	/^    int           client;$/;"	m	struct:_GLFWctxconfig
clip	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool clip(const BBoxT& bbox)$/;"	f	class:nanovdb::Ray
clip	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool clip(const Vec3T& center, RealT radius)$/;"	f	class:nanovdb::Ray
clipboardString	support/GLFW/src/cocoa_platform.h	/^    char*               clipboardString;$/;"	m	struct:_GLFWlibraryNS
clipboardString	support/GLFW/src/win32_platform.h	/^    char*               clipboardString;$/;"	m	struct:_GLFWlibraryWin32
clipboardString	support/GLFW/src/x11_platform.h	/^    char*           clipboardString;$/;"	m	struct:_GLFWlibraryX11
clipped	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                         clipped;$/;"	m	struct:VkSwapchainCreateInfoKHR
clock_gettime	support/GLFW/deps/tinycthread.h	125;"	d
clockid_t	support/GLFW/deps/tinycthread.h	121;"	d
close	support/GLFW/src/internal.h	/^        GLFWwindowclosefun      close;$/;"	m	struct:_GLFWwindow::__anon8
closeJoystick	support/GLFW/src/win32_joystick.c	/^static void closeJoystick(_GLFWjoystickWin32* js)$/;"	f	file:
close_gl	support/glad/glad.c	/^void close_gl(void) {$/;"	f	file:
closed	support/GLFW/src/internal.h	/^    GLFWbool            closed;$/;"	m	struct:_GLFWwindow
cnd_broadcast	support/GLFW/deps/tinycthread.c	/^int cnd_broadcast(cnd_t *cond)$/;"	f
cnd_destroy	support/GLFW/deps/tinycthread.c	/^void cnd_destroy(cnd_t *cond)$/;"	f
cnd_init	support/GLFW/deps/tinycthread.c	/^int cnd_init(cnd_t *cond)$/;"	f
cnd_signal	support/GLFW/deps/tinycthread.c	/^int cnd_signal(cnd_t *cond)$/;"	f
cnd_t	support/GLFW/deps/tinycthread.h	/^typedef pthread_cond_t cnd_t;$/;"	t
cnd_t	support/GLFW/deps/tinycthread.h	/^} cnd_t;$/;"	t	typeref:struct:__anon33
cnd_timedwait	support/GLFW/deps/tinycthread.c	/^int cnd_timedwait(cnd_t *cond, mtx_t *mtx, const struct timespec *ts)$/;"	f
cnd_wait	support/GLFW/deps/tinycthread.c	/^int cnd_wait(cnd_t *cond, mtx_t *mtx)$/;"	f
code	support/tinygltf/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon98
codeSize	support/GLFW/deps/vulkan/vulkan.h	/^    size_t                       codeSize;$/;"	m	struct:VkShaderModuleCreateInfo
code_bits	support/tinygltf/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon99
code_buffer	support/tinygltf/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon99
code_buffer	support/tinygltf/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon103
codec	optixVolumeViewer/nanovdb/util/IO.h	/^    Codec       codec; \/\/ 2B$/;"	m	struct:nanovdb::io::Codec::MetaData
codec	optixVolumeViewer/nanovdb/util/IO.h	/^    Codec    codec; \/\/ 2 bytes$/;"	m	struct:nanovdb::io::Codec::Header
codepair	support/GLFW/src/xkb_unicode.c	/^static const struct codepair {$/;"	s	file:
codes	support/tinygltf/stb_image.h	/^   stbi__gif_lzw codes[8192];$/;"	m	struct:__anon110
coeff	support/tinygltf/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon99::__anon100
coeff_h	support/tinygltf/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon99::__anon100
coeff_w	support/tinygltf/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon99::__anon100
col	support/imgui/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert
color	cuda/LocalGeometry.h	/^    float4 color;$/;"	m	struct:LocalGeometry
color	optixDenoiser/OptiXDenoiser.h	/^        float*    color     = nullptr;$/;"	m	struct:OptiXDenoiser::Data
color	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3 color;$/;"	m	struct:HitGroupData
color	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3 color;$/;"	m	struct:HitGroupData
color	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3       color;$/;"	m	struct:HitGroupData
color	optixDynamicMaterials/optixDynamicMaterials.h	/^    float3 color;$/;"	m	struct:MissData
color	optixMotionGeometry/optixMotionGeometry.h	/^    float3 color;$/;"	m	struct:HitGroupData
color	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3       color;$/;"	m	struct:MissData
color	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3     color;$/;"	m	struct:HitGroupData
color	support/GLFW/deps/vulkan/vulkan.h	/^    VkClearColorValue           color;$/;"	m	union:VkClearValue
color	support/tinygltf/tiny_gltf.h	/^  std::vector<double> color;$/;"	m	struct:tinygltf::Light
colorAttachment	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              colorAttachment;$/;"	m	struct:VkClearAttachment
colorAttachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        colorAttachmentCount;$/;"	m	struct:VkSubpassDescription
colorBlendOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendOp                colorBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState
colorSpace	support/GLFW/deps/vulkan/vulkan.h	/^    VkColorSpaceKHR    colorSpace;$/;"	m	struct:VkSurfaceFormatKHR
colorWriteMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkColorComponentFlags    colorWriteMask;$/;"	m	struct:VkPipelineColorBlendAttachmentState
color_table	support/tinygltf/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon110
colormap	support/GLFW/src/x11_platform.h	/^    Colormap        colormap;$/;"	m	struct:_GLFWwindowX11
colors	cuda/GeometryData.h	/^        BufferView<Vec4f>  colors;                    \/\/ The buffer view may not be aligned, so don't use float4$/;"	m	struct:GeometryData::TriangleMesh
colors	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> colors;       \/\/ extension: vertex colors$/;"	m	struct:tinyobj::attrib_t
colors	sutil/Scene.h	/^        std::vector<BufferView<Vec4f> >   colors;$/;"	m	struct:sutil::Scene::MeshGroup
colorspace	optixMotionGeometry/tiny_obj_loader.h	/^  std::string colorspace;  \/\/ Explicitly specify color space of stored texel$/;"	m	struct:tinyobj::texture_option_t
commandBufferCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                       commandBufferCount;$/;"	m	struct:VkSubmitInfo
commandBufferCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                commandBufferCount;$/;"	m	struct:VkCommandBufferAllocateInfo
commandPool	support/GLFW/deps/vulkan/vulkan.h	/^    VkCommandPool           commandPool;$/;"	m	struct:VkCommandBufferAllocateInfo
compareEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                compareEnable;$/;"	m	struct:VkSamplerCreateInfo
compareJoystickObjects	support/GLFW/src/win32_joystick.c	/^static int compareJoystickObjects(const void* first, const void* second)$/;"	f	file:
compareJoysticks	support/GLFW/src/linux_joystick.c	/^static int compareJoysticks(const void* fp, const void* sp)$/;"	f	file:
compareMask	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t       compareMask;$/;"	m	struct:VkStencilOpState
compareOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkCompareOp             compareOp;$/;"	m	struct:VkSamplerCreateInfo
compareOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkCompareOp    compareOp;$/;"	m	struct:VkStencilOpState
compareVideoModes	support/GLFW/src/monitor.c	/^static int compareVideoModes(const void* fp, const void* sp)$/;"	f	file:
compileModule	optixCompileWithTasks/optixCompileWithTasks.cpp	/^void compileModule( const std::string& input, int numIters = 1 )$/;"	f
compileModuleWithTasks	optixCompileWithTasks/optixCompileWithTasks.cpp	/^void compileModuleWithTasks( const std::string& input, int numIters = 1 )$/;"	f
compile_operations_in_flight	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^std::vector<CompileOperation> compile_operations_in_flight;$/;"	v
component	support/tinygltf/tiny_gltf.h	/^  int component;$/;"	m	struct:tinygltf::Image
componentType	support/tinygltf/tiny_gltf.h	/^      int componentType;  \/\/ a TINYGLTF_COMPONENT_TYPE_ value$/;"	m	struct:tinygltf::Accessor::__anon115::__anon116
componentType	support/tinygltf/tiny_gltf.h	/^  int componentType;  \/\/ (required) One of TINYGLTF_COMPONENT_TYPE_***$/;"	m	struct:tinygltf::Accessor
components	support/GLFW/deps/vulkan/vulkan.h	/^    VkComponentMapping         components;$/;"	m	struct:VkImageViewCreateInfo
compositeAlpha	support/GLFW/deps/vulkan/vulkan.h	/^    VkCompositeAlphaFlagBitsKHR      compositeAlpha;$/;"	m	struct:VkSwapchainCreateInfoKHR
compositor	support/GLFW/src/wl_platform.h	/^    struct wl_compositor*       compositor;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_compositor
compress	support/tinyexr/tinyexr.h	1201;"	d
compress2	support/tinyexr/tinyexr.h	1202;"	d
compressBound	support/tinyexr/tinyexr.h	1203;"	d
compression_type	support/tinyexr/tinyexr.h	/^  int compression_type;        \/\/ compression type(TINYEXR_COMPRESSIONTYPE_*)$/;"	m	struct:_EXRHeader
compression_type	support/tinyexr/tinyexr.h	/^  int compression_type;$/;"	m	struct:tinyexr::HeaderInfo
computeDirty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ CoordValueType computeDirty(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
computeFlow	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    OptixResult computeFlow( OptixImage2D& flow, const OptixImage2D* input )$/;"	f	class:OptixUtilOpticalFlow
computeP2PIslands	optixNVLink/optixNVLink.cpp	/^void computeP2PIslands( std::vector<PerDeviceSampleState>& pd_states, std::vector<int>& islands )$/;"	f
computeUV	optixOpacityMicromap/optixOpacityMicromap.h	/^static __host__ __device__ __inline__ float2 computeUV( float2 bary, float2 uv0, float2 uv1, float2 uv2 )$/;"	f
compute_boundaries	support/tinygltf/json.hpp	/^boundaries compute_boundaries(FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl
conf	support/GLFW/src/mir_platform.h	/^    MirCursorConfiguration* conf;$/;"	m	struct:_GLFWcursorMir
config	support/GLFW/src/egl_context.h	/^   EGLConfig        config;$/;"	m	struct:_GLFWcontextEGL
configureCamera	optixCurves/optixCurves.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height, int degree )$/;"	f
configureCamera	optixCustomPrimitive/optixCustomPrimitive.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height )$/;"	f
configureCamera	optixOpacityMicromap/optixOpacityMicromap.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height )$/;"	f
configureCamera	optixRibbons/optixRibbons.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height )$/;"	f
configureCamera	optixSphere/optixSphere.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height )$/;"	f
configureCamera	optixTriangle/optixTriangle.cpp	/^void configureCamera( sutil::Camera& cam, const uint32_t width, const uint32_t height )$/;"	f
conjugate	sutil/Quaternion.h	/^    Quaternion conjugate()$/;"	f	class:sutil::Quaternion
connection	support/GLFW/deps/vulkan/vulkan.h	/^    MirConnection*                connection;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
connection	support/GLFW/deps/vulkan/vulkan.h	/^    xcb_connection_t*             connection;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
connection	support/GLFW/src/mir_platform.h	/^    MirConnection*              connection;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
connection	support/GLFW/src/mir_platform.h	/^    MirConnection*          connection;$/;"	m	struct:_GLFWlibraryMir
connection	support/GLFW/src/x11_platform.h	/^    xcb_connection_t*           connection;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
const	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
constTPtr	sutil/CuBuffer.h	/^    typedef const T* constTPtr;$/;"	t	class:CuBuffer
const_iterator	support/imgui/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector
constantID	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    constantID;$/;"	m	struct:VkSpecializationMapEntry
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleStringType& str)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const std::valarray<T>& arr)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const std::vector<bool>& arr)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	struct:nlohmann::detail::external_constructor
construct	support/tinygltf/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	struct:nlohmann::detail::external_constructor
container	support/tinygltf/json.hpp	/^        : container(cont) {}$/;"	f	class:nlohmann::detail::iteration_proxy
container	support/tinygltf/json.hpp	/^    typename IteratorType::reference container;$/;"	m	class:nlohmann::detail::iteration_proxy
contains	support/imgui/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }$/;"	f	struct:ImVector
contains	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::contains( const Aabb& bb ) const$/;"	f	class:sutil::Aabb
contains	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::contains( const float3& p ) const$/;"	f	class:sutil::Aabb
context	optixBoundValues/optixBoundValues.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:PathTracerState	file:
context	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixDeviceContext          context                  = 0;$/;"	m	struct:CallableProgramsState	file:
context	optixConsole/optixConsole.cpp	/^    OptixDeviceContext     context             = 0;$/;"	m	struct:OptixConsoleState	file:
context	optixCutouts/optixCutouts.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:CutoutsState	file:
context	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:DisplacedMicromeshState	file:
context	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:DynamicGeometryState	file:
context	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixDeviceContext             context = nullptr;$/;"	m	struct:SampleState	file:
context	optixHair/optixHair.h	/^    OptixDeviceContext context = 0;$/;"	m	struct:HairState
context	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:PathTracerState	file:
context	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:MotionGeometryState	file:
context	optixMultiGPU/optixMultiGPU.cpp	/^    OptixDeviceContext           context                  = 0;$/;"	m	struct:PathTracerState	file:
context	optixNVLink/optixNVLink.cpp	/^    OptixDeviceContext           context                  = 0;$/;"	m	struct:PerDeviceSampleState	file:
context	optixPathTracer/optixPathTracer.cpp	/^    OptixDeviceContext context = 0;$/;"	m	struct:PathTracerState	file:
context	optixRaycasting/optixRaycasting.cpp	/^    OptixDeviceContext          context                  = 0;$/;"	m	struct:RaycastingState	file:
context	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixDeviceContext           context                        = 0;$/;"	m	struct:SimpleMotionBlurState	file:
context	optixWhitted/optixWhitted.cpp	/^    OptixDeviceContext          context                   = 0;$/;"	m	struct:WhittedState	file:
context	support/GLFW/src/internal.h	/^        _GLFWctxconfig  context;$/;"	m	struct:_GLFWlibrary::__anon9
context	support/GLFW/src/internal.h	/^    _GLFWcontext        context;$/;"	m	struct:_GLFWwindow
context	support/GLFW/src/posix_tls.h	/^    pthread_key_t   context;$/;"	m	struct:_GLFWtlsPOSIX
context	support/GLFW/src/win32_platform.h	/^    DWORD           context;$/;"	m	struct:_GLFWtlsWin32
context	support/GLFW/src/wl_platform.h	/^        struct xkb_context*     context;$/;"	m	struct:_GLFWlibraryWayland::__anon19	typeref:struct:_GLFWlibraryWayland::__anon19::xkb_context
context	support/GLFW/src/x11_platform.h	/^    XContext        context;$/;"	m	struct:_GLFWlibraryX11
context	support/tinygltf/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon111
context	sutil/Scene.h	/^    SUTILAPI OptixDeviceContext                             context() const           { return m_context;    }$/;"	f	class:sutil::Scene
context_log_cb	optixBoundValues/optixBoundValues.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixCallablePrograms/optixCallablePrograms.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixCompileWithTasks/optixCompileWithTasks.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixConsole/optixConsole.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixCurves/optixCurves.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixCustomPrimitive/optixCustomPrimitive.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixCutouts/optixCutouts.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixDenoiser/OptiXDenoiser.h	/^static void context_log_cb( uint32_t level, const char* tag, const char* message, void* \/*cbdata*\/ )$/;"	f
context_log_cb	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f
context_log_cb	optixHello/optixHello.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixMotionGeometry/optixMotionGeometry.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixMultiGPU/optixMultiGPU.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixNVLink/optixNVLink.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixOpacityMicromap/optixOpacityMicromap.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixPathTracer/optixPathTracer.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixRibbons/optixRibbons.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixSphere/optixSphere.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixTriangle/optixTriangle.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	optixVolumeViewer/optixVolumeViewer.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/ )$/;"	f	file:
context_log_cb	optixWhitted/optixWhitted.cpp	/^static void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	file:
context_log_cb	sutil/Scene.cpp	/^void context_log_cb( unsigned int level, const char* tag, const char* message, void* \/*cbdata *\/)$/;"	f	namespace:sutil::__anon123
contrast	optixMotionGeometry/tiny_obj_loader.h	/^  real_t contrast;          \/\/ gain_value in -mm option (default 1)$/;"	m	struct:tinyobj::texture_option_t
control_mask	support/GLFW/src/wl_platform.h	/^        xkb_mod_mask_t          control_mask;$/;"	m	struct:_GLFWlibraryWayland::__anon19
copy	sutil/CuBuffer.h	/^    void copy( const CuBuffer<U>& other )$/;"	f	class:CuBuffer
copy	sutil/CuBuffer.h	/^    void copy( const T* data )$/;"	f	class:CuBuffer
copyOptixImage2D	optixDenoiser/OptiXDenoiser.h	/^static void copyOptixImage2D( OptixImage2D& dest, const OptixImage2D& src )$/;"	f
copyToDevice	optixHair/Util.h	/^void copyToDevice( const T& source, CUdeviceptr destination )$/;"	f
copyToDevice	optixHair/Util.h	/^void copyToDevice( const std::vector<T>& source, CUdeviceptr destination )$/;"	f
copyright	support/tinygltf/tiny_gltf.h	/^  std::string copyright;$/;"	m	struct:tinygltf::Asset
corner	optixBoundValues/optixBoundValues.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
corner	optixCutouts/optixCutouts.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
corner	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
corner	optixMultiGPU/optixMultiGPU.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
corner	optixNVLink/optixNVLink.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
corner	optixPathTracer/optixPathTracer.h	/^    float3 corner;$/;"	m	struct:ParallelogramLight
count	support/GLFW/src/x11_platform.h	/^        int         count;$/;"	m	struct:_GLFWlibraryX11::__anon22
count	support/tinygltf/json.hpp	/^    size_type count(KeyT&& key) const$/;"	f	class:nlohmann::basic_json
count	support/tinygltf/tiny_gltf.h	/^    int count;$/;"	m	struct:tinygltf::Accessor::__anon115
count	support/tinygltf/tiny_gltf.h	/^  size_t count;       \/\/ required$/;"	m	struct:tinygltf::Accessor
countEmitted	optixBoundValues/optixBoundValues.h	/^    int          countEmitted;$/;"	m	struct:RadiancePRD
countEmitted	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    int          countEmitted;$/;"	m	struct:RadiancePRD
countFrequencies	support/tinyexr/tinyexr.h	/^static void countFrequencies(std::vector<long long> &freq,$/;"	f	namespace:tinyexr
countOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t countOn() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
cp	support/GLFW/deps/mingw/dinput.h	/^    CPOINT	cp[MAXCPOINTSNUM];$/;"	m	struct:DIPROPCPOINTS
cpy2	support/tinyexr/tinyexr.h	/^static void cpy2(unsigned short *dst_val, const unsigned short *src_val) {$/;"	f	namespace:tinyexr
cpy4	support/tinyexr/tinyexr.h	/^static void cpy4(float *dst_val, const float *src_val) {$/;"	f	namespace:tinyexr
cpy4	support/tinyexr/tinyexr.h	/^static void cpy4(int *dst_val, const int *src_val) {$/;"	f	namespace:tinyexr
cpy4	support/tinyexr/tinyexr.h	/^static void cpy4(unsigned int *dst_val, const unsigned int *src_val) {$/;"	f	namespace:tinyexr
crc32	support/tinyexr/tinyexr.h	1209;"	d
create	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^inline HostBuffer HostBuffer::create(uint64_t size, const HostBuffer*)$/;"	f	class:nanovdb::HostBuffer
create	support/tinygltf/json.hpp	/^    static T* create(Args&& ... args)$/;"	f	class:nlohmann::basic_json
create	support/tinygltf/json.hpp	/^    static invalid_iterator create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator
create	support/tinygltf/json.hpp	/^    static other_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::other_error
create	support/tinygltf/json.hpp	/^    static out_of_range create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::out_of_range
create	support/tinygltf/json.hpp	/^    static parse_error create(int id_, const position_t& pos, const std::string& what_arg)$/;"	f	class:nlohmann::detail::parse_error
create	support/tinygltf/json.hpp	/^    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::parse_error
create	support/tinygltf/json.hpp	/^    static type_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::type_error
createAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^ReadAccessor<ValueT, LEVEL0, LEVEL1, LEVEL2> createAccessor(const NanoGrid<ValueT> &grid)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
createAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^ReadAccessor<ValueT, LEVEL0, LEVEL1, LEVEL2> createAccessor(const NanoRoot<ValueT> &root)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
createAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^ReadAccessor<ValueT, LEVEL0, LEVEL1, LEVEL2> createAccessor(const NanoTree<ValueT> &tree)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
createAnonymousFile	support/GLFW/src/wl_window.c	/^createAnonymousFile(off_t size)$/;"	f
createBuiltinModule	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createBuiltinModule( DisplacedMicromeshState& state, OptixPrimitiveType type )$/;"	f
createCameraProgram	optixCallablePrograms/optixCallablePrograms.cpp	/^static void createCameraProgram( CallableProgramsState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createCameraProgram	optixConsole/optixConsole.cpp	/^static void createCameraProgram( OptixConsoleState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createCameraProgram	optixWhitted/optixWhitted.cpp	/^static void createCameraProgram( WhittedState &state, std::vector<OptixProgramGroup> &program_groups )$/;"	f	file:
createContext	optixBoundValues/optixBoundValues.cpp	/^void createContext( PathTracerState& state )$/;"	f
createContext	optixCallablePrograms/optixCallablePrograms.cpp	/^void createContext( CallableProgramsState& state )$/;"	f
createContext	optixConsole/optixConsole.cpp	/^void createContext( OptixConsoleState& state )$/;"	f
createContext	optixCutouts/optixCutouts.cpp	/^void createContext( CutoutsState& state )$/;"	f
createContext	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createContext( DisplacedMicromeshState& state )$/;"	f
createContext	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void createContext( DynamicGeometryState& state )$/;"	f
createContext	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void createContext( SampleState& state )$/;"	f
createContext	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createContext( PathTracerState& state )$/;"	f
createContext	optixMotionGeometry/optixMotionGeometry.cpp	/^void createContext( MotionGeometryState& state )$/;"	f
createContext	optixMultiGPU/optixMultiGPU.cpp	/^void createContext( PathTracerState& state )$/;"	f
createContext	optixNVLink/optixNVLink.cpp	/^void createContext( PerDeviceSampleState& pd_state )$/;"	f
createContext	optixPathTracer/optixPathTracer.cpp	/^void createContext( PathTracerState& state )$/;"	f
createContext	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void createContext( SimpleMotionBlurState& state )$/;"	f
createContext	optixVolumeViewer/optixVolumeViewer.cpp	/^void createContext( OptixDeviceContext& context )$/;"	f
createContext	optixWhitted/optixWhitted.cpp	/^void createContext( WhittedState& state )$/;"	f
createContext	sutil/Scene.cpp	/^void Scene::createContext()$/;"	f	class:sutil::Scene
createContexts	optixMultiGPU/optixMultiGPU.cpp	/^void createContexts( std::vector<PathTracerState>& state )$/;"	f
createContexts	optixNVLink/optixNVLink.cpp	/^void createContexts( std::vector<PerDeviceSampleState>& pd_state )$/;"	f
createCube	optixVolumeViewer/optixVolumeViewer.cpp	/^void createCube( Cube& cube, const sutil::Aabb& aabb )$/;"	f
createFloorProgram	optixConsole/optixConsole.cpp	/^static void createFloorProgram( OptixConsoleState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createFloorProgram	optixWhitted/optixWhitted.cpp	/^static void createFloorProgram( WhittedState &state, std::vector<OptixProgramGroup> &program_groups )$/;"	f	file:
createGLProgram	sutil/GLDisplay.cpp	/^GLuint createGLProgram($/;"	f	namespace:sutil::__anon124
createGLShader	sutil/GLDisplay.cpp	/^GLuint createGLShader( const std::string& source, GLuint shader_type )$/;"	f	namespace:sutil::__anon124
createGeometry	optixCallablePrograms/optixCallablePrograms.cpp	/^void createGeometry( CallableProgramsState& state )$/;"	f
createGeometry	optixConsole/optixConsole.cpp	/^void createGeometry( OptixConsoleState& state )$/;"	f
createGeometry	optixWhitted/optixWhitted.cpp	/^void createGeometry( WhittedState &state )$/;"	f
createGlassSphereProgram	optixConsole/optixConsole.cpp	/^static void createGlassSphereProgram( OptixConsoleState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createGlassSphereProgram	optixWhitted/optixWhitted.cpp	/^static void createGlassSphereProgram( WhittedState &state, std::vector<OptixProgramGroup> &program_groups )$/;"	f	file:
createGrid	optixVolumeViewer/optixVolumeViewer.cpp	/^ void createGrid( Volume& grid, std::string filename, std::string gridname )$/;"	f
createHelperWindow	support/GLFW/src/win32_init.c	/^static HWND createHelperWindow(void)$/;"	f	file:
createHiddenCursor	support/GLFW/src/x11_init.c	/^static Cursor createHiddenCursor(void)$/;"	f	file:
createIcon	support/GLFW/src/win32_window.c	/^static HICON createIcon(const GLFWimage* image,$/;"	f	file:
createKeyTables	support/GLFW/src/mir_init.c	/^static void createKeyTables(void)$/;"	f	file:
createKeyTables	support/GLFW/src/win32_init.c	/^static void createKeyTables(void)$/;"	f	file:
createKeyTables	support/GLFW/src/wl_init.c	/^static void createKeyTables(void)$/;"	f	file:
createKeyTables	support/GLFW/src/x11_init.c	/^static void createKeyTables(void)$/;"	f	file:
createLegacyContextGLX	support/GLFW/src/glx_context.c	/^static GLXContext createLegacyContextGLX(_GLFWwindow* window,$/;"	f	file:
createMessage	sutil/Exception.h	/^    std::string createMessage( OptixResult res, const char* msg )$/;"	f	class:sutil::Exception
createMetalSphereProgram	optixConsole/optixConsole.cpp	/^static void createMetalSphereProgram( OptixConsoleState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createMetalSphereProgram	optixWhitted/optixWhitted.cpp	/^static void createMetalSphereProgram( WhittedState &state, std::vector<OptixProgramGroup> &program_groups )$/;"	f	file:
createMissProgram	optixCallablePrograms/optixCallablePrograms.cpp	/^static void createMissProgram( CallableProgramsState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createMissProgram	optixConsole/optixConsole.cpp	/^static void createMissProgram( OptixConsoleState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createMissProgram	optixWhitted/optixWhitted.cpp	/^static void createMissProgram( WhittedState &state, std::vector<OptixProgramGroup> &program_groups )$/;"	f	file:
createModule	optixBoundValues/optixBoundValues.cpp	/^void createModule( PathTracerState& state )$/;"	f
createModule	optixCutouts/optixCutouts.cpp	/^void createModule( CutoutsState& state )$/;"	f
createModule	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createModule( DisplacedMicromeshState& state )$/;"	f
createModule	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void createModule( DynamicGeometryState& state )$/;"	f
createModule	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void createModule( SampleState& state )$/;"	f
createModule	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createModule( OptixDeviceContext context, const std::string& ptx, const OptixModuleCompileOptions& module_compile_options, const OptixPipelineCompileOptions& pipeline_compile_options, OptixModule& module )$/;"	f
createModule	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createModule( PathTracerState& state )$/;"	f
createModule	optixMotionGeometry/optixMotionGeometry.cpp	/^void createModule( MotionGeometryState& state )$/;"	f
createModule	optixMultiGPU/optixMultiGPU.cpp	/^void createModule( PathTracerState& state )$/;"	f
createModule	optixNVLink/optixNVLink.cpp	/^void createModule( PerDeviceSampleState& pd_state )$/;"	f
createModule	optixPathTracer/optixPathTracer.cpp	/^void createModule( PathTracerState& state )$/;"	f
createModule	optixRaycasting/optixRaycasting.cpp	/^void createModule( RaycastingState& state )$/;"	f
createModule	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void createModule( SimpleMotionBlurState& state )$/;"	f
createModule	optixVolumeViewer/optixVolumeViewer.cpp	/^void createModule( OptixModule& module, const OptixDeviceContext& context )$/;"	f
createModules	optixCallablePrograms/optixCallablePrograms.cpp	/^void createModules( CallableProgramsState& state )$/;"	f
createModules	optixConsole/optixConsole.cpp	/^void createModules( OptixConsoleState& state )$/;"	f
createModules	optixWhitted/optixWhitted.cpp	/^void createModules( WhittedState &state )$/;"	f
createMonitor	support/GLFW/src/win32_monitor.c	/^static _GLFWmonitor* createMonitor(DISPLAY_DEVICEW* adapter,$/;"	f	file:
createNativeWindow	support/GLFW/src/win32_window.c	/^static int createNativeWindow(_GLFWwindow* window,$/;"	f	file:
createNativeWindow	support/GLFW/src/x11_window.c	/^static GLFWbool createNativeWindow(_GLFWwindow* window,$/;"	f	file:
createOnDevice	optixHair/Util.h	/^void createOnDevice( const T& source, CUdeviceptr* destination )$/;"	f
createOnDevice	optixHair/Util.h	/^void createOnDevice( const std::vector<T>& source, CUdeviceptr* destination )$/;"	f
createOptixImage2D	optixDenoiser/OptiXDenoiser.h	/^static OptixImage2D createOptixImage2D( unsigned int width, unsigned int height, const float * hmem = nullptr ) $/;"	f
createOptixImage2D	optixOpticalFlow/optixOpticalFlow.cpp	/^static OptixImage2D createOptixImage2D( unsigned int width, unsigned int height, unsigned int nChannels )$/;"	f	file:
createPTXModule	sutil/Scene.cpp	/^void Scene::createPTXModule()$/;"	f	class:sutil::Scene
createPipeline	optixBoundValues/optixBoundValues.cpp	/^void createPipeline( PathTracerState& state )$/;"	f
createPipeline	optixCallablePrograms/optixCallablePrograms.cpp	/^void createPipeline( CallableProgramsState& state )$/;"	f
createPipeline	optixConsole/optixConsole.cpp	/^void createPipeline( OptixConsoleState& state )$/;"	f
createPipeline	optixCutouts/optixCutouts.cpp	/^void createPipeline( CutoutsState& state )$/;"	f
createPipeline	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createPipeline( DisplacedMicromeshState& state )$/;"	f
createPipeline	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void createPipeline( DynamicGeometryState& state )$/;"	f
createPipeline	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void createPipeline( SampleState& state )$/;"	f
createPipeline	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createPipeline( PathTracerState& state )$/;"	f
createPipeline	optixMotionGeometry/optixMotionGeometry.cpp	/^void createPipeline( MotionGeometryState& state )$/;"	f
createPipeline	optixMultiGPU/optixMultiGPU.cpp	/^void createPipeline( PathTracerState& state )$/;"	f
createPipeline	optixNVLink/optixNVLink.cpp	/^void createPipeline( PerDeviceSampleState& pd_state )$/;"	f
createPipeline	optixPathTracer/optixPathTracer.cpp	/^void createPipeline( PathTracerState& state )$/;"	f
createPipeline	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void createPipeline( SimpleMotionBlurState& state )$/;"	f
createPipeline	optixVolumeViewer/optixVolumeViewer.cpp	/^void createPipeline( OptixPipeline& pipeline, const ProgramGroups& programs, const OptixDeviceContext& context )$/;"	f
createPipeline	optixWhitted/optixWhitted.cpp	/^void createPipeline( WhittedState &state )$/;"	f
createPipeline	sutil/Scene.cpp	/^void Scene::createPipeline()$/;"	f	class:sutil::Scene
createPipelines	optixRaycasting/optixRaycasting.cpp	/^void createPipelines( RaycastingState& state )$/;"	f
createPlane	optixVolumeViewer/optixVolumeViewer.cpp	/^void createPlane( Plane& plane, const sutil::Aabb& aabb )$/;"	f
createProgramGroups	optixBoundValues/optixBoundValues.cpp	/^void createProgramGroups( PathTracerState& state )$/;"	f
createProgramGroups	optixCutouts/optixCutouts.cpp	/^void createProgramGroups( CutoutsState& state )$/;"	f
createProgramGroups	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createProgramGroups( DisplacedMicromeshState& state )$/;"	f
createProgramGroups	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void createProgramGroups( DynamicGeometryState& state )$/;"	f
createProgramGroups	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void createProgramGroups( SampleState& state )$/;"	f
createProgramGroups	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createProgramGroups( PathTracerState& state )$/;"	f
createProgramGroups	optixMotionGeometry/optixMotionGeometry.cpp	/^void createProgramGroups( MotionGeometryState& state )$/;"	f
createProgramGroups	optixMultiGPU/optixMultiGPU.cpp	/^void createProgramGroups( PathTracerState& state )$/;"	f
createProgramGroups	optixNVLink/optixNVLink.cpp	/^void createProgramGroups( PerDeviceSampleState& pd_state )$/;"	f
createProgramGroups	optixPathTracer/optixPathTracer.cpp	/^void createProgramGroups( PathTracerState& state )$/;"	f
createProgramGroups	optixRaycasting/optixRaycasting.cpp	/^void createProgramGroups( RaycastingState& state )$/;"	f
createProgramGroups	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void createProgramGroups( SimpleMotionBlurState& state )$/;"	f
createProgramGroups	optixVolumeViewer/optixVolumeViewer.cpp	/^void createProgramGroups( ProgramGroups& program_groups, $/;"	f
createProgramGroups	sutil/Scene.cpp	/^void Scene::createProgramGroups()$/;"	f	class:sutil::Scene
createRadianceModule	optixBoundValues/optixBoundValues.cpp	/^void createRadianceModule( PathTracerState& state )$/;"	f
createRadianceModule	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createRadianceModule( PathTracerState& state )$/;"	f
createRadianceProgramGroup	optixBoundValues/optixBoundValues.cpp	/^void createRadianceProgramGroup( PathTracerState& state )$/;"	f
createRadianceProgramGroup	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void createRadianceProgramGroup( PathTracerState& state )$/;"	f
createSBT	optixBoundValues/optixBoundValues.cpp	/^void createSBT( PathTracerState& state )$/;"	f
createSBT	optixCallablePrograms/optixCallablePrograms.cpp	/^void createSBT( CallableProgramsState& state )$/;"	f
createSBT	optixConsole/optixConsole.cpp	/^void createSBT( OptixConsoleState& state )$/;"	f
createSBT	optixCutouts/optixCutouts.cpp	/^void createSBT( CutoutsState& state )$/;"	f
createSBT	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void createSBT( DisplacedMicromeshState& state )$/;"	f
createSBT	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void createSBT( DynamicGeometryState& state )$/;"	f
createSBT	optixMotionGeometry/optixMotionGeometry.cpp	/^void createSBT( MotionGeometryState& state )$/;"	f
createSBT	optixMultiGPU/optixMultiGPU.cpp	/^void createSBT( PathTracerState& state )$/;"	f
createSBT	optixNVLink/optixNVLink.cpp	/^void createSBT( PerDeviceSampleState& pd_state )$/;"	f
createSBT	optixPathTracer/optixPathTracer.cpp	/^void createSBT( PathTracerState& state )$/;"	f
createSBT	optixRaycasting/optixRaycasting.cpp	/^void createSBT( RaycastingState& state )$/;"	f
createSBT	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void createSBT( SimpleMotionBlurState& state )$/;"	f
createSBT	optixVolumeViewer/optixVolumeViewer.cpp	/^void createSBT( OptixShaderBindingTable& sbt, const ProgramGroups& program_groups, $/;"	f
createSBT	optixWhitted/optixWhitted.cpp	/^void createSBT( WhittedState &state )$/;"	f
createSBT	sutil/Scene.cpp	/^void Scene::createSBT()$/;"	f	class:sutil::Scene
createSbt	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void createSbt( SampleState& state )$/;"	f
createShellSurface	support/GLFW/src/wl_window.c	/^static GLFWbool createShellSurface(_GLFWwindow* window)$/;"	f	file:
createSphereProgram	optixCallablePrograms/optixCallablePrograms.cpp	/^static void createSphereProgram( CallableProgramsState& state, std::vector<OptixProgramGroup>& program_groups )$/;"	f	file:
createSurface	support/GLFW/src/mir_window.c	/^static GLFWbool createSurface(_GLFWwindow* window)$/;"	f	file:
createSurface	support/GLFW/src/wl_window.c	/^static GLFWbool createSurface(_GLFWwindow* window,$/;"	f	file:
createTextureImageOnHost	optixNVLink/optixNVLink.cpp	/^void createTextureImageOnHost( float4* image_data, int width, int height, int material_id )$/;"	f
createTmpfileCloexec	support/GLFW/src/wl_window.c	/^createTmpfileCloexec(char* tmpname)$/;"	f	file:
cross	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 cross(const Vec3T& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
cross	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 cross(const float3& a, const float3& b)$/;"	f
crtc	support/GLFW/src/x11_platform.h	/^    RRCrtc          crtc;$/;"	m	struct:_GLFWmonitorX11
ctx_log_cb	nvpath-fmz/path-tracer.cpp	/^void ctx_log_cb(uint32_t level, const char* tag, const char* message, void*) {$/;"	f
cube_scale_factor	optixVolumeViewer/optixVolumeViewer.cpp	/^const float cube_scale_factor = 0.25f;$/;"	v
cudaCheck	sutil/Exception.h	/^inline void cudaCheck( cudaError_t error, const char* call, const char* file, unsigned int line )$/;"	f	namespace:sutil
cudaSyncCheck	sutil/Exception.h	/^inline void cudaSyncCheck( const char* file, unsigned int line )$/;"	f	namespace:sutil
cullMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkCullModeFlags                            cullMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
cur_mode	support/GLFW/src/mir_platform.h	/^    int cur_mode;$/;"	m	struct:_GLFWmonitorMir
cur_x	support/tinygltf/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon110
cur_y	support/tinygltf/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon110
current	support/tinygltf/json.hpp	/^    int current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::binary_reader
current	support/tinygltf/json.hpp	/^    std::char_traits<char>::int_type current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::lexer
currentCamera	sutil/Trackball.h	/^    SUTILAPI inline const Camera* currentCamera() const { return m_camera; }$/;"	f	class:sutil::Trackball
currentCursor	support/GLFW/src/wl_platform.h	/^    _GLFWcursor*                currentCursor;$/;"	m	struct:_GLFWwindowWayland
currentDisplay	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayKHR    currentDisplay;$/;"	m	struct:VkDisplayPlanePropertiesKHR
currentExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                       currentExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR
currentMode	support/GLFW/src/internal.h	/^    GLFWvidmode     currentMode;$/;"	m	struct:_GLFWmonitor
currentRamp	support/GLFW/src/internal.h	/^    GLFWgammaramp   currentRamp;$/;"	m	struct:_GLFWmonitor
currentStackIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        currentStackIndex;$/;"	m	struct:VkDisplayPlanePropertiesKHR
currentTime	sutil/sutil.cpp	/^double currentTime()$/;"	f	namespace:sutil
currentTransform	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    currentTransform;$/;"	m	struct:VkSurfaceCapabilitiesKHR
current_wchar	support/tinygltf/json.hpp	/^    std::size_t current_wchar = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter
cursor	support/GLFW/src/cocoa_platform.h	/^    id                  cursor;$/;"	m	struct:_GLFWlibraryNS
cursor	support/GLFW/src/internal.h	/^    _GLFWcursor*        cursor;$/;"	m	struct:_GLFWwindow
cursor	support/GLFW/src/x11_platform.h	/^    Cursor          cursor;$/;"	m	struct:_GLFWlibraryX11
cursor	support/imgui/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon84
cursor	support/imgui/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon64
cursor	support/tinygltf/json.hpp	/^    const char* cursor;$/;"	m	class:nlohmann::detail::input_buffer_adapter
cursorEnter	support/GLFW/src/internal.h	/^        GLFWcursorenterfun      cursorEnter;$/;"	m	struct:_GLFWwindow::__anon8
cursorInClientArea	support/GLFW/src/win32_window.c	/^static GLFWbool cursorInClientArea(_GLFWwindow* window)$/;"	f	file:
cursorListHead	support/GLFW/src/internal.h	/^    _GLFWcursor*        cursorListHead;$/;"	m	struct:_GLFWlibrary
cursorMode	support/GLFW/src/internal.h	/^    int                 cursorMode;$/;"	m	struct:_GLFWwindow
cursorPos	support/GLFW/src/internal.h	/^        GLFWcursorposfun        cursorPos;$/;"	m	struct:_GLFWwindow::__anon8
cursorPosCallback	optixBoundValues/optixBoundValues.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixCutouts/optixCutouts.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixHair/Renderers.cpp	/^void WindowRenderer::cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	class:WindowRenderer
cursorPosCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixMultiGPU/optixMultiGPU.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixNVLink/optixNVLink.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixPathTracer/optixPathTracer.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosCallback	optixWhitted/optixWhitted.cpp	/^static void cursorPosCallback( GLFWwindow* window, double xpos, double ypos )$/;"	f	file:
cursorPosX	support/GLFW/src/wl_platform.h	/^    double                      cursorPosX, cursorPosY;$/;"	m	struct:_GLFWwindowWayland
cursorPosY	support/GLFW/src/wl_platform.h	/^    double                      cursorPosX, cursorPosY;$/;"	m	struct:_GLFWwindowWayland
cursorSurface	support/GLFW/src/wl_platform.h	/^    struct wl_surface*          cursorSurface;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_surface
cursorTheme	support/GLFW/src/wl_platform.h	/^    struct wl_cursor_theme*     cursorTheme;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_cursor_theme
cursorTracked	support/GLFW/src/win32_platform.h	/^    GLFWbool            cursorTracked;$/;"	m	struct:_GLFWwindowWin32
cursorWarpDeltaX	support/GLFW/src/cocoa_platform.h	/^    double          cursorWarpDeltaX, cursorWarpDeltaY;$/;"	m	struct:_GLFWwindowNS
cursorWarpDeltaY	support/GLFW/src/cocoa_platform.h	/^    double          cursorWarpDeltaX, cursorWarpDeltaY;$/;"	m	struct:_GLFWwindowNS
cursor_at_end_of_line	support/imgui/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon84
curveDegree	optixHair/Hair.h	/^    unsigned int curveDegree() const$/;"	f	class:Hair
curveTangent	cuda/curve.h	/^__device__ __forceinline__ float3 curveTangent( const CurveType& bc, float u )$/;"	f
curves	cuda/GeometryData.h	/^        Curves        curves;$/;"	m	union:GeometryData::__anon3
curves	optixHair/optixHair.h	/^    GeometryData::Curves curves = {};$/;"	m	struct:HairState
custom_attributes	support/tinyexr/tinyexr.h	/^  EXRAttribute *custom_attributes;  \/\/ array of EXRAttribute. size =$/;"	m	struct:_EXRHeader
custom_cursor	support/GLFW/src/mir_platform.h	/^    MirBufferStream*        custom_cursor;$/;"	m	struct:_GLFWcursorMir
cutoff_color	cuda/MaterialData.h	/^        float3 cutoff_color;$/;"	m	struct:MaterialData::Glass
cx	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
cx1	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
cy	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
cy1	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
d_buffer	optixVolumeViewer/optixVolumeViewer.h	/^	CUdeviceptr            d_buffer = 0;$/;"	m	struct:VolumeAccel
d_buffer	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr            d_buffer        = 0;$/;"	m	struct:IAS
d_buffer	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr            d_buffer = 0;$/;"	m	struct:CubeAccel
d_buffer	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr            d_buffer = 0;$/;"	m	struct:PlaneAccel
d_data	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<>             d_data;$/;"	m	struct:AS	file:
d_deforming_gas_output_buffer	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_deforming_gas_output_buffer;$/;"	m	struct:DynamicGeometryState	file:
d_deforming_gas_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_deforming_gas_output_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_dmmArrayData	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^        CuBuffer<>                              d_dmmArrayData;$/;"	m	struct:MeshData::DmmArray	file:
d_exploding_gas_output_buffer	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_exploding_gas_output_buffer;$/;"	m	struct:DynamicGeometryState	file:
d_exploding_gas_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr             d_exploding_gas_output_buffer = 0;$/;"	m	class:ExhaustFume	file:
d_gas_output	sutil/Scene.h	/^        CUdeviceptr                       d_gas_output = 0;$/;"	m	struct:sutil::Scene::MeshGroup
d_gas_output_buffer	optixBoundValues/optixBoundValues.cpp	/^    CUdeviceptr                    d_gas_output_buffer      = 0;  \/\/ Triangle AS memory$/;"	m	struct:PathTracerState	file:
d_gas_output_buffer	optixCallablePrograms/optixCallablePrograms.cpp	/^    CUdeviceptr                 d_gas_output_buffer      = 0;$/;"	m	struct:CallableProgramsState	file:
d_gas_output_buffer	optixConsole/optixConsole.cpp	/^    CUdeviceptr            d_gas_output_buffer = {};$/;"	m	struct:OptixConsoleState	file:
d_gas_output_buffer	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    CUdeviceptr                    d_gas_output_buffer      = 0;$/;"	m	struct:SampleState	file:
d_gas_output_buffer	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    CUdeviceptr                    d_gas_output_buffer      = 0;  \/\/ Triangle AS memory$/;"	m	struct:PathTracerState	file:
d_gas_output_buffer	optixMultiGPU/optixMultiGPU.cpp	/^    CUdeviceptr                  d_gas_output_buffer      = 0;   \/\/ Triangle AS memory$/;"	m	struct:PathTracerState	file:
d_gas_output_buffer	optixNVLink/optixNVLink.cpp	/^    CUdeviceptr                  d_gas_output_buffer      = 0;   \/\/ Triangle AS memory$/;"	m	struct:PerDeviceSampleState	file:
d_gas_output_buffer	optixPathTracer/optixPathTracer.cpp	/^    CUdeviceptr                    d_gas_output_buffer      = 0;  \/\/ Triangle AS memory$/;"	m	struct:PathTracerState	file:
d_gas_output_buffer	optixWhitted/optixWhitted.cpp	/^    CUdeviceptr                 d_gas_output_buffer       = {};$/;"	m	struct:WhittedState	file:
d_ias_output_buffer	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_ias_output_buffer = 0;  \/\/ Instance AS memory$/;"	m	struct:CutoutsState	file:
d_ias_output_buffer	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_ias_output_buffer = 0;$/;"	m	struct:DynamicGeometryState	file:
d_ias_output_buffer	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    CUdeviceptr                    d_ias_output_buffer      = 0;$/;"	m	struct:SampleState	file:
d_ias_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_ias_output_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_ias_output_buffer	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    CUdeviceptr                  d_ias_output_buffer            = 0;   \/\/ Instance AS memory$/;"	m	struct:SimpleMotionBlurState	file:
d_indices	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr               d_indices            = 0;$/;"	m	struct:Cube
d_indices	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr               d_indices            = 0;$/;"	m	struct:Plane
d_instances	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_instances = 0;$/;"	m	struct:DynamicGeometryState	file:
d_instances	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_instances = 0;$/;"	m	struct:MotionGeometryState	file:
d_instances	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr            d_instances     = 0;$/;"	m	struct:IAS
d_instances_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         d_instances_size = 0;$/;"	m	struct:MotionGeometryState	file:
d_matrices	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                d_matrices;$/;"	m	struct:DeformSphereAnimation	file:
d_omm_array	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_omm_array                  = 0; \/\/ OMM array for triangles, memory needs to be persistent over GAS build$/;"	m	struct:CutoutsState	file:
d_param	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    CUdeviceptr d_param;$/;"	m	struct:SampleState	file:
d_params	optixBoundValues/optixBoundValues.cpp	/^    Params*                        d_params;$/;"	m	struct:PathTracerState	file:
d_params	optixCallablePrograms/optixCallablePrograms.cpp	/^    whitted::LaunchParams*      d_params                 = 0;$/;"	m	struct:CallableProgramsState	file:
d_params	optixConsole/optixConsole.cpp	/^    whitted::LaunchParams* d_params = nullptr;$/;"	m	struct:OptixConsoleState	file:
d_params	optixCutouts/optixCutouts.cpp	/^    Params*  d_params = nullptr;$/;"	m	struct:CutoutsState	file:
d_params	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<Globals>              d_params;$/;"	m	struct:DisplacedMicromeshState	file:
d_params	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    Params*                        d_params;$/;"	m	struct:DynamicGeometryState	file:
d_params	optixMeshViewer/optixMeshViewer.cpp	/^whitted::LaunchParams*  d_params = nullptr;$/;"	v
d_params	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    Params*                        d_params;$/;"	m	struct:PathTracerState	file:
d_params	optixMotionGeometry/optixMotionGeometry.cpp	/^    Params*                        d_params;$/;"	m	struct:MotionGeometryState	file:
d_params	optixMultiGPU/optixMultiGPU.cpp	/^    Params*                      d_params;$/;"	m	struct:PathTracerState	file:
d_params	optixNVLink/optixNVLink.cpp	/^    Params*                      d_params;$/;"	m	struct:PerDeviceSampleState	file:
d_params	optixPathTracer/optixPathTracer.cpp	/^    Params*                        d_params;$/;"	m	struct:PathTracerState	file:
d_params	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    Params*                      d_params;$/;"	m	struct:SimpleMotionBlurState	file:
d_params	optixVolumeViewer/optixVolumeViewer.h	/^    LaunchParams* d_params = 0;$/;"	m	struct:Params
d_params	optixWhitted/optixWhitted.cpp	/^    whitted::LaunchParams*      d_params                  = nullptr;$/;"	m	struct:WhittedState	file:
d_planePropeller_gas_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_planePropeller_gas_output_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_plane_gas_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_plane_gas_output_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_positions	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr               d_positions              = 0;$/;"	m	struct:Cube
d_positions	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr               d_positions              = 0;$/;"	m	struct:Plane
d_sample_accum	optixMultiGPU/optixMultiGPU.cpp	/^    float4*                      d_sample_accum           = 0;$/;"	m	struct:PathTracerState	file:
d_sample_accum	optixNVLink/optixNVLink.cpp	/^    float4*                      d_sample_accum           = 0;$/;"	m	struct:PerDeviceSampleState	file:
d_sample_indices	optixMultiGPU/optixMultiGPU.cpp	/^    int2*                        d_sample_indices         = 0;$/;"	m	struct:PathTracerState	file:
d_sample_indices	optixNVLink/optixNVLink.cpp	/^    int2*                        d_sample_indices         = 0;$/;"	m	struct:PerDeviceSampleState	file:
d_sbtHit	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<HitGroupRecord> d_sbtHit;$/;"	m	struct:DisplacedMicromeshState	file:
d_sbtMs	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<MissRecord>     d_sbtMs;$/;"	m	struct:DisplacedMicromeshState	file:
d_sbtRg	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CuBuffer<RayGenRecord>   d_sbtRg;$/;"	m	struct:DisplacedMicromeshState	file:
d_sphere_gas_output_buffer	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_sphere_gas_output_buffer = 0;  \/\/ Sphere AS memory$/;"	m	struct:CutoutsState	file:
d_sphere_gas_output_buffer	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    CUdeviceptr                  d_sphere_gas_output_buffer     = 0;   \/\/ Sphere AS memory$/;"	m	struct:SimpleMotionBlurState	file:
d_sphere_motion_transform	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    CUdeviceptr                  d_sphere_motion_transform      = 0;$/;"	m	struct:SimpleMotionBlurState	file:
d_srt	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr             d_srt = 0;$/;"	m	class:ExhaustFume	file:
d_srts	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr             d_srts;$/;"	m	struct:PlaneAnimation	file:
d_srtsPropeller	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr             d_srtsPropeller;$/;"	m	struct:PlaneAnimation	file:
d_static_gas_output_buffer	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_static_gas_output_buffer;$/;"	m	struct:DynamicGeometryState	file:
d_static_gas_output_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_static_gas_output_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_temp_buffer	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_temp_buffer = 0;$/;"	m	struct:DynamicGeometryState	file:
d_temp_buffer	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_temp_buffer = 0;$/;"	m	struct:MotionGeometryState	file:
d_temp_vertices	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUdeviceptr                    d_temp_vertices = 0;$/;"	m	struct:DynamicGeometryState	file:
d_temp_vertices	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUdeviceptr                    d_temp_vertices[2] = {};$/;"	m	struct:MotionGeometryState	file:
d_tex_coords	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_tex_coords                 = 0;$/;"	m	struct:CutoutsState	file:
d_tex_coords	optixNVLink/optixNVLink.cpp	/^    CUdeviceptr                  d_tex_coords             = 0;$/;"	m	struct:PerDeviceSampleState	file:
d_tri_gas_output_buffer	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    CUdeviceptr                  d_tri_gas_output_buffer        = 0;   \/\/ Triangle AS memory$/;"	m	struct:SimpleMotionBlurState	file:
d_triangle_gas_output_buffer	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_triangle_gas_output_buffer = 0;  \/\/ Triangle AS memory$/;"	m	struct:CutoutsState	file:
d_update_buffer	optixVolumeViewer/optixVolumeViewer.h	/^    CUdeviceptr            d_update_buffer = 0;$/;"	m	struct:IAS
d_vertices	optixBoundValues/optixBoundValues.cpp	/^    CUdeviceptr                    d_vertices               = 0;$/;"	m	struct:PathTracerState	file:
d_vertices	optixCutouts/optixCutouts.cpp	/^    CUdeviceptr            d_vertices                   = 0;$/;"	m	struct:CutoutsState	file:
d_vertices	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    CUdeviceptr                    d_vertices               = 0;$/;"	m	struct:PathTracerState	file:
d_vertices	optixMultiGPU/optixMultiGPU.cpp	/^    CUdeviceptr                  d_vertices               = 0;$/;"	m	struct:PathTracerState	file:
d_vertices	optixNVLink/optixNVLink.cpp	/^    CUdeviceptr                  d_vertices               = 0;$/;"	m	struct:PerDeviceSampleState	file:
d_vertices	optixPathTracer/optixPathTracer.cpp	/^    CUdeviceptr                    d_vertices               = 0;$/;"	m	struct:PathTracerState	file:
d_volume	optixVolumeViewer/optixVolumeViewer.h	/^	CUdeviceptr d_volume = 0;$/;"	m	struct:Volume
data	optixBoundValues/optixBoundValues.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixCallablePrograms/optixCallablePrograms.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixCurves/optixCurves.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixCustomPrimitive/optixCustomPrimitive.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixCutouts/optixCutouts.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    uint8_t data[64];$/;"	m	struct:DisplacementBlock64MicroTris64B	file:
data	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixHair/ProgramGroups.cpp	/^const OptixProgramGroup* ProgramGroups::data() const$/;"	f	class:ProgramGroups
data	optixHello/optixHello.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixMotionGeometry/motionHelper.hpp	/^    const void* data() const { return m_data.get(); }$/;"	f	class:__anon4::MotionTransformArrayBase
data	optixMotionGeometry/motionHelper.hpp	/^    void*       data() { return m_data.get(); }$/;"	f	class:__anon4::MotionTransformArrayBase
data	optixMotionGeometry/optixMotionGeometry.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixMultiGPU/optixMultiGPU.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixNVLink/optixNVLink.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixOpacityMicromap/optixOpacityMicromap.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixPathTracer/optixPathTracer.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixRibbons/optixRibbons.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    T data;$/;"	m	struct:Record	file:
data	optixSphere/optixSphere.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixTriangle/optixTriangle.cpp	/^    T data;$/;"	m	struct:SbtRecord	file:
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ DataType* data() { return reinterpret_cast<DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ DataType* data() { return reinterpret_cast<DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ DataType* data() { return reinterpret_cast<DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ DataType* data() { return reinterpret_cast<DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ DataType* data() { return reinterpret_cast<DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const DataType* data() const { return reinterpret_cast<const DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const DataType* data() const { return reinterpret_cast<const DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const DataType* data() const { return reinterpret_cast<const DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const DataType* data() const { return reinterpret_cast<const DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
data	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const DataType* data() const { return reinterpret_cast<const DataType*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
data	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    const uint8_t* data() const { return mData; }$/;"	f	class:nanovdb::HostBuffer
data	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    uint8_t* data() { return mData; }$/;"	f	class:nanovdb::HostBuffer
data	support/imgui/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
data	support/imgui/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon64
data	support/tinygltf/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon99::__anon100
data	support/tinygltf/tiny_gltf.h	/^  std::vector<unsigned char> data;$/;"	m	struct:tinygltf::Buffer
data	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float* Aabb::data()$/;"	f	class:sutil::Aabb
data	sutil/Record.h	/^    T data;$/;"	m	struct:sutil::Record
data	sutil/sutil.h	/^    void* data =      nullptr;$/;"	m	struct:sutil::ImageBuffer
dataSize	support/GLFW/deps/vulkan/vulkan.h	/^    size_t                             dataSize;$/;"	m	struct:VkSpecializationInfo
data_type	support/tinyexr/tinyexr.h	/^  int data_type;      \/\/ data_type (unused)$/;"	m	struct:tinyexr::miniz::mz_stream_s
data_window	support/tinyexr/tinyexr.h	/^  int data_window[4];$/;"	m	struct:_EXRHeader
data_window	support/tinyexr/tinyexr.h	/^  int data_window[4];$/;"	m	struct:tinyexr::HeaderInfo
dc	support/GLFW/src/wgl_context.h	/^    HDC       dc;$/;"	m	struct:_GLFWcontextWGL
dc_index	optixCallablePrograms/optixCallablePrograms.cpp	/^unsigned int dc_index        = 0;$/;"	v
dc_index	optixCallablePrograms/optixCallablePrograms.h	/^    unsigned int dc_index;$/;"	m	struct:CallableProgramsHitGroupData
dc_pred	support/tinygltf/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon99::__anon100
dct_bfly32o	support/tinygltf/stb_image.h	2365;"	d
dct_bfly32o	support/tinygltf/stb_image.h	2499;"	d
dct_bfly32o	support/tinygltf/stb_image.h	2551;"	d
dct_bfly32o	support/tinygltf/stb_image.h	2709;"	d
dct_const	support/tinygltf/stb_image.h	2337;"	d
dct_const	support/tinygltf/stb_image.h	2494;"	d
dct_interleave16	support/tinygltf/stb_image.h	2382;"	d
dct_interleave16	support/tinygltf/stb_image.h	2501;"	d
dct_interleave8	support/tinygltf/stb_image.h	2376;"	d
dct_interleave8	support/tinygltf/stb_image.h	2500;"	d
dct_long_mac	support/tinygltf/stb_image.h	2532;"	d
dct_long_mac	support/tinygltf/stb_image.h	2705;"	d
dct_long_mul	support/tinygltf/stb_image.h	2528;"	d
dct_long_mul	support/tinygltf/stb_image.h	2704;"	d
dct_pass	support/tinygltf/stb_image.h	2387;"	d
dct_pass	support/tinygltf/stb_image.h	2502;"	d
dct_pass	support/tinygltf/stb_image.h	2559;"	d
dct_pass	support/tinygltf/stb_image.h	2710;"	d
dct_rot	support/tinygltf/stb_image.h	2341;"	d
dct_rot	support/tinygltf/stb_image.h	2495;"	d
dct_trn16	support/tinygltf/stb_image.h	2619;"	d
dct_trn16	support/tinygltf/stb_image.h	2641;"	d
dct_trn32	support/tinygltf/stb_image.h	2620;"	d
dct_trn32	support/tinygltf/stb_image.h	2642;"	d
dct_trn64	support/tinygltf/stb_image.h	2621;"	d
dct_trn64	support/tinygltf/stb_image.h	2643;"	d
dct_trn8_16	support/tinygltf/stb_image.h	2665;"	d
dct_trn8_16	support/tinygltf/stb_image.h	2700;"	d
dct_trn8_32	support/tinygltf/stb_image.h	2666;"	d
dct_trn8_32	support/tinygltf/stb_image.h	2701;"	d
dct_trn8_8	support/tinygltf/stb_image.h	2664;"	d
dct_trn8_8	support/tinygltf/stb_image.h	2699;"	d
dct_wadd	support/tinygltf/stb_image.h	2355;"	d
dct_wadd	support/tinygltf/stb_image.h	2497;"	d
dct_wadd	support/tinygltf/stb_image.h	2541;"	d
dct_wadd	support/tinygltf/stb_image.h	2707;"	d
dct_widen	support/tinygltf/stb_image.h	2350;"	d
dct_widen	support/tinygltf/stb_image.h	2496;"	d
dct_widen	support/tinygltf/stb_image.h	2536;"	d
dct_widen	support/tinygltf/stb_image.h	2706;"	d
dct_wsub	support/tinygltf/stb_image.h	2360;"	d
dct_wsub	support/tinygltf/stb_image.h	2498;"	d
dct_wsub	support/tinygltf/stb_image.h	2546;"	d
dct_wsub	support/tinygltf/stb_image.h	2708;"	d
debug	support/GLFW/src/internal.h	/^    GLFWbool            forward, debug, noerror;$/;"	m	struct:_GLFWcontext
debug	support/GLFW/src/internal.h	/^    GLFWbool      debug;$/;"	m	struct:_GLFWctxconfig
decCubeX	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void decCubeX()$/;"	f
decCubeZ	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void decCubeZ()$/;"	f
decimal_point	support/tinygltf/json.hpp	/^    const char decimal_point = '\\0';$/;"	m	class:nlohmann::detail::serializer
decimal_point_char	support/tinygltf/json.hpp	/^    const char decimal_point_char = '.';$/;"	m	class:nlohmann::detail::lexer
decltype	support/tinygltf/json.hpp	/^-> decltype($/;"	f	namespace:nlohmann::detail
decltype	support/tinygltf/json.hpp	/^-> decltype(j.template get<T>(), void())$/;"	f	namespace:nlohmann::detail
decltype	support/tinygltf/json.hpp	/^auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())$/;"	f	namespace:nlohmann::detail
decltype	support/tinygltf/json.hpp	/^auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())$/;"	f	namespace:nlohmann::detail
declval	support/tinygltf/json.hpp	/^    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))$/;"	f	class:nlohmann::basic_json
declval	support/tinygltf/json.hpp	/^    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))$/;"	f	class:nlohmann::basic_json
decodeUTF8	support/GLFW/src/x11_window.c	/^static unsigned int decodeUTF8(const char** s)$/;"	f	file:
decorated	support/GLFW/src/internal.h	/^    GLFWbool            decorated;$/;"	m	struct:_GLFWwindow
decorated	support/GLFW/src/internal.h	/^    GLFWbool      decorated;$/;"	m	struct:_GLFWwndconfig
decreaseOpacity	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void decreaseOpacity()$/;"	f
def_alloc_func	support/tinyexr/tinyexr.h	/^static void *def_alloc_func(void *opaque, size_t items, size_t size) {$/;"	f
def_free_func	support/tinyexr/tinyexr.h	/^static void def_free_func(void *opaque, void *address) {$/;"	f
defaultAlpha	optixHair/Hair.cpp	/^float Hair::defaultAlpha() const$/;"	f	class:Hair
defaultAlpha	optixHair/Hair.h	/^        float defaultAlpha;$/;"	m	struct:Hair::FileHeader
defaultColor	optixHair/Hair.cpp	/^float3 Hair::defaultColor() const$/;"	f	class:Hair
defaultColor	optixHair/Hair.h	/^        float3 defaultColor;$/;"	m	struct:Hair::FileHeader
defaultNumSegments	optixHair/Hair.h	/^        uint32_t defaultNumSegments;$/;"	m	struct:Hair::FileHeader
defaultNumberOfSegments	optixHair/Hair.cpp	/^uint32_t Hair::defaultNumberOfSegments() const$/;"	f	class:Hair
defaultPipelineCompileOptions	optixHair/optixHair.cpp	/^OptixPipelineCompileOptions defaultPipelineCompileOptions( HairState* pState )$/;"	f
defaultScene	support/tinygltf/tiny_gltf.h	/^  int defaultScene = -1;$/;"	m	class:tinygltf::Model
defaultThickness	optixHair/Hair.cpp	/^float Hair::defaultThickness() const$/;"	f	class:Hair
defaultThickness	optixHair/Hair.h	/^        float defaultThickness;$/;"	m	struct:Hair::FileHeader
default_conf	support/GLFW/src/mir_platform.h	/^    MirCursorConfiguration* default_conf;$/;"	m	struct:_GLFWlibraryMir
defineTextureOnDevice	optixNVLink/optixNVLink.cpp	/^cudaTextureObject_t defineTextureOnDevice( int device_idx, cudaArray_t tex_array, int tex_width, int tex_height )$/;"	f
deflate	support/tinyexr/tinyexr.h	1198;"	d
deflateBound	support/tinyexr/tinyexr.h	1200;"	d
deflateEnd	support/tinyexr/tinyexr.h	1199;"	d
deflateInit	support/tinyexr/tinyexr.h	1195;"	d
deflateInit2	support/tinyexr/tinyexr.h	1196;"	d
deflateReset	support/tinyexr/tinyexr.h	1197;"	d
deformSphere	optixMotionGeometry/optixMotionGeometry.cpp	/^} deformSphere;$/;"	v	typeref:struct:DeformSphereAnimation
deforming_gas_handle	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixTraversableHandle         deforming_gas_handle;$/;"	m	struct:DynamicGeometryState	file:
deforming_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         deforming_gas_handle;$/;"	m	struct:MotionGeometryState	file:
deforming_gas_output_buffer_size	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    size_t                         deforming_gas_output_buffer_size = 0;$/;"	m	struct:DynamicGeometryState	file:
deforming_gas_output_buffer_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         deforming_gas_output_buffer_size = 0;$/;"	m	struct:MotionGeometryState	file:
degrees	sutil/Trackball.cpp	/^float degrees(float radians)$/;"	f	namespace:sutil::__anon122
delay	support/tinygltf/stb_image.h	/^   int delay;$/;"	m	struct:__anon110
delegate	support/GLFW/src/cocoa_platform.h	/^    id                  delegate;$/;"	m	struct:_GLFWlibraryNS
delegate	support/GLFW/src/cocoa_platform.h	/^    id              delegate;$/;"	m	struct:_GLFWwindowNS
deleteNode	support/GLFW/src/mir_window.c	/^static void deleteNode(EventQueue* queue, EventNode* node)$/;"	f	file:
deletePBO	sutil/CUDAOutputBuffer.h	/^void CUDAOutputBuffer<PIXEL_FORMAT>::deletePBO()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
delete_length	support/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon82
delta	support/tinygltf/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon98
denom	support/GLFW/src/internal.h	/^    int                 numer, denom;$/;"	m	struct:_GLFWwindow
dependencyCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          dependencyCount;$/;"	m	struct:VkRenderPassCreateInfo
dependencyFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDependencyFlags       dependencyFlags;$/;"	m	struct:VkSubpassDependency
depth	cuda/whitted.h	/^    int    depth;$/;"	m	struct:whitted::PayloadRadiance
depth	optixPathTracer/optixPathTracer.h	/^    int          depth;$/;"	m	struct:RadiancePRD
depth	optixVolumeViewer/volume.h	/^    float  depth;$/;"	m	struct:PayloadRadiance
depth	support/GLFW/deps/vulkan/vulkan.h	/^    float       depth;$/;"	m	struct:VkClearDepthStencilValue
depth	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    depth;$/;"	m	struct:VkExtent3D
depth	support/tinygltf/stb_image.h	/^   int depth;$/;"	m	struct:__anon105
depthBiasClamp	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    depthBiasClamp;$/;"	m	struct:VkPhysicalDeviceFeatures
depthBiasClamp	support/GLFW/deps/vulkan/vulkan.h	/^    float                                      depthBiasClamp;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
depthBiasConstantFactor	support/GLFW/deps/vulkan/vulkan.h	/^    float                                      depthBiasConstantFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
depthBiasEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                   depthBiasEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
depthBiasSlopeFactor	support/GLFW/deps/vulkan/vulkan.h	/^    float                                      depthBiasSlopeFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
depthBits	support/GLFW/src/internal.h	/^    int         depthBits;$/;"	m	struct:_GLFWfbconfig
depthBounds	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    depthBounds;$/;"	m	struct:VkPhysicalDeviceFeatures
depthBoundsTestEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                  depthBoundsTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
depthClamp	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    depthClamp;$/;"	m	struct:VkPhysicalDeviceFeatures
depthClampEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                   depthClampEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
depthCompareOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkCompareOp                               depthCompareOp;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
depthFailOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkStencilOp    depthFailOp;$/;"	m	struct:VkStencilOpState
depthPitch	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    depthPitch;$/;"	m	struct:VkSubresourceLayout
depthStencil	support/GLFW/deps/vulkan/vulkan.h	/^    VkClearDepthStencilValue    depthStencil;$/;"	m	union:VkClearValue
depthTestEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                  depthTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
depthWriteEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                  depthWriteEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
dequant	support/tinygltf/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon99
dequeueEvent	support/GLFW/src/mir_window.c	/^static EventNode* dequeueEvent(EventQueue* queue)$/;"	f	file:
derivative_of_radius	cuda/curve.h	/^    __device__ __forceinline__ float derivative_of_radius( float u ) const$/;"	f	struct:CubicInterpolator
derivative_of_radius	cuda/curve.h	/^    __device__ __forceinline__ float derivative_of_radius( float u ) const$/;"	f	struct:LinearInterpolator
derivative_of_radius	cuda/curve.h	/^    __device__ __forceinline__ float derivative_of_radius( float u ) const$/;"	f	struct:QuadraticInterpolator
description	support/GLFW/deps/vulkan/vulkan.h	/^    char        description[VK_MAX_DESCRIPTION_SIZE];$/;"	m	struct:VkLayerProperties
descriptorCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         descriptorCount;$/;"	m	struct:VkWriteDescriptorSet
descriptorCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              descriptorCount;$/;"	m	struct:VkDescriptorSetLayoutBinding
descriptorCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t            descriptorCount;$/;"	m	struct:VkDescriptorPoolSize
descriptorCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           descriptorCount;$/;"	m	struct:VkCopyDescriptorSet
descriptorPool	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorPool                descriptorPool;$/;"	m	struct:VkDescriptorSetAllocateInfo
descriptorSetCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        descriptorSetCount;$/;"	m	struct:VkDescriptorSetAllocateInfo
descriptorType	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorType                 descriptorType;$/;"	m	struct:VkWriteDescriptorSet
descriptorType	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorType      descriptorType;$/;"	m	struct:VkDescriptorSetLayoutBinding
destroy	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    OptixResult destroy()$/;"	f	class:OptixUtilOpticalFlow
destroy	support/GLFW/src/internal.h	/^    _GLFWdestroycontextfun      destroy;$/;"	m	struct:_GLFWcontext
destroy	sutil/sutil.cpp	/^void ImageBuffer::destroy()$/;"	f	class:sutil::ImageBuffer
destroyContextEGL	support/GLFW/src/egl_context.c	/^static void destroyContextEGL(_GLFWwindow* window)$/;"	f	file:
destroyContextGLX	support/GLFW/src/glx_context.c	/^static void destroyContextGLX(_GLFWwindow* window)$/;"	f	file:
destroyContextWGL	support/GLFW/src/wgl_context.c	/^static void destroyContextWGL(_GLFWwindow* window)$/;"	f	file:
destroyOptixImage2D	optixOpticalFlow/optixOpticalFlow.cpp	/^static void destroyOptixImage2D( OptixImage2D& image )$/;"	f	file:
destroyTextures	optixNVLink/optixNVLink.cpp	/^void destroyTextures( std::vector<PerDeviceSampleState>& pd_states )$/;"	f
det	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Matrix<3,3>::det() const$/;"	f	class:sutil::Matrix
det	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Matrix<4,4>::det() const$/;"	f	class:sutil::Matrix
detail	support/tinygltf/json.hpp	/^namespace detail$/;"	n	namespace:nlohmann
detectEWMH	support/GLFW/src/x11_init.c	/^static void detectEWMH(void)$/;"	f	file:
detectable	support/GLFW/src/x11_platform.h	/^        GLFWbool    detectable;$/;"	m	struct:_GLFWlibraryX11::__anon21
detector	support/tinygltf/json.hpp	/^struct detector$/;"	s	namespace:nlohmann::detail
detector	support/tinygltf/json.hpp	/^struct detector<Default, void_t<Op<Args...>>, Op, Args...>$/;"	s	namespace:nlohmann::detail
determinant	optixMotionGeometry/motionHelper.hpp	/^    float determinant() const$/;"	f	struct:__anon4::Matrix3x4
device	support/GLFW/src/win32_joystick.c	/^    IDirectInputDevice8W*   device;$/;"	m	struct:_GLFWobjenumWin32	file:
device	support/GLFW/src/win32_joystick.h	/^    IDirectInputDevice8W*   device;$/;"	m	struct:_GLFWjoystickWin32
deviceBufferHairGAS	optixHair/optixHair.h	/^    CUdeviceptr            deviceBufferHairGAS = 0;$/;"	m	struct:HairState
deviceBufferIAS	optixHair/optixHair.h	/^    CUdeviceptr            deviceBufferIAS = 0;$/;"	m	struct:HairState
deviceCallback	support/GLFW/src/win32_joystick.c	/^static BOOL CALLBACK deviceCallback(const DIDEVICEINSTANCE* di, void* user)$/;"	f	file:
deviceDownload	optixVolumeViewer/nanovdb/util/GridHandle.h	/^inline typename std::enable_if<BufferTraits<U>::hasDeviceDual, void>::type GridHandle<BufferT>::deviceDownload(void* stream, bool sync)$/;"	f	class:nanovdb::GridHandle
deviceGrid	optixVolumeViewer/nanovdb/util/GridHandle.h	/^GridHandle<BufferT>::deviceGrid() const$/;"	f	class:nanovdb::GridHandle
deviceID	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                            deviceID;$/;"	m	struct:VkPhysicalDeviceProperties
deviceName	support/GLFW/deps/vulkan/vulkan.h	/^    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties
deviceObjectCallback	support/GLFW/src/win32_joystick.c	/^static BOOL CALLBACK deviceObjectCallback(const DIDEVICEOBJECTINSTANCEW* doi,$/;"	f	file:
deviceParams	optixHair/optixHair.h	/^    whitted::LaunchParams* deviceParams = nullptr;$/;"	m	struct:HairState
deviceRef	support/GLFW/src/cocoa_joystick.h	/^    IOHIDDeviceRef deviceRef;$/;"	m	struct:_GLFWjoystickNS
deviceType	support/GLFW/deps/vulkan/vulkan.h	/^    VkPhysicalDeviceType                deviceType;$/;"	m	struct:VkPhysicalDeviceProperties
deviceUpload	optixVolumeViewer/nanovdb/util/GridHandle.h	/^inline typename std::enable_if<BufferTraits<U>::hasDeviceDual, void>::type GridHandle<BufferT>::deviceUpload(void* stream, bool sync)$/;"	f	class:nanovdb::GridHandle
device_color_scale	optixNVLink/optixNVLink.h	/^    float        device_color_scale; \/\/ to turn on\/off multi-gpu pattern overlay$/;"	m	struct:Params
device_idx	optixMultiGPU/optixMultiGPU.cpp	/^    int32_t                      device_idx               = -1;$/;"	m	struct:PathTracerState	file:
device_idx	optixMultiGPU/optixMultiGPU.h	/^    unsigned int device_idx;$/;"	m	struct:Params
device_idx	optixNVLink/optixNVLink.cpp	/^    int32_t                      device_idx               = -1;$/;"	m	struct:PerDeviceSampleState	file:
device_idx	optixNVLink/optixNVLink.h	/^    unsigned int device_idx;$/;"	m	struct:Params
dics	support/GLFW/deps/mingw/dinput.h	/^	DICOLORSET		dics;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
dics	support/GLFW/deps/mingw/dinput.h	/^	DICOLORSET		dics;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
diff	support/tinygltf/json.hpp	/^    static basic_json diff(const basic_json& source, const basic_json& target,$/;"	f	class:nlohmann::basic_json
diffuse	optixMotionGeometry/tiny_obj_loader.h	/^  real_t diffuse[3];$/;"	m	struct:tinyobj::material_t
diffuse_color	optixBoundValues/optixBoundValues.h	/^    float3  diffuse_color;$/;"	m	struct:HitGroupData
diffuse_color	optixCutouts/optixCutouts.h	/^    float3   diffuse_color;$/;"	m	struct:CutoutsHitGroupData
diffuse_color	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3  diffuse_color;$/;"	m	struct:HitGroupData
diffuse_color	optixMultiGPU/optixMultiGPU.h	/^    float3  diffuse_color;$/;"	m	struct:HitGroupData
diffuse_color	optixNVLink/optixNVLink.h	/^    float3  diffuse_color;$/;"	m	struct:HitGroupData
diffuse_color	optixPathTracer/optixPathTracer.h	/^    float3  diffuse_color;$/;"	m	struct:HitGroupData
diffuse_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string diffuse_texname;             \/\/ map_Kd$/;"	m	struct:tinyobj::material_t
diffuse_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t diffuse_texopt;$/;"	m	struct:tinyobj::material_t
diffuse_texture	optixNVLink/optixNVLink.h	/^    cudaTextureObject_t diffuse_texture;$/;"	m	struct:HitGroupData
dim	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ static uint32_t dim() { return 1u; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode::ChildNodeType
dim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ CoordT dim() const { return this->empty() ? Coord(0) : this->max() - this->min() + Coord(1); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
dim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T dim() const { return this->empty() ? Vec3T(0) : this->max() - this->min(); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
dim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t dim() { return 1u << LOG2DIM; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
dim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t dim() { return 1u << TOTAL; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
dim	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ int dim() const { return mDim; }$/;"	f	class:nanovdb::HDDA
dinput8	support/GLFW/src/win32_platform.h	/^    } dinput8;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon13
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER	diph;$/;"	m	struct:DIPROPCALPOV
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER	diph;$/;"	m	struct:DIPROPDWORD
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER	diph;$/;"	m	struct:DIPROPRANGE
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER diph;$/;"	m	struct:DIPROPCAL
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER diph;$/;"	m	struct:DIPROPGUIDANDPATH
diph	support/GLFW/deps/mingw/dinput.h	/^	DIPROPHEADER diph;$/;"	m	struct:DIPROPPOINTER
diph	support/GLFW/deps/mingw/dinput.h	/^        DIPROPHEADER diph;$/;"	m	struct:DIPROPSTRING
diph	support/GLFW/deps/mingw/dinput.h	/^    DIPROPHEADER diph;$/;"	m	struct:DIPROPCPOINTS
dir	optixRaycasting/optixRaycastingKernels.h	/^    float3 dir;$/;"	m	struct:Ray
dir	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ const Vec3T& dir() const { return mDir; }$/;"	f	class:nanovdb::Ray
dirExists	sutil/sutil.cpp	/^static bool dirExists( const char* path )$/;"	f	namespace:sutil
direction	optixBoundValues/optixBoundValues.h	/^    float3       direction;$/;"	m	struct:RadiancePRD
direction	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       direction;$/;"	m	struct:RadiancePRD
direction	optixPathTracer/optixPathTracer.h	/^    float3       direction;$/;"	m	struct:RadiancePRD
direction	support/imgui/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge
direction	support/imgui/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge
direction	sutil/Camera.h	/^    SUTILAPI float3 direction() const { return normalize(m_lookat - m_eye); }$/;"	f	class:sutil::Camera
disableTemporalHints	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BOOL                      disableTemporalHints;            \/**< [in]: Temporal hints yield better accuracy flow vectors when running on successive frames of a continuous video (without major scene changes).$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
disabledCursorWindow	support/GLFW/src/cocoa_platform.h	/^    _GLFWwindow*        disabledCursorWindow;$/;"	m	struct:_GLFWlibraryNS
disabledCursorWindow	support/GLFW/src/win32_platform.h	/^    _GLFWwindow*        disabledCursorWindow;$/;"	m	struct:_GLFWlibraryWin32
disabledCursorWindow	support/GLFW/src/x11_platform.h	/^    _GLFWwindow*    disabledCursorWindow;$/;"	m	struct:_GLFWlibraryX11
discarded	support/tinygltf/json.hpp	/^    BasicJsonType discarded = BasicJsonType::value_t::discarded;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
discreteQueuePriorities	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              discreteQueuePriorities;$/;"	m	struct:VkPhysicalDeviceLimits
disparity	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint16_t                        disparity;    \/**< Horizontal displacement[in pixels] in 11.5 format. *\/$/;"	m	struct:_NV_OF_STEREO_DISPARITY
disparityRange	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_STEREO_DISPARITY_RANGE    disparityRange;                   \/**< [in]: Speicifies maximum disparity range. $/;"	m	struct:_NV_OF_INIT_PARAMS
displacementScale	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    float displacementScale = 1.0f;$/;"	m	struct:DisplacedMicromeshState	file:
displacement_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string displacement_texname;        \/\/ disp$/;"	m	struct:tinyobj::material_t
displacement_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t displacement_texopt;$/;"	m	struct:tinyobj::material_t
display	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void display( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
display	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayKHR                  display;$/;"	m	struct:VkDisplayPropertiesKHR
display	support/GLFW/deps/vulkan/vulkan.h	/^    struct wl_display*                display;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_display
display	support/GLFW/src/egl_context.h	/^    EGLDisplay      display;$/;"	m	struct:_GLFWlibraryEGL
display	support/GLFW/src/mir_platform.h	/^    MirEGLNativeDisplayType display;$/;"	m	struct:_GLFWlibraryMir
display	support/GLFW/src/wl_platform.h	/^    struct wl_display*              display;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_display
display	support/GLFW/src/wl_platform.h	/^    struct wl_display*          display;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_display
display	support/GLFW/src/x11_platform.h	/^    Display*        display;$/;"	m	struct:_GLFWlibraryX11
display	sutil/GLDisplay.cpp	/^void GLDisplay::display($/;"	f	class:sutil::GLDisplay
displayBufferWindow	sutil/sutil.cpp	/^void displayBufferWindow( const char* title, const ImageBuffer& buffer )$/;"	f	namespace:sutil
displayFPS	sutil/sutil.cpp	/^void displayFPS( unsigned int frame_count )$/;"	f	namespace:sutil
displayID	support/GLFW/src/cocoa_platform.h	/^    CGDirectDisplayID   displayID;$/;"	m	struct:_GLFWmonitorNS
displayMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayModeKHR                  displayMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
displayMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayModeKHR              displayMode;$/;"	m	struct:VkDisplayModePropertiesKHR
displayName	support/GLFW/deps/vulkan/vulkan.h	/^    const char*                   displayName;$/;"	m	struct:VkDisplayPropertiesKHR
displayName	support/GLFW/src/win32_platform.h	/^    WCHAR               displayName[32];$/;"	m	struct:_GLFWmonitorWin32
displaySpecializationInfo	optixBoundValues/optixBoundValues.cpp	/^void displaySpecializationInfo( GLFWwindow* window )$/;"	f
displaySpecializationInfo	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void displaySpecializationInfo( GLFWwindow* window )$/;"	f
displayStats	sutil/sutil.cpp	/^void displayStats( std::chrono::duration<double>& state_update_time,$/;"	f	namespace:sutil
displaySubframe	optixBoundValues/optixBoundValues.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixCallablePrograms/optixCallablePrograms.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixConsole/optixConsole.cpp	/^void displaySubframe( OptixConsoleState& state, std::ostream& output_stream )$/;"	f
displaySubframe	optixCutouts/optixCutouts.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixMeshViewer/optixMeshViewer.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixMotionGeometry/optixMotionGeometry.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixMultiGPU/optixMultiGPU.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixNVLink/optixNVLink.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixPathTracer/optixPathTracer.cpp	/^void displaySubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, sutil::GLDisplay& gl_display, GLFWwindow* window )$/;"	f
displaySubframe	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixVolumeViewer/optixVolumeViewer.cpp	/^void displaySubframe($/;"	f
displaySubframe	optixWhitted/optixWhitted.cpp	/^void displaySubframe($/;"	f
displayText	sutil/sutil.cpp	/^void displayText( const char* text, float x, float y )$/;"	f	namespace:sutil
displayUsage	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void displayUsage()$/;"	f
display_window	support/tinyexr/tinyexr.h	/^  int display_window[4];$/;"	m	struct:_EXRHeader
display_window	support/tinyexr/tinyexr.h	/^  int display_window[4];$/;"	m	struct:tinyexr::HeaderInfo
dissolve	optixMotionGeometry/tiny_obj_loader.h	/^  real_t dissolve;  \/\/ 1 == opaque; 0 == fully transparent$/;"	m	struct:tinyobj::material_t
distance	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::distance( const float3& x ) const$/;"	f	class:sutil::Aabb
distance2	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::distance2( const float3& x ) const$/;"	f	class:sutil::Aabb
diyfp	support/tinygltf/json.hpp	/^struct diyfp \/\/ f * 2^e$/;"	s	namespace:nlohmann::detail::dtoa_impl
dlib	support/tinygltf/tiny_gltf.h	/^namespace dlib {$/;"	n	namespace:tinygltf
dmmArray	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    } dmmArray;$/;"	m	struct:MeshData	typeref:struct:MeshData::DmmArray	file:
dmmSubdivisionLevel	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    int dmmSubdivisionLevel = 3;$/;"	m	struct:DisplacedMicromeshState	file:
dndu	cuda/LocalGeometry.h	/^        float3 dndu;$/;"	m	struct:LocalGeometry::Texcoord
dndv	cuda/LocalGeometry.h	/^        float3 dndv;$/;"	m	struct:LocalGeometry::Texcoord
done	optixBoundValues/optixBoundValues.h	/^    int          done;$/;"	m	struct:RadiancePRD
done	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    int          done;$/;"	m	struct:RadiancePRD
done	optixPathTracer/optixPathTracer.h	/^    int          done;$/;"	m	struct:RadiancePRD
done	support/GLFW/src/wl_monitor.c	/^static void done(void* data,$/;"	f	file:
done	support/GLFW/src/wl_platform.h	/^    GLFWbool                    done;$/;"	m	struct:_GLFWmonitorWayland
dot	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T dot(const Vec3T& v) const { return mVec[0] * v[0] + mVec[1] * v[1] + mVec[2] * v[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
dot	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T dot(const Vec4T& v) const { return mVec[0] * v[0] + mVec[1] * v[1] + mVec[2] * v[2] + mVec[3] * v[3]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
dot	sutil/Quaternion.h	/^inline float dot( const Quaternion& l, const Quaternion& r )$/;"	f	namespace:sutil
dot	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float dot(const float2& a, const float2& b)$/;"	f
dot	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float dot(const float3& a, const float3& b)$/;"	f
dot	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float dot(const float4& a, const float4& b)$/;"	f
doubleSided	cuda/MaterialData.h	/^    bool                 doubleSided     = false;$/;"	m	struct:MaterialData
doubleSided	support/tinygltf/tiny_gltf.h	/^  bool doubleSided;                    \/\/ default false;$/;"	m	struct:tinygltf::Material
doublebuffer	support/GLFW/src/internal.h	/^    GLFWbool    doublebuffer;$/;"	m	struct:_GLFWfbconfig
download	sutil/CuBuffer.h	/^    std::vector<T> download() const$/;"	f	class:CuBuffer
download	sutil/CuBuffer.h	/^    void download( T* data ) const$/;"	f	class:CuBuffer
downloadAsync	sutil/CuBuffer.h	/^    void downloadAsync( T* data, CUstream stream = 0 ) const$/;"	f	class:CuBuffer
downloadSub	sutil/CuBuffer.h	/^    void downloadSub( size_t count, size_t offset, T* data ) const$/;"	f	class:CuBuffer
downloadSubAsync	sutil/CuBuffer.h	/^    void downloadSubAsync( size_t count, size_t offset, T* data, CUstream stream = 0  ) const$/;"	f	class:CuBuffer
dp_cube_x	optixVolumeViewer/optixVolumeViewer.cpp	/^CUdeviceptr              dp_cube_x;    \/\/ cube's x-coordinate in the device-instance array$/;"	v
dp_cube_z	optixVolumeViewer/optixVolumeViewer.cpp	/^CUdeviceptr              dp_cube_z;    \/\/ cube's z-coordinate in the device-instance array$/;"	v
dp_opacities	optixVolumeViewer/optixVolumeViewer.cpp	/^std::vector<CUdeviceptr> dp_opacities; \/\/ the volume's opacity in the SBT (one for each ray-type)$/;"	v
dp_plane_y	optixVolumeViewer/optixVolumeViewer.cpp	/^CUdeviceptr              dp_plane_y;   \/\/ plane's y-coordinate in the device-instance array$/;"	v
dpdu	cuda/LocalGeometry.h	/^        float3 dpdu;$/;"	m	struct:LocalGeometry::Texcoord
dpdv	cuda/LocalGeometry.h	/^        float3 dpdv;$/;"	m	struct:LocalGeometry::Texcoord
dpy	support/GLFW/deps/vulkan/vulkan.h	/^    Display*                       dpy;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
dpy	support/GLFW/src/x11_platform.h	/^    Display*                    dpy;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
drawIndirectFirstInstance	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    drawIndirectFirstInstance;$/;"	m	struct:VkPhysicalDeviceFeatures
driverVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                            driverVersion;$/;"	m	struct:VkPhysicalDeviceProperties
drop	support/GLFW/src/internal.h	/^        GLFWdropfun             drop;$/;"	m	struct:_GLFWwindow::__anon8
dstAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags              dstAccessMask;$/;"	m	struct:VkImageMemoryBarrier
dstAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags           dstAccessMask;$/;"	m	struct:VkSubpassDependency
dstAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkBufferMemoryBarrier
dstAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkMemoryBarrier
dstAlphaBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendFactor            dstAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState
dstArrayElement	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         dstArrayElement;$/;"	m	struct:VkWriteDescriptorSet
dstArrayElement	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           dstArrayElement;$/;"	m	struct:VkCopyDescriptorSet
dstBinding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         dstBinding;$/;"	m	struct:VkWriteDescriptorSet
dstBinding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           dstBinding;$/;"	m	struct:VkCopyDescriptorSet
dstColorBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendFactor            dstColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState
dstOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    dstOffset;$/;"	m	struct:VkBufferCopy
dstOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageCopy
dstOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageResolve
dstOffsets	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  dstOffsets[2];$/;"	m	struct:VkImageBlit
dstQueueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                   dstQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier
dstQueueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           dstQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier
dstRect	support/GLFW/deps/vulkan/vulkan.h	/^    VkRect2D           dstRect;$/;"	m	struct:VkDisplayPresentInfoKHR
dstSet	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorSet                  dstSet;$/;"	m	struct:VkWriteDescriptorSet
dstSet	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorSet    dstSet;$/;"	m	struct:VkCopyDescriptorSet
dstStageMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineStageFlags    dstStageMask;$/;"	m	struct:VkSubpassDependency
dstSubpass	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                dstSubpass;$/;"	m	struct:VkSubpassDependency
dstSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageBlit
dstSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageCopy
dstSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageResolve
dtoa_impl	support/tinygltf/json.hpp	/^namespace dtoa_impl$/;"	n	namespace:nlohmann::detail
dualSrcBlend	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    dualSrcBlend;$/;"	m	struct:VkPhysicalDeviceFeatures
dummy	optixMotionGeometry/tiny_obj_loader.h	/^  int dummy;  \/\/ Suppress padding warning.$/;"	m	struct:tinyobj::material_t
dump	support/tinygltf/json.hpp	/^    string_t dump(const int indent = -1,$/;"	f	class:nlohmann::basic_json
dump	support/tinygltf/json.hpp	/^    void dump(const BasicJsonType& val, const bool pretty_print,$/;"	f	class:nlohmann::detail::serializer
dump_escaped	support/tinygltf/json.hpp	/^    void dump_escaped(const string_t& s, const bool ensure_ascii)$/;"	f	class:nlohmann::detail::serializer
dump_float	support/tinygltf/json.hpp	/^    void dump_float(number_float_t x)$/;"	f	class:nlohmann::detail::serializer
dump_float	support/tinygltf/json.hpp	/^    void dump_float(number_float_t x, std::false_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer
dump_float	support/tinygltf/json.hpp	/^    void dump_float(number_float_t x, std::true_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer
dump_integer	support/tinygltf/json.hpp	/^    void dump_integer(NumberType x)$/;"	f	class:nlohmann::detail::serializer
dwActionSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwActionSize;$/;"	m	struct:_DIACTIONFORMATA
dwActionSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwActionSize;$/;"	m	struct:_DIACTIONFORMATW
dwAttackLevel	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwAttackLevel;$/;"	m	struct:DIENVELOPE
dwAttackTime	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwAttackTime;$/;"	m	struct:DIENVELOPE
dwAxes	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwAxes;$/;"	m	struct:DIDEVCAPS
dwAxes	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwAxes;$/;"	m	struct:DIDEVCAPS_DX3
dwBufferSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwBufferSize;$/;"	m	struct:_DIACTIONFORMATA
dwBufferSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwBufferSize;$/;"	m	struct:_DIACTIONFORMATW
dwBufferSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwBufferSize;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwBufferSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwBufferSize;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwBufferUsed	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwBufferUsed;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwBufferUsed	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwBufferUsed;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwButtons	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwButtons;$/;"	m	struct:DIDEVCAPS
dwButtons	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwButtons;$/;"	m	struct:DIDEVCAPS_DX3
dwCPointsNum	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwCPointsNum;$/;"	m	struct:DIPROPCPOINTS
dwCRC	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwCRC;$/;"	m	struct:_DIACTIONFORMATA
dwCRC	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwCRC;$/;"	m	struct:_DIACTIONFORMATW
dwCommand	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwCommand;$/;"	m	struct:DIEFFESCAPE
dwData	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwData;$/;"	m	struct:DIPROPDWORD
dwData	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwData;$/;"	m	struct:DIDEVICEOBJECTDATA
dwData	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwData;$/;"	m	struct:DIDEVICEOBJECTDATA_DX3
dwDataSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwDataSize;$/;"	m	struct:_DIACTIONFORMATA
dwDataSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwDataSize;$/;"	m	struct:_DIACTIONFORMATW
dwDataSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD			dwDataSize;$/;"	m	struct:_DIDATAFORMAT
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDevType;$/;"	m	struct:DIDEVCAPS
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDevType;$/;"	m	struct:DIDEVCAPS_DX3
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDevType;$/;"	m	struct:DIDEVICEINSTANCEA
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDevType;$/;"	m	struct:DIDEVICEINSTANCEW
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwDevType;$/;"	m	struct:DIDEVICEINSTANCE_DX3A
dwDevType	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwDevType;$/;"	m	struct:DIDEVICEINSTANCE_DX3W
dwDimension	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDimension;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwDimension	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwDimension;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwDuration	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwDuration;$/;"	m	struct:DIEFFECT
dwDuration	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwDuration;$/;"	m	struct:DIEFFECT_DX5
dwDynamicParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwDynamicParams;$/;"	m	struct:DIEFFECTINFOA
dwDynamicParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwDynamicParams;$/;"	m	struct:DIEFFECTINFOW
dwEffType	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwEffType;$/;"	m	struct:DIEFFECTINFOA
dwEffType	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwEffType;$/;"	m	struct:DIEFFECTINFOW
dwFFDriverVersion	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFDriverVersion;$/;"	m	struct:DIDEVCAPS
dwFFForceResolution	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFForceResolution;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwFFForceResolution	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFForceResolution;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwFFMaxForce	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFMaxForce;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwFFMaxForce	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFMaxForce;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwFFMinTimeResolution	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFMinTimeResolution;$/;"	m	struct:DIDEVCAPS
dwFFSamplePeriod	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFFSamplePeriod;$/;"	m	struct:DIDEVCAPS
dwFadeLevel	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwFadeLevel;$/;"	m	struct:DIENVELOPE
dwFadeTime	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwFadeTime;$/;"	m	struct:DIENVELOPE
dwFirmwareRevision	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFirmwareRevision;$/;"	m	struct:DIDEVCAPS
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwFlags;$/;"	m	struct:DIEFFECT
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwFlags;$/;"	m	struct:DIEFFECT_DX5
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwFlags;$/;"	m	struct:_DIACTIONA
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwFlags;$/;"	m	struct:_DIACTIONW
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwFlags;$/;"	m	struct:_DIDEVICEIMAGEINFOA
dwFlags	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwFlags;$/;"	m	struct:_DIDEVICEIMAGEINFOW
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD			dwFlags;$/;"	m	struct:_DIDATAFORMAT
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFlags;$/;"	m	struct:DIDEVCAPS
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFlags;$/;"	m	struct:DIDEVCAPS_DX3
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFlags;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFlags;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwFlags;$/;"	m	struct:_DIOBJECTDATAFORMAT
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwFlags;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
dwFlags	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwFlags;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
dwGain	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwGain;$/;"	m	struct:DIEFFECT
dwGain	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwGain;$/;"	m	struct:DIEFFECT_DX5
dwGenre	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwGenre;$/;"	m	struct:_DIACTIONFORMATA
dwGenre	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwGenre;$/;"	m	struct:_DIACTIONFORMATW
dwHardwareRevision	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwHardwareRevision;$/;"	m	struct:DIDEVCAPS
dwHeaderSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwHeaderSize;$/;"	m	struct:DIPROPHEADER
dwHow	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwHow;$/;"	m	struct:_DIACTIONA
dwHow	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwHow;$/;"	m	struct:_DIACTIONW
dwHow	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwHow;$/;"	m	struct:DIPROPHEADER
dwLog	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwLog;$/;"	m	struct:_CPOINT
dwMagnitude	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwMagnitude;$/;"	m	struct:DIPERIODIC
dwNegativeSaturation	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwNegativeSaturation;$/;"	m	struct:DICONDITION
dwNumActions	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwNumActions;$/;"	m	struct:_DIACTIONFORMATA
dwNumActions	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwNumActions;$/;"	m	struct:_DIACTIONFORMATW
dwNumObjs	support/GLFW/deps/mingw/dinput.h	/^    DWORD			dwNumObjs;$/;"	m	struct:_DIDATAFORMAT
dwObj	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwObj;$/;"	m	struct:DIPROPHEADER
dwObjID	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwObjID;$/;"	m	struct:_DIACTIONA
dwObjID	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwObjID;$/;"	m	struct:_DIACTIONW
dwObjID	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwObjID;$/;"	m	struct:_DIDEVICEIMAGEINFOA
dwObjID	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwObjID;$/;"	m	struct:_DIDEVICEIMAGEINFOW
dwObjSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD			dwObjSize;$/;"	m	struct:_DIDATAFORMAT
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwOfs;$/;"	m	struct:DIDEVICEOBJECTDATA
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwOfs;$/;"	m	struct:DIDEVICEOBJECTDATA_DX3
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwOfs;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwOfs;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwOfs;$/;"	m	struct:_DIOBJECTDATAFORMAT
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwOfs;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
dwOfs	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwOfs;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
dwPOVs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwPOVs;$/;"	m	struct:DIDEVCAPS
dwPOVs	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwPOVs;$/;"	m	struct:DIDEVCAPS_DX3
dwPacketNumber	support/GLFW/deps/mingw/xinput.h	/^    DWORD dwPacketNumber;$/;"	m	struct:_XINPUT_STATE
dwPeriod	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwPeriod;$/;"	m	struct:DIPERIODIC
dwPhase	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwPhase;$/;"	m	struct:DIPERIODIC
dwPositiveSaturation	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwPositiveSaturation;$/;"	m	struct:DICONDITION
dwSamplePeriod	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSamplePeriod;$/;"	m	struct:DICUSTOMFORCE
dwSamplePeriod	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSamplePeriod;$/;"	m	struct:DIEFFECT
dwSamplePeriod	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSamplePeriod;$/;"	m	struct:DIEFFECT_DX5
dwSemantic	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwSemantic;$/;"	m	struct:_DIACTIONA
dwSemantic	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwSemantic;$/;"	m	struct:_DIACTIONW
dwSequence	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSequence;$/;"	m	struct:DIDEVICEOBJECTDATA
dwSequence	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSequence;$/;"	m	struct:DIDEVICEOBJECTDATA_DX3
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:DIEFFECT
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:DIEFFECTINFOA
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:DIEFFECTINFOW
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:DIEFFECT_DX5
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:DIENVELOPE
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwSize;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwSize;$/;"	m	struct:_DIACTIONFORMATA
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwSize;$/;"	m	struct:_DIACTIONFORMATW
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD		dwSize;$/;"	m	struct:_DICOLORSET
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwSize;$/;"	m	struct:DIEFFESCAPE
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwSize;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwSize	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwSize;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD			dwSize;$/;"	m	struct:_DIDATAFORMAT
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVCAPS
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVCAPS_DX3
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVICEINSTANCEA
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVICEINSTANCEW
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwSize;$/;"	m	struct:DIPROPHEADER
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwSize;$/;"	m	struct:DIDEVICEINSTANCE_DX3A
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwSize;$/;"	m	struct:DIDEVICEINSTANCE_DX3W
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwSize;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
dwSize	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwSize;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
dwSize	support/GLFW/deps/mingw/dinput.h	/^  DWORD       dwSize;$/;"	m	struct:DIFILEEFFECT
dwSizeImageInfo	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwSizeImageInfo;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwSizeImageInfo	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwSizeImageInfo;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwStartDelay	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwStartDelay;$/;"	m	struct:DIEFFECT
dwStaticParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwStaticParams;$/;"	m	struct:DIEFFECTINFOA
dwStaticParams	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwStaticParams;$/;"	m	struct:DIEFFECTINFOW
dwTextAlign	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwTextAlign;$/;"	m	struct:_DIDEVICEIMAGEINFOA
dwTextAlign	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwTextAlign;$/;"	m	struct:_DIDEVICEIMAGEINFOW
dwTimeStamp	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwTimeStamp;$/;"	m	struct:DIDEVICEOBJECTDATA
dwTimeStamp	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwTimeStamp;$/;"	m	struct:DIDEVICEOBJECTDATA_DX3
dwTriggerButton	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwTriggerButton;$/;"	m	struct:DIEFFECT
dwTriggerButton	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwTriggerButton;$/;"	m	struct:DIEFFECT_DX5
dwTriggerRepeatInterval	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwTriggerRepeatInterval;$/;"	m	struct:DIEFFECT
dwTriggerRepeatInterval	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwTriggerRepeatInterval;$/;"	m	struct:DIEFFECT_DX5
dwType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwType;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
dwType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwType;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
dwType	support/GLFW/deps/mingw/dinput.h	/^    DWORD	dwType;$/;"	m	struct:_DIOBJECTDATAFORMAT
dwType	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwType;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
dwType	support/GLFW/deps/mingw/dinput.h	/^    DWORD   dwType;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
dwViewID	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwViewID;$/;"	m	struct:_DIDEVICEIMAGEINFOA
dwViewID	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwViewID;$/;"	m	struct:_DIDEVICEIMAGEINFOW
dwcAxes	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcAxes;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwcAxes	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcAxes;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwcButtons	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcButtons;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwcButtons	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcButtons;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwcFormats	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwcFormats;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
dwcFormats	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwcFormats;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
dwcPOVs	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcPOVs;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwcPOVs	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcPOVs;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwcUsers	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwcUsers;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
dwcUsers	support/GLFW/deps/mingw/dinput.h	/^	DWORD			dwcUsers;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
dwcValidPts	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcValidPts;$/;"	m	struct:_DIDEVICEIMAGEINFOA
dwcValidPts	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcValidPts;$/;"	m	struct:_DIDEVICEIMAGEINFOW
dwcViews	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcViews;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
dwcViews	support/GLFW/deps/mingw/dinput.h	/^	DWORD	dwcViews;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
dwmapi	support/GLFW/src/win32_platform.h	/^    } dwmapi;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon16
dx	support/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
dynamicStateCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                             dynamicStateCount;$/;"	m	struct:VkPipelineDynamicStateCreateInfo
e	support/imgui/imgui.h	/^        const char* e;$/;"	m	struct:ImGuiTextFilter::TextRange
e	support/tinygltf/json.hpp	/^    constexpr diyfp(uint64_t f_, int e_) noexcept : f(f_), e(e_) {}$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp
e	support/tinygltf/json.hpp	/^    int e = 0;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp
e	support/tinygltf/json.hpp	/^    int e;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power
eflags	support/tinygltf/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon110
eglBindAPI	support/GLFW/src/egl_context.h	141;"	d
eglCreateContext	support/GLFW/src/egl_context.h	142;"	d
eglCreateWindowSurface	support/GLFW/src/egl_context.h	145;"	d
eglDestroyContext	support/GLFW/src/egl_context.h	144;"	d
eglDestroySurface	support/GLFW/src/egl_context.h	143;"	d
eglGetConfigAttrib	support/GLFW/src/egl_context.h	135;"	d
eglGetConfigs	support/GLFW/src/egl_context.h	136;"	d
eglGetDisplay	support/GLFW/src/egl_context.h	137;"	d
eglGetError	support/GLFW/src/egl_context.h	138;"	d
eglGetProcAddress	support/GLFW/src/egl_context.h	150;"	d
eglInitialize	support/GLFW/src/egl_context.h	139;"	d
eglMakeCurrent	support/GLFW/src/egl_context.h	146;"	d
eglQueryString	support/GLFW/src/egl_context.h	149;"	d
eglSwapBuffers	support/GLFW/src/egl_context.h	147;"	d
eglSwapInterval	support/GLFW/src/egl_context.h	148;"	d
eglTerminate	support/GLFW/src/egl_context.h	140;"	d
elapsed	optixCompileWithTasks/optixCompileWithTasks.cpp	/^    double elapsed() const$/;"	f	struct:Timer
emission	optixBoundValues/optixBoundValues.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission	optixCutouts/optixCutouts.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission	optixMotionGeometry/tiny_obj_loader.h	/^  real_t emission[3];$/;"	m	struct:tinyobj::material_t
emission	optixMultiGPU/optixMultiGPU.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission	optixNVLink/optixNVLink.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission	optixPathTracer/optixPathTracer.h	/^    float3 emission;$/;"	m	struct:ParallelogramLight
emission_color	optixBoundValues/optixBoundValues.h	/^    float3  emission_color;$/;"	m	struct:HitGroupData
emission_color	optixCutouts/optixCutouts.h	/^    float3   emission_color;$/;"	m	struct:CutoutsHitGroupData
emission_color	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3  emission_color;$/;"	m	struct:HitGroupData
emission_color	optixMultiGPU/optixMultiGPU.h	/^    float3  emission_color;$/;"	m	struct:HitGroupData
emission_color	optixNVLink/optixNVLink.h	/^    float3  emission_color;$/;"	m	struct:HitGroupData
emission_color	optixPathTracer/optixPathTracer.h	/^    float3  emission_color;$/;"	m	struct:HitGroupData
emissiveFactor	support/tinygltf/tiny_gltf.h	/^  std::vector<double> emissiveFactor;  \/\/ length 3. default [0, 0, 0]$/;"	m	struct:tinygltf::Material
emissiveTexture	support/tinygltf/tiny_gltf.h	/^  TextureInfo emissiveTexture;$/;"	m	struct:tinygltf::Material
emissive_factor	cuda/MaterialData.h	/^    float3               emissive_factor = { 0.f, 0.f, 0.f };$/;"	m	struct:MaterialData
emissive_tex	cuda/MaterialData.h	/^    Texture              emissive_tex    = { 0, 0 };$/;"	m	struct:MaterialData
emissive_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string emissive_texname;   \/\/ map_Ke$/;"	m	struct:tinyobj::material_t
emissive_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t emissive_texopt;$/;"	m	struct:tinyobj::material_t
emitted	optixBoundValues/optixBoundValues.h	/^    float3       emitted;$/;"	m	struct:RadiancePRD
emitted	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       emitted;$/;"	m	struct:RadiancePRD
emitted	optixPathTracer/optixPathTracer.h	/^    float3       emitted;$/;"	m	struct:RadiancePRD
emplace	support/tinygltf/json.hpp	/^    std::pair<iterator, bool> emplace(Args&& ... args)$/;"	f	class:nlohmann::basic_json
emplace_back	support/tinygltf/json.hpp	/^    void emplace_back(Args&& ... args)$/;"	f	class:nlohmann::basic_json
empty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool   empty() const { return mCoord[0][0] > mCoord[1][0] ||$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
empty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool  empty() const { return mCoord[0][0] >= mCoord[1][0] ||$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
empty	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:nanovdb::GridHandleBase
empty	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    bool empty() const { return mSize == 0; }$/;"	f	class:nanovdb::HostBuffer
empty	support/imgui/imgui.h	/^        bool            empty() const   { return b == e; }$/;"	f	struct:ImGuiTextFilter::TextRange
empty	support/imgui/imgui.h	/^    bool                empty()                 { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer
empty	support/imgui/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector
empty	sutil/CuBuffer.h	/^    bool   empty() const { return m_count == 0; }$/;"	f	class:CuBuffer
emptyEventQueue	support/GLFW/src/mir_window.c	/^static GLFWbool emptyEventQueue(EventQueue* queue)$/;"	f	file:
empty_str	support/tinygltf/json.hpp	/^    const std::string empty_str = "";$/;"	m	class:nlohmann::detail::iteration_proxy_value
enableAH	optixCutouts/optixCutouts.cpp	/^    bool enableAH   = true;$/;"	m	struct:CutoutsState	file:
enableDMMs	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    bool enableDMMs = true;$/;"	m	struct:DisplacedMicromeshState	file:
enableExternalHints	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BOOL                      enableExternalHints;              \/**< [in]: Set to 1 to enable external hints for optical flow session. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
enableOMMs	optixCutouts/optixCutouts.cpp	/^    bool enableOMMs = true;$/;"	m	struct:CutoutsState	file:
enableOutputCost	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BOOL                      enableOutputCost;                 \/**< [in]: Set to 1 to enable output cost calculation for optical flow session. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
enablePeerAccess	optixNVLink/optixNVLink.cpp	/^void enablePeerAccess( std::vector<PerDeviceSampleState>& pd_states )$/;"	f
enableRoi	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_BOOL                      enableRoi;                        \/**< [in]: Set to 1 to enable estimation of optical flow\/stereo for roi. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
enabledExtensionCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                           enabledExtensionCount;$/;"	m	struct:VkDeviceCreateInfo
enabledExtensionCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    enabledExtensionCount;$/;"	m	struct:VkInstanceCreateInfo
enabledLayerCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                           enabledLayerCount;$/;"	m	struct:VkDeviceCreateInfo
enabledLayerCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    enabledLayerCount;$/;"	m	struct:VkInstanceCreateInfo
end	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Vec3T end() const { return (*this)(mTimeSpan.t1); }$/;"	f	class:nanovdb::Ray
end	support/imgui/imgui.h	/^        const char*     end () const    { return e; }$/;"	f	struct:ImGuiTextFilter::TextRange
end	support/imgui/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }   \/\/ Buf is zero-terminated, so end() will point on the zero-terminator$/;"	f	struct:ImGuiTextBuffer
end	support/imgui/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector
end	support/imgui/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector
end	support/tinyexr/tinyexr.h	/^  unsigned short *end;$/;"	m	struct:tinyexr::PIZChannelData
end	support/tinygltf/json.hpp	/^        : input_adapter(std::begin(array), std::end(array)) {}$/;"	f	class:nlohmann::detail::input_adapter::std
endFrameImGui	sutil/sutil.cpp	/^void endFrameImGui()$/;"	f	namespace:sutil
end_array	support/tinygltf/json.hpp	/^        end_array,        \/\/\/< the character for array end `]`$/;"	m	class:nlohmann::detail::lexer::token_type
end_array	support/tinygltf/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_acceptor
end_array	support/tinygltf/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
end_array	support/tinygltf/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_dom_parser
end_object	support/tinygltf/json.hpp	/^        end_object,       \/\/\/< the character for object end `}`$/;"	m	class:nlohmann::detail::lexer::token_type
end_object	support/tinygltf/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_acceptor
end_object	support/tinygltf/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
end_object	support/tinygltf/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_dom_parser
end_of_input	support/tinygltf/json.hpp	/^        end_of_input,     \/\/\/< indicating the end of the input buffer$/;"	m	class:nlohmann::detail::lexer::token_type
end_value	support/tinygltf/json.hpp	/^    static constexpr difference_type end_value = begin_value + 1;$/;"	m	class:nlohmann::detail::primitive_iterator_t
engineVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           engineVersion;$/;"	m	struct:VkApplicationInfo
enlarge	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::enlarge( float amount )$/;"	f	class:sutil::Aabb
enqueueEvent	support/GLFW/src/mir_window.c	/^static void enqueueEvent(const MirEvent* event, _GLFWwindow* context)$/;"	f	file:
ensureMinimumSize	sutil/sutil.cpp	/^void ensureMinimumSize( int& w, int& h )$/;"	f	namespace:sutil
ensureMinimumSize	sutil/sutil.cpp	/^void ensureMinimumSize( unsigned& w, unsigned& h )$/;"	f	namespace:sutil
eob_run	support/tinygltf/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon99
eof	support/tinygltf/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon93
equal	support/imgui/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f
erase	support/imgui/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }$/;"	f	struct:ImVector
erase	support/imgui/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(T)); Size -= (int)count; return Data + off; }$/;"	f	struct:ImVector
erase	support/tinygltf/json.hpp	/^    IteratorType erase(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json
erase	support/tinygltf/json.hpp	/^    IteratorType erase(IteratorType pos)$/;"	f	class:nlohmann::basic_json
erase	support/tinygltf/json.hpp	/^    size_type erase(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json
erase	support/tinygltf/json.hpp	/^    void erase(const size_type idx)$/;"	f	class:nlohmann::basic_json
erase_unsorted	support/imgui/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(T)); Size--; return Data + off; }$/;"	f	struct:ImVector
errorBase	support/GLFW/src/glx_context.h	/^    int             errorBase;$/;"	m	struct:_GLFWlibraryGLX
errorBase	support/GLFW/src/x11_platform.h	/^        int         errorBase;$/;"	m	struct:_GLFWlibraryX11::__anon20
errorBase	support/GLFW/src/x11_platform.h	/^        int         errorBase;$/;"	m	struct:_GLFWlibraryX11::__anon21
errorBase	support/GLFW/src/x11_platform.h	/^        int         errorBase;$/;"	m	struct:_GLFWlibraryX11::__anon26
errorCallback	sutil/sutil.cpp	/^static void errorCallback( int error, const char* description )$/;"	f	namespace:sutil
errorCode	support/GLFW/src/x11_platform.h	/^    int             errorCode;$/;"	m	struct:_GLFWlibraryX11
errorHandler	support/GLFW/src/x11_init.c	/^static int errorHandler(Display *display, XErrorEvent* event)$/;"	f	file:
error_	optixMotionGeometry/tiny_obj_loader.h	/^  std::string error_;$/;"	m	class:tinyobj::ObjReader
error_handler	support/tinygltf/json.hpp	/^    const error_handler_t error_handler;$/;"	m	class:nlohmann::detail::serializer
error_handler_t	support/tinygltf/json.hpp	/^enum class error_handler_t$/;"	c	namespace:nlohmann::detail
error_message	support/tinygltf/json.hpp	/^    const char* error_message = "";$/;"	m	class:nlohmann::detail::lexer
errored	support/tinygltf/json.hpp	/^    bool errored = false;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
errored	support/tinygltf/json.hpp	/^    bool errored = false;$/;"	m	class:nlohmann::detail::json_sax_dom_parser
escape	support/tinygltf/json.hpp	/^    static std::string escape(std::string s)$/;"	f	class:nlohmann::json_pointer
event	support/GLFW/src/mir_window.c	/^    const MirEvent*        event;$/;"	m	struct:EventNode	file:
eventBase	support/GLFW/src/glx_context.h	/^    int             eventBase;$/;"	m	struct:_GLFWlibraryGLX
eventBase	support/GLFW/src/x11_platform.h	/^        int         eventBase;$/;"	m	struct:_GLFWlibraryX11::__anon20
eventBase	support/GLFW/src/x11_platform.h	/^        int         eventBase;$/;"	m	struct:_GLFWlibraryX11::__anon21
eventBase	support/GLFW/src/x11_platform.h	/^        int         eventBase;$/;"	m	struct:_GLFWlibraryX11::__anon26
eventSource	support/GLFW/src/cocoa_platform.h	/^    CGEventSourceRef    eventSource;$/;"	m	struct:_GLFWlibraryNS
event_cond	support/GLFW/src/mir_platform.h	/^    pthread_cond_t  event_cond;$/;"	m	struct:_GLFWlibraryMir
event_mutex	support/GLFW/src/mir_platform.h	/^    pthread_mutex_t event_mutex;$/;"	m	struct:_GLFWlibraryMir
event_queue	support/GLFW/src/mir_platform.h	/^    EventQueue* event_queue;$/;"	m	struct:_GLFWlibraryMir
exception	support/tinygltf/json.hpp	/^    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}$/;"	f	class:nlohmann::detail::exception
exception	support/tinygltf/json.hpp	/^class exception : public std::exception$/;"	c	namespace:nlohmann::detail
exception_message	support/tinygltf/json.hpp	/^    std::string exception_message(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader
exception_message	support/tinygltf/json.hpp	/^    std::string exception_message(const token_type expected, const std::string& context)$/;"	f	class:nlohmann::detail::parser
exec	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::exec()$/;"	f	class:OptiXDenoiser
executeTask	lib/CompileWithTasks.h	/^    void executeTask( OptixTask task, std::condition_variable& cv )$/;"	f	struct:optix::CompileWithTasks::OptixTaskExecutePool
executeTaskAndWait	lib/CompileWithTasks.h	/^    OptixResult executeTaskAndWait( OptixModule module, OptixTask firstTask )$/;"	f	struct:optix::CompileWithTasks::OptixTaskExecutePool
existingFilePath	sutil/sutil.cpp	/^static std::string existingFilePath( const char* directory, const char* relativeSubDir, const char* relativePath )$/;"	f	namespace:sutil
exp	cuda/helpers.h	/^__forceinline__ __device__ float3 exp( const float3& x )$/;"	f
expand	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void expand(const Vec3T& xyz)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
expanded	support/tinygltf/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon105
expf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 expf(const float2& v)$/;"	f
expf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 expf(const float3& v)$/;"	f
expf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 expf(const float4& v)$/;"	f
exploding_gas_handle	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixTraversableHandle         exploding_gas_handle;$/;"	m	struct:DynamicGeometryState	file:
exploding_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         exploding_gas_handle;$/;"	m	struct:MotionGeometryState	file:
exploding_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle  exploding_gas_handle          = 0;$/;"	m	class:ExhaustFume	file:
exploding_gas_output_buffer_size	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    size_t                         exploding_gas_output_buffer_size = 0;$/;"	m	struct:DynamicGeometryState	file:
exploding_gas_output_buffer_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         exploding_gas_output_buffer_size = 0;$/;"	m	struct:MotionGeometryState	file:
export2BSpline	cuda/curve.h	/^    __device__ __forceinline__ void export2BSpline( float4 bs[3] ) const$/;"	f	struct:QuadraticInterpolator
export2BSpline	cuda/curve.h	/^    __device__ __forceinline__ void export2BSpline( float4 bs[4] ) const$/;"	f	struct:CubicInterpolator
export2Bezier	cuda/curve.h	/^    __device__ __forceinline__ void export2Bezier(float4 bz[4]) const$/;"	f	struct:CubicInterpolator
export2Catrom	cuda/curve.h	/^    __device__ __forceinline__ void export2Catrom(float4 cr[4]) const$/;"	f	struct:CubicInterpolator
exportGroupsToShape	optixMotionGeometry/tiny_obj_loader.h	/^static bool exportGroupsToShape(shape_t *shape, const PrimGroup &prim_group,$/;"	f	namespace:tinyobj
exposure	support/GLFW/src/x11_platform.h	/^        int         exposure;$/;"	m	struct:_GLFWlibraryX11::__anon22
extensionCount	support/GLFW/src/internal.h	/^        uint32_t        extensionCount;$/;"	m	struct:_GLFWlibrary::__anon10
extensionName	support/GLFW/deps/vulkan/vulkan.h	/^    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkExtensionProperties
extensionName	support/GLFW/src/internal.h	/^    char            extensionName[256];$/;"	m	struct:VkExtensionProperties
extensionSupported	support/GLFW/src/internal.h	/^    _GLFWextensionsupportedfun  extensionSupported;$/;"	m	struct:_GLFWcontext
extensionSupportedEGL	support/GLFW/src/egl_context.c	/^static int extensionSupportedEGL(const char* extension)$/;"	f	file:
extensionSupportedGLX	support/GLFW/src/glx_context.c	/^static int extensionSupportedGLX(const char* extension)$/;"	f	file:
extensionSupportedWGL	support/GLFW/src/wgl_context.c	/^static int extensionSupportedWGL(const char* extension)$/;"	f	file:
extensions	support/GLFW/src/internal.h	/^        char**          extensions;$/;"	m	struct:_GLFWlibrary::__anon10
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	class:tinygltf::Model
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	class:tinygltf::Node
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Accessor
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Animation
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::AnimationChannel
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::AnimationSampler
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Asset
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Buffer
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::BufferView
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Camera
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Image
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Light
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Material
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Mesh
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::NormalTextureInfo
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::OcclusionTextureInfo
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::OrthographicCamera
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::PbrMetallicRoughness
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::PerspectiveCamera
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Primitive
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Sampler
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Scene
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Skin
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::SpotLight
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::Texture
extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap extensions;$/;"	m	struct:tinygltf::TextureInfo
extensionsLoaded	support/GLFW/src/wgl_context.h	/^    GLFWbool                            extensionsLoaded;$/;"	m	struct:_GLFWlibraryWGL
extensionsRequired	support/tinygltf/tiny_gltf.h	/^  std::vector<std::string> extensionsRequired;$/;"	m	class:tinygltf::Model
extensionsUsed	support/tinygltf/tiny_gltf.h	/^  std::vector<std::string> extensionsUsed;$/;"	m	class:tinygltf::Model
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	class:tinygltf::Model
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	class:tinygltf::Node
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Accessor
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Animation
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::AnimationChannel
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::AnimationSampler
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Asset
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Buffer
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::BufferView
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Camera
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Image
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Light
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Material
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Mesh
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::NormalTextureInfo
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::OcclusionTextureInfo
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::OrthographicCamera
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::PbrMetallicRoughness
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::PerspectiveCamera
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Primitive
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Sampler
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Scene
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Skin
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::SpotLight
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::Texture
extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extensions_json_string;$/;"	m	struct:tinygltf::TextureInfo
extent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D    extent;$/;"	m	struct:VkRect2D
extent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageCopy
extent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageResolve
extent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D                 extent;$/;"	m	struct:VkSparseImageMemoryBind
extent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D               extent;$/;"	m	struct:VkImageCreateInfo
extent	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::extent( int dim ) const$/;"	f	class:sutil::Aabb
extent	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float3 Aabb::extent() const$/;"	f	class:sutil::Aabb
externalHints	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFGPUBufferHandle             externalHints;                   \/**< [in]: It is an optional input, This field will be considered if client had set ::NV_OF_INIT_PARAMS::enableExternalHint flag.$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::array>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::boolean>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::number_float>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::number_integer>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::number_unsigned>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::object>$/;"	s	namespace:nlohmann::detail
external_constructor	support/tinygltf/json.hpp	/^struct external_constructor<value_t::string>$/;"	s	namespace:nlohmann::detail
extinction_constant	cuda/MaterialData.h	/^        float3 extinction_constant;$/;"	m	struct:MaterialData::Glass
extra	support/imgui/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' not 'width+2'$/;"	m	struct:stbrp_context
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	class:tinygltf::Model
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	class:tinygltf::Node
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Accessor
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Animation
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::AnimationChannel
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::AnimationSampler
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Asset
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Buffer
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::BufferView
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Camera
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Image
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Light
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Material
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Mesh
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::NormalTextureInfo
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::OcclusionTextureInfo
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::OrthographicCamera
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::PbrMetallicRoughness
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::PerspectiveCamera
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Primitive
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Sampler
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Scene
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Skin
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::SpotLight
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::Texture
extras	support/tinygltf/tiny_gltf.h	/^  Value extras;$/;"	m	struct:tinygltf::TextureInfo
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	class:tinygltf::Model
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	class:tinygltf::Node
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Accessor
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Animation
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::AnimationChannel
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::AnimationSampler
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Asset
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Buffer
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::BufferView
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Camera
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Image
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Light
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Material
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Mesh
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::NormalTextureInfo
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::OcclusionTextureInfo
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::OrthographicCamera
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::PbrMetallicRoughness
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::PerspectiveCamera
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Primitive
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Sampler
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Scene
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Skin
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::SpotLight
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::Texture
extras_json_string	support/tinygltf/tiny_gltf.h	/^  std::string extras_json_string;$/;"	m	struct:tinygltf::TextureInfo
extrema	optixVolumeViewer/nanovdb/NanoVDB.h	/^void Tree<RootT>::extrema(ValueType& min, ValueType& max) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
exts	support/glad/glad.c	/^static const char *exts = NULL;$/;"	v	file:
exts_i	support/glad/glad.c	/^static char **exts_i = NULL;$/;"	v	file:
ey	support/imgui/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge
eye	cuda/whitted.h	/^    float3                   eye;$/;"	m	struct:whitted::LaunchParams
eye	optixBoundValues/optixBoundValues.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixCutouts/optixCutouts.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Globals
eye	optixDynamicGeometry/optixDynamicGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
eye	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixMotionGeometry/optixMotionGeometry.h	/^    float3                 eye, U, V, W;$/;"	m	struct:Params
eye	optixMultiGPU/optixMultiGPU.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixNVLink/optixNVLink.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixPathTracer/optixPathTracer.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float3       eye;$/;"	m	struct:Params
eye	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ const Vec3T& eye() const { return mEye; }$/;"	f	class:nanovdb::Ray
eye	optixVolumeViewer/volume.h	/^    float3                   eye;$/;"	m	struct:LaunchParams
eye	sutil/Camera.h	/^    SUTILAPI const float3& eye() const { return m_eye; }$/;"	f	class:sutil::Camera
f	support/tinyexr/tinyexr.h	/^  float f;$/;"	m	union:tinyexr::FP32
f	support/tinygltf/json.hpp	/^    uint64_t f = 0;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp
f	support/tinygltf/json.hpp	/^    uint64_t f;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power
faceGroup	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<face_t> faceGroup;$/;"	m	struct:tinyobj::PrimGroup
face_t	optixMotionGeometry/tiny_obj_loader.h	/^  face_t() : smoothing_group_id(0), pad_(0) {}$/;"	f	struct:tinyobj::face_t
face_t	optixMotionGeometry/tiny_obj_loader.h	/^struct face_t {$/;"	s	namespace:tinyobj
faceforward	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 faceforward(const float2& n, const float2& i, const float2& nref)$/;"	f
faceforward	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 faceforward(const float3& n, const float3& i, const float3& nref)$/;"	f
faceforward	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 faceforward(const float4& n, const float4& i, const float4& nref)$/;"	f
failOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkStencilOp    failOp;$/;"	m	struct:VkStencilOpState
failed	sutil/PPMLoader.cpp	/^bool PPMLoader::failed() const$/;"	f	class:PPMLoader
fast	support/tinygltf/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon102
fast	support/tinygltf/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon98
fast_ac	support/tinygltf/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon99
fbsize	support/GLFW/src/internal.h	/^        GLFWframebuffersizefun  fbsize;$/;"	m	struct:_GLFWwindow::__anon8
fd	support/GLFW/src/linux_joystick.h	/^    int             fd;$/;"	m	struct:_GLFWjoystickLinux
fdselect	support/imgui/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo
fdx	support/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	support/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fileExists	sutil/sutil.cpp	/^static bool fileExists( const char* path )$/;"	f	namespace:sutil
fileExists	sutil/sutil.cpp	/^static bool fileExists( const std::string& path )$/;"	f	namespace:sutil
fileExtensionForLoading	sutil/sutil.cpp	/^static std::string fileExtensionForLoading()$/;"	f	namespace:sutil
fileInfo	optixHair/Hair.cpp	/^std::string Hair::fileInfo() const$/;"	f	class:Hair
fileInfo	optixHair/Hair.h	/^        char fileInfo[88];$/;"	m	struct:Hair::FileHeader
fileSize	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t    gridSize, fileSize, nameKey, voxelCount; \/\/ 4 * 8 = 32B.$/;"	m	struct:nanovdb::io::Codec::MetaData
file_input_adapter	support/tinygltf/json.hpp	/^class file_input_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
file_launch_frames	optixNVLink/optixNVLink.cpp	/^int32_t           file_launch_frames = 1;$/;"	v
fillHitGroupSBT	optixBoundValues/optixBoundValues.cpp	/^void fillHitGroupSBT( PathTracerState& state )$/;"	f
fillHitGroupSBT	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void fillHitGroupSBT( PathTracerState& state )$/;"	f
fillModeNonSolid	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    fillModeNonSolid;$/;"	m	struct:VkPhysicalDeviceFeatures
fillSBT	optixBoundValues/optixBoundValues.cpp	/^void fillSBT( PathTracerState& state )$/;"	f
fillSBT	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void fillSBT( PathTracerState& state )$/;"	f
fill_buffer	support/tinygltf/json.hpp	/^    static void fill_buffer(const WideStringType& str, size_t& current_wchar, std::array<std::char_traits<char>::int_type, 4>& utf8_bytes, size_t& utf8_bytes_index, size_t& utf8_bytes_filled)$/;"	f	struct:nlohmann::detail::wide_string_input_helper
fill_buffer	support/tinygltf/json.hpp	/^    void fill_buffer()$/;"	f	class:nlohmann::detail::wide_string_input_adapter
finalLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout                   finalLayout;$/;"	m	struct:VkAttachmentDescription
finalize	sutil/Scene.cpp	/^void Scene::finalize()$/;"	f	class:sutil::Scene
find	support/tinygltf/json.hpp	/^    const_iterator find(KeyT&& key) const$/;"	f	class:nlohmann::basic_json
find	support/tinygltf/json.hpp	/^    iterator find(KeyT&& key)$/;"	f	class:nlohmann::basic_json
findBlindDataForSemantic	optixVolumeViewer/nanovdb/NanoVDB.h	/^int Grid<TreeT>::findBlindDataForSemantic(GridBlindDataSemantic semantic) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
findFirstOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t findFirstOn() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
findNextOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t findNextOn(uint32_t start) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
findPeers	optixNVLink/optixNVLink.cpp	/^void findPeers( std::vector<PerDeviceSampleState>& pd_states, bool require_nvlink )$/;"	f
findPeersForDevice	optixNVLink/optixNVLink.cpp	/^void findPeersForDevice( std::vector<PerDeviceSampleState>& pd_states, int device_idx, bool require_nvlink )$/;"	f
findTile	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Tile* findTile(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
findValidPixelFormat	support/GLFW/src/mir_window.c	/^static MirPixelFormat findValidPixelFormat(void)$/;"	f	file:
findWindowByHandle	support/GLFW/src/x11_window.c	/^static _GLFWwindow* findWindowByHandle(Window handle)$/;"	f	file:
find_coreGL	support/GLFW/deps/glad.c	/^static void find_coreGL(void) {$/;"	f	file:
find_coreGL	support/glad/glad.c	/^static void find_coreGL(void) {$/;"	f	file:
find_extensionsGL	support/GLFW/deps/glad.c	/^static void find_extensionsGL(void) {$/;"	f	file:
find_extensionsGL	support/glad/glad.c	/^static int find_extensionsGL(void) {$/;"	f	file:
find_largest_pow10	support/tinygltf/json.hpp	/^inline int find_largest_pow10(const uint32_t n, uint32_t& pow10)$/;"	f	namespace:nlohmann::detail::dtoa_impl
finish	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::finish() $/;"	f	class:OptiXDenoiser
first	support/tinygltf/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon109
firstIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    firstIndex;$/;"	m	struct:VkDrawIndexedIndirectCommand
firstInstance	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndexedIndirectCommand
firstInstance	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndirectCommand
firstVertex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    firstVertex;$/;"	m	struct:VkDrawIndirectCommand
first_char	support/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon86
first_free	support/imgui/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap
first_row_filter	support/tinygltf/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
first_unicode_codepoint_in_range	support/imgui/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon68
first_x	support/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon78
first_y	support/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon78
firstcode	support/tinygltf/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon102
firstsymbol	support/tinygltf/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon102
fixIndex	optixMotionGeometry/tiny_obj_loader.h	/^static inline bool fixIndex(int idx, int n, int *ret) {$/;"	f	namespace:tinyobj
flag	support/GLFW/deps/getopt.h	/^  int* flag;$/;"	m	struct:option
flags	optixHair/Hair.h	/^        uint32_t flags;$/;"	m	struct:Hair::FileHeader
flags	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint8_t flags() const { return DataType::mFlags; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkAndroidSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkAttachmentDescriptionFlags    flags;$/;"	m	struct:VkAttachmentDescription
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkBufferCreateFlags    flags;$/;"	m	struct:VkBufferCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkBufferViewCreateFlags    flags;$/;"	m	struct:VkBufferViewCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkCommandBufferUsageFlags                flags;$/;"	m	struct:VkCommandBufferBeginInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkCommandPoolCreateFlags    flags;$/;"	m	struct:VkCommandPoolCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDebugReportFlagsEXT           flags;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorPoolCreateFlags    flags;$/;"	m	struct:VkDescriptorPoolCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorSetLayoutCreateFlags       flags;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceCreateFlags                flags;$/;"	m	struct:VkDeviceCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceQueueCreateFlags    flags;$/;"	m	struct:VkDeviceQueueCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayModeCreateFlagsKHR    flags;$/;"	m	struct:VkDisplayModeCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplaySurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkEventCreateFlags    flags;$/;"	m	struct:VkEventCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkFenceCreateFlags    flags;$/;"	m	struct:VkFenceCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkFramebufferCreateFlags    flags;$/;"	m	struct:VkFramebufferCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageCreateFlags       flags;$/;"	m	struct:VkImageCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageViewCreateFlags     flags;$/;"	m	struct:VkImageViewCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkInstanceCreateFlags       flags;$/;"	m	struct:VkInstanceCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkMemoryHeapFlags    flags;$/;"	m	struct:VkMemoryHeap
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkMirSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineCacheCreateFlags    flags;$/;"	m	struct:VkPipelineCacheCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineColorBlendStateCreateFlags          flags;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineCreateFlags                            flags;$/;"	m	struct:VkGraphicsPipelineCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineCreateFlags              flags;$/;"	m	struct:VkComputePipelineCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineDepthStencilStateCreateFlags    flags;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineDynamicStateCreateFlags    flags;$/;"	m	struct:VkPipelineDynamicStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineInputAssemblyStateCreateFlags    flags;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineLayoutCreateFlags     flags;$/;"	m	struct:VkPipelineLayoutCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineMultisampleStateCreateFlags    flags;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineRasterizationStateCreateFlags    flags;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateFlags    flags;$/;"	m	struct:VkPipelineShaderStageCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineTessellationStateCreateFlags    flags;$/;"	m	struct:VkPipelineTessellationStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineVertexInputStateCreateFlags       flags;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineViewportStateCreateFlags    flags;$/;"	m	struct:VkPipelineViewportStateCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueryPoolCreateFlags           flags;$/;"	m	struct:VkQueryPoolCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkRenderPassCreateFlags           flags;$/;"	m	struct:VkRenderPassCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSamplerCreateFlags    flags;$/;"	m	struct:VkSamplerCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSemaphoreCreateFlags    flags;$/;"	m	struct:VkSemaphoreCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkShaderModuleCreateFlags    flags;$/;"	m	struct:VkShaderModuleCreateInfo
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSparseImageFormatFlags    flags;$/;"	m	struct:VkSparseImageFormatProperties
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseImageMemoryBind
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseMemoryBind
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSubpassDescriptionFlags       flags;$/;"	m	struct:VkSubpassDescription
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkSwapchainCreateFlagsKHR        flags;$/;"	m	struct:VkSwapchainCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkWaylandSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkWin32SurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkXcbSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
flags	support/GLFW/deps/vulkan/vulkan.h	/^    VkXlibSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
flags	support/GLFW/src/mir_platform.h	/^    VkMirSurfaceCreateFlagsKHR  flags;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
flags	support/GLFW/src/win32_platform.h	/^    VkWin32SurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
flags	support/GLFW/src/wl_monitor.c	/^    uint32_t            flags;$/;"	m	struct:_GLFWvidmodeWayland	file:
flags	support/GLFW/src/wl_platform.h	/^    VkWaylandSurfaceCreateFlagsKHR  flags;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
flags	support/GLFW/src/x11_platform.h	/^    VkXcbSurfaceCreateFlagsKHR  flags;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
flags	support/GLFW/src/x11_platform.h	/^    VkXlibSurfaceCreateFlagsKHR flags;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
flags	support/tinygltf/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon110
flatten	support/tinygltf/json.hpp	/^    basic_json flatten() const$/;"	f	class:nlohmann::basic_json
flatten	support/tinygltf/json.hpp	/^    static void flatten(const std::string& reference_string,$/;"	f	class:nlohmann::json_pointer
float32	support/GLFW/deps/vulkan/vulkan.h	/^    float       float32[4];$/;"	m	union:VkClearColorValue
float3_as_args	cuda/helpers.h	136;"	d
floatM	sutil/Matrix.h	/^    typedef typename VectorDim<M>::VectorType  floatM; \/\/\/ A column of the matrix$/;"	t	class:sutil::Matrix
floatN	sutil/Matrix.h	/^    typedef typename VectorDim<N>::VectorType  floatN; \/\/\/ A row of the matrix$/;"	t	class:sutil::Matrix
floatValues	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> floatValues;$/;"	m	struct:tinyobj::tag_t
float_to_half_full	support/tinyexr/tinyexr.h	/^static FP16 float_to_half_full(FP32 f) {$/;"	f	namespace:tinyexr
floating	support/GLFW/src/internal.h	/^    GLFWbool            floating;$/;"	m	struct:_GLFWwindow
floating	support/GLFW/src/internal.h	/^    GLFWbool      floating;$/;"	m	struct:_GLFWwndconfig
floor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord floor() const { return Coord(Floor(mVec[0]), Floor(mVec[1]), Floor(mVec[2])); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
floor	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 floor(const float2& v)$/;"	f
floor	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 floor(const float3& v)$/;"	f
floor	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 floor(const float4& v)$/;"	f
flow	optixDenoiser/OptiXDenoiser.h	/^        float*    flow      = nullptr;$/;"	m	struct:OptiXDenoiser::Data
flowtrust	optixDenoiser/OptiXDenoiser.h	/^        float*    flowtrust = nullptr;$/;"	m	struct:OptiXDenoiser::Data
flowx	optixOpticalFlow/nvOpticalFlowCommon.h	/^    int16_t                         flowx;        \/**< x component of flow in S10.5 format *\/$/;"	m	struct:_NV_OF_FLOW_VECTOR
flowy	optixOpticalFlow/nvOpticalFlowCommon.h	/^    int16_t                         flowy;        \/**< y component of flow in S10.5 format *\/$/;"	m	struct:_NV_OF_FLOW_VECTOR
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fmaxf(const float2& a)$/;"	f
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fmaxf(const float3& a)$/;"	f
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fmaxf(const float4& a)$/;"	f
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 fmaxf(const float2& a, const float2& b)$/;"	f
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 fmaxf(const float3& a, const float3& b)$/;"	f
fmaxf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 fmaxf(const float4& a, const float4& b)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fminf(const float2& a)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fminf(const float3& a)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float fminf(const float4& a)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 fminf(const float2& a, const float2& b)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 fminf(const float3& a, const float3& b)$/;"	f
fminf	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 fminf(const float4& a, const float4& b)$/;"	f
focus	support/GLFW/src/internal.h	/^        GLFWwindowfocusfun      focus;$/;"	m	struct:_GLFWwindow::__anon8
focused	support/GLFW/src/internal.h	/^    GLFWbool      focused;$/;"	m	struct:_GLFWwndconfig
followPlane	optixMotionGeometry/optixMotionGeometry.cpp	/^    bool followPlane = false;$/;"	m	struct:MotionGeometryState	file:
font_size	support/imgui/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon68
fontdicts	support/imgui/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo
fontstart	support/imgui/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
foregroundLockTimeout	support/GLFW/src/win32_platform.h	/^    DWORD               foregroundLockTimeout;$/;"	m	struct:_GLFWlibraryWin32
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat                        format;$/;"	m	struct:VkAttachmentDescription
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkBufferViewCreateInfo
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkImageViewCreateInfo
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat                 format;$/;"	m	struct:VkImageCreateInfo
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat           format;$/;"	m	struct:VkSurfaceFormatKHR
format	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat    format;$/;"	m	struct:VkVertexInputAttributeDescription
formatProperties	support/GLFW/deps/vulkan/vulkan.h	/^    VkSparseImageFormatProperties    formatProperties;$/;"	m	struct:VkSparseImageMemoryRequirements
format_buffer	support/tinygltf/json.hpp	/^inline char* format_buffer(char* buf, int len, int decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl
forward	support/GLFW/src/internal.h	/^    GLFWbool            forward, debug, noerror;$/;"	m	struct:_GLFWcontext
forward	support/GLFW/src/internal.h	/^    GLFWbool      forward;$/;"	m	struct:_GLFWctxconfig
forwardLutFromBitmap	support/tinyexr/tinyexr.h	/^static unsigned short forwardLutFromBitmap($/;"	f	namespace:tinyexr
fovY	sutil/Camera.h	/^    SUTILAPI const float& fovY() const { return m_fovY; }$/;"	f	class:sutil::Camera
fragmentStoresAndAtomics	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    fragmentStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures
frame_buffer	cuda/whitted.h	/^    uchar4*                  frame_buffer;$/;"	m	struct:whitted::LaunchParams
frame_buffer	optixBoundValues/optixBoundValues.h	/^    uchar4*      frame_buffer;$/;"	m	struct:Params
frame_buffer	optixCutouts/optixCutouts.h	/^    uchar4*      frame_buffer;$/;"	m	struct:Params
frame_buffer	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    uchar4*                frame_buffer;$/;"	m	struct:Globals
frame_buffer	optixDynamicGeometry/optixDynamicGeometry.h	/^    uchar4*                frame_buffer;$/;"	m	struct:Params
frame_buffer	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    uchar4*      frame_buffer;$/;"	m	struct:Params
frame_buffer	optixMotionGeometry/optixMotionGeometry.h	/^    uchar4*                frame_buffer;$/;"	m	struct:Params
frame_buffer	optixPathTracer/optixPathTracer.h	/^    uchar4*      frame_buffer;$/;"	m	struct:Params
frame_buffer	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    uchar4*      frame_buffer;$/;"	m	struct:Params
frame_buffer	optixVolumeViewer/volume.h	/^    uchar4*                  frame_buffer;$/;"	m	struct:LaunchParams
framebuffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkFramebuffer                    framebuffer;$/;"	m	struct:VkCommandBufferInheritanceInfo
framebuffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkFramebuffer          framebuffer;$/;"	m	struct:VkRenderPassBeginInfo
framebuffer	support/GLFW/src/internal.h	/^        _GLFWfbconfig   framebuffer;$/;"	m	struct:_GLFWlibrary::__anon9
framebufferColorSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
framebufferDepthSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
framebufferNoAttachmentsSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
framebufferStencilSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
framework	support/GLFW/src/nsgl_context.h	/^    CFBundleRef     framework;$/;"	m	struct:_GLFWlibraryNSGL
free	sutil/CuBuffer.h	/^    void free()$/;"	f	class:CuBuffer
freeLibraries	support/GLFW/src/win32_init.c	/^static void freeLibraries(void)$/;"	f	file:
free_exts	support/glad/glad.c	/^static void free_exts(void) {$/;"	f	file:
free_func	support/tinyexr/tinyexr.h	1192;"	d
free_head	support/imgui/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context
frequency	support/GLFW/src/cocoa_platform.h	/^    uint64_t        frequency;$/;"	m	struct:_GLFWtimeNS
frequency	support/GLFW/src/posix_time.h	/^    uint64_t    frequency;$/;"	m	struct:_GLFWtimePOSIX
frequency	support/GLFW/src/win32_platform.h	/^    uint64_t            frequency;$/;"	m	struct:_GLFWtimeWin32
fresnel_exponent	cuda/MaterialData.h	/^        float  fresnel_exponent;$/;"	m	struct:MaterialData::Glass
fresnel_maximum	cuda/MaterialData.h	/^        float  fresnel_maximum;$/;"	m	struct:MaterialData::Glass
fresnel_minimum	cuda/MaterialData.h	/^        float  fresnel_minimum;$/;"	m	struct:MaterialData::Glass
fresnel_schlick	cuda/helpers.h	/^__forceinline__ __device__ float fresnel_schlick( const float cos_theta,$/;"	f
fresnel_schlick	cuda/helpers.h	/^__forceinline__ __device__ float3 fresnel_schlick( const float cos_theta, const float exponent, const float3& minimum, const float3& maximum )$/;"	f
fromBasis	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<4,4>  Matrix<4,4>::fromBasis( const float3& u, const float3& v, const float3& w, const float3& c )$/;"	f	class:sutil::Matrix
from_bson	support/tinygltf/json.hpp	/^    static basic_json from_bson(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json
from_bson	support/tinygltf/json.hpp	/^    static basic_json from_bson(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json
from_cbor	support/tinygltf/json.hpp	/^    static basic_json from_cbor(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json
from_cbor	support/tinygltf/json.hpp	/^    static basic_json from_cbor(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json
from_hex	support/tinygltf/tiny_gltf.h	/^inline unsigned char from_hex(unsigned char ch) {$/;"	f	namespace:tinygltf::dlib
from_json	support/tinygltf/json.hpp	/^constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;$/;"	m	namespace:nlohmann::__anon112
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, ConstructibleStringType& s)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, EnumType& e)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::pair<A1, A2>& p)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, std::valarray<T>& l)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)$/;"	f	namespace:nlohmann::detail
from_json	support/tinygltf/json.hpp	/^void from_json(const BasicJsonType& j, typename std::nullptr_t& n)$/;"	f	namespace:nlohmann::detail
from_json_array_impl	support/tinygltf/json.hpp	/^void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,$/;"	f	namespace:nlohmann::detail
from_json_array_impl	support/tinygltf/json.hpp	/^void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> \/*unused*\/)$/;"	f	namespace:nlohmann::detail
from_json_fn	support/tinygltf/json.hpp	/^struct from_json_fn$/;"	s	namespace:nlohmann::detail
from_json_tuple_impl	support/tinygltf/json.hpp	/^void from_json_tuple_impl(const BasicJsonType& j, Tuple& t, index_sequence<Idx...> \/*unused*\/)$/;"	f	namespace:nlohmann::detail
from_msgpack	support/tinygltf/json.hpp	/^    static basic_json from_msgpack(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json
from_msgpack	support/tinygltf/json.hpp	/^    static basic_json from_msgpack(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json
from_ubjson	support/tinygltf/json.hpp	/^    static basic_json from_ubjson(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json
from_ubjson	support/tinygltf/json.hpp	/^    static basic_json from_ubjson(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json
front	support/GLFW/deps/vulkan/vulkan.h	/^    VkStencilOpState                          front;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
front	support/imgui/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0]; }$/;"	f	struct:ImVector
front	support/imgui/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0]; }$/;"	f	struct:ImVector
front	support/tinygltf/json.hpp	/^    const_reference front() const$/;"	f	class:nlohmann::basic_json
front	support/tinygltf/json.hpp	/^    reference front()$/;"	f	class:nlohmann::basic_json
frontFace	support/GLFW/deps/vulkan/vulkan.h	/^    VkFrontFace                                frontFace;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
fs	support/tinygltf/tiny_gltf.h	/^  FsCallbacks fs = {$/;"	m	class:tinygltf::TinyGLTF
ftTimeStamp	support/GLFW/deps/mingw/dinput.h	/^	FILETIME	ftTimeStamp;$/;"	m	struct:_DIACTIONFORMATA
ftTimeStamp	support/GLFW/deps/mingw/dinput.h	/^	FILETIME	ftTimeStamp;$/;"	m	struct:_DIACTIONFORMATW
ftex	support/imgui/imstb_truetype.h	/^GLuint ftex;$/;"	v
fullDrawIndexUint32	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    fullDrawIndexUint32;$/;"	m	struct:VkPhysicalDeviceFeatures
fume	optixMotionGeometry/optixMotionGeometry.cpp	/^    std::vector<ExhaustFume>       fume;$/;"	m	struct:MotionGeometryState	file:
func	support/tinygltf/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon111
fx	support/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g	optixCustomPrimitive/optixCustomPrimitive.h	/^    float r, g, b;$/;"	m	struct:MissData
g	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:MissData
g	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:RayGenData
g	optixHello/optixHello.h	/^    float r,g,b;$/;"	m	struct:RayGenData
g	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:MissData
g	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:RayGenData
g	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:MissData
g	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:RayGenData
g	optixSphere/optixSphere.h	/^    float r, g, b;$/;"	m	struct:MissData
g	support/GLFW/deps/vulkan/vulkan.h	/^    VkComponentSwizzle    g;$/;"	m	struct:VkComponentMapping
g_AttribLocationColor	support/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_AttribLocationPosition	support/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_AttribLocationProjMtx	support/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;$/;"	v	file:
g_AttribLocationTex	support/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;$/;"	v	file:
g_AttribLocationUV	support/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_ClientApi	support/imgui/imgui_impl_glfw.cpp	/^static GlfwClientApi        g_ClientApi = GlfwClientApi_Unknown;$/;"	v	file:
g_ElementsHandle	support/imgui/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	file:
g_FontTexture	support/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	file:
g_FragHandle	support/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_GlslVersionString	support/imgui/imgui_impl_opengl3.cpp	/^static char         g_GlslVersionString[32] = "";$/;"	v	file:
g_MouseCursors	support/imgui/imgui_impl_glfw.cpp	/^static GLFWcursor*          g_MouseCursors[ImGuiMouseCursor_COUNT] = { 0 };$/;"	v	file:
g_MouseJustPressed	support/imgui/imgui_impl_glfw.cpp	/^static bool                 g_MouseJustPressed[5] = { false, false, false, false, false };$/;"	v	file:
g_PrevUserCallbackChar	support/imgui/imgui_impl_glfw.cpp	/^static GLFWcharfun          g_PrevUserCallbackChar = NULL;$/;"	v	file:
g_PrevUserCallbackKey	support/imgui/imgui_impl_glfw.cpp	/^static GLFWkeyfun           g_PrevUserCallbackKey = NULL;$/;"	v	file:
g_PrevUserCallbackMousebutton	support/imgui/imgui_impl_glfw.cpp	/^static GLFWmousebuttonfun   g_PrevUserCallbackMousebutton = NULL;$/;"	v	file:
g_PrevUserCallbackScroll	support/imgui/imgui_impl_glfw.cpp	/^static GLFWscrollfun        g_PrevUserCallbackScroll = NULL;$/;"	v	file:
g_ShaderHandle	support/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_Time	support/imgui/imgui_impl_glfw.cpp	/^static double               g_Time = 0.0;$/;"	v	file:
g_VboHandle	support/imgui/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	file:
g_VertHandle	support/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_Window	support/imgui/imgui_impl_glfw.cpp	/^static GLFWwindow*          g_Window = NULL;$/;"	v	file:
g_checkerboard_tex_coords	optixCutouts/optixCutouts.cpp	/^const std::array<float2, 2 * 3> g_checkerboard_tex_coords =$/;"	v
g_circle_tex_coords	optixCutouts/optixCutouts.cpp	/^const std::array<float2, 2 * 3> g_circle_tex_coords =$/;"	v
g_colors	optixDynamicMaterials/optixDynamicMaterials.cpp	/^const static std::array<float3, 3> g_colors =$/;"	v	file:
g_context	optixVolumeViewer/optixVolumeViewer.cpp	/^OptixDeviceContext g_context;$/;"	v
g_cube	optixVolumeViewer/optixVolumeViewer.cpp	/^Cube   g_cube = {};$/;"	v
g_cube_accel	optixVolumeViewer/optixVolumeViewer.cpp	/^CubeAccel   g_cube_accel  = {};$/;"	v
g_device_color_scale	optixNVLink/optixNVLink.cpp	/^float             g_device_color_scale = 1.0f;$/;"	v
g_device_tex_usage	optixNVLink/optixNVLink.cpp	/^std::vector<float> g_device_tex_usage;$/;"	v
g_diffuse_colors	optixBoundValues/optixBoundValues.cpp	/^const std::array<float3, MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixCutouts/optixCutouts.cpp	/^const std::array<float3, TRIANGLE_MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixDynamicGeometry/optixDynamicGeometry.cpp	/^const std::array<float3, INST_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^const std::array<float3, MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixMultiGPU/optixMultiGPU.cpp	/^const std::array<float3, MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixNVLink/optixNVLink.cpp	/^const std::array<float3, MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_colors	optixPathTracer/optixPathTracer.cpp	/^const std::array<float3, MAT_COUNT> g_diffuse_colors =$/;"	v
g_diffuse_texture_data	optixNVLink/optixNVLink.cpp	/^std::array<std::vector<cudaArray_t>, MAT_COUNT> g_diffuse_texture_data;$/;"	v
g_diffuse_textures	optixNVLink/optixNVLink.cpp	/^std::array<std::vector<cudaTextureObject_t>, MAT_COUNT> g_diffuse_textures;$/;"	v
g_emission_colors	optixBoundValues/optixBoundValues.cpp	/^const std::array<float3, MAT_COUNT> g_emission_colors =$/;"	v
g_emission_colors	optixCutouts/optixCutouts.cpp	/^const std::array<float3, TRIANGLE_MAT_COUNT> g_emission_colors =$/;"	v
g_emission_colors	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^const std::array<float3, MAT_COUNT> g_emission_colors =$/;"	v
g_emission_colors	optixMultiGPU/optixMultiGPU.cpp	/^const std::array<float3, MAT_COUNT> g_emission_colors =$/;"	v
g_emission_colors	optixNVLink/optixNVLink.cpp	/^const std::array<float3, MAT_COUNT> g_emission_colors =$/;"	v
g_emission_colors	optixPathTracer/optixPathTracer.cpp	/^const std::array<float3, MAT_COUNT> g_emission_colors =$/;"	v
g_exploding_gas_rebuild_frequency	optixDynamicGeometry/optixDynamicGeometry.cpp	/^const float g_exploding_gas_rebuild_frequency = 10.f;$/;"	v
g_exploding_gas_rebuild_frequency	optixMotionGeometry/optixMotionGeometry.cpp	/^const float g_exploding_gas_rebuild_frequency = 10.f;$/;"	v
g_hasDataChanged	optixDynamicMaterials/optixDynamicMaterials.cpp	/^bool             g_hasDataChanged = false;$/;"	v
g_hasOffsetChanged	optixDynamicMaterials/optixDynamicMaterials.cpp	/^bool             g_hasOffsetChanged = false;$/;"	v
g_hasSbtChanged	optixDynamicMaterials/optixDynamicMaterials.cpp	/^bool             g_hasSbtChanged = false;$/;"	v
g_instances	optixDynamicGeometry/optixDynamicGeometry.cpp	/^const std::array<Instance, INST_COUNT> g_instances =$/;"	v
g_make_diffuse_textures	optixNVLink/optixNVLink.cpp	/^std::array<int, MAT_COUNT> g_make_diffuse_textures = {0, 1, 1, 0};$/;"	v
g_mat_indices	optixBoundValues/optixBoundValues.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices = {{$/;"	v	file:
g_mat_indices	optixCutouts/optixCutouts.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices =$/;"	v	file:
g_mat_indices	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices = {{$/;"	v	file:
g_mat_indices	optixMultiGPU/optixMultiGPU.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices =$/;"	v	file:
g_mat_indices	optixNVLink/optixNVLink.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices =$/;"	v	file:
g_mat_indices	optixPathTracer/optixPathTracer.cpp	/^static std::array<uint32_t, TRIANGLE_COUNT> g_mat_indices = {{$/;"	v	file:
g_materialIndex_0	optixDynamicMaterials/optixDynamicMaterials.cpp	/^MaterialIndex<3> g_materialIndex_0;$/;"	v
g_materialIndex_1	optixDynamicMaterials/optixDynamicMaterials.cpp	/^MaterialIndex<2> g_materialIndex_1;$/;"	v
g_materialIndex_2	optixDynamicMaterials/optixDynamicMaterials.cpp	/^MaterialIndex<3> g_materialIndex_2;$/;"	v
g_nvmlLoaded	optixNVLink/optixNVLink.cpp	/^bool g_nvmlLoaded = false;$/;"	v
g_nvrtcLog	sutil/sutil.cpp	/^static std::string g_nvrtcLog;$/;"	m	namespace:sutil	file:
g_optimize_framebuffer	optixNVLink/optixNVLink.cpp	/^bool g_optimize_framebuffer = true;$/;"	v
g_outfile	optixNVLink/optixNVLink.cpp	/^std::string       g_outfile          = "";$/;"	v
g_peer_usage	optixNVLink/optixNVLink.cpp	/^int g_peer_usage = PEERS_NVLINK;$/;"	v
g_plane	optixVolumeViewer/optixVolumeViewer.cpp	/^Plane  g_plane  = {};$/;"	v
g_plane_accel	optixVolumeViewer/optixVolumeViewer.cpp	/^PlaneAccel  g_plane_accel  = {};$/;"	v
g_pool	optixCompileWithTasks/optixCompileWithTasks.cpp	/^OptixTaskExecutePool        g_pool;$/;"	v
g_share_textures	optixNVLink/optixNVLink.cpp	/^bool g_share_textures = true;$/;"	v
g_sourceCache	sutil/sutil.cpp	/^static SourceCache g_sourceCache;$/;"	m	namespace:sutil	file:
g_sphere	optixCallablePrograms/optixCallablePrograms.cpp	/^const GeometryData::Sphere g_sphere = {$/;"	v
g_sphere	optixConsole/optixConsole.cpp	/^const GeometryData::Sphere g_sphere = {$/;"	v
g_sphere	optixCutouts/optixCutouts.cpp	/^const GeometryData::Sphere g_sphere                = {410.0f, 90.0f, 110.0f, 90.0f};$/;"	v
g_sphere	optixWhitted/optixWhitted.cpp	/^const GeometryData::Sphere g_sphere = {$/;"	v
g_sphere_diffuse_color	optixCutouts/optixCutouts.cpp	/^const float3               g_sphere_diffuse_color  = {0.1f, 0.2f, 0.8f};$/;"	v
g_sphere_emission_color	optixCutouts/optixCutouts.cpp	/^const float3               g_sphere_emission_color = {0.0f};$/;"	v
g_sphere_shell	optixConsole/optixConsole.cpp	/^const GeometryData::SphereShell g_sphere_shell = {$/;"	v
g_sphere_shell	optixWhitted/optixWhitted.cpp	/^const GeometryData::SphereShell g_sphere_shell = {$/;"	v
g_tessellation_resolution	optixDynamicGeometry/optixDynamicGeometry.cpp	/^const int32_t g_tessellation_resolution = 128;$/;"	v
g_tessellation_resolution	optixMotionGeometry/optixMotionGeometry.cpp	/^const int32_t g_tessellation_resolution = 128;$/;"	v
g_tessellation_resolution_fume	optixMotionGeometry/optixMotionGeometry.cpp	/^const int32_t g_tessellation_resolution_fume = g_tessellation_resolution \/ 8;$/;"	v
g_tex_coords	optixCutouts/optixCutouts.cpp	/^const std::array<float2, TRIANGLE_COUNT* 3> g_tex_coords =$/;"	v
g_tex_coords	optixNVLink/optixNVLink.cpp	/^const static std::array<TexCoord, TRIANGLE_COUNT*3> g_tex_coords =$/;"	v	file:
g_uvs	optixOpacityMicromap/optixOpacityMicromap.cpp	/^constexpr float2 g_uvs[NUM_TRIS][3] = $/;"	v
g_vertices	optixBoundValues/optixBoundValues.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT* 3> g_vertices =$/;"	v	file:
g_vertices	optixCutouts/optixCutouts.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT*3> g_vertices =$/;"	v	file:
g_vertices	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT* 3> g_vertices =$/;"	v	file:
g_vertices	optixMultiGPU/optixMultiGPU.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT*3> g_vertices =$/;"	v	file:
g_vertices	optixNVLink/optixNVLink.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT*3> g_vertices =$/;"	v	file:
g_vertices	optixPathTracer/optixPathTracer.cpp	/^const static std::array<Vertex, TRIANGLE_COUNT* 3> g_vertices =$/;"	v	file:
g_volume	optixVolumeViewer/optixVolumeViewer.cpp	/^Volume g_volume = {};$/;"	v
g_volume_accel	optixVolumeViewer/optixVolumeViewer.cpp	/^VolumeAccel g_volume_accel = {};$/;"	v
gammaBroken	support/GLFW/src/x11_platform.h	/^        GLFWbool    gammaBroken;$/;"	m	struct:_GLFWlibraryX11::__anon20
gas	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    AS                  gas;$/;"	m	struct:MeshData	file:
gas_handle	optixBoundValues/optixBoundValues.cpp	/^    OptixTraversableHandle         gas_handle               = 0;  \/\/ Traversable handle for triangle AS$/;"	m	struct:PathTracerState	file:
gas_handle	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixTraversableHandle      gas_handle               = 0;$/;"	m	struct:CallableProgramsState	file:
gas_handle	optixConsole/optixConsole.cpp	/^    OptixTraversableHandle gas_handle          = {};$/;"	m	struct:OptixConsoleState	file:
gas_handle	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixTraversableHandle         gas_handle;$/;"	m	struct:SampleState	file:
gas_handle	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixTraversableHandle         gas_handle               = 0;  \/\/ Traversable handle for triangle AS$/;"	m	struct:PathTracerState	file:
gas_handle	optixMultiGPU/optixMultiGPU.cpp	/^    OptixTraversableHandle       gas_handle               = 0;   \/\/ Traversable handle for triangle AS$/;"	m	struct:PathTracerState	file:
gas_handle	optixNVLink/optixNVLink.cpp	/^    OptixTraversableHandle       gas_handle               = 0;   \/\/ Traversable handle for triangle AS$/;"	m	struct:PerDeviceSampleState	file:
gas_handle	optixPathTracer/optixPathTracer.cpp	/^    OptixTraversableHandle         gas_handle               = 0;  \/\/ Traversable handle for triangle AS$/;"	m	struct:PathTracerState	file:
gas_handle	optixWhitted/optixWhitted.cpp	/^    OptixTraversableHandle      gas_handle                = {};$/;"	m	struct:WhittedState	file:
gas_handle	sutil/Scene.h	/^        OptixTraversableHandle            gas_handle = 0;$/;"	m	struct:sutil::Scene::MeshGroup
gatherProgramGroups	optixHair/Hair.cpp	/^void Hair::gatherProgramGroups( HairProgramGroups* pProgramGroups ) const$/;"	f	class:Hair
gatherProgramGroups	optixHair/Head.cpp	/^void Head::gatherProgramGroups( HairProgramGroups* pProgramGroups ) const$/;"	f	class:Head
generator	support/tinygltf/tiny_gltf.h	/^  std::string generator;$/;"	m	struct:tinygltf::Asset
geomFlags	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    unsigned int                   geomFlags = OPTIX_GEOMETRY_FLAG_NONE;$/;"	m	struct:DisplacedMicromeshState	file:
geom_normal	optixRaycasting/optixRaycastingKernels.h	/^    float3 geom_normal;$/;"	m	struct:Hit
geometry	support/GLFW/src/wl_monitor.c	/^static void geometry(void* data,$/;"	f	file:
geometryIndex	optixDynamicMaterials/optixDynamicMaterials.h	/^    unsigned int geometryIndex;$/;"	m	struct:HitGroupData
geometryShader	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    geometryShader;$/;"	m	struct:VkPhysicalDeviceFeatures
geometry_data	cuda/whitted.h	/^    GeometryData geometry_data;$/;"	m	struct:whitted::HitGroupData
geometry_data	optixVolumeViewer/volume.h	/^    GeometryData geometry_data;$/;"	m	struct:HitGroupData
geometry_module	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixModule                 geometry_module          = 0;$/;"	m	struct:CallableProgramsState	file:
geometry_module	optixConsole/optixConsole.cpp	/^    OptixModule geometry_module = 0;$/;"	m	struct:OptixConsoleState	file:
geometry_module	optixWhitted/optixWhitted.cpp	/^    OptixModule                 geometry_module           = 0;$/;"	m	struct:WhittedState	file:
get	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ void get(RealT& _t0, RealT& _t1) const$/;"	f	struct:nanovdb::Ray::TimeSpan
get	support/tinygltf/json.hpp	/^    BasicJsonType get() const$/;"	f	class:nlohmann::basic_json
get	support/tinygltf/json.hpp	/^    basic_json get() const$/;"	f	class:nlohmann::basic_json
get	support/tinygltf/json.hpp	/^    int get()$/;"	f	class:nlohmann::detail::binary_reader
get	support/tinygltf/json.hpp	/^    std::char_traits<char>::int_type get()$/;"	f	class:nlohmann::detail::lexer
get	sutil/CuBuffer.h	/^    T* get( size_t index ) { return m_ptr + index; }$/;"	f	class:CuBuffer
get	sutil/CuBuffer.h	/^    T* get() { return m_ptr; }$/;"	f	class:CuBuffer
get	sutil/CuBuffer.h	/^    const T* get( size_t index ) const { return m_ptr + index; }$/;"	f	class:CuBuffer
get	sutil/CuBuffer.h	/^    const T* get() const { return m_ptr; }$/;"	f	class:CuBuffer
getAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ AccessorType getAccessor() const { return AccessorType(*this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
getAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ AccessorType getAccessor() const { return AccessorType(this->root()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getAccessor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ AccessorType getAccessor() const { return AccessorType(this->tree().root()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
getAsArray	sutil/CuBuffer.h	/^    const constTPtr* getAsArray() const { return &m_ptr; }$/;"	f	class:CuBuffer
getAsyncKeyMods	support/GLFW/src/win32_window.c	/^static int getAsyncKeyMods(void)$/;"	f	file:
getBits	support/tinyexr/tinyexr.h	/^inline long long getBits(int nBits, long long &c, int &lc, const char *&in) {$/;"	f	namespace:tinyexr
getBuffer	sutil/Scene.cpp	/^CUdeviceptr Scene::getBuffer( int32_t buffer_index ) const$/;"	f	class:sutil::Scene
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float getByIndex(const float2& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float getByIndex(const float3& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float getByIndex(const float4& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int getByIndex(const int1& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int getByIndex(const int2& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int getByIndex(const int3& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int getByIndex(const int4& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long getByIndex(const longlong1& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long getByIndex(const longlong2& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long getByIndex(const longlong3& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long getByIndex(const longlong4& v, int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int getByIndex(const uint1& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int getByIndex(const uint2& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int getByIndex(const uint3& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int getByIndex(const uint4& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long getByIndex(const ulonglong1& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long getByIndex(const ulonglong2& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long getByIndex(const ulonglong3& v, unsigned int i)$/;"	f
getByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long getByIndex(const ulonglong4& v, unsigned int i)$/;"	f
getCU	sutil/CuBuffer.h	/^    CUdeviceptr getCU( size_t index ) { return reinterpret_cast<CUdeviceptr>( m_ptr + index ); }$/;"	f	class:CuBuffer
getCU	sutil/CuBuffer.h	/^    CUdeviceptr getCU() { return reinterpret_cast<CUdeviceptr>( m_ptr ); }$/;"	f	class:CuBuffer
getCU	sutil/CuBuffer.h	/^    const CUdeviceptr getCU( size_t index ) const { return reinterpret_cast<const CUdeviceptr>( m_ptr + index ); }$/;"	f	class:CuBuffer
getCU	sutil/CuBuffer.h	/^    const CUdeviceptr getCU() const { return reinterpret_cast<const CUdeviceptr>( m_ptr ); }$/;"	f	class:CuBuffer
getCUAsArray	sutil/CuBuffer.h	/^    const CUdeviceptr* getCUAsArray() const { return reinterpret_cast<const CUdeviceptr*>( &m_ptr ); }$/;"	f	class:CuBuffer
getCatromCurveArray	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Curves& getCatromCurveArray() const$/;"	f	struct:GeometryData
getChar	support/tinyexr/tinyexr.h	8830;"	d
getCode	support/tinyexr/tinyexr.h	/^static bool getCode(int po, int rlc, long long &c, int &lc, const char *&in,$/;"	f	namespace:tinyexr
getCol	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE typename Matrix<M,N>::floatM Matrix<M,N>::getCol( unsigned int n )const$/;"	f	class:sutil::Matrix
getCuStringFromFile	sutil/sutil.cpp	/^static void getCuStringFromFile( std::string& cu, std::string& location, const char* sampleDir, const char* filename )$/;"	f	namespace:sutil
getCubicCurveArray	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Curves& getCubicCurveArray() const$/;"	f	struct:GeometryData
getCurveArray	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Curves& getCurveArray() const$/;"	f	struct:GeometryData
getData	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE const float* Matrix<M,N>::getData() const$/;"	f	class:sutil::Matrix
getData	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float* Matrix<M,N>::getData()$/;"	f	class:sutil::Matrix
getDeviceDescription	support/GLFW/src/win32_joystick.c	/^static const char* getDeviceDescription(const XINPUT_CAPABILITIES* xic)$/;"	f	file:
getDiffuseTextureObject	optixNVLink/optixNVLink.cpp	/^cudaTextureObject_t getDiffuseTextureObject( int material_id, PerDeviceSampleState& pd_state )$/;"	f
getDim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getDim(const CoordType& ijk, const RayT& ray) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
getDim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getDim(const CoordType& ijk, const RayT& ray) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
getDim	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getDim(const CoordType& ijk, const RayT& ray) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
getDimAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getDimAndCache(const CoordT&, const RayT& \/*ray*\/, const AccT&) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
getDimAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getDimAndCache(const CoordType& ijk, const RayT& ray, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
getEGLConfigAttrib	support/GLFW/src/egl_context.c	/^static int getEGLConfigAttrib(EGLConfig config, int attrib)$/;"	f	file:
getEGLErrorString	support/GLFW/src/egl_context.c	/^static const char* getEGLErrorString(EGLint error)$/;"	f	file:
getErrorString	support/GLFW/src/init.c	/^static const char* getErrorString(int error)$/;"	f	file:
getFrameFilename	optixDenoiser/optixDenoiser.cpp	/^static bool getFrameFilename( std::string& result, const std::string& filename, int frame )$/;"	f	file:
getFrameFilename	optixOpticalFlow/optixOpticalFlow.cpp	/^static bool getFrameFilename( std::string& result, const std::string& filename, int frame )$/;"	f	file:
getFullWindowSize	support/GLFW/src/win32_window.c	/^static void getFullWindowSize(DWORD style, DWORD exStyle,$/;"	f	file:
getGLErrorString	sutil/Exception.h	/^inline const char* getGLErrorString( GLenum error )$/;"	f	namespace:sutil
getGLUniformLocation	sutil/GLDisplay.cpp	/^GLint getGLUniformLocation( GLuint program, const std::string& name )$/;"	f	namespace:sutil::__anon124
getGLXFBConfigAttrib	support/GLFW/src/glx_context.c	/^static int getGLXFBConfigAttrib(GLXFBConfig fbconfig, int attrib)$/;"	f	file:
getGlInteropDeviceId	optixNVLink/optixNVLink.cpp	/^int getGlInteropDeviceId( int num_devices )$/;"	f
getHostPointer	sutil/CUDAOutputBuffer.h	/^PIXEL_FORMAT* CUDAOutputBuffer<PIXEL_FORMAT>::getHostPointer()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
getImage	sutil/Scene.cpp	/^cudaArray_t Scene::getImage( int32_t image_index ) const$/;"	f	class:sutil::Scene
getIndexedFilename	optixDynamicMaterials/optixDynamicMaterials.cpp	/^std::string getIndexedFilename( const std::string& name )$/;"	f
getInputData	sutil/sutil.cpp	/^const char* getInputData( const char*                     sample,$/;"	f	namespace:sutil
getInputDataFromFile	sutil/sutil.cpp	/^static void getInputDataFromFile( std::string& inputData, const char* sample_name, const char* filename )$/;"	f	namespace:sutil
getInputFromCuString	sutil/sutil.cpp	/^static void getInputFromCuString( std::string&                    input,$/;"	f	namespace:sutil
getInternalGuideLayerData	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::getInternalGuideLayerData( unsigned char** data, size_t* sizeInBytes )$/;"	f	class:OptiXDenoiser
getIslandDeviceWithLowestTextureUsage	optixNVLink/optixNVLink.cpp	/^int getIslandDeviceWithLowestTextureUsage( int island )$/;"	f
getKeyMods	support/GLFW/src/win32_window.c	/^static int getKeyMods(void)$/;"	f	file:
getLastError	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    std::string getLastError()$/;"	f	class:OptixUtilOpticalFlow
getLine	sutil/PPMLoader.cpp	/^void PPMLoader::getLine( std::ifstream& file_in, std::string& s )$/;"	f	class:PPMLoader
getLinearCurveArray	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Curves& getLinearCurveArray() const$/;"	f	struct:GeometryData
getLinearOffset	optixVolumeViewer/nanovdb/NanoVDB.h	/^uint32_t Tree<RootT>::getLinearOffset(const NodeT& node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getLocalGeometry	cuda/LocalGeometry.h	/^__forceinline__ __device__ LocalGeometry getLocalGeometry( const GeometryData& geometry_data )$/;"	f
getMajor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getMajor() const { return (mData >> 21) & ((1u << 11) - 1);}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
getMinor	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getMinor() const { return (mData >> 10) & ((1u << 11) - 1);}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
getModeInfo	support/GLFW/src/x11_monitor.c	/^static const XRRModeInfo* getModeInfo(const XRRScreenResources* sr, RRMode id)$/;"	f	file:
getNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const NodeT* getNode() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
getNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^NodeT* Tree<RootT>::getNode(uint32_t i)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^const NodeT* Tree<RootT>::getNode(uint32_t i) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^const typename TreeNode<Tree<RootT>, LEVEL>::type* Tree<RootT>::getNode(uint32_t i) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^typename TreeNode<Tree<RootT>, LEVEL>::type* Tree<RootT>::getNode(uint32_t i)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getNodeID	optixVolumeViewer/nanovdb/NanoVDB.h	/^uint32_t Tree<RootT>::getNodeID(const NodeT& node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getNodeInfo	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ NodeInfo getNodeInfo(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
getNodeInfo	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ NodeInfo getNodeInfo(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
getNodeInfo	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ NodeInfo getNodeInfo(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
getNodeInfoAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ typename AccT::NodeInfo getNodeInfoAndCache(const CoordType& \/*ijk*\/, const AccT& \/*acc*\/) const { $/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
getNodeInfoAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ typename AccT::NodeInfo getNodeInfoAndCache(const CoordType& ijk, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
getNumChannels	optixOpticalFlow/optix_denoiser_opticalflow.h	/^static inline unsigned int getNumChannels( const OptixImage2D& image )$/;"	f
getNvmlDeviceHandle	optixNVLink/optixNVLink.cpp	/^nvmlDevice_t getNvmlDeviceHandle( PerDeviceSampleState& pd_state )$/;"	f
getOptixTransform	optixVolumeViewer/optixVolumeViewer.cpp	/^void getOptixTransform( const Volume& grid, float transform[] )$/;"	f
getPBO	sutil/CUDAOutputBuffer.h	/^GLuint CUDAOutputBuffer<PIXEL_FORMAT>::getPBO()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
getPRD	optixBoundValues/optixBoundValues.h	/^static __forceinline__ __device__ RadiancePRD* getPRD()$/;"	f
getPRD	optixModuleCreateAbort/optixModuleCreateAbort.h	/^static __forceinline__ __device__ RadiancePRD* getPRD()$/;"	f
getParallelogram	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Parallelogram& getParallelogram() const$/;"	f	struct:GeometryData
getPatch	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t getPatch() const { return  mData        & ((1u << 10) - 1);}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
getPayloadDepth	cuda/whitted_cuda.h	/^__forceinline__ __device__ unsigned int getPayloadDepth()$/;"	f	namespace:whitted
getPayloadOcclusion	cuda/whitted_cuda.h	/^__forceinline__ __device__ float getPayloadOcclusion()$/;"	f	namespace:whitted
getPciBusId	optixNVLink/optixNVLink.cpp	/^std::string getPciBusId( PerDeviceSampleState& pd_state )$/;"	f
getPixelFormatAttrib	support/GLFW/src/wgl_context.c	/^static int getPixelFormatAttrib(_GLFWwindow* window, int pixelFormat, int attrib)$/;"	f	file:
getPlaneWSPos	optixMotionGeometry/optixMotionGeometry.cpp	/^float3 getPlaneWSPos( const MotionGeometryState& state )$/;"	f
getProcAddress	support/GLFW/src/internal.h	/^    _GLFWgetprocaddressfun      getProcAddress;$/;"	m	struct:_GLFWcontext
getProcAddressEGL	support/GLFW/src/egl_context.c	/^static GLFWglproc getProcAddressEGL(const char* procname)$/;"	f	file:
getProcAddressGLX	support/GLFW/src/glx_context.c	/^static GLFWglproc getProcAddressGLX(const char* procname)$/;"	f	file:
getProcAddressWGL	support/GLFW/src/wgl_context.c	/^static GLFWglproc getProcAddressWGL(const char* procname)$/;"	f	file:
getProcedureAddress	optixNVLink/optixNVLink.cpp	/^void* getProcedureAddress( void* dllHandle, const char* funcName )$/;"	f
getProcedureAddress	optixNVLink/optixNVLink.cpp	/^void* getProcedureAddress( void* handlePtr, const char* funcName )$/;"	f
getQuadraticCurveArray	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Curves& getQuadraticCurveArray() const$/;"	f	struct:GeometryData
getResults	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::getResults()$/;"	f	class:OptiXDenoiser
getRow	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE typename Matrix<M,N>::floatN Matrix<M,N>::getRow( unsigned int m )const$/;"	f	class:sutil::Matrix
getSampleDir	sutil/sutil.cpp	/^std::string getSampleDir()$/;"	f	namespace:sutil
getSamplePixel	sutil/WorkDistribution.h	/^    SUTIL_INLINE SUTIL_HOSTDEVICE int2 getSamplePixel( int32_t gpu_idx, int32_t sample_idx )$/;"	f	class:StaticWorkDistribution
getSampler	sutil/Scene.cpp	/^cudaTextureObject_t Scene::getSampler( int32_t sampler_index ) const$/;"	f	class:sutil::Scene
getSphere	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const Sphere& getSphere() const$/;"	f	struct:GeometryData
getSphereShell	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const SphereShell& getSphereShell() const$/;"	f	struct:GeometryData
getStringForCodec	optixVolumeViewer/nanovdb/util/IO.h	/^inline std::string getStringForCodec(nanovdb::io::Codec c)$/;"	f	class:nanovdb::io::Codec
getStringForGridClass	optixVolumeViewer/nanovdb/util/IO.h	/^inline std::string getStringForGridClass(nanovdb::GridClass t)$/;"	f	class:nanovdb::io::Codec
getStringForGridType	optixVolumeViewer/nanovdb/util/IO.h	/^inline std::string getStringForGridType(nanovdb::GridType t)$/;"	f	class:nanovdb::io::Codec
getSupportedAtom	support/GLFW/src/x11_init.c	/^static Atom getSupportedAtom(Atom* supportedAtoms,$/;"	f	file:
getSystemCursorName	support/GLFW/src/mir_window.c	/^const char* getSystemCursorName(int shape)$/;"	f
getTriangleMesh	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE const TriangleMesh& getTriangleMesh() const$/;"	f	struct:GeometryData
getVal	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    unsigned int getVal() const { return mIndex; }$/;"	f	struct:MaterialIndex
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordT& ijk) const { return DataType::value(CoordToOffset(ijk)); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordType& ijk) const { return this->root().getValue(ijk); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
getValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValue(uint32_t offset) const { return DataType::value(offset); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
getValueAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValueAndCache(const CoordT& ijk, const AccT&) const { return this->getValue(ijk); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
getValueAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& getValueAndCache(const CoordType& ijk, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
getWindowExStyle	support/GLFW/src/win32_window.c	/^static DWORD getWindowExStyle(const _GLFWwindow* window)$/;"	f	file:
getWindowState	support/GLFW/src/x11_window.c	/^static int getWindowState(_GLFWwindow* window)$/;"	f	file:
getWindowStyle	support/GLFW/src/win32_window.c	/^static DWORD getWindowStyle(const _GLFWwindow* window)$/;"	f	file:
getWord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ WordT getWord(int n) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
get_allocator	support/tinygltf/json.hpp	/^    static allocator_type get_allocator()$/;"	f	class:nlohmann::basic_json
get_and_create	support/tinygltf/json.hpp	/^    BasicJsonType& get_and_create(BasicJsonType& j) const$/;"	f	class:nlohmann::json_pointer
get_arithmetic_value	support/tinygltf/json.hpp	/^void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail
get_bson_cstr	support/tinygltf/json.hpp	/^    bool get_bson_cstr(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader
get_bson_string	support/tinygltf/json.hpp	/^    bool get_bson_string(const NumberType len, string_t& result)$/;"	f	class:nlohmann::detail::binary_reader
get_cached_power_for_binary_exponent	support/tinygltf/json.hpp	/^inline cached_power get_cached_power_for_binary_exponent(int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl
get_cbor_array	support/tinygltf/json.hpp	/^    bool get_cbor_array(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader
get_cbor_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_cbor_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_cbor_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_cbor_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_cbor_object	support/tinygltf/json.hpp	/^    bool get_cbor_object(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader
get_cbor_string	support/tinygltf/json.hpp	/^    bool get_cbor_string(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader
get_checked	support/tinygltf/json.hpp	/^    BasicJsonType& get_checked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer
get_checked	support/tinygltf/json.hpp	/^    const BasicJsonType& get_checked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer
get_codepoint	support/tinygltf/json.hpp	/^    int get_codepoint()$/;"	f	class:nlohmann::detail::lexer
get_exts	support/glad/glad.c	/^static int get_exts(void) {$/;"	f	file:
get_ignore_noop	support/tinygltf/json.hpp	/^    int get_ignore_noop()$/;"	f	class:nlohmann::detail::binary_reader
get_impl	support/tinygltf/json.hpp	/^    boolean_t get_impl(boolean_t* \/*unused*\/) const$/;"	f	class:nlohmann::basic_json
get_msgpack_array	support/tinygltf/json.hpp	/^    bool get_msgpack_array(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader
get_msgpack_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_msgpack_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_msgpack_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_msgpack_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_msgpack_object	support/tinygltf/json.hpp	/^    bool get_msgpack_object(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader
get_msgpack_string	support/tinygltf/json.hpp	/^    bool get_msgpack_string(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader
get_number	support/tinygltf/json.hpp	/^    bool get_number(const input_format_t format, NumberType& result)$/;"	f	class:nlohmann::detail::binary_reader
get_proc	support/glad/glad.c	/^void* get_proc(const char *namez) {$/;"	f	file:
get_ptr	support/tinygltf/json.hpp	/^    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())$/;"	f	class:nlohmann::basic_json
get_ptr	support/tinygltf/json.hpp	/^    constexpr auto get() const noexcept -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())$/;"	f	class:nlohmann::basic_json
get_ref	support/tinygltf/json.hpp	/^    ReferenceType get_ref() const$/;"	f	class:nlohmann::basic_json
get_ref	support/tinygltf/json.hpp	/^    ReferenceType get_ref()$/;"	f	class:nlohmann::basic_json
get_ref_impl	support/tinygltf/json.hpp	/^    static ReferenceType get_ref_impl(ThisType& obj)$/;"	f	class:nlohmann::basic_json
get_string	support/tinygltf/json.hpp	/^    bool get_string(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader
get_string	support/tinygltf/json.hpp	/^    string_t& get_string()$/;"	f	class:nlohmann::detail::lexer
get_token	support/tinygltf/json.hpp	/^    token_type get_token()$/;"	f	class:nlohmann::detail::parser
get_token_string	support/tinygltf/json.hpp	/^    std::string get_token_string() const$/;"	f	class:nlohmann::detail::binary_reader
get_token_string	support/tinygltf/json.hpp	/^    std::string get_token_string() const$/;"	f	class:nlohmann::detail::lexer
get_ubjson_array	support/tinygltf/json.hpp	/^    bool get_ubjson_array()$/;"	f	class:nlohmann::detail::binary_reader
get_ubjson_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_ubjson_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_ubjson_float_prefix	support/tinygltf/json.hpp	/^    static constexpr CharType get_ubjson_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer
get_ubjson_object	support/tinygltf/json.hpp	/^    bool get_ubjson_object()$/;"	f	class:nlohmann::detail::binary_reader
get_ubjson_size_type	support/tinygltf/json.hpp	/^    bool get_ubjson_size_type(std::pair<std::size_t, int>& result)$/;"	f	class:nlohmann::detail::binary_reader
get_ubjson_size_value	support/tinygltf/json.hpp	/^    bool get_ubjson_size_value(std::size_t& result)$/;"	f	class:nlohmann::detail::binary_reader
get_ubjson_string	support/tinygltf/json.hpp	/^    bool get_ubjson_string(string_t& result, const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader
get_ubjson_value	support/tinygltf/json.hpp	/^    bool get_ubjson_value(const int prefix)$/;"	f	class:nlohmann::detail::binary_reader
get_unchecked	support/tinygltf/json.hpp	/^    BasicJsonType& get_unchecked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer
get_unchecked	support/tinygltf/json.hpp	/^    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer
getopt	support/GLFW/deps/getopt.c	/^int getopt(int argc, char* const argv[], const char* optstring) {$/;"	f
getopt_long	support/GLFW/deps/getopt.c	/^int getopt_long(int argc, char* const argv[], const char* optstring,$/;"	f
ggxNormal	cuda/whitted_cuda.h	/^__device__ __forceinline__ float ggxNormal( const float N_dot_H, const float alpha )$/;"	f	namespace:whitted
gimbalLock	sutil/Trackball.h	/^    SUTILAPI bool gimbalLock() const { return m_gimbalLock; }$/;"	f	class:sutil::Trackball
glAccum	support/GLFW/deps/glad/glad.h	2104;"	d
glAccum	support/glad/glad.h	2117;"	d
glActiveTexture	support/GLFW/deps/glad/glad.h	2416;"	d
glActiveTexture	support/glad/glad.h	2429;"	d
glAlphaFunc	support/GLFW/deps/glad/glad.h	2173;"	d
glAlphaFunc	support/glad/glad.h	2186;"	d
glAreTexturesResident	support/GLFW/deps/glad/glad.h	2378;"	d
glAreTexturesResident	support/glad/glad.h	2391;"	d
glArrayElement	support/GLFW/deps/glad/glad.h	2348;"	d
glArrayElement	support/glad/glad.h	2361;"	d
glAttachShader	support/GLFW/deps/glad/glad.h	2779;"	d
glAttachShader	support/glad/glad.h	2792;"	d
glBegin	support/GLFW/deps/glad/glad.h	1549;"	d
glBegin	support/glad/glad.h	1562;"	d
glBeginConditionalRender	support/GLFW/deps/glad/glad.h	3108;"	d
glBeginConditionalRender	support/glad/glad.h	3121;"	d
glBeginQuery	support/GLFW/deps/glad/glad.h	2712;"	d
glBeginQuery	support/glad/glad.h	2725;"	d
glBeginTransformFeedback	support/GLFW/deps/glad/glad.h	3087;"	d
glBeginTransformFeedback	support/glad/glad.h	3100;"	d
glBindAttribLocation	support/GLFW/deps/glad/glad.h	2782;"	d
glBindAttribLocation	support/glad/glad.h	2795;"	d
glBindBuffer	support/GLFW/deps/glad/glad.h	2727;"	d
glBindBuffer	support/glad/glad.h	2740;"	d
glBindBufferBase	support/GLFW/deps/glad/glad.h	3096;"	d
glBindBufferBase	support/glad/glad.h	3109;"	d
glBindBufferRange	support/GLFW/deps/glad/glad.h	3093;"	d
glBindBufferRange	support/glad/glad.h	3106;"	d
glBindFragDataLocation	support/GLFW/deps/glad/glad.h	3186;"	d
glBindFragDataLocation	support/glad/glad.h	3199;"	d
glBindFragDataLocationIndexed	support/glad/glad.h	3439;"	d
glBindFramebuffer	support/GLFW/deps/glad/glad.h	3264;"	d
glBindFramebuffer	support/glad/glad.h	3277;"	d
glBindRenderbuffer	support/GLFW/deps/glad/glad.h	3246;"	d
glBindRenderbuffer	support/glad/glad.h	3259;"	d
glBindSampler	support/glad/glad.h	3454;"	d
glBindTexture	support/GLFW/deps/glad/glad.h	2336;"	d
glBindTexture	support/glad/glad.h	2349;"	d
glBindVertexArray	support/GLFW/deps/glad/glad.h	3309;"	d
glBindVertexArray	support/glad/glad.h	3322;"	d
glBitmap	support/GLFW/deps/glad/glad.h	1552;"	d
glBitmap	support/glad/glad.h	1565;"	d
glBlendColor	support/GLFW/deps/glad/glad.h	2693;"	d
glBlendColor	support/glad/glad.h	2706;"	d
glBlendEquation	support/GLFW/deps/glad/glad.h	2696;"	d
glBlendEquation	support/glad/glad.h	2709;"	d
glBlendEquationSeparate	support/GLFW/deps/glad/glad.h	2764;"	d
glBlendEquationSeparate	support/glad/glad.h	2777;"	d
glBlendFunc	support/GLFW/deps/glad/glad.h	1459;"	d
glBlendFunc	support/glad/glad.h	1472;"	d
glBlendFuncSeparate	support/GLFW/deps/glad/glad.h	2558;"	d
glBlendFuncSeparate	support/glad/glad.h	2571;"	d
glBlitFramebuffer	support/GLFW/deps/glad/glad.h	3294;"	d
glBlitFramebuffer	support/glad/glad.h	3307;"	d
glBufferData	support/GLFW/deps/glad/glad.h	2739;"	d
glBufferData	support/glad/glad.h	2752;"	d
glBufferSubData	support/GLFW/deps/glad/glad.h	2742;"	d
glBufferSubData	support/glad/glad.h	2755;"	d
glCallList	support/GLFW/deps/glad/glad.h	1534;"	d
glCallList	support/glad/glad.h	1547;"	d
glCallLists	support/GLFW/deps/glad/glad.h	1537;"	d
glCallLists	support/glad/glad.h	1550;"	d
glCheck	sutil/Exception.h	/^inline void glCheck( const char* call, const char* file, unsigned int line )$/;"	f	namespace:sutil
glCheckErrors	sutil/Exception.h	/^inline void glCheckErrors( const char* file, unsigned int line )$/;"	f	namespace:sutil
glCheckFramebufferStatus	support/GLFW/deps/glad/glad.h	3273;"	d
glCheckFramebufferStatus	support/glad/glad.h	3286;"	d
glClampColor	support/GLFW/deps/glad/glad.h	3105;"	d
glClampColor	support/glad/glad.h	3118;"	d
glClear	support/GLFW/deps/glad/glad.h	1426;"	d
glClear	support/glad/glad.h	1439;"	d
glClearAccum	support/GLFW/deps/glad/glad.h	2095;"	d
glClearAccum	support/glad/glad.h	2108;"	d
glClearBufferfi	support/GLFW/deps/glad/glad.h	3237;"	d
glClearBufferfi	support/glad/glad.h	3250;"	d
glClearBufferfv	support/GLFW/deps/glad/glad.h	3234;"	d
glClearBufferfv	support/glad/glad.h	3247;"	d
glClearBufferiv	support/GLFW/deps/glad/glad.h	3228;"	d
glClearBufferiv	support/glad/glad.h	3241;"	d
glClearBufferuiv	support/GLFW/deps/glad/glad.h	3231;"	d
glClearBufferuiv	support/glad/glad.h	3244;"	d
glClearColor	support/GLFW/deps/glad/glad.h	1429;"	d
glClearColor	support/glad/glad.h	1442;"	d
glClearDepth	support/GLFW/deps/glad/glad.h	1435;"	d
glClearDepth	support/glad/glad.h	1448;"	d
glClearIndex	support/GLFW/deps/glad/glad.h	2098;"	d
glClearIndex	support/glad/glad.h	2111;"	d
glClearStencil	support/GLFW/deps/glad/glad.h	1432;"	d
glClearStencil	support/glad/glad.h	1445;"	d
glClientActiveTexture	support/GLFW/deps/glad/glad.h	2443;"	d
glClientActiveTexture	support/glad/glad.h	2456;"	d
glClientWaitSync	support/GLFW/deps/glad/glad.h	3389;"	d
glClientWaitSync	support/glad/glad.h	3402;"	d
glClipPlane	support/GLFW/deps/glad/glad.h	1978;"	d
glClipPlane	support/glad/glad.h	1991;"	d
glColor3b	support/GLFW/deps/glad/glad.h	1555;"	d
glColor3b	support/glad/glad.h	1568;"	d
glColor3bv	support/GLFW/deps/glad/glad.h	1558;"	d
glColor3bv	support/glad/glad.h	1571;"	d
glColor3d	support/GLFW/deps/glad/glad.h	1561;"	d
glColor3d	support/glad/glad.h	1574;"	d
glColor3dv	support/GLFW/deps/glad/glad.h	1564;"	d
glColor3dv	support/glad/glad.h	1577;"	d
glColor3f	support/GLFW/deps/glad/glad.h	1567;"	d
glColor3f	support/glad/glad.h	1580;"	d
glColor3fv	support/GLFW/deps/glad/glad.h	1570;"	d
glColor3fv	support/glad/glad.h	1583;"	d
glColor3i	support/GLFW/deps/glad/glad.h	1573;"	d
glColor3i	support/glad/glad.h	1586;"	d
glColor3iv	support/GLFW/deps/glad/glad.h	1576;"	d
glColor3iv	support/glad/glad.h	1589;"	d
glColor3s	support/GLFW/deps/glad/glad.h	1579;"	d
glColor3s	support/glad/glad.h	1592;"	d
glColor3sv	support/GLFW/deps/glad/glad.h	1582;"	d
glColor3sv	support/glad/glad.h	1595;"	d
glColor3ub	support/GLFW/deps/glad/glad.h	1585;"	d
glColor3ub	support/glad/glad.h	1598;"	d
glColor3ubv	support/GLFW/deps/glad/glad.h	1588;"	d
glColor3ubv	support/glad/glad.h	1601;"	d
glColor3ui	support/GLFW/deps/glad/glad.h	1591;"	d
glColor3ui	support/glad/glad.h	1604;"	d
glColor3uiv	support/GLFW/deps/glad/glad.h	1594;"	d
glColor3uiv	support/glad/glad.h	1607;"	d
glColor3us	support/GLFW/deps/glad/glad.h	1597;"	d
glColor3us	support/glad/glad.h	1610;"	d
glColor3usv	support/GLFW/deps/glad/glad.h	1600;"	d
glColor3usv	support/glad/glad.h	1613;"	d
glColor4b	support/GLFW/deps/glad/glad.h	1603;"	d
glColor4b	support/glad/glad.h	1616;"	d
glColor4bv	support/GLFW/deps/glad/glad.h	1606;"	d
glColor4bv	support/glad/glad.h	1619;"	d
glColor4d	support/GLFW/deps/glad/glad.h	1609;"	d
glColor4d	support/glad/glad.h	1622;"	d
glColor4dv	support/GLFW/deps/glad/glad.h	1612;"	d
glColor4dv	support/glad/glad.h	1625;"	d
glColor4f	support/GLFW/deps/glad/glad.h	1615;"	d
glColor4f	support/glad/glad.h	1628;"	d
glColor4fv	support/GLFW/deps/glad/glad.h	1618;"	d
glColor4fv	support/glad/glad.h	1631;"	d
glColor4i	support/GLFW/deps/glad/glad.h	1621;"	d
glColor4i	support/glad/glad.h	1634;"	d
glColor4iv	support/GLFW/deps/glad/glad.h	1624;"	d
glColor4iv	support/glad/glad.h	1637;"	d
glColor4s	support/GLFW/deps/glad/glad.h	1627;"	d
glColor4s	support/glad/glad.h	1640;"	d
glColor4sv	support/GLFW/deps/glad/glad.h	1630;"	d
glColor4sv	support/glad/glad.h	1643;"	d
glColor4ub	support/GLFW/deps/glad/glad.h	1633;"	d
glColor4ub	support/glad/glad.h	1646;"	d
glColor4ubv	support/GLFW/deps/glad/glad.h	1636;"	d
glColor4ubv	support/glad/glad.h	1649;"	d
glColor4ui	support/GLFW/deps/glad/glad.h	1639;"	d
glColor4ui	support/glad/glad.h	1652;"	d
glColor4uiv	support/GLFW/deps/glad/glad.h	1642;"	d
glColor4uiv	support/glad/glad.h	1655;"	d
glColor4us	support/GLFW/deps/glad/glad.h	1645;"	d
glColor4us	support/glad/glad.h	1658;"	d
glColor4usv	support/GLFW/deps/glad/glad.h	1648;"	d
glColor4usv	support/glad/glad.h	1661;"	d
glColorMask	support/GLFW/deps/glad/glad.h	1441;"	d
glColorMask	support/glad/glad.h	1454;"	d
glColorMaski	support/GLFW/deps/glad/glad.h	3069;"	d
glColorMaski	support/glad/glad.h	3082;"	d
glColorMaterial	support/GLFW/deps/glad/glad.h	1981;"	d
glColorMaterial	support/glad/glad.h	1994;"	d
glColorP3ui	support/glad/glad.h	3595;"	d
glColorP3uiv	support/glad/glad.h	3598;"	d
glColorP4ui	support/glad/glad.h	3601;"	d
glColorP4uiv	support/glad/glad.h	3604;"	d
glColorPointer	support/GLFW/deps/glad/glad.h	2351;"	d
glColorPointer	support/glad/glad.h	2364;"	d
glCompileShader	support/GLFW/deps/glad/glad.h	2785;"	d
glCompileShader	support/glad/glad.h	2798;"	d
glCompressedTexImage1D	support/GLFW/deps/glad/glad.h	2428;"	d
glCompressedTexImage1D	support/glad/glad.h	2441;"	d
glCompressedTexImage2D	support/GLFW/deps/glad/glad.h	2425;"	d
glCompressedTexImage2D	support/glad/glad.h	2438;"	d
glCompressedTexImage3D	support/GLFW/deps/glad/glad.h	2422;"	d
glCompressedTexImage3D	support/glad/glad.h	2435;"	d
glCompressedTexSubImage1D	support/GLFW/deps/glad/glad.h	2437;"	d
glCompressedTexSubImage1D	support/glad/glad.h	2450;"	d
glCompressedTexSubImage2D	support/GLFW/deps/glad/glad.h	2434;"	d
glCompressedTexSubImage2D	support/glad/glad.h	2447;"	d
glCompressedTexSubImage3D	support/GLFW/deps/glad/glad.h	2431;"	d
glCompressedTexSubImage3D	support/glad/glad.h	2444;"	d
glCopyBufferSubData	support/GLFW/deps/glad/glad.h	3337;"	d
glCopyBufferSubData	support/glad/glad.h	3350;"	d
glCopyPixels	support/GLFW/deps/glad/glad.h	2194;"	d
glCopyPixels	support/glad/glad.h	2207;"	d
glCopyTexImage1D	support/GLFW/deps/glad/glad.h	2318;"	d
glCopyTexImage1D	support/glad/glad.h	2331;"	d
glCopyTexImage2D	support/GLFW/deps/glad/glad.h	2321;"	d
glCopyTexImage2D	support/glad/glad.h	2334;"	d
glCopyTexSubImage1D	support/GLFW/deps/glad/glad.h	2324;"	d
glCopyTexSubImage1D	support/glad/glad.h	2337;"	d
glCopyTexSubImage2D	support/GLFW/deps/glad/glad.h	2327;"	d
glCopyTexSubImage2D	support/glad/glad.h	2340;"	d
glCopyTexSubImage3D	support/GLFW/deps/glad/glad.h	2409;"	d
glCopyTexSubImage3D	support/glad/glad.h	2422;"	d
glCreateProgram	support/GLFW/deps/glad/glad.h	2788;"	d
glCreateProgram	support/glad/glad.h	2801;"	d
glCreateShader	support/GLFW/deps/glad/glad.h	2791;"	d
glCreateShader	support/glad/glad.h	2804;"	d
glCullFace	support/GLFW/deps/glad/glad.h	1384;"	d
glCullFace	support/glad/glad.h	1397;"	d
glDeleteBuffers	support/GLFW/deps/glad/glad.h	2730;"	d
glDeleteBuffers	support/glad/glad.h	2743;"	d
glDeleteFramebuffers	support/GLFW/deps/glad/glad.h	3267;"	d
glDeleteFramebuffers	support/glad/glad.h	3280;"	d
glDeleteLists	support/GLFW/deps/glad/glad.h	1540;"	d
glDeleteLists	support/glad/glad.h	1553;"	d
glDeleteProgram	support/GLFW/deps/glad/glad.h	2794;"	d
glDeleteProgram	support/glad/glad.h	2807;"	d
glDeleteQueries	support/GLFW/deps/glad/glad.h	2706;"	d
glDeleteQueries	support/glad/glad.h	2719;"	d
glDeleteRenderbuffers	support/GLFW/deps/glad/glad.h	3249;"	d
glDeleteRenderbuffers	support/glad/glad.h	3262;"	d
glDeleteSamplers	support/glad/glad.h	3448;"	d
glDeleteShader	support/GLFW/deps/glad/glad.h	2797;"	d
glDeleteShader	support/glad/glad.h	2810;"	d
glDeleteSync	support/GLFW/deps/glad/glad.h	3386;"	d
glDeleteSync	support/glad/glad.h	3399;"	d
glDeleteTextures	support/GLFW/deps/glad/glad.h	2339;"	d
glDeleteTextures	support/glad/glad.h	2352;"	d
glDeleteVertexArrays	support/GLFW/deps/glad/glad.h	3312;"	d
glDeleteVertexArrays	support/glad/glad.h	3325;"	d
glDepthFunc	support/GLFW/deps/glad/glad.h	1471;"	d
glDepthFunc	support/glad/glad.h	1484;"	d
glDepthMask	support/GLFW/deps/glad/glad.h	1444;"	d
glDepthMask	support/glad/glad.h	1457;"	d
glDepthRange	support/GLFW/deps/glad/glad.h	1522;"	d
glDepthRange	support/glad/glad.h	1535;"	d
glDetachShader	support/GLFW/deps/glad/glad.h	2800;"	d
glDetachShader	support/glad/glad.h	2813;"	d
glDisable	support/GLFW/deps/glad/glad.h	1447;"	d
glDisable	support/glad/glad.h	1460;"	d
glDisableClientState	support/GLFW/deps/glad/glad.h	2354;"	d
glDisableClientState	support/glad/glad.h	2367;"	d
glDisableVertexAttribArray	support/GLFW/deps/glad/glad.h	2803;"	d
glDisableVertexAttribArray	support/glad/glad.h	2816;"	d
glDisablei	support/GLFW/deps/glad/glad.h	3081;"	d
glDisablei	support/glad/glad.h	3094;"	d
glDrawArrays	support/GLFW/deps/glad/glad.h	2306;"	d
glDrawArrays	support/glad/glad.h	2319;"	d
glDrawArraysInstanced	support/GLFW/deps/glad/glad.h	3325;"	d
glDrawArraysInstanced	support/glad/glad.h	3338;"	d
glDrawBuffer	support/GLFW/deps/glad/glad.h	1423;"	d
glDrawBuffer	support/glad/glad.h	1436;"	d
glDrawBuffers	support/GLFW/deps/glad/glad.h	2767;"	d
glDrawBuffers	support/glad/glad.h	2780;"	d
glDrawElements	support/GLFW/deps/glad/glad.h	2309;"	d
glDrawElements	support/glad/glad.h	2322;"	d
glDrawElementsBaseVertex	support/GLFW/deps/glad/glad.h	3365;"	d
glDrawElementsBaseVertex	support/glad/glad.h	3378;"	d
glDrawElementsInstanced	support/GLFW/deps/glad/glad.h	3328;"	d
glDrawElementsInstanced	support/glad/glad.h	3341;"	d
glDrawElementsInstancedBaseVertex	support/GLFW/deps/glad/glad.h	3371;"	d
glDrawElementsInstancedBaseVertex	support/glad/glad.h	3384;"	d
glDrawPixels	support/GLFW/deps/glad/glad.h	2197;"	d
glDrawPixels	support/glad/glad.h	2210;"	d
glDrawRangeElements	support/GLFW/deps/glad/glad.h	2400;"	d
glDrawRangeElements	support/glad/glad.h	2413;"	d
glDrawRangeElementsBaseVertex	support/GLFW/deps/glad/glad.h	3368;"	d
glDrawRangeElementsBaseVertex	support/glad/glad.h	3381;"	d
glEdgeFlag	support/GLFW/deps/glad/glad.h	1651;"	d
glEdgeFlag	support/glad/glad.h	1664;"	d
glEdgeFlagPointer	support/GLFW/deps/glad/glad.h	2357;"	d
glEdgeFlagPointer	support/glad/glad.h	2370;"	d
glEdgeFlagv	support/GLFW/deps/glad/glad.h	1654;"	d
glEdgeFlagv	support/glad/glad.h	1667;"	d
glEnable	support/GLFW/deps/glad/glad.h	1450;"	d
glEnable	support/glad/glad.h	1463;"	d
glEnableClientState	support/GLFW/deps/glad/glad.h	2360;"	d
glEnableClientState	support/glad/glad.h	2373;"	d
glEnableVertexAttribArray	support/GLFW/deps/glad/glad.h	2806;"	d
glEnableVertexAttribArray	support/glad/glad.h	2819;"	d
glEnablei	support/GLFW/deps/glad/glad.h	3078;"	d
glEnablei	support/glad/glad.h	3091;"	d
glEnd	support/GLFW/deps/glad/glad.h	1657;"	d
glEnd	support/glad/glad.h	1670;"	d
glEndConditionalRender	support/GLFW/deps/glad/glad.h	3111;"	d
glEndConditionalRender	support/glad/glad.h	3124;"	d
glEndList	support/GLFW/deps/glad/glad.h	1531;"	d
glEndList	support/glad/glad.h	1544;"	d
glEndQuery	support/GLFW/deps/glad/glad.h	2715;"	d
glEndQuery	support/glad/glad.h	2728;"	d
glEndTransformFeedback	support/GLFW/deps/glad/glad.h	3090;"	d
glEndTransformFeedback	support/glad/glad.h	3103;"	d
glEvalCoord1d	support/GLFW/deps/glad/glad.h	2137;"	d
glEvalCoord1d	support/glad/glad.h	2150;"	d
glEvalCoord1dv	support/GLFW/deps/glad/glad.h	2140;"	d
glEvalCoord1dv	support/glad/glad.h	2153;"	d
glEvalCoord1f	support/GLFW/deps/glad/glad.h	2143;"	d
glEvalCoord1f	support/glad/glad.h	2156;"	d
glEvalCoord1fv	support/GLFW/deps/glad/glad.h	2146;"	d
glEvalCoord1fv	support/glad/glad.h	2159;"	d
glEvalCoord2d	support/GLFW/deps/glad/glad.h	2149;"	d
glEvalCoord2d	support/glad/glad.h	2162;"	d
glEvalCoord2dv	support/GLFW/deps/glad/glad.h	2152;"	d
glEvalCoord2dv	support/glad/glad.h	2165;"	d
glEvalCoord2f	support/GLFW/deps/glad/glad.h	2155;"	d
glEvalCoord2f	support/glad/glad.h	2168;"	d
glEvalCoord2fv	support/GLFW/deps/glad/glad.h	2158;"	d
glEvalCoord2fv	support/glad/glad.h	2171;"	d
glEvalMesh1	support/GLFW/deps/glad/glad.h	2161;"	d
glEvalMesh1	support/glad/glad.h	2174;"	d
glEvalMesh2	support/GLFW/deps/glad/glad.h	2167;"	d
glEvalMesh2	support/glad/glad.h	2180;"	d
glEvalPoint1	support/GLFW/deps/glad/glad.h	2164;"	d
glEvalPoint1	support/glad/glad.h	2177;"	d
glEvalPoint2	support/GLFW/deps/glad/glad.h	2170;"	d
glEvalPoint2	support/glad/glad.h	2183;"	d
glFeedbackBuffer	support/GLFW/deps/glad/glad.h	2071;"	d
glFeedbackBuffer	support/glad/glad.h	2084;"	d
glFenceSync	support/GLFW/deps/glad/glad.h	3380;"	d
glFenceSync	support/glad/glad.h	3393;"	d
glFinish	support/GLFW/deps/glad/glad.h	1453;"	d
glFinish	support/glad/glad.h	1466;"	d
glFlush	support/GLFW/deps/glad/glad.h	1456;"	d
glFlush	support/glad/glad.h	1469;"	d
glFlushMappedBufferRange	support/GLFW/deps/glad/glad.h	3306;"	d
glFlushMappedBufferRange	support/glad/glad.h	3319;"	d
glFogCoordPointer	support/GLFW/deps/glad/glad.h	2591;"	d
glFogCoordPointer	support/glad/glad.h	2604;"	d
glFogCoordd	support/GLFW/deps/glad/glad.h	2585;"	d
glFogCoordd	support/glad/glad.h	2598;"	d
glFogCoorddv	support/GLFW/deps/glad/glad.h	2588;"	d
glFogCoorddv	support/glad/glad.h	2601;"	d
glFogCoordf	support/GLFW/deps/glad/glad.h	2579;"	d
glFogCoordf	support/glad/glad.h	2592;"	d
glFogCoordfv	support/GLFW/deps/glad/glad.h	2582;"	d
glFogCoordfv	support/glad/glad.h	2595;"	d
glFogf	support/GLFW/deps/glad/glad.h	1984;"	d
glFogf	support/glad/glad.h	1997;"	d
glFogfv	support/GLFW/deps/glad/glad.h	1987;"	d
glFogfv	support/glad/glad.h	2000;"	d
glFogi	support/GLFW/deps/glad/glad.h	1990;"	d
glFogi	support/glad/glad.h	2003;"	d
glFogiv	support/GLFW/deps/glad/glad.h	1993;"	d
glFogiv	support/glad/glad.h	2006;"	d
glFramebufferRenderbuffer	support/GLFW/deps/glad/glad.h	3285;"	d
glFramebufferRenderbuffer	support/glad/glad.h	3298;"	d
glFramebufferTexture	support/GLFW/deps/glad/glad.h	3407;"	d
glFramebufferTexture	support/glad/glad.h	3420;"	d
glFramebufferTexture1D	support/GLFW/deps/glad/glad.h	3276;"	d
glFramebufferTexture1D	support/glad/glad.h	3289;"	d
glFramebufferTexture2D	support/GLFW/deps/glad/glad.h	3279;"	d
glFramebufferTexture2D	support/glad/glad.h	3292;"	d
glFramebufferTexture3D	support/GLFW/deps/glad/glad.h	3282;"	d
glFramebufferTexture3D	support/glad/glad.h	3295;"	d
glFramebufferTextureLayer	support/GLFW/deps/glad/glad.h	3300;"	d
glFramebufferTextureLayer	support/glad/glad.h	3313;"	d
glFrontFace	support/GLFW/deps/glad/glad.h	1387;"	d
glFrontFace	support/glad/glad.h	1400;"	d
glFrustum	support/GLFW/deps/glad/glad.h	2254;"	d
glFrustum	support/glad/glad.h	2267;"	d
glGenBuffers	support/GLFW/deps/glad/glad.h	2733;"	d
glGenBuffers	support/glad/glad.h	2746;"	d
glGenFramebuffers	support/GLFW/deps/glad/glad.h	3270;"	d
glGenFramebuffers	support/glad/glad.h	3283;"	d
glGenLists	support/GLFW/deps/glad/glad.h	1543;"	d
glGenLists	support/glad/glad.h	1556;"	d
glGenQueries	support/GLFW/deps/glad/glad.h	2703;"	d
glGenQueries	support/glad/glad.h	2716;"	d
glGenRenderbuffers	support/GLFW/deps/glad/glad.h	3252;"	d
glGenRenderbuffers	support/glad/glad.h	3265;"	d
glGenSamplers	support/glad/glad.h	3445;"	d
glGenTextures	support/GLFW/deps/glad/glad.h	2342;"	d
glGenTextures	support/glad/glad.h	2355;"	d
glGenVertexArrays	support/GLFW/deps/glad/glad.h	3315;"	d
glGenVertexArrays	support/glad/glad.h	3328;"	d
glGenerateMipmap	support/GLFW/deps/glad/glad.h	3291;"	d
glGenerateMipmap	support/glad/glad.h	3304;"	d
glGetActiveAttrib	support/GLFW/deps/glad/glad.h	2809;"	d
glGetActiveAttrib	support/glad/glad.h	2822;"	d
glGetActiveUniform	support/GLFW/deps/glad/glad.h	2812;"	d
glGetActiveUniform	support/glad/glad.h	2825;"	d
glGetActiveUniformBlockName	support/GLFW/deps/glad/glad.h	3355;"	d
glGetActiveUniformBlockName	support/glad/glad.h	3368;"	d
glGetActiveUniformBlockiv	support/GLFW/deps/glad/glad.h	3352;"	d
glGetActiveUniformBlockiv	support/glad/glad.h	3365;"	d
glGetActiveUniformName	support/GLFW/deps/glad/glad.h	3346;"	d
glGetActiveUniformName	support/glad/glad.h	3359;"	d
glGetActiveUniformsiv	support/GLFW/deps/glad/glad.h	3343;"	d
glGetActiveUniformsiv	support/glad/glad.h	3356;"	d
glGetAttachedShaders	support/GLFW/deps/glad/glad.h	2815;"	d
glGetAttachedShaders	support/glad/glad.h	2828;"	d
glGetAttribLocation	support/GLFW/deps/glad/glad.h	2818;"	d
glGetAttribLocation	support/glad/glad.h	2831;"	d
glGetBooleani_v	support/GLFW/deps/glad/glad.h	3072;"	d
glGetBooleani_v	support/glad/glad.h	3085;"	d
glGetBooleanv	support/GLFW/deps/glad/glad.h	1486;"	d
glGetBooleanv	support/glad/glad.h	1499;"	d
glGetBufferParameteri64v	support/GLFW/deps/glad/glad.h	3404;"	d
glGetBufferParameteri64v	support/glad/glad.h	3417;"	d
glGetBufferParameteriv	support/GLFW/deps/glad/glad.h	2754;"	d
glGetBufferParameteriv	support/glad/glad.h	2767;"	d
glGetBufferPointerv	support/GLFW/deps/glad/glad.h	2757;"	d
glGetBufferPointerv	support/glad/glad.h	2770;"	d
glGetBufferSubData	support/GLFW/deps/glad/glad.h	2745;"	d
glGetBufferSubData	support/glad/glad.h	2758;"	d
glGetClipPlane	support/GLFW/deps/glad/glad.h	2200;"	d
glGetClipPlane	support/glad/glad.h	2213;"	d
glGetCompressedTexImage	support/GLFW/deps/glad/glad.h	2440;"	d
glGetCompressedTexImage	support/glad/glad.h	2453;"	d
glGetDoublev	support/GLFW/deps/glad/glad.h	1489;"	d
glGetDoublev	support/glad/glad.h	1502;"	d
glGetError	support/GLFW/deps/glad/glad.h	1492;"	d
glGetError	support/glad/glad.h	1505;"	d
glGetFloatv	support/GLFW/deps/glad/glad.h	1495;"	d
glGetFloatv	support/glad/glad.h	1508;"	d
glGetFragDataIndex	support/glad/glad.h	3442;"	d
glGetFragDataLocation	support/GLFW/deps/glad/glad.h	3189;"	d
glGetFragDataLocation	support/glad/glad.h	3202;"	d
glGetFramebufferAttachmentParameteriv	support/GLFW/deps/glad/glad.h	3288;"	d
glGetFramebufferAttachmentParameteriv	support/glad/glad.h	3301;"	d
glGetGraphicsResetStatusARB	support/GLFW/deps/glad/glad.h	3456;"	d
glGetInteger64i_v	support/GLFW/deps/glad/glad.h	3401;"	d
glGetInteger64i_v	support/glad/glad.h	3414;"	d
glGetInteger64v	support/GLFW/deps/glad/glad.h	3395;"	d
glGetInteger64v	support/glad/glad.h	3408;"	d
glGetIntegeri_v	support/GLFW/deps/glad/glad.h	3075;"	d
glGetIntegeri_v	support/glad/glad.h	3088;"	d
glGetIntegerv	support/GLFW/deps/glad/glad.h	1498;"	d
glGetIntegerv	support/glad/glad.h	1511;"	d
glGetLightfv	support/GLFW/deps/glad/glad.h	2203;"	d
glGetLightfv	support/glad/glad.h	2216;"	d
glGetLightiv	support/GLFW/deps/glad/glad.h	2206;"	d
glGetLightiv	support/glad/glad.h	2219;"	d
glGetMapdv	support/GLFW/deps/glad/glad.h	2209;"	d
glGetMapdv	support/glad/glad.h	2222;"	d
glGetMapfv	support/GLFW/deps/glad/glad.h	2212;"	d
glGetMapfv	support/glad/glad.h	2225;"	d
glGetMapiv	support/GLFW/deps/glad/glad.h	2215;"	d
glGetMapiv	support/glad/glad.h	2228;"	d
glGetMaterialfv	support/GLFW/deps/glad/glad.h	2218;"	d
glGetMaterialfv	support/glad/glad.h	2231;"	d
glGetMaterialiv	support/GLFW/deps/glad/glad.h	2221;"	d
glGetMaterialiv	support/glad/glad.h	2234;"	d
glGetMultisamplefv	support/GLFW/deps/glad/glad.h	3416;"	d
glGetMultisamplefv	support/glad/glad.h	3429;"	d
glGetPixelMapfv	support/GLFW/deps/glad/glad.h	2224;"	d
glGetPixelMapfv	support/glad/glad.h	2237;"	d
glGetPixelMapuiv	support/GLFW/deps/glad/glad.h	2227;"	d
glGetPixelMapuiv	support/glad/glad.h	2240;"	d
glGetPixelMapusv	support/GLFW/deps/glad/glad.h	2230;"	d
glGetPixelMapusv	support/glad/glad.h	2243;"	d
glGetPointerv	support/GLFW/deps/glad/glad.h	2312;"	d
glGetPointerv	support/glad/glad.h	2325;"	d
glGetPolygonStipple	support/GLFW/deps/glad/glad.h	2233;"	d
glGetPolygonStipple	support/glad/glad.h	2246;"	d
glGetProgramInfoLog	support/GLFW/deps/glad/glad.h	2824;"	d
glGetProgramInfoLog	support/glad/glad.h	2837;"	d
glGetProgramiv	support/GLFW/deps/glad/glad.h	2821;"	d
glGetProgramiv	support/glad/glad.h	2834;"	d
glGetQueryObjecti64v	support/glad/glad.h	3490;"	d
glGetQueryObjectiv	support/GLFW/deps/glad/glad.h	2721;"	d
glGetQueryObjectiv	support/glad/glad.h	2734;"	d
glGetQueryObjectui64v	support/glad/glad.h	3493;"	d
glGetQueryObjectuiv	support/GLFW/deps/glad/glad.h	2724;"	d
glGetQueryObjectuiv	support/glad/glad.h	2737;"	d
glGetQueryiv	support/GLFW/deps/glad/glad.h	2718;"	d
glGetQueryiv	support/glad/glad.h	2731;"	d
glGetRenderbufferParameteriv	support/GLFW/deps/glad/glad.h	3258;"	d
glGetRenderbufferParameteriv	support/glad/glad.h	3271;"	d
glGetSamplerParameterIiv	support/glad/glad.h	3478;"	d
glGetSamplerParameterIuiv	support/glad/glad.h	3484;"	d
glGetSamplerParameterfv	support/glad/glad.h	3481;"	d
glGetSamplerParameteriv	support/glad/glad.h	3475;"	d
glGetShaderInfoLog	support/GLFW/deps/glad/glad.h	2830;"	d
glGetShaderInfoLog	support/glad/glad.h	2843;"	d
glGetShaderSource	support/GLFW/deps/glad/glad.h	2833;"	d
glGetShaderSource	support/glad/glad.h	2846;"	d
glGetShaderiv	support/GLFW/deps/glad/glad.h	2827;"	d
glGetShaderiv	support/glad/glad.h	2840;"	d
glGetString	support/GLFW/deps/glad/glad.h	1501;"	d
glGetString	support/glad/glad.h	1514;"	d
glGetStringi	support/GLFW/deps/glad/glad.h	3240;"	d
glGetStringi	support/glad/glad.h	3253;"	d
glGetSynciv	support/GLFW/deps/glad/glad.h	3398;"	d
glGetSynciv	support/glad/glad.h	3411;"	d
glGetTexEnvfv	support/GLFW/deps/glad/glad.h	2236;"	d
glGetTexEnvfv	support/glad/glad.h	2249;"	d
glGetTexEnviv	support/GLFW/deps/glad/glad.h	2239;"	d
glGetTexEnviv	support/glad/glad.h	2252;"	d
glGetTexGendv	support/GLFW/deps/glad/glad.h	2242;"	d
glGetTexGendv	support/glad/glad.h	2255;"	d
glGetTexGenfv	support/GLFW/deps/glad/glad.h	2245;"	d
glGetTexGenfv	support/glad/glad.h	2258;"	d
glGetTexGeniv	support/GLFW/deps/glad/glad.h	2248;"	d
glGetTexGeniv	support/glad/glad.h	2261;"	d
glGetTexImage	support/GLFW/deps/glad/glad.h	1504;"	d
glGetTexImage	support/glad/glad.h	1517;"	d
glGetTexLevelParameterfv	support/GLFW/deps/glad/glad.h	1513;"	d
glGetTexLevelParameterfv	support/glad/glad.h	1526;"	d
glGetTexLevelParameteriv	support/GLFW/deps/glad/glad.h	1516;"	d
glGetTexLevelParameteriv	support/glad/glad.h	1529;"	d
glGetTexParameterIiv	support/GLFW/deps/glad/glad.h	3222;"	d
glGetTexParameterIiv	support/glad/glad.h	3235;"	d
glGetTexParameterIuiv	support/GLFW/deps/glad/glad.h	3225;"	d
glGetTexParameterIuiv	support/glad/glad.h	3238;"	d
glGetTexParameterfv	support/GLFW/deps/glad/glad.h	1507;"	d
glGetTexParameterfv	support/glad/glad.h	1520;"	d
glGetTexParameteriv	support/GLFW/deps/glad/glad.h	1510;"	d
glGetTexParameteriv	support/glad/glad.h	1523;"	d
glGetTransformFeedbackVarying	support/GLFW/deps/glad/glad.h	3102;"	d
glGetTransformFeedbackVarying	support/glad/glad.h	3115;"	d
glGetUniformBlockIndex	support/GLFW/deps/glad/glad.h	3349;"	d
glGetUniformBlockIndex	support/glad/glad.h	3362;"	d
glGetUniformIndices	support/GLFW/deps/glad/glad.h	3340;"	d
glGetUniformIndices	support/glad/glad.h	3353;"	d
glGetUniformLocation	support/GLFW/deps/glad/glad.h	2836;"	d
glGetUniformLocation	support/glad/glad.h	2849;"	d
glGetUniformfv	support/GLFW/deps/glad/glad.h	2839;"	d
glGetUniformfv	support/glad/glad.h	2852;"	d
glGetUniformiv	support/GLFW/deps/glad/glad.h	2842;"	d
glGetUniformiv	support/glad/glad.h	2855;"	d
glGetUniformuiv	support/GLFW/deps/glad/glad.h	3183;"	d
glGetUniformuiv	support/glad/glad.h	3196;"	d
glGetVertexAttribIiv	support/GLFW/deps/glad/glad.h	3117;"	d
glGetVertexAttribIiv	support/glad/glad.h	3130;"	d
glGetVertexAttribIuiv	support/GLFW/deps/glad/glad.h	3120;"	d
glGetVertexAttribIuiv	support/glad/glad.h	3133;"	d
glGetVertexAttribPointerv	support/GLFW/deps/glad/glad.h	2854;"	d
glGetVertexAttribPointerv	support/glad/glad.h	2867;"	d
glGetVertexAttribdv	support/GLFW/deps/glad/glad.h	2845;"	d
glGetVertexAttribdv	support/glad/glad.h	2858;"	d
glGetVertexAttribfv	support/GLFW/deps/glad/glad.h	2848;"	d
glGetVertexAttribfv	support/glad/glad.h	2861;"	d
glGetVertexAttribiv	support/GLFW/deps/glad/glad.h	2851;"	d
glGetVertexAttribiv	support/glad/glad.h	2864;"	d
glGetnColorTableARB	support/GLFW/deps/glad/glad.h	3501;"	d
glGetnCompressedTexImageARB	support/GLFW/deps/glad/glad.h	3465;"	d
glGetnConvolutionFilterARB	support/GLFW/deps/glad/glad.h	3504;"	d
glGetnHistogramARB	support/GLFW/deps/glad/glad.h	3510;"	d
glGetnMapdvARB	support/GLFW/deps/glad/glad.h	3480;"	d
glGetnMapfvARB	support/GLFW/deps/glad/glad.h	3483;"	d
glGetnMapivARB	support/GLFW/deps/glad/glad.h	3486;"	d
glGetnMinmaxARB	support/GLFW/deps/glad/glad.h	3513;"	d
glGetnPixelMapfvARB	support/GLFW/deps/glad/glad.h	3489;"	d
glGetnPixelMapuivARB	support/GLFW/deps/glad/glad.h	3492;"	d
glGetnPixelMapusvARB	support/GLFW/deps/glad/glad.h	3495;"	d
glGetnPolygonStippleARB	support/GLFW/deps/glad/glad.h	3498;"	d
glGetnSeparableFilterARB	support/GLFW/deps/glad/glad.h	3507;"	d
glGetnTexImageARB	support/GLFW/deps/glad/glad.h	3459;"	d
glGetnUniformdvARB	support/GLFW/deps/glad/glad.h	3477;"	d
glGetnUniformfvARB	support/GLFW/deps/glad/glad.h	3468;"	d
glGetnUniformivARB	support/GLFW/deps/glad/glad.h	3471;"	d
glGetnUniformuivARB	support/GLFW/deps/glad/glad.h	3474;"	d
glHint	support/GLFW/deps/glad/glad.h	1390;"	d
glHint	support/glad/glad.h	1403;"	d
glIndexMask	support/GLFW/deps/glad/glad.h	2101;"	d
glIndexMask	support/glad/glad.h	2114;"	d
glIndexPointer	support/GLFW/deps/glad/glad.h	2363;"	d
glIndexPointer	support/glad/glad.h	2376;"	d
glIndexd	support/GLFW/deps/glad/glad.h	1660;"	d
glIndexd	support/glad/glad.h	1673;"	d
glIndexdv	support/GLFW/deps/glad/glad.h	1663;"	d
glIndexdv	support/glad/glad.h	1676;"	d
glIndexf	support/GLFW/deps/glad/glad.h	1666;"	d
glIndexf	support/glad/glad.h	1679;"	d
glIndexfv	support/GLFW/deps/glad/glad.h	1669;"	d
glIndexfv	support/glad/glad.h	1682;"	d
glIndexi	support/GLFW/deps/glad/glad.h	1672;"	d
glIndexi	support/glad/glad.h	1685;"	d
glIndexiv	support/GLFW/deps/glad/glad.h	1675;"	d
glIndexiv	support/glad/glad.h	1688;"	d
glIndexs	support/GLFW/deps/glad/glad.h	1678;"	d
glIndexs	support/glad/glad.h	1691;"	d
glIndexsv	support/GLFW/deps/glad/glad.h	1681;"	d
glIndexsv	support/glad/glad.h	1694;"	d
glIndexub	support/GLFW/deps/glad/glad.h	2384;"	d
glIndexub	support/glad/glad.h	2397;"	d
glIndexubv	support/GLFW/deps/glad/glad.h	2387;"	d
glIndexubv	support/glad/glad.h	2400;"	d
glInitNames	support/GLFW/deps/glad/glad.h	2080;"	d
glInitNames	support/glad/glad.h	2093;"	d
glInterleavedArrays	support/GLFW/deps/glad/glad.h	2366;"	d
glInterleavedArrays	support/glad/glad.h	2379;"	d
glIsBuffer	support/GLFW/deps/glad/glad.h	2736;"	d
glIsBuffer	support/glad/glad.h	2749;"	d
glIsEnabled	support/GLFW/deps/glad/glad.h	1519;"	d
glIsEnabled	support/glad/glad.h	1532;"	d
glIsEnabledi	support/GLFW/deps/glad/glad.h	3084;"	d
glIsEnabledi	support/glad/glad.h	3097;"	d
glIsFramebuffer	support/GLFW/deps/glad/glad.h	3261;"	d
glIsFramebuffer	support/glad/glad.h	3274;"	d
glIsList	support/GLFW/deps/glad/glad.h	2251;"	d
glIsList	support/glad/glad.h	2264;"	d
glIsProgram	support/GLFW/deps/glad/glad.h	2857;"	d
glIsProgram	support/glad/glad.h	2870;"	d
glIsQuery	support/GLFW/deps/glad/glad.h	2709;"	d
glIsQuery	support/glad/glad.h	2722;"	d
glIsRenderbuffer	support/GLFW/deps/glad/glad.h	3243;"	d
glIsRenderbuffer	support/glad/glad.h	3256;"	d
glIsSampler	support/glad/glad.h	3451;"	d
glIsShader	support/GLFW/deps/glad/glad.h	2860;"	d
glIsShader	support/glad/glad.h	2873;"	d
glIsSync	support/GLFW/deps/glad/glad.h	3383;"	d
glIsSync	support/glad/glad.h	3396;"	d
glIsTexture	support/GLFW/deps/glad/glad.h	2345;"	d
glIsTexture	support/glad/glad.h	2358;"	d
glIsVertexArray	support/GLFW/deps/glad/glad.h	3318;"	d
glIsVertexArray	support/glad/glad.h	3331;"	d
glLightModelf	support/GLFW/deps/glad/glad.h	2008;"	d
glLightModelf	support/glad/glad.h	2021;"	d
glLightModelfv	support/GLFW/deps/glad/glad.h	2011;"	d
glLightModelfv	support/glad/glad.h	2024;"	d
glLightModeli	support/GLFW/deps/glad/glad.h	2014;"	d
glLightModeli	support/glad/glad.h	2027;"	d
glLightModeliv	support/GLFW/deps/glad/glad.h	2017;"	d
glLightModeliv	support/glad/glad.h	2030;"	d
glLightf	support/GLFW/deps/glad/glad.h	1996;"	d
glLightf	support/glad/glad.h	2009;"	d
glLightfv	support/GLFW/deps/glad/glad.h	1999;"	d
glLightfv	support/glad/glad.h	2012;"	d
glLighti	support/GLFW/deps/glad/glad.h	2002;"	d
glLighti	support/glad/glad.h	2015;"	d
glLightiv	support/GLFW/deps/glad/glad.h	2005;"	d
glLightiv	support/glad/glad.h	2018;"	d
glLineStipple	support/GLFW/deps/glad/glad.h	2020;"	d
glLineStipple	support/glad/glad.h	2033;"	d
glLineWidth	support/GLFW/deps/glad/glad.h	1393;"	d
glLineWidth	support/glad/glad.h	1406;"	d
glLinkProgram	support/GLFW/deps/glad/glad.h	2863;"	d
glLinkProgram	support/glad/glad.h	2876;"	d
glListBase	support/GLFW/deps/glad/glad.h	1546;"	d
glListBase	support/glad/glad.h	1559;"	d
glLoadIdentity	support/GLFW/deps/glad/glad.h	2257;"	d
glLoadIdentity	support/glad/glad.h	2270;"	d
glLoadMatrixd	support/GLFW/deps/glad/glad.h	2263;"	d
glLoadMatrixd	support/glad/glad.h	2276;"	d
glLoadMatrixf	support/GLFW/deps/glad/glad.h	2260;"	d
glLoadMatrixf	support/glad/glad.h	2273;"	d
glLoadName	support/GLFW/deps/glad/glad.h	2083;"	d
glLoadName	support/glad/glad.h	2096;"	d
glLoadTransposeMatrixd	support/GLFW/deps/glad/glad.h	2545;"	d
glLoadTransposeMatrixd	support/glad/glad.h	2558;"	d
glLoadTransposeMatrixf	support/GLFW/deps/glad/glad.h	2542;"	d
glLoadTransposeMatrixf	support/glad/glad.h	2555;"	d
glLogicOp	support/GLFW/deps/glad/glad.h	1462;"	d
glLogicOp	support/glad/glad.h	1475;"	d
glMap1d	support/GLFW/deps/glad/glad.h	2113;"	d
glMap1d	support/glad/glad.h	2126;"	d
glMap1f	support/GLFW/deps/glad/glad.h	2116;"	d
glMap1f	support/glad/glad.h	2129;"	d
glMap2d	support/GLFW/deps/glad/glad.h	2119;"	d
glMap2d	support/glad/glad.h	2132;"	d
glMap2f	support/GLFW/deps/glad/glad.h	2122;"	d
glMap2f	support/glad/glad.h	2135;"	d
glMapBuffer	support/GLFW/deps/glad/glad.h	2748;"	d
glMapBuffer	support/glad/glad.h	2761;"	d
glMapBufferRange	support/GLFW/deps/glad/glad.h	3303;"	d
glMapBufferRange	support/glad/glad.h	3316;"	d
glMapGrid1d	support/GLFW/deps/glad/glad.h	2125;"	d
glMapGrid1d	support/glad/glad.h	2138;"	d
glMapGrid1f	support/GLFW/deps/glad/glad.h	2128;"	d
glMapGrid1f	support/glad/glad.h	2141;"	d
glMapGrid2d	support/GLFW/deps/glad/glad.h	2131;"	d
glMapGrid2d	support/glad/glad.h	2144;"	d
glMapGrid2f	support/GLFW/deps/glad/glad.h	2134;"	d
glMapGrid2f	support/glad/glad.h	2147;"	d
glMaterialf	support/GLFW/deps/glad/glad.h	2023;"	d
glMaterialf	support/glad/glad.h	2036;"	d
glMaterialfv	support/GLFW/deps/glad/glad.h	2026;"	d
glMaterialfv	support/glad/glad.h	2039;"	d
glMateriali	support/GLFW/deps/glad/glad.h	2029;"	d
glMateriali	support/glad/glad.h	2042;"	d
glMaterialiv	support/GLFW/deps/glad/glad.h	2032;"	d
glMaterialiv	support/glad/glad.h	2045;"	d
glMatrixMode	support/GLFW/deps/glad/glad.h	2266;"	d
glMatrixMode	support/glad/glad.h	2279;"	d
glMultMatrixd	support/GLFW/deps/glad/glad.h	2272;"	d
glMultMatrixd	support/glad/glad.h	2285;"	d
glMultMatrixf	support/GLFW/deps/glad/glad.h	2269;"	d
glMultMatrixf	support/glad/glad.h	2282;"	d
glMultTransposeMatrixd	support/GLFW/deps/glad/glad.h	2551;"	d
glMultTransposeMatrixd	support/glad/glad.h	2564;"	d
glMultTransposeMatrixf	support/GLFW/deps/glad/glad.h	2548;"	d
glMultTransposeMatrixf	support/glad/glad.h	2561;"	d
glMultiDrawArrays	support/GLFW/deps/glad/glad.h	2561;"	d
glMultiDrawArrays	support/glad/glad.h	2574;"	d
glMultiDrawElements	support/GLFW/deps/glad/glad.h	2564;"	d
glMultiDrawElements	support/glad/glad.h	2577;"	d
glMultiDrawElementsBaseVertex	support/GLFW/deps/glad/glad.h	3374;"	d
glMultiDrawElementsBaseVertex	support/glad/glad.h	3387;"	d
glMultiTexCoord1d	support/GLFW/deps/glad/glad.h	2446;"	d
glMultiTexCoord1d	support/glad/glad.h	2459;"	d
glMultiTexCoord1dv	support/GLFW/deps/glad/glad.h	2449;"	d
glMultiTexCoord1dv	support/glad/glad.h	2462;"	d
glMultiTexCoord1f	support/GLFW/deps/glad/glad.h	2452;"	d
glMultiTexCoord1f	support/glad/glad.h	2465;"	d
glMultiTexCoord1fv	support/GLFW/deps/glad/glad.h	2455;"	d
glMultiTexCoord1fv	support/glad/glad.h	2468;"	d
glMultiTexCoord1i	support/GLFW/deps/glad/glad.h	2458;"	d
glMultiTexCoord1i	support/glad/glad.h	2471;"	d
glMultiTexCoord1iv	support/GLFW/deps/glad/glad.h	2461;"	d
glMultiTexCoord1iv	support/glad/glad.h	2474;"	d
glMultiTexCoord1s	support/GLFW/deps/glad/glad.h	2464;"	d
glMultiTexCoord1s	support/glad/glad.h	2477;"	d
glMultiTexCoord1sv	support/GLFW/deps/glad/glad.h	2467;"	d
glMultiTexCoord1sv	support/glad/glad.h	2480;"	d
glMultiTexCoord2d	support/GLFW/deps/glad/glad.h	2470;"	d
glMultiTexCoord2d	support/glad/glad.h	2483;"	d
glMultiTexCoord2dv	support/GLFW/deps/glad/glad.h	2473;"	d
glMultiTexCoord2dv	support/glad/glad.h	2486;"	d
glMultiTexCoord2f	support/GLFW/deps/glad/glad.h	2476;"	d
glMultiTexCoord2f	support/glad/glad.h	2489;"	d
glMultiTexCoord2fv	support/GLFW/deps/glad/glad.h	2479;"	d
glMultiTexCoord2fv	support/glad/glad.h	2492;"	d
glMultiTexCoord2i	support/GLFW/deps/glad/glad.h	2482;"	d
glMultiTexCoord2i	support/glad/glad.h	2495;"	d
glMultiTexCoord2iv	support/GLFW/deps/glad/glad.h	2485;"	d
glMultiTexCoord2iv	support/glad/glad.h	2498;"	d
glMultiTexCoord2s	support/GLFW/deps/glad/glad.h	2488;"	d
glMultiTexCoord2s	support/glad/glad.h	2501;"	d
glMultiTexCoord2sv	support/GLFW/deps/glad/glad.h	2491;"	d
glMultiTexCoord2sv	support/glad/glad.h	2504;"	d
glMultiTexCoord3d	support/GLFW/deps/glad/glad.h	2494;"	d
glMultiTexCoord3d	support/glad/glad.h	2507;"	d
glMultiTexCoord3dv	support/GLFW/deps/glad/glad.h	2497;"	d
glMultiTexCoord3dv	support/glad/glad.h	2510;"	d
glMultiTexCoord3f	support/GLFW/deps/glad/glad.h	2500;"	d
glMultiTexCoord3f	support/glad/glad.h	2513;"	d
glMultiTexCoord3fv	support/GLFW/deps/glad/glad.h	2503;"	d
glMultiTexCoord3fv	support/glad/glad.h	2516;"	d
glMultiTexCoord3i	support/GLFW/deps/glad/glad.h	2506;"	d
glMultiTexCoord3i	support/glad/glad.h	2519;"	d
glMultiTexCoord3iv	support/GLFW/deps/glad/glad.h	2509;"	d
glMultiTexCoord3iv	support/glad/glad.h	2522;"	d
glMultiTexCoord3s	support/GLFW/deps/glad/glad.h	2512;"	d
glMultiTexCoord3s	support/glad/glad.h	2525;"	d
glMultiTexCoord3sv	support/GLFW/deps/glad/glad.h	2515;"	d
glMultiTexCoord3sv	support/glad/glad.h	2528;"	d
glMultiTexCoord4d	support/GLFW/deps/glad/glad.h	2518;"	d
glMultiTexCoord4d	support/glad/glad.h	2531;"	d
glMultiTexCoord4dv	support/GLFW/deps/glad/glad.h	2521;"	d
glMultiTexCoord4dv	support/glad/glad.h	2534;"	d
glMultiTexCoord4f	support/GLFW/deps/glad/glad.h	2524;"	d
glMultiTexCoord4f	support/glad/glad.h	2537;"	d
glMultiTexCoord4fv	support/GLFW/deps/glad/glad.h	2527;"	d
glMultiTexCoord4fv	support/glad/glad.h	2540;"	d
glMultiTexCoord4i	support/GLFW/deps/glad/glad.h	2530;"	d
glMultiTexCoord4i	support/glad/glad.h	2543;"	d
glMultiTexCoord4iv	support/GLFW/deps/glad/glad.h	2533;"	d
glMultiTexCoord4iv	support/glad/glad.h	2546;"	d
glMultiTexCoord4s	support/GLFW/deps/glad/glad.h	2536;"	d
glMultiTexCoord4s	support/glad/glad.h	2549;"	d
glMultiTexCoord4sv	support/GLFW/deps/glad/glad.h	2539;"	d
glMultiTexCoord4sv	support/glad/glad.h	2552;"	d
glMultiTexCoordP1ui	support/glad/glad.h	3565;"	d
glMultiTexCoordP1uiv	support/glad/glad.h	3568;"	d
glMultiTexCoordP2ui	support/glad/glad.h	3571;"	d
glMultiTexCoordP2uiv	support/glad/glad.h	3574;"	d
glMultiTexCoordP3ui	support/glad/glad.h	3577;"	d
glMultiTexCoordP3uiv	support/glad/glad.h	3580;"	d
glMultiTexCoordP4ui	support/glad/glad.h	3583;"	d
glMultiTexCoordP4uiv	support/glad/glad.h	3586;"	d
glNewList	support/GLFW/deps/glad/glad.h	1528;"	d
glNewList	support/glad/glad.h	1541;"	d
glNormal3b	support/GLFW/deps/glad/glad.h	1684;"	d
glNormal3b	support/glad/glad.h	1697;"	d
glNormal3bv	support/GLFW/deps/glad/glad.h	1687;"	d
glNormal3bv	support/glad/glad.h	1700;"	d
glNormal3d	support/GLFW/deps/glad/glad.h	1690;"	d
glNormal3d	support/glad/glad.h	1703;"	d
glNormal3dv	support/GLFW/deps/glad/glad.h	1693;"	d
glNormal3dv	support/glad/glad.h	1706;"	d
glNormal3f	support/GLFW/deps/glad/glad.h	1696;"	d
glNormal3f	support/glad/glad.h	1709;"	d
glNormal3fv	support/GLFW/deps/glad/glad.h	1699;"	d
glNormal3fv	support/glad/glad.h	1712;"	d
glNormal3i	support/GLFW/deps/glad/glad.h	1702;"	d
glNormal3i	support/glad/glad.h	1715;"	d
glNormal3iv	support/GLFW/deps/glad/glad.h	1705;"	d
glNormal3iv	support/glad/glad.h	1718;"	d
glNormal3s	support/GLFW/deps/glad/glad.h	1708;"	d
glNormal3s	support/glad/glad.h	1721;"	d
glNormal3sv	support/GLFW/deps/glad/glad.h	1711;"	d
glNormal3sv	support/glad/glad.h	1724;"	d
glNormalP3ui	support/glad/glad.h	3589;"	d
glNormalP3uiv	support/glad/glad.h	3592;"	d
glNormalPointer	support/GLFW/deps/glad/glad.h	2369;"	d
glNormalPointer	support/glad/glad.h	2382;"	d
glOrtho	support/GLFW/deps/glad/glad.h	2275;"	d
glOrtho	support/glad/glad.h	2288;"	d
glPassThrough	support/GLFW/deps/glad/glad.h	2086;"	d
glPassThrough	support/glad/glad.h	2099;"	d
glPixelMapfv	support/GLFW/deps/glad/glad.h	2185;"	d
glPixelMapfv	support/glad/glad.h	2198;"	d
glPixelMapuiv	support/GLFW/deps/glad/glad.h	2188;"	d
glPixelMapuiv	support/glad/glad.h	2201;"	d
glPixelMapusv	support/GLFW/deps/glad/glad.h	2191;"	d
glPixelMapusv	support/glad/glad.h	2204;"	d
glPixelStoref	support/GLFW/deps/glad/glad.h	1474;"	d
glPixelStoref	support/glad/glad.h	1487;"	d
glPixelStorei	support/GLFW/deps/glad/glad.h	1477;"	d
glPixelStorei	support/glad/glad.h	1490;"	d
glPixelTransferf	support/GLFW/deps/glad/glad.h	2179;"	d
glPixelTransferf	support/glad/glad.h	2192;"	d
glPixelTransferi	support/GLFW/deps/glad/glad.h	2182;"	d
glPixelTransferi	support/glad/glad.h	2195;"	d
glPixelZoom	support/GLFW/deps/glad/glad.h	2176;"	d
glPixelZoom	support/glad/glad.h	2189;"	d
glPointParameterf	support/GLFW/deps/glad/glad.h	2567;"	d
glPointParameterf	support/glad/glad.h	2580;"	d
glPointParameterfv	support/GLFW/deps/glad/glad.h	2570;"	d
glPointParameterfv	support/glad/glad.h	2583;"	d
glPointParameteri	support/GLFW/deps/glad/glad.h	2573;"	d
glPointParameteri	support/glad/glad.h	2586;"	d
glPointParameteriv	support/GLFW/deps/glad/glad.h	2576;"	d
glPointParameteriv	support/glad/glad.h	2589;"	d
glPointSize	support/GLFW/deps/glad/glad.h	1396;"	d
glPointSize	support/glad/glad.h	1409;"	d
glPolygonMode	support/GLFW/deps/glad/glad.h	1399;"	d
glPolygonMode	support/glad/glad.h	1412;"	d
glPolygonOffset	support/GLFW/deps/glad/glad.h	2315;"	d
glPolygonOffset	support/glad/glad.h	2328;"	d
glPolygonStipple	support/GLFW/deps/glad/glad.h	2035;"	d
glPolygonStipple	support/glad/glad.h	2048;"	d
glPopAttrib	support/GLFW/deps/glad/glad.h	2107;"	d
glPopAttrib	support/glad/glad.h	2120;"	d
glPopClientAttrib	support/GLFW/deps/glad/glad.h	2390;"	d
glPopClientAttrib	support/glad/glad.h	2403;"	d
glPopMatrix	support/GLFW/deps/glad/glad.h	2278;"	d
glPopMatrix	support/glad/glad.h	2291;"	d
glPopName	support/GLFW/deps/glad/glad.h	2089;"	d
glPopName	support/glad/glad.h	2102;"	d
glPrimitiveRestartIndex	support/GLFW/deps/glad/glad.h	3334;"	d
glPrimitiveRestartIndex	support/glad/glad.h	3347;"	d
glPrioritizeTextures	support/GLFW/deps/glad/glad.h	2381;"	d
glPrioritizeTextures	support/glad/glad.h	2394;"	d
glProvokingVertex	support/GLFW/deps/glad/glad.h	3377;"	d
glProvokingVertex	support/glad/glad.h	3390;"	d
glPushAttrib	support/GLFW/deps/glad/glad.h	2110;"	d
glPushAttrib	support/glad/glad.h	2123;"	d
glPushClientAttrib	support/GLFW/deps/glad/glad.h	2393;"	d
glPushClientAttrib	support/glad/glad.h	2406;"	d
glPushMatrix	support/GLFW/deps/glad/glad.h	2281;"	d
glPushMatrix	support/glad/glad.h	2294;"	d
glPushName	support/GLFW/deps/glad/glad.h	2092;"	d
glPushName	support/glad/glad.h	2105;"	d
glQueryCounter	support/glad/glad.h	3487;"	d
glRasterPos2d	support/GLFW/deps/glad/glad.h	1714;"	d
glRasterPos2d	support/glad/glad.h	1727;"	d
glRasterPos2dv	support/GLFW/deps/glad/glad.h	1717;"	d
glRasterPos2dv	support/glad/glad.h	1730;"	d
glRasterPos2f	support/GLFW/deps/glad/glad.h	1720;"	d
glRasterPos2f	support/glad/glad.h	1733;"	d
glRasterPos2fv	support/GLFW/deps/glad/glad.h	1723;"	d
glRasterPos2fv	support/glad/glad.h	1736;"	d
glRasterPos2i	support/GLFW/deps/glad/glad.h	1726;"	d
glRasterPos2i	support/glad/glad.h	1739;"	d
glRasterPos2iv	support/GLFW/deps/glad/glad.h	1729;"	d
glRasterPos2iv	support/glad/glad.h	1742;"	d
glRasterPos2s	support/GLFW/deps/glad/glad.h	1732;"	d
glRasterPos2s	support/glad/glad.h	1745;"	d
glRasterPos2sv	support/GLFW/deps/glad/glad.h	1735;"	d
glRasterPos2sv	support/glad/glad.h	1748;"	d
glRasterPos3d	support/GLFW/deps/glad/glad.h	1738;"	d
glRasterPos3d	support/glad/glad.h	1751;"	d
glRasterPos3dv	support/GLFW/deps/glad/glad.h	1741;"	d
glRasterPos3dv	support/glad/glad.h	1754;"	d
glRasterPos3f	support/GLFW/deps/glad/glad.h	1744;"	d
glRasterPos3f	support/glad/glad.h	1757;"	d
glRasterPos3fv	support/GLFW/deps/glad/glad.h	1747;"	d
glRasterPos3fv	support/glad/glad.h	1760;"	d
glRasterPos3i	support/GLFW/deps/glad/glad.h	1750;"	d
glRasterPos3i	support/glad/glad.h	1763;"	d
glRasterPos3iv	support/GLFW/deps/glad/glad.h	1753;"	d
glRasterPos3iv	support/glad/glad.h	1766;"	d
glRasterPos3s	support/GLFW/deps/glad/glad.h	1756;"	d
glRasterPos3s	support/glad/glad.h	1769;"	d
glRasterPos3sv	support/GLFW/deps/glad/glad.h	1759;"	d
glRasterPos3sv	support/glad/glad.h	1772;"	d
glRasterPos4d	support/GLFW/deps/glad/glad.h	1762;"	d
glRasterPos4d	support/glad/glad.h	1775;"	d
glRasterPos4dv	support/GLFW/deps/glad/glad.h	1765;"	d
glRasterPos4dv	support/glad/glad.h	1778;"	d
glRasterPos4f	support/GLFW/deps/glad/glad.h	1768;"	d
glRasterPos4f	support/glad/glad.h	1781;"	d
glRasterPos4fv	support/GLFW/deps/glad/glad.h	1771;"	d
glRasterPos4fv	support/glad/glad.h	1784;"	d
glRasterPos4i	support/GLFW/deps/glad/glad.h	1774;"	d
glRasterPos4i	support/glad/glad.h	1787;"	d
glRasterPos4iv	support/GLFW/deps/glad/glad.h	1777;"	d
glRasterPos4iv	support/glad/glad.h	1790;"	d
glRasterPos4s	support/GLFW/deps/glad/glad.h	1780;"	d
glRasterPos4s	support/glad/glad.h	1793;"	d
glRasterPos4sv	support/GLFW/deps/glad/glad.h	1783;"	d
glRasterPos4sv	support/glad/glad.h	1796;"	d
glReadBuffer	support/GLFW/deps/glad/glad.h	1480;"	d
glReadBuffer	support/glad/glad.h	1493;"	d
glReadPixels	support/GLFW/deps/glad/glad.h	1483;"	d
glReadPixels	support/glad/glad.h	1496;"	d
glReadnPixelsARB	support/GLFW/deps/glad/glad.h	3462;"	d
glRectd	support/GLFW/deps/glad/glad.h	1786;"	d
glRectd	support/glad/glad.h	1799;"	d
glRectdv	support/GLFW/deps/glad/glad.h	1789;"	d
glRectdv	support/glad/glad.h	1802;"	d
glRectf	support/GLFW/deps/glad/glad.h	1792;"	d
glRectf	support/glad/glad.h	1805;"	d
glRectfv	support/GLFW/deps/glad/glad.h	1795;"	d
glRectfv	support/glad/glad.h	1808;"	d
glRecti	support/GLFW/deps/glad/glad.h	1798;"	d
glRecti	support/glad/glad.h	1811;"	d
glRectiv	support/GLFW/deps/glad/glad.h	1801;"	d
glRectiv	support/glad/glad.h	1814;"	d
glRects	support/GLFW/deps/glad/glad.h	1804;"	d
glRects	support/glad/glad.h	1817;"	d
glRectsv	support/GLFW/deps/glad/glad.h	1807;"	d
glRectsv	support/glad/glad.h	1820;"	d
glRenderMode	support/GLFW/deps/glad/glad.h	2077;"	d
glRenderMode	support/glad/glad.h	2090;"	d
glRenderbufferStorage	support/GLFW/deps/glad/glad.h	3255;"	d
glRenderbufferStorage	support/glad/glad.h	3268;"	d
glRenderbufferStorageMultisample	support/GLFW/deps/glad/glad.h	3297;"	d
glRenderbufferStorageMultisample	support/glad/glad.h	3310;"	d
glRotated	support/GLFW/deps/glad/glad.h	2284;"	d
glRotated	support/glad/glad.h	2297;"	d
glRotatef	support/GLFW/deps/glad/glad.h	2287;"	d
glRotatef	support/glad/glad.h	2300;"	d
glSampleCoverage	support/GLFW/deps/glad/glad.h	2419;"	d
glSampleCoverage	support/glad/glad.h	2432;"	d
glSampleCoverageARB	support/GLFW/deps/glad/glad.h	3449;"	d
glSampleMaski	support/GLFW/deps/glad/glad.h	3419;"	d
glSampleMaski	support/glad/glad.h	3432;"	d
glSamplerParameterIiv	support/glad/glad.h	3469;"	d
glSamplerParameterIuiv	support/glad/glad.h	3472;"	d
glSamplerParameterf	support/glad/glad.h	3463;"	d
glSamplerParameterfv	support/glad/glad.h	3466;"	d
glSamplerParameteri	support/glad/glad.h	3457;"	d
glSamplerParameteriv	support/glad/glad.h	3460;"	d
glScaled	support/GLFW/deps/glad/glad.h	2290;"	d
glScaled	support/glad/glad.h	2303;"	d
glScalef	support/GLFW/deps/glad/glad.h	2293;"	d
glScalef	support/glad/glad.h	2306;"	d
glScissor	support/GLFW/deps/glad/glad.h	1402;"	d
glScissor	support/glad/glad.h	1415;"	d
glSecondaryColor3b	support/GLFW/deps/glad/glad.h	2594;"	d
glSecondaryColor3b	support/glad/glad.h	2607;"	d
glSecondaryColor3bv	support/GLFW/deps/glad/glad.h	2597;"	d
glSecondaryColor3bv	support/glad/glad.h	2610;"	d
glSecondaryColor3d	support/GLFW/deps/glad/glad.h	2600;"	d
glSecondaryColor3d	support/glad/glad.h	2613;"	d
glSecondaryColor3dv	support/GLFW/deps/glad/glad.h	2603;"	d
glSecondaryColor3dv	support/glad/glad.h	2616;"	d
glSecondaryColor3f	support/GLFW/deps/glad/glad.h	2606;"	d
glSecondaryColor3f	support/glad/glad.h	2619;"	d
glSecondaryColor3fv	support/GLFW/deps/glad/glad.h	2609;"	d
glSecondaryColor3fv	support/glad/glad.h	2622;"	d
glSecondaryColor3i	support/GLFW/deps/glad/glad.h	2612;"	d
glSecondaryColor3i	support/glad/glad.h	2625;"	d
glSecondaryColor3iv	support/GLFW/deps/glad/glad.h	2615;"	d
glSecondaryColor3iv	support/glad/glad.h	2628;"	d
glSecondaryColor3s	support/GLFW/deps/glad/glad.h	2618;"	d
glSecondaryColor3s	support/glad/glad.h	2631;"	d
glSecondaryColor3sv	support/GLFW/deps/glad/glad.h	2621;"	d
glSecondaryColor3sv	support/glad/glad.h	2634;"	d
glSecondaryColor3ub	support/GLFW/deps/glad/glad.h	2624;"	d
glSecondaryColor3ub	support/glad/glad.h	2637;"	d
glSecondaryColor3ubv	support/GLFW/deps/glad/glad.h	2627;"	d
glSecondaryColor3ubv	support/glad/glad.h	2640;"	d
glSecondaryColor3ui	support/GLFW/deps/glad/glad.h	2630;"	d
glSecondaryColor3ui	support/glad/glad.h	2643;"	d
glSecondaryColor3uiv	support/GLFW/deps/glad/glad.h	2633;"	d
glSecondaryColor3uiv	support/glad/glad.h	2646;"	d
glSecondaryColor3us	support/GLFW/deps/glad/glad.h	2636;"	d
glSecondaryColor3us	support/glad/glad.h	2649;"	d
glSecondaryColor3usv	support/GLFW/deps/glad/glad.h	2639;"	d
glSecondaryColor3usv	support/glad/glad.h	2652;"	d
glSecondaryColorP3ui	support/glad/glad.h	3607;"	d
glSecondaryColorP3uiv	support/glad/glad.h	3610;"	d
glSecondaryColorPointer	support/GLFW/deps/glad/glad.h	2642;"	d
glSecondaryColorPointer	support/glad/glad.h	2655;"	d
glSelectBuffer	support/GLFW/deps/glad/glad.h	2074;"	d
glSelectBuffer	support/glad/glad.h	2087;"	d
glShadeModel	support/GLFW/deps/glad/glad.h	2038;"	d
glShadeModel	support/glad/glad.h	2051;"	d
glShaderSource	support/GLFW/deps/glad/glad.h	2866;"	d
glShaderSource	support/glad/glad.h	2879;"	d
glStencilFunc	support/GLFW/deps/glad/glad.h	1465;"	d
glStencilFunc	support/glad/glad.h	1478;"	d
glStencilFuncSeparate	support/GLFW/deps/glad/glad.h	2773;"	d
glStencilFuncSeparate	support/glad/glad.h	2786;"	d
glStencilMask	support/GLFW/deps/glad/glad.h	1438;"	d
glStencilMask	support/glad/glad.h	1451;"	d
glStencilMaskSeparate	support/GLFW/deps/glad/glad.h	2776;"	d
glStencilMaskSeparate	support/glad/glad.h	2789;"	d
glStencilOp	support/GLFW/deps/glad/glad.h	1468;"	d
glStencilOp	support/glad/glad.h	1481;"	d
glStencilOpSeparate	support/GLFW/deps/glad/glad.h	2770;"	d
glStencilOpSeparate	support/glad/glad.h	2783;"	d
glTexBuffer	support/GLFW/deps/glad/glad.h	3331;"	d
glTexBuffer	support/glad/glad.h	3344;"	d
glTexCoord1d	support/GLFW/deps/glad/glad.h	1810;"	d
glTexCoord1d	support/glad/glad.h	1823;"	d
glTexCoord1dv	support/GLFW/deps/glad/glad.h	1813;"	d
glTexCoord1dv	support/glad/glad.h	1826;"	d
glTexCoord1f	support/GLFW/deps/glad/glad.h	1816;"	d
glTexCoord1f	support/glad/glad.h	1829;"	d
glTexCoord1fv	support/GLFW/deps/glad/glad.h	1819;"	d
glTexCoord1fv	support/glad/glad.h	1832;"	d
glTexCoord1i	support/GLFW/deps/glad/glad.h	1822;"	d
glTexCoord1i	support/glad/glad.h	1835;"	d
glTexCoord1iv	support/GLFW/deps/glad/glad.h	1825;"	d
glTexCoord1iv	support/glad/glad.h	1838;"	d
glTexCoord1s	support/GLFW/deps/glad/glad.h	1828;"	d
glTexCoord1s	support/glad/glad.h	1841;"	d
glTexCoord1sv	support/GLFW/deps/glad/glad.h	1831;"	d
glTexCoord1sv	support/glad/glad.h	1844;"	d
glTexCoord2d	support/GLFW/deps/glad/glad.h	1834;"	d
glTexCoord2d	support/glad/glad.h	1847;"	d
glTexCoord2dv	support/GLFW/deps/glad/glad.h	1837;"	d
glTexCoord2dv	support/glad/glad.h	1850;"	d
glTexCoord2f	support/GLFW/deps/glad/glad.h	1840;"	d
glTexCoord2f	support/glad/glad.h	1853;"	d
glTexCoord2fv	support/GLFW/deps/glad/glad.h	1843;"	d
glTexCoord2fv	support/glad/glad.h	1856;"	d
glTexCoord2i	support/GLFW/deps/glad/glad.h	1846;"	d
glTexCoord2i	support/glad/glad.h	1859;"	d
glTexCoord2iv	support/GLFW/deps/glad/glad.h	1849;"	d
glTexCoord2iv	support/glad/glad.h	1862;"	d
glTexCoord2s	support/GLFW/deps/glad/glad.h	1852;"	d
glTexCoord2s	support/glad/glad.h	1865;"	d
glTexCoord2sv	support/GLFW/deps/glad/glad.h	1855;"	d
glTexCoord2sv	support/glad/glad.h	1868;"	d
glTexCoord3d	support/GLFW/deps/glad/glad.h	1858;"	d
glTexCoord3d	support/glad/glad.h	1871;"	d
glTexCoord3dv	support/GLFW/deps/glad/glad.h	1861;"	d
glTexCoord3dv	support/glad/glad.h	1874;"	d
glTexCoord3f	support/GLFW/deps/glad/glad.h	1864;"	d
glTexCoord3f	support/glad/glad.h	1877;"	d
glTexCoord3fv	support/GLFW/deps/glad/glad.h	1867;"	d
glTexCoord3fv	support/glad/glad.h	1880;"	d
glTexCoord3i	support/GLFW/deps/glad/glad.h	1870;"	d
glTexCoord3i	support/glad/glad.h	1883;"	d
glTexCoord3iv	support/GLFW/deps/glad/glad.h	1873;"	d
glTexCoord3iv	support/glad/glad.h	1886;"	d
glTexCoord3s	support/GLFW/deps/glad/glad.h	1876;"	d
glTexCoord3s	support/glad/glad.h	1889;"	d
glTexCoord3sv	support/GLFW/deps/glad/glad.h	1879;"	d
glTexCoord3sv	support/glad/glad.h	1892;"	d
glTexCoord4d	support/GLFW/deps/glad/glad.h	1882;"	d
glTexCoord4d	support/glad/glad.h	1895;"	d
glTexCoord4dv	support/GLFW/deps/glad/glad.h	1885;"	d
glTexCoord4dv	support/glad/glad.h	1898;"	d
glTexCoord4f	support/GLFW/deps/glad/glad.h	1888;"	d
glTexCoord4f	support/glad/glad.h	1901;"	d
glTexCoord4fv	support/GLFW/deps/glad/glad.h	1891;"	d
glTexCoord4fv	support/glad/glad.h	1904;"	d
glTexCoord4i	support/GLFW/deps/glad/glad.h	1894;"	d
glTexCoord4i	support/glad/glad.h	1907;"	d
glTexCoord4iv	support/GLFW/deps/glad/glad.h	1897;"	d
glTexCoord4iv	support/glad/glad.h	1910;"	d
glTexCoord4s	support/GLFW/deps/glad/glad.h	1900;"	d
glTexCoord4s	support/glad/glad.h	1913;"	d
glTexCoord4sv	support/GLFW/deps/glad/glad.h	1903;"	d
glTexCoord4sv	support/glad/glad.h	1916;"	d
glTexCoordP1ui	support/glad/glad.h	3541;"	d
glTexCoordP1uiv	support/glad/glad.h	3544;"	d
glTexCoordP2ui	support/glad/glad.h	3547;"	d
glTexCoordP2uiv	support/glad/glad.h	3550;"	d
glTexCoordP3ui	support/glad/glad.h	3553;"	d
glTexCoordP3uiv	support/glad/glad.h	3556;"	d
glTexCoordP4ui	support/glad/glad.h	3559;"	d
glTexCoordP4uiv	support/glad/glad.h	3562;"	d
glTexCoordPointer	support/GLFW/deps/glad/glad.h	2372;"	d
glTexCoordPointer	support/glad/glad.h	2385;"	d
glTexEnvf	support/GLFW/deps/glad/glad.h	2041;"	d
glTexEnvf	support/glad/glad.h	2054;"	d
glTexEnvfv	support/GLFW/deps/glad/glad.h	2044;"	d
glTexEnvfv	support/glad/glad.h	2057;"	d
glTexEnvi	support/GLFW/deps/glad/glad.h	2047;"	d
glTexEnvi	support/glad/glad.h	2060;"	d
glTexEnviv	support/GLFW/deps/glad/glad.h	2050;"	d
glTexEnviv	support/glad/glad.h	2063;"	d
glTexGend	support/GLFW/deps/glad/glad.h	2053;"	d
glTexGend	support/glad/glad.h	2066;"	d
glTexGendv	support/GLFW/deps/glad/glad.h	2056;"	d
glTexGendv	support/glad/glad.h	2069;"	d
glTexGenf	support/GLFW/deps/glad/glad.h	2059;"	d
glTexGenf	support/glad/glad.h	2072;"	d
glTexGenfv	support/GLFW/deps/glad/glad.h	2062;"	d
glTexGenfv	support/glad/glad.h	2075;"	d
glTexGeni	support/GLFW/deps/glad/glad.h	2065;"	d
glTexGeni	support/glad/glad.h	2078;"	d
glTexGeniv	support/GLFW/deps/glad/glad.h	2068;"	d
glTexGeniv	support/glad/glad.h	2081;"	d
glTexImage1D	support/GLFW/deps/glad/glad.h	1417;"	d
glTexImage1D	support/glad/glad.h	1430;"	d
glTexImage2D	support/GLFW/deps/glad/glad.h	1420;"	d
glTexImage2D	support/glad/glad.h	1433;"	d
glTexImage2DMultisample	support/GLFW/deps/glad/glad.h	3410;"	d
glTexImage2DMultisample	support/glad/glad.h	3423;"	d
glTexImage3D	support/GLFW/deps/glad/glad.h	2403;"	d
glTexImage3D	support/glad/glad.h	2416;"	d
glTexImage3DMultisample	support/GLFW/deps/glad/glad.h	3413;"	d
glTexImage3DMultisample	support/glad/glad.h	3426;"	d
glTexParameterIiv	support/GLFW/deps/glad/glad.h	3216;"	d
glTexParameterIiv	support/glad/glad.h	3229;"	d
glTexParameterIuiv	support/GLFW/deps/glad/glad.h	3219;"	d
glTexParameterIuiv	support/glad/glad.h	3232;"	d
glTexParameterf	support/GLFW/deps/glad/glad.h	1405;"	d
glTexParameterf	support/glad/glad.h	1418;"	d
glTexParameterfv	support/GLFW/deps/glad/glad.h	1408;"	d
glTexParameterfv	support/glad/glad.h	1421;"	d
glTexParameteri	support/GLFW/deps/glad/glad.h	1411;"	d
glTexParameteri	support/glad/glad.h	1424;"	d
glTexParameteriv	support/GLFW/deps/glad/glad.h	1414;"	d
glTexParameteriv	support/glad/glad.h	1427;"	d
glTexSubImage1D	support/GLFW/deps/glad/glad.h	2330;"	d
glTexSubImage1D	support/glad/glad.h	2343;"	d
glTexSubImage2D	support/GLFW/deps/glad/glad.h	2333;"	d
glTexSubImage2D	support/glad/glad.h	2346;"	d
glTexSubImage3D	support/GLFW/deps/glad/glad.h	2406;"	d
glTexSubImage3D	support/glad/glad.h	2419;"	d
glTransformFeedbackVaryings	support/GLFW/deps/glad/glad.h	3099;"	d
glTransformFeedbackVaryings	support/glad/glad.h	3112;"	d
glTranslated	support/GLFW/deps/glad/glad.h	2296;"	d
glTranslated	support/glad/glad.h	2309;"	d
glTranslatef	support/GLFW/deps/glad/glad.h	2299;"	d
glTranslatef	support/glad/glad.h	2312;"	d
glUniform1f	support/GLFW/deps/glad/glad.h	2872;"	d
glUniform1f	support/glad/glad.h	2885;"	d
glUniform1fv	support/GLFW/deps/glad/glad.h	2896;"	d
glUniform1fv	support/glad/glad.h	2909;"	d
glUniform1i	support/GLFW/deps/glad/glad.h	2884;"	d
glUniform1i	support/glad/glad.h	2897;"	d
glUniform1iv	support/GLFW/deps/glad/glad.h	2908;"	d
glUniform1iv	support/glad/glad.h	2921;"	d
glUniform1ui	support/GLFW/deps/glad/glad.h	3192;"	d
glUniform1ui	support/glad/glad.h	3205;"	d
glUniform1uiv	support/GLFW/deps/glad/glad.h	3204;"	d
glUniform1uiv	support/glad/glad.h	3217;"	d
glUniform2f	support/GLFW/deps/glad/glad.h	2875;"	d
glUniform2f	support/glad/glad.h	2888;"	d
glUniform2fv	support/GLFW/deps/glad/glad.h	2899;"	d
glUniform2fv	support/glad/glad.h	2912;"	d
glUniform2i	support/GLFW/deps/glad/glad.h	2887;"	d
glUniform2i	support/glad/glad.h	2900;"	d
glUniform2iv	support/GLFW/deps/glad/glad.h	2911;"	d
glUniform2iv	support/glad/glad.h	2924;"	d
glUniform2ui	support/GLFW/deps/glad/glad.h	3195;"	d
glUniform2ui	support/glad/glad.h	3208;"	d
glUniform2uiv	support/GLFW/deps/glad/glad.h	3207;"	d
glUniform2uiv	support/glad/glad.h	3220;"	d
glUniform3f	support/GLFW/deps/glad/glad.h	2878;"	d
glUniform3f	support/glad/glad.h	2891;"	d
glUniform3fv	support/GLFW/deps/glad/glad.h	2902;"	d
glUniform3fv	support/glad/glad.h	2915;"	d
glUniform3i	support/GLFW/deps/glad/glad.h	2890;"	d
glUniform3i	support/glad/glad.h	2903;"	d
glUniform3iv	support/GLFW/deps/glad/glad.h	2914;"	d
glUniform3iv	support/glad/glad.h	2927;"	d
glUniform3ui	support/GLFW/deps/glad/glad.h	3198;"	d
glUniform3ui	support/glad/glad.h	3211;"	d
glUniform3uiv	support/GLFW/deps/glad/glad.h	3210;"	d
glUniform3uiv	support/glad/glad.h	3223;"	d
glUniform4f	support/GLFW/deps/glad/glad.h	2881;"	d
glUniform4f	support/glad/glad.h	2894;"	d
glUniform4fv	support/GLFW/deps/glad/glad.h	2905;"	d
glUniform4fv	support/glad/glad.h	2918;"	d
glUniform4i	support/GLFW/deps/glad/glad.h	2893;"	d
glUniform4i	support/glad/glad.h	2906;"	d
glUniform4iv	support/GLFW/deps/glad/glad.h	2917;"	d
glUniform4iv	support/glad/glad.h	2930;"	d
glUniform4ui	support/GLFW/deps/glad/glad.h	3201;"	d
glUniform4ui	support/glad/glad.h	3214;"	d
glUniform4uiv	support/GLFW/deps/glad/glad.h	3213;"	d
glUniform4uiv	support/glad/glad.h	3226;"	d
glUniformBlockBinding	support/GLFW/deps/glad/glad.h	3358;"	d
glUniformBlockBinding	support/glad/glad.h	3371;"	d
glUniformMatrix2fv	support/GLFW/deps/glad/glad.h	2920;"	d
glUniformMatrix2fv	support/glad/glad.h	2933;"	d
glUniformMatrix2x3fv	support/GLFW/deps/glad/glad.h	3047;"	d
glUniformMatrix2x3fv	support/glad/glad.h	3060;"	d
glUniformMatrix2x4fv	support/GLFW/deps/glad/glad.h	3053;"	d
glUniformMatrix2x4fv	support/glad/glad.h	3066;"	d
glUniformMatrix3fv	support/GLFW/deps/glad/glad.h	2923;"	d
glUniformMatrix3fv	support/glad/glad.h	2936;"	d
glUniformMatrix3x2fv	support/GLFW/deps/glad/glad.h	3050;"	d
glUniformMatrix3x2fv	support/glad/glad.h	3063;"	d
glUniformMatrix3x4fv	support/GLFW/deps/glad/glad.h	3059;"	d
glUniformMatrix3x4fv	support/glad/glad.h	3072;"	d
glUniformMatrix4fv	support/GLFW/deps/glad/glad.h	2926;"	d
glUniformMatrix4fv	support/glad/glad.h	2939;"	d
glUniformMatrix4x2fv	support/GLFW/deps/glad/glad.h	3056;"	d
glUniformMatrix4x2fv	support/glad/glad.h	3069;"	d
glUniformMatrix4x3fv	support/GLFW/deps/glad/glad.h	3062;"	d
glUniformMatrix4x3fv	support/glad/glad.h	3075;"	d
glUnmapBuffer	support/GLFW/deps/glad/glad.h	2751;"	d
glUnmapBuffer	support/glad/glad.h	2764;"	d
glUseProgram	support/GLFW/deps/glad/glad.h	2869;"	d
glUseProgram	support/glad/glad.h	2882;"	d
glValidateProgram	support/GLFW/deps/glad/glad.h	2929;"	d
glValidateProgram	support/glad/glad.h	2942;"	d
glVertex2d	support/GLFW/deps/glad/glad.h	1906;"	d
glVertex2d	support/glad/glad.h	1919;"	d
glVertex2dv	support/GLFW/deps/glad/glad.h	1909;"	d
glVertex2dv	support/glad/glad.h	1922;"	d
glVertex2f	support/GLFW/deps/glad/glad.h	1912;"	d
glVertex2f	support/glad/glad.h	1925;"	d
glVertex2fv	support/GLFW/deps/glad/glad.h	1915;"	d
glVertex2fv	support/glad/glad.h	1928;"	d
glVertex2i	support/GLFW/deps/glad/glad.h	1918;"	d
glVertex2i	support/glad/glad.h	1931;"	d
glVertex2iv	support/GLFW/deps/glad/glad.h	1921;"	d
glVertex2iv	support/glad/glad.h	1934;"	d
glVertex2s	support/GLFW/deps/glad/glad.h	1924;"	d
glVertex2s	support/glad/glad.h	1937;"	d
glVertex2sv	support/GLFW/deps/glad/glad.h	1927;"	d
glVertex2sv	support/glad/glad.h	1940;"	d
glVertex3d	support/GLFW/deps/glad/glad.h	1930;"	d
glVertex3d	support/glad/glad.h	1943;"	d
glVertex3dv	support/GLFW/deps/glad/glad.h	1933;"	d
glVertex3dv	support/glad/glad.h	1946;"	d
glVertex3f	support/GLFW/deps/glad/glad.h	1936;"	d
glVertex3f	support/glad/glad.h	1949;"	d
glVertex3fv	support/GLFW/deps/glad/glad.h	1939;"	d
glVertex3fv	support/glad/glad.h	1952;"	d
glVertex3i	support/GLFW/deps/glad/glad.h	1942;"	d
glVertex3i	support/glad/glad.h	1955;"	d
glVertex3iv	support/GLFW/deps/glad/glad.h	1945;"	d
glVertex3iv	support/glad/glad.h	1958;"	d
glVertex3s	support/GLFW/deps/glad/glad.h	1948;"	d
glVertex3s	support/glad/glad.h	1961;"	d
glVertex3sv	support/GLFW/deps/glad/glad.h	1951;"	d
glVertex3sv	support/glad/glad.h	1964;"	d
glVertex4d	support/GLFW/deps/glad/glad.h	1954;"	d
glVertex4d	support/glad/glad.h	1967;"	d
glVertex4dv	support/GLFW/deps/glad/glad.h	1957;"	d
glVertex4dv	support/glad/glad.h	1970;"	d
glVertex4f	support/GLFW/deps/glad/glad.h	1960;"	d
glVertex4f	support/glad/glad.h	1973;"	d
glVertex4fv	support/GLFW/deps/glad/glad.h	1963;"	d
glVertex4fv	support/glad/glad.h	1976;"	d
glVertex4i	support/GLFW/deps/glad/glad.h	1966;"	d
glVertex4i	support/glad/glad.h	1979;"	d
glVertex4iv	support/GLFW/deps/glad/glad.h	1969;"	d
glVertex4iv	support/glad/glad.h	1982;"	d
glVertex4s	support/GLFW/deps/glad/glad.h	1972;"	d
glVertex4s	support/glad/glad.h	1985;"	d
glVertex4sv	support/GLFW/deps/glad/glad.h	1975;"	d
glVertex4sv	support/glad/glad.h	1988;"	d
glVertexAttrib1d	support/GLFW/deps/glad/glad.h	2932;"	d
glVertexAttrib1d	support/glad/glad.h	2945;"	d
glVertexAttrib1dv	support/GLFW/deps/glad/glad.h	2935;"	d
glVertexAttrib1dv	support/glad/glad.h	2948;"	d
glVertexAttrib1f	support/GLFW/deps/glad/glad.h	2938;"	d
glVertexAttrib1f	support/glad/glad.h	2951;"	d
glVertexAttrib1fv	support/GLFW/deps/glad/glad.h	2941;"	d
glVertexAttrib1fv	support/glad/glad.h	2954;"	d
glVertexAttrib1s	support/GLFW/deps/glad/glad.h	2944;"	d
glVertexAttrib1s	support/glad/glad.h	2957;"	d
glVertexAttrib1sv	support/GLFW/deps/glad/glad.h	2947;"	d
glVertexAttrib1sv	support/glad/glad.h	2960;"	d
glVertexAttrib2d	support/GLFW/deps/glad/glad.h	2950;"	d
glVertexAttrib2d	support/glad/glad.h	2963;"	d
glVertexAttrib2dv	support/GLFW/deps/glad/glad.h	2953;"	d
glVertexAttrib2dv	support/glad/glad.h	2966;"	d
glVertexAttrib2f	support/GLFW/deps/glad/glad.h	2956;"	d
glVertexAttrib2f	support/glad/glad.h	2969;"	d
glVertexAttrib2fv	support/GLFW/deps/glad/glad.h	2959;"	d
glVertexAttrib2fv	support/glad/glad.h	2972;"	d
glVertexAttrib2s	support/GLFW/deps/glad/glad.h	2962;"	d
glVertexAttrib2s	support/glad/glad.h	2975;"	d
glVertexAttrib2sv	support/GLFW/deps/glad/glad.h	2965;"	d
glVertexAttrib2sv	support/glad/glad.h	2978;"	d
glVertexAttrib3d	support/GLFW/deps/glad/glad.h	2968;"	d
glVertexAttrib3d	support/glad/glad.h	2981;"	d
glVertexAttrib3dv	support/GLFW/deps/glad/glad.h	2971;"	d
glVertexAttrib3dv	support/glad/glad.h	2984;"	d
glVertexAttrib3f	support/GLFW/deps/glad/glad.h	2974;"	d
glVertexAttrib3f	support/glad/glad.h	2987;"	d
glVertexAttrib3fv	support/GLFW/deps/glad/glad.h	2977;"	d
glVertexAttrib3fv	support/glad/glad.h	2990;"	d
glVertexAttrib3s	support/GLFW/deps/glad/glad.h	2980;"	d
glVertexAttrib3s	support/glad/glad.h	2993;"	d
glVertexAttrib3sv	support/GLFW/deps/glad/glad.h	2983;"	d
glVertexAttrib3sv	support/glad/glad.h	2996;"	d
glVertexAttrib4Nbv	support/GLFW/deps/glad/glad.h	2986;"	d
glVertexAttrib4Nbv	support/glad/glad.h	2999;"	d
glVertexAttrib4Niv	support/GLFW/deps/glad/glad.h	2989;"	d
glVertexAttrib4Niv	support/glad/glad.h	3002;"	d
glVertexAttrib4Nsv	support/GLFW/deps/glad/glad.h	2992;"	d
glVertexAttrib4Nsv	support/glad/glad.h	3005;"	d
glVertexAttrib4Nub	support/GLFW/deps/glad/glad.h	2995;"	d
glVertexAttrib4Nub	support/glad/glad.h	3008;"	d
glVertexAttrib4Nubv	support/GLFW/deps/glad/glad.h	2998;"	d
glVertexAttrib4Nubv	support/glad/glad.h	3011;"	d
glVertexAttrib4Nuiv	support/GLFW/deps/glad/glad.h	3001;"	d
glVertexAttrib4Nuiv	support/glad/glad.h	3014;"	d
glVertexAttrib4Nusv	support/GLFW/deps/glad/glad.h	3004;"	d
glVertexAttrib4Nusv	support/glad/glad.h	3017;"	d
glVertexAttrib4bv	support/GLFW/deps/glad/glad.h	3007;"	d
glVertexAttrib4bv	support/glad/glad.h	3020;"	d
glVertexAttrib4d	support/GLFW/deps/glad/glad.h	3010;"	d
glVertexAttrib4d	support/glad/glad.h	3023;"	d
glVertexAttrib4dv	support/GLFW/deps/glad/glad.h	3013;"	d
glVertexAttrib4dv	support/glad/glad.h	3026;"	d
glVertexAttrib4f	support/GLFW/deps/glad/glad.h	3016;"	d
glVertexAttrib4f	support/glad/glad.h	3029;"	d
glVertexAttrib4fv	support/GLFW/deps/glad/glad.h	3019;"	d
glVertexAttrib4fv	support/glad/glad.h	3032;"	d
glVertexAttrib4iv	support/GLFW/deps/glad/glad.h	3022;"	d
glVertexAttrib4iv	support/glad/glad.h	3035;"	d
glVertexAttrib4s	support/GLFW/deps/glad/glad.h	3025;"	d
glVertexAttrib4s	support/glad/glad.h	3038;"	d
glVertexAttrib4sv	support/GLFW/deps/glad/glad.h	3028;"	d
glVertexAttrib4sv	support/glad/glad.h	3041;"	d
glVertexAttrib4ubv	support/GLFW/deps/glad/glad.h	3031;"	d
glVertexAttrib4ubv	support/glad/glad.h	3044;"	d
glVertexAttrib4uiv	support/GLFW/deps/glad/glad.h	3034;"	d
glVertexAttrib4uiv	support/glad/glad.h	3047;"	d
glVertexAttrib4usv	support/GLFW/deps/glad/glad.h	3037;"	d
glVertexAttrib4usv	support/glad/glad.h	3050;"	d
glVertexAttribDivisor	support/glad/glad.h	3496;"	d
glVertexAttribI1i	support/GLFW/deps/glad/glad.h	3123;"	d
glVertexAttribI1i	support/glad/glad.h	3136;"	d
glVertexAttribI1iv	support/GLFW/deps/glad/glad.h	3147;"	d
glVertexAttribI1iv	support/glad/glad.h	3160;"	d
glVertexAttribI1ui	support/GLFW/deps/glad/glad.h	3135;"	d
glVertexAttribI1ui	support/glad/glad.h	3148;"	d
glVertexAttribI1uiv	support/GLFW/deps/glad/glad.h	3159;"	d
glVertexAttribI1uiv	support/glad/glad.h	3172;"	d
glVertexAttribI2i	support/GLFW/deps/glad/glad.h	3126;"	d
glVertexAttribI2i	support/glad/glad.h	3139;"	d
glVertexAttribI2iv	support/GLFW/deps/glad/glad.h	3150;"	d
glVertexAttribI2iv	support/glad/glad.h	3163;"	d
glVertexAttribI2ui	support/GLFW/deps/glad/glad.h	3138;"	d
glVertexAttribI2ui	support/glad/glad.h	3151;"	d
glVertexAttribI2uiv	support/GLFW/deps/glad/glad.h	3162;"	d
glVertexAttribI2uiv	support/glad/glad.h	3175;"	d
glVertexAttribI3i	support/GLFW/deps/glad/glad.h	3129;"	d
glVertexAttribI3i	support/glad/glad.h	3142;"	d
glVertexAttribI3iv	support/GLFW/deps/glad/glad.h	3153;"	d
glVertexAttribI3iv	support/glad/glad.h	3166;"	d
glVertexAttribI3ui	support/GLFW/deps/glad/glad.h	3141;"	d
glVertexAttribI3ui	support/glad/glad.h	3154;"	d
glVertexAttribI3uiv	support/GLFW/deps/glad/glad.h	3165;"	d
glVertexAttribI3uiv	support/glad/glad.h	3178;"	d
glVertexAttribI4bv	support/GLFW/deps/glad/glad.h	3171;"	d
glVertexAttribI4bv	support/glad/glad.h	3184;"	d
glVertexAttribI4i	support/GLFW/deps/glad/glad.h	3132;"	d
glVertexAttribI4i	support/glad/glad.h	3145;"	d
glVertexAttribI4iv	support/GLFW/deps/glad/glad.h	3156;"	d
glVertexAttribI4iv	support/glad/glad.h	3169;"	d
glVertexAttribI4sv	support/GLFW/deps/glad/glad.h	3174;"	d
glVertexAttribI4sv	support/glad/glad.h	3187;"	d
glVertexAttribI4ubv	support/GLFW/deps/glad/glad.h	3177;"	d
glVertexAttribI4ubv	support/glad/glad.h	3190;"	d
glVertexAttribI4ui	support/GLFW/deps/glad/glad.h	3144;"	d
glVertexAttribI4ui	support/glad/glad.h	3157;"	d
glVertexAttribI4uiv	support/GLFW/deps/glad/glad.h	3168;"	d
glVertexAttribI4uiv	support/glad/glad.h	3181;"	d
glVertexAttribI4usv	support/GLFW/deps/glad/glad.h	3180;"	d
glVertexAttribI4usv	support/glad/glad.h	3193;"	d
glVertexAttribIPointer	support/GLFW/deps/glad/glad.h	3114;"	d
glVertexAttribIPointer	support/glad/glad.h	3127;"	d
glVertexAttribP1ui	support/glad/glad.h	3499;"	d
glVertexAttribP1uiv	support/glad/glad.h	3502;"	d
glVertexAttribP2ui	support/glad/glad.h	3505;"	d
glVertexAttribP2uiv	support/glad/glad.h	3508;"	d
glVertexAttribP3ui	support/glad/glad.h	3511;"	d
glVertexAttribP3uiv	support/glad/glad.h	3514;"	d
glVertexAttribP4ui	support/glad/glad.h	3517;"	d
glVertexAttribP4uiv	support/glad/glad.h	3520;"	d
glVertexAttribPointer	support/GLFW/deps/glad/glad.h	3040;"	d
glVertexAttribPointer	support/glad/glad.h	3053;"	d
glVertexP2ui	support/glad/glad.h	3523;"	d
glVertexP2uiv	support/glad/glad.h	3526;"	d
glVertexP3ui	support/glad/glad.h	3529;"	d
glVertexP3uiv	support/glad/glad.h	3532;"	d
glVertexP4ui	support/glad/glad.h	3535;"	d
glVertexP4uiv	support/glad/glad.h	3538;"	d
glVertexPointer	support/GLFW/deps/glad/glad.h	2375;"	d
glVertexPointer	support/glad/glad.h	2388;"	d
glViewport	support/GLFW/deps/glad/glad.h	1525;"	d
glViewport	support/glad/glad.h	1538;"	d
glWaitSync	support/GLFW/deps/glad/glad.h	3392;"	d
glWaitSync	support/glad/glad.h	3405;"	d
glWindowPos2d	support/GLFW/deps/glad/glad.h	2645;"	d
glWindowPos2d	support/glad/glad.h	2658;"	d
glWindowPos2dv	support/GLFW/deps/glad/glad.h	2648;"	d
glWindowPos2dv	support/glad/glad.h	2661;"	d
glWindowPos2f	support/GLFW/deps/glad/glad.h	2651;"	d
glWindowPos2f	support/glad/glad.h	2664;"	d
glWindowPos2fv	support/GLFW/deps/glad/glad.h	2654;"	d
glWindowPos2fv	support/glad/glad.h	2667;"	d
glWindowPos2i	support/GLFW/deps/glad/glad.h	2657;"	d
glWindowPos2i	support/glad/glad.h	2670;"	d
glWindowPos2iv	support/GLFW/deps/glad/glad.h	2660;"	d
glWindowPos2iv	support/glad/glad.h	2673;"	d
glWindowPos2s	support/GLFW/deps/glad/glad.h	2663;"	d
glWindowPos2s	support/glad/glad.h	2676;"	d
glWindowPos2sv	support/GLFW/deps/glad/glad.h	2666;"	d
glWindowPos2sv	support/glad/glad.h	2679;"	d
glWindowPos3d	support/GLFW/deps/glad/glad.h	2669;"	d
glWindowPos3d	support/glad/glad.h	2682;"	d
glWindowPos3dv	support/GLFW/deps/glad/glad.h	2672;"	d
glWindowPos3dv	support/glad/glad.h	2685;"	d
glWindowPos3f	support/GLFW/deps/glad/glad.h	2675;"	d
glWindowPos3f	support/glad/glad.h	2688;"	d
glWindowPos3fv	support/GLFW/deps/glad/glad.h	2678;"	d
glWindowPos3fv	support/glad/glad.h	2691;"	d
glWindowPos3i	support/GLFW/deps/glad/glad.h	2681;"	d
glWindowPos3i	support/glad/glad.h	2694;"	d
glWindowPos3iv	support/GLFW/deps/glad/glad.h	2684;"	d
glWindowPos3iv	support/glad/glad.h	2697;"	d
glWindowPos3s	support/GLFW/deps/glad/glad.h	2687;"	d
glWindowPos3s	support/glad/glad.h	2700;"	d
glWindowPos3sv	support/GLFW/deps/glad/glad.h	2690;"	d
glWindowPos3sv	support/glad/glad.h	2703;"	d
glXCreateNewContext	support/GLFW/src/glx_context.h	106;"	d
glXCreateWindow	support/GLFW/src/glx_context.h	108;"	d
glXDestroyContext	support/GLFW/src/glx_context.h	102;"	d
glXDestroyWindow	support/GLFW/src/glx_context.h	109;"	d
glXGetClientString	support/GLFW/src/glx_context.h	99;"	d
glXGetFBConfigAttrib	support/GLFW/src/glx_context.h	98;"	d
glXGetFBConfigs	support/GLFW/src/glx_context.h	97;"	d
glXGetVisualFromFBConfig	support/GLFW/src/glx_context.h	107;"	d
glXMakeCurrent	support/GLFW/src/glx_context.h	103;"	d
glXQueryExtension	support/GLFW/src/glx_context.h	100;"	d
glXQueryExtensionsString	support/GLFW/src/glx_context.h	105;"	d
glXQueryVersion	support/GLFW/src/glx_context.h	101;"	d
glXSwapBuffers	support/GLFW/src/glx_context.h	104;"	d
gladGLversionStruct	support/GLFW/deps/glad/glad.h	/^struct gladGLversionStruct {$/;"	s
gladGLversionStruct	support/glad/glad.h	/^struct gladGLversionStruct {$/;"	s
gladGetProcAddressPtr	support/glad/glad.c	/^static PFNGLXGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	file:
gladGetProcAddressPtr	support/glad/glad.c	/^static PFNWGLGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	file:
gladLoadGL	support/glad/glad.c	/^int gladLoadGL(void) {$/;"	f
gladLoadGLLoader	support/GLFW/deps/glad.c	/^int gladLoadGLLoader(GLADloadproc load) {$/;"	f
gladLoadGLLoader	support/glad/glad.c	/^int gladLoadGLLoader(GLADloadproc load) {$/;"	f
glad_glAccum	support/GLFW/deps/glad.c	/^PFNGLACCUMPROC glad_glAccum;$/;"	v
glad_glAccum	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLACCUMPROC glad_glAccum;$/;"	v
glad_glAccum	support/glad/glad.c	/^PFNGLACCUMPROC glad_glAccum = NULL;$/;"	v
glad_glAccum	support/glad/glad.h	/^GLAPI PFNGLACCUMPROC glad_glAccum;$/;"	v
glad_glActiveTexture	support/GLFW/deps/glad.c	/^PFNGLACTIVETEXTUREPROC glad_glActiveTexture;$/;"	v
glad_glActiveTexture	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;$/;"	v
glad_glActiveTexture	support/glad/glad.c	/^PFNGLACTIVETEXTUREPROC glad_glActiveTexture = NULL;$/;"	v
glad_glActiveTexture	support/glad/glad.h	/^GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;$/;"	v
glad_glAlphaFunc	support/GLFW/deps/glad.c	/^PFNGLALPHAFUNCPROC glad_glAlphaFunc;$/;"	v
glad_glAlphaFunc	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLALPHAFUNCPROC glad_glAlphaFunc;$/;"	v
glad_glAlphaFunc	support/glad/glad.c	/^PFNGLALPHAFUNCPROC glad_glAlphaFunc = NULL;$/;"	v
glad_glAlphaFunc	support/glad/glad.h	/^GLAPI PFNGLALPHAFUNCPROC glad_glAlphaFunc;$/;"	v
glad_glAreTexturesResident	support/GLFW/deps/glad.c	/^PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;$/;"	v
glad_glAreTexturesResident	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;$/;"	v
glad_glAreTexturesResident	support/glad/glad.c	/^PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident = NULL;$/;"	v
glad_glAreTexturesResident	support/glad/glad.h	/^GLAPI PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;$/;"	v
glad_glArrayElement	support/GLFW/deps/glad.c	/^PFNGLARRAYELEMENTPROC glad_glArrayElement;$/;"	v
glad_glArrayElement	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLARRAYELEMENTPROC glad_glArrayElement;$/;"	v
glad_glArrayElement	support/glad/glad.c	/^PFNGLARRAYELEMENTPROC glad_glArrayElement = NULL;$/;"	v
glad_glArrayElement	support/glad/glad.h	/^GLAPI PFNGLARRAYELEMENTPROC glad_glArrayElement;$/;"	v
glad_glAttachShader	support/GLFW/deps/glad.c	/^PFNGLATTACHSHADERPROC glad_glAttachShader;$/;"	v
glad_glAttachShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;$/;"	v
glad_glAttachShader	support/glad/glad.c	/^PFNGLATTACHSHADERPROC glad_glAttachShader = NULL;$/;"	v
glad_glAttachShader	support/glad/glad.h	/^GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;$/;"	v
glad_glBegin	support/GLFW/deps/glad.c	/^PFNGLBEGINPROC glad_glBegin;$/;"	v
glad_glBegin	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBEGINPROC glad_glBegin;$/;"	v
glad_glBegin	support/glad/glad.c	/^PFNGLBEGINPROC glad_glBegin = NULL;$/;"	v
glad_glBegin	support/glad/glad.h	/^GLAPI PFNGLBEGINPROC glad_glBegin;$/;"	v
glad_glBeginConditionalRender	support/GLFW/deps/glad.c	/^PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;$/;"	v
glad_glBeginConditionalRender	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;$/;"	v
glad_glBeginConditionalRender	support/glad/glad.c	/^PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = NULL;$/;"	v
glad_glBeginConditionalRender	support/glad/glad.h	/^GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;$/;"	v
glad_glBeginQuery	support/GLFW/deps/glad.c	/^PFNGLBEGINQUERYPROC glad_glBeginQuery;$/;"	v
glad_glBeginQuery	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;$/;"	v
glad_glBeginQuery	support/glad/glad.c	/^PFNGLBEGINQUERYPROC glad_glBeginQuery = NULL;$/;"	v
glad_glBeginQuery	support/glad/glad.h	/^GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;$/;"	v
glad_glBeginTransformFeedback	support/GLFW/deps/glad.c	/^PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;$/;"	v
glad_glBeginTransformFeedback	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;$/;"	v
glad_glBeginTransformFeedback	support/glad/glad.c	/^PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = NULL;$/;"	v
glad_glBeginTransformFeedback	support/glad/glad.h	/^GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;$/;"	v
glad_glBindAttribLocation	support/GLFW/deps/glad.c	/^PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;$/;"	v
glad_glBindAttribLocation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;$/;"	v
glad_glBindAttribLocation	support/glad/glad.c	/^PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = NULL;$/;"	v
glad_glBindAttribLocation	support/glad/glad.h	/^GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;$/;"	v
glad_glBindBuffer	support/GLFW/deps/glad.c	/^PFNGLBINDBUFFERPROC glad_glBindBuffer;$/;"	v
glad_glBindBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;$/;"	v
glad_glBindBuffer	support/glad/glad.c	/^PFNGLBINDBUFFERPROC glad_glBindBuffer = NULL;$/;"	v
glad_glBindBuffer	support/glad/glad.h	/^GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;$/;"	v
glad_glBindBufferBase	support/GLFW/deps/glad.c	/^PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;$/;"	v
glad_glBindBufferBase	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;$/;"	v
glad_glBindBufferBase	support/glad/glad.c	/^PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = NULL;$/;"	v
glad_glBindBufferBase	support/glad/glad.h	/^GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;$/;"	v
glad_glBindBufferRange	support/GLFW/deps/glad.c	/^PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;$/;"	v
glad_glBindBufferRange	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;$/;"	v
glad_glBindBufferRange	support/glad/glad.c	/^PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = NULL;$/;"	v
glad_glBindBufferRange	support/glad/glad.h	/^GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;$/;"	v
glad_glBindFragDataLocation	support/GLFW/deps/glad.c	/^PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;$/;"	v
glad_glBindFragDataLocation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;$/;"	v
glad_glBindFragDataLocation	support/glad/glad.c	/^PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = NULL;$/;"	v
glad_glBindFragDataLocation	support/glad/glad.h	/^GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;$/;"	v
glad_glBindFragDataLocationIndexed	support/glad/glad.c	/^PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = NULL;$/;"	v
glad_glBindFragDataLocationIndexed	support/glad/glad.h	/^GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;$/;"	v
glad_glBindFramebuffer	support/GLFW/deps/glad.c	/^PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;$/;"	v
glad_glBindFramebuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;$/;"	v
glad_glBindFramebuffer	support/glad/glad.c	/^PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = NULL;$/;"	v
glad_glBindFramebuffer	support/glad/glad.h	/^GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;$/;"	v
glad_glBindRenderbuffer	support/GLFW/deps/glad.c	/^PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;$/;"	v
glad_glBindRenderbuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;$/;"	v
glad_glBindRenderbuffer	support/glad/glad.c	/^PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = NULL;$/;"	v
glad_glBindRenderbuffer	support/glad/glad.h	/^GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;$/;"	v
glad_glBindSampler	support/glad/glad.c	/^PFNGLBINDSAMPLERPROC glad_glBindSampler = NULL;$/;"	v
glad_glBindSampler	support/glad/glad.h	/^GLAPI PFNGLBINDSAMPLERPROC glad_glBindSampler;$/;"	v
glad_glBindTexture	support/GLFW/deps/glad.c	/^PFNGLBINDTEXTUREPROC glad_glBindTexture;$/;"	v
glad_glBindTexture	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;$/;"	v
glad_glBindTexture	support/glad/glad.c	/^PFNGLBINDTEXTUREPROC glad_glBindTexture = NULL;$/;"	v
glad_glBindTexture	support/glad/glad.h	/^GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;$/;"	v
glad_glBindVertexArray	support/GLFW/deps/glad.c	/^PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;$/;"	v
glad_glBindVertexArray	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;$/;"	v
glad_glBindVertexArray	support/glad/glad.c	/^PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = NULL;$/;"	v
glad_glBindVertexArray	support/glad/glad.h	/^GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;$/;"	v
glad_glBitmap	support/GLFW/deps/glad.c	/^PFNGLBITMAPPROC glad_glBitmap;$/;"	v
glad_glBitmap	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBITMAPPROC glad_glBitmap;$/;"	v
glad_glBitmap	support/glad/glad.c	/^PFNGLBITMAPPROC glad_glBitmap = NULL;$/;"	v
glad_glBitmap	support/glad/glad.h	/^GLAPI PFNGLBITMAPPROC glad_glBitmap;$/;"	v
glad_glBlendColor	support/GLFW/deps/glad.c	/^PFNGLBLENDCOLORPROC glad_glBlendColor;$/;"	v
glad_glBlendColor	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;$/;"	v
glad_glBlendColor	support/glad/glad.c	/^PFNGLBLENDCOLORPROC glad_glBlendColor = NULL;$/;"	v
glad_glBlendColor	support/glad/glad.h	/^GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;$/;"	v
glad_glBlendEquation	support/GLFW/deps/glad.c	/^PFNGLBLENDEQUATIONPROC glad_glBlendEquation;$/;"	v
glad_glBlendEquation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;$/;"	v
glad_glBlendEquation	support/glad/glad.c	/^PFNGLBLENDEQUATIONPROC glad_glBlendEquation = NULL;$/;"	v
glad_glBlendEquation	support/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;$/;"	v
glad_glBlendEquationSeparate	support/GLFW/deps/glad.c	/^PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;$/;"	v
glad_glBlendEquationSeparate	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;$/;"	v
glad_glBlendEquationSeparate	support/glad/glad.c	/^PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = NULL;$/;"	v
glad_glBlendEquationSeparate	support/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;$/;"	v
glad_glBlendFunc	support/GLFW/deps/glad.c	/^PFNGLBLENDFUNCPROC glad_glBlendFunc;$/;"	v
glad_glBlendFunc	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;$/;"	v
glad_glBlendFunc	support/glad/glad.c	/^PFNGLBLENDFUNCPROC glad_glBlendFunc = NULL;$/;"	v
glad_glBlendFunc	support/glad/glad.h	/^GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;$/;"	v
glad_glBlendFuncSeparate	support/GLFW/deps/glad.c	/^PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;$/;"	v
glad_glBlendFuncSeparate	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;$/;"	v
glad_glBlendFuncSeparate	support/glad/glad.c	/^PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = NULL;$/;"	v
glad_glBlendFuncSeparate	support/glad/glad.h	/^GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;$/;"	v
glad_glBlitFramebuffer	support/GLFW/deps/glad.c	/^PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;$/;"	v
glad_glBlitFramebuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;$/;"	v
glad_glBlitFramebuffer	support/glad/glad.c	/^PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = NULL;$/;"	v
glad_glBlitFramebuffer	support/glad/glad.h	/^GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;$/;"	v
glad_glBufferData	support/GLFW/deps/glad.c	/^PFNGLBUFFERDATAPROC glad_glBufferData;$/;"	v
glad_glBufferData	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;$/;"	v
glad_glBufferData	support/glad/glad.c	/^PFNGLBUFFERDATAPROC glad_glBufferData = NULL;$/;"	v
glad_glBufferData	support/glad/glad.h	/^GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;$/;"	v
glad_glBufferSubData	support/GLFW/deps/glad.c	/^PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;$/;"	v
glad_glBufferSubData	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;$/;"	v
glad_glBufferSubData	support/glad/glad.c	/^PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = NULL;$/;"	v
glad_glBufferSubData	support/glad/glad.h	/^GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;$/;"	v
glad_glCallList	support/GLFW/deps/glad.c	/^PFNGLCALLLISTPROC glad_glCallList;$/;"	v
glad_glCallList	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCALLLISTPROC glad_glCallList;$/;"	v
glad_glCallList	support/glad/glad.c	/^PFNGLCALLLISTPROC glad_glCallList = NULL;$/;"	v
glad_glCallList	support/glad/glad.h	/^GLAPI PFNGLCALLLISTPROC glad_glCallList;$/;"	v
glad_glCallLists	support/GLFW/deps/glad.c	/^PFNGLCALLLISTSPROC glad_glCallLists;$/;"	v
glad_glCallLists	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCALLLISTSPROC glad_glCallLists;$/;"	v
glad_glCallLists	support/glad/glad.c	/^PFNGLCALLLISTSPROC glad_glCallLists = NULL;$/;"	v
glad_glCallLists	support/glad/glad.h	/^GLAPI PFNGLCALLLISTSPROC glad_glCallLists;$/;"	v
glad_glCheckFramebufferStatus	support/GLFW/deps/glad.c	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;$/;"	v
glad_glCheckFramebufferStatus	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;$/;"	v
glad_glCheckFramebufferStatus	support/glad/glad.c	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = NULL;$/;"	v
glad_glCheckFramebufferStatus	support/glad/glad.h	/^GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;$/;"	v
glad_glClampColor	support/GLFW/deps/glad.c	/^PFNGLCLAMPCOLORPROC glad_glClampColor;$/;"	v
glad_glClampColor	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;$/;"	v
glad_glClampColor	support/glad/glad.c	/^PFNGLCLAMPCOLORPROC glad_glClampColor = NULL;$/;"	v
glad_glClampColor	support/glad/glad.h	/^GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;$/;"	v
glad_glClear	support/GLFW/deps/glad.c	/^PFNGLCLEARPROC glad_glClear;$/;"	v
glad_glClear	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARPROC glad_glClear;$/;"	v
glad_glClear	support/glad/glad.c	/^PFNGLCLEARPROC glad_glClear = NULL;$/;"	v
glad_glClear	support/glad/glad.h	/^GLAPI PFNGLCLEARPROC glad_glClear;$/;"	v
glad_glClearAccum	support/GLFW/deps/glad.c	/^PFNGLCLEARACCUMPROC glad_glClearAccum;$/;"	v
glad_glClearAccum	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARACCUMPROC glad_glClearAccum;$/;"	v
glad_glClearAccum	support/glad/glad.c	/^PFNGLCLEARACCUMPROC glad_glClearAccum = NULL;$/;"	v
glad_glClearAccum	support/glad/glad.h	/^GLAPI PFNGLCLEARACCUMPROC glad_glClearAccum;$/;"	v
glad_glClearBufferfi	support/GLFW/deps/glad.c	/^PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;$/;"	v
glad_glClearBufferfi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;$/;"	v
glad_glClearBufferfi	support/glad/glad.c	/^PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = NULL;$/;"	v
glad_glClearBufferfi	support/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;$/;"	v
glad_glClearBufferfv	support/GLFW/deps/glad.c	/^PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;$/;"	v
glad_glClearBufferfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;$/;"	v
glad_glClearBufferfv	support/glad/glad.c	/^PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = NULL;$/;"	v
glad_glClearBufferfv	support/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;$/;"	v
glad_glClearBufferiv	support/GLFW/deps/glad.c	/^PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;$/;"	v
glad_glClearBufferiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;$/;"	v
glad_glClearBufferiv	support/glad/glad.c	/^PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = NULL;$/;"	v
glad_glClearBufferiv	support/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;$/;"	v
glad_glClearBufferuiv	support/GLFW/deps/glad.c	/^PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;$/;"	v
glad_glClearBufferuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;$/;"	v
glad_glClearBufferuiv	support/glad/glad.c	/^PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = NULL;$/;"	v
glad_glClearBufferuiv	support/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;$/;"	v
glad_glClearColor	support/GLFW/deps/glad.c	/^PFNGLCLEARCOLORPROC glad_glClearColor;$/;"	v
glad_glClearColor	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;$/;"	v
glad_glClearColor	support/glad/glad.c	/^PFNGLCLEARCOLORPROC glad_glClearColor = NULL;$/;"	v
glad_glClearColor	support/glad/glad.h	/^GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;$/;"	v
glad_glClearDepth	support/GLFW/deps/glad.c	/^PFNGLCLEARDEPTHPROC glad_glClearDepth;$/;"	v
glad_glClearDepth	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;$/;"	v
glad_glClearDepth	support/glad/glad.c	/^PFNGLCLEARDEPTHPROC glad_glClearDepth = NULL;$/;"	v
glad_glClearDepth	support/glad/glad.h	/^GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;$/;"	v
glad_glClearIndex	support/GLFW/deps/glad.c	/^PFNGLCLEARINDEXPROC glad_glClearIndex;$/;"	v
glad_glClearIndex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARINDEXPROC glad_glClearIndex;$/;"	v
glad_glClearIndex	support/glad/glad.c	/^PFNGLCLEARINDEXPROC glad_glClearIndex = NULL;$/;"	v
glad_glClearIndex	support/glad/glad.h	/^GLAPI PFNGLCLEARINDEXPROC glad_glClearIndex;$/;"	v
glad_glClearStencil	support/GLFW/deps/glad.c	/^PFNGLCLEARSTENCILPROC glad_glClearStencil;$/;"	v
glad_glClearStencil	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;$/;"	v
glad_glClearStencil	support/glad/glad.c	/^PFNGLCLEARSTENCILPROC glad_glClearStencil = NULL;$/;"	v
glad_glClearStencil	support/glad/glad.h	/^GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;$/;"	v
glad_glClientActiveTexture	support/GLFW/deps/glad.c	/^PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;$/;"	v
glad_glClientActiveTexture	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;$/;"	v
glad_glClientActiveTexture	support/glad/glad.c	/^PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture = NULL;$/;"	v
glad_glClientActiveTexture	support/glad/glad.h	/^GLAPI PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;$/;"	v
glad_glClientWaitSync	support/GLFW/deps/glad.c	/^PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;$/;"	v
glad_glClientWaitSync	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;$/;"	v
glad_glClientWaitSync	support/glad/glad.c	/^PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = NULL;$/;"	v
glad_glClientWaitSync	support/glad/glad.h	/^GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;$/;"	v
glad_glClipPlane	support/GLFW/deps/glad.c	/^PFNGLCLIPPLANEPROC glad_glClipPlane;$/;"	v
glad_glClipPlane	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCLIPPLANEPROC glad_glClipPlane;$/;"	v
glad_glClipPlane	support/glad/glad.c	/^PFNGLCLIPPLANEPROC glad_glClipPlane = NULL;$/;"	v
glad_glClipPlane	support/glad/glad.h	/^GLAPI PFNGLCLIPPLANEPROC glad_glClipPlane;$/;"	v
glad_glColor3b	support/GLFW/deps/glad.c	/^PFNGLCOLOR3BPROC glad_glColor3b;$/;"	v
glad_glColor3b	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3BPROC glad_glColor3b;$/;"	v
glad_glColor3b	support/glad/glad.c	/^PFNGLCOLOR3BPROC glad_glColor3b = NULL;$/;"	v
glad_glColor3b	support/glad/glad.h	/^GLAPI PFNGLCOLOR3BPROC glad_glColor3b;$/;"	v
glad_glColor3bv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3BVPROC glad_glColor3bv;$/;"	v
glad_glColor3bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3BVPROC glad_glColor3bv;$/;"	v
glad_glColor3bv	support/glad/glad.c	/^PFNGLCOLOR3BVPROC glad_glColor3bv = NULL;$/;"	v
glad_glColor3bv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3BVPROC glad_glColor3bv;$/;"	v
glad_glColor3d	support/GLFW/deps/glad.c	/^PFNGLCOLOR3DPROC glad_glColor3d;$/;"	v
glad_glColor3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3DPROC glad_glColor3d;$/;"	v
glad_glColor3d	support/glad/glad.c	/^PFNGLCOLOR3DPROC glad_glColor3d = NULL;$/;"	v
glad_glColor3d	support/glad/glad.h	/^GLAPI PFNGLCOLOR3DPROC glad_glColor3d;$/;"	v
glad_glColor3dv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3DVPROC glad_glColor3dv;$/;"	v
glad_glColor3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3DVPROC glad_glColor3dv;$/;"	v
glad_glColor3dv	support/glad/glad.c	/^PFNGLCOLOR3DVPROC glad_glColor3dv = NULL;$/;"	v
glad_glColor3dv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3DVPROC glad_glColor3dv;$/;"	v
glad_glColor3f	support/GLFW/deps/glad.c	/^PFNGLCOLOR3FPROC glad_glColor3f;$/;"	v
glad_glColor3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3FPROC glad_glColor3f;$/;"	v
glad_glColor3f	support/glad/glad.c	/^PFNGLCOLOR3FPROC glad_glColor3f = NULL;$/;"	v
glad_glColor3f	support/glad/glad.h	/^GLAPI PFNGLCOLOR3FPROC glad_glColor3f;$/;"	v
glad_glColor3fv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3FVPROC glad_glColor3fv;$/;"	v
glad_glColor3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3FVPROC glad_glColor3fv;$/;"	v
glad_glColor3fv	support/glad/glad.c	/^PFNGLCOLOR3FVPROC glad_glColor3fv = NULL;$/;"	v
glad_glColor3fv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3FVPROC glad_glColor3fv;$/;"	v
glad_glColor3i	support/GLFW/deps/glad.c	/^PFNGLCOLOR3IPROC glad_glColor3i;$/;"	v
glad_glColor3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3IPROC glad_glColor3i;$/;"	v
glad_glColor3i	support/glad/glad.c	/^PFNGLCOLOR3IPROC glad_glColor3i = NULL;$/;"	v
glad_glColor3i	support/glad/glad.h	/^GLAPI PFNGLCOLOR3IPROC glad_glColor3i;$/;"	v
glad_glColor3iv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3IVPROC glad_glColor3iv;$/;"	v
glad_glColor3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3IVPROC glad_glColor3iv;$/;"	v
glad_glColor3iv	support/glad/glad.c	/^PFNGLCOLOR3IVPROC glad_glColor3iv = NULL;$/;"	v
glad_glColor3iv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3IVPROC glad_glColor3iv;$/;"	v
glad_glColor3s	support/GLFW/deps/glad.c	/^PFNGLCOLOR3SPROC glad_glColor3s;$/;"	v
glad_glColor3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3SPROC glad_glColor3s;$/;"	v
glad_glColor3s	support/glad/glad.c	/^PFNGLCOLOR3SPROC glad_glColor3s = NULL;$/;"	v
glad_glColor3s	support/glad/glad.h	/^GLAPI PFNGLCOLOR3SPROC glad_glColor3s;$/;"	v
glad_glColor3sv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3SVPROC glad_glColor3sv;$/;"	v
glad_glColor3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3SVPROC glad_glColor3sv;$/;"	v
glad_glColor3sv	support/glad/glad.c	/^PFNGLCOLOR3SVPROC glad_glColor3sv = NULL;$/;"	v
glad_glColor3sv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3SVPROC glad_glColor3sv;$/;"	v
glad_glColor3ub	support/GLFW/deps/glad.c	/^PFNGLCOLOR3UBPROC glad_glColor3ub;$/;"	v
glad_glColor3ub	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3UBPROC glad_glColor3ub;$/;"	v
glad_glColor3ub	support/glad/glad.c	/^PFNGLCOLOR3UBPROC glad_glColor3ub = NULL;$/;"	v
glad_glColor3ub	support/glad/glad.h	/^GLAPI PFNGLCOLOR3UBPROC glad_glColor3ub;$/;"	v
glad_glColor3ubv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3UBVPROC glad_glColor3ubv;$/;"	v
glad_glColor3ubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3UBVPROC glad_glColor3ubv;$/;"	v
glad_glColor3ubv	support/glad/glad.c	/^PFNGLCOLOR3UBVPROC glad_glColor3ubv = NULL;$/;"	v
glad_glColor3ubv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3UBVPROC glad_glColor3ubv;$/;"	v
glad_glColor3ui	support/GLFW/deps/glad.c	/^PFNGLCOLOR3UIPROC glad_glColor3ui;$/;"	v
glad_glColor3ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3UIPROC glad_glColor3ui;$/;"	v
glad_glColor3ui	support/glad/glad.c	/^PFNGLCOLOR3UIPROC glad_glColor3ui = NULL;$/;"	v
glad_glColor3ui	support/glad/glad.h	/^GLAPI PFNGLCOLOR3UIPROC glad_glColor3ui;$/;"	v
glad_glColor3uiv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3UIVPROC glad_glColor3uiv;$/;"	v
glad_glColor3uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3UIVPROC glad_glColor3uiv;$/;"	v
glad_glColor3uiv	support/glad/glad.c	/^PFNGLCOLOR3UIVPROC glad_glColor3uiv = NULL;$/;"	v
glad_glColor3uiv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3UIVPROC glad_glColor3uiv;$/;"	v
glad_glColor3us	support/GLFW/deps/glad.c	/^PFNGLCOLOR3USPROC glad_glColor3us;$/;"	v
glad_glColor3us	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3USPROC glad_glColor3us;$/;"	v
glad_glColor3us	support/glad/glad.c	/^PFNGLCOLOR3USPROC glad_glColor3us = NULL;$/;"	v
glad_glColor3us	support/glad/glad.h	/^GLAPI PFNGLCOLOR3USPROC glad_glColor3us;$/;"	v
glad_glColor3usv	support/GLFW/deps/glad.c	/^PFNGLCOLOR3USVPROC glad_glColor3usv;$/;"	v
glad_glColor3usv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR3USVPROC glad_glColor3usv;$/;"	v
glad_glColor3usv	support/glad/glad.c	/^PFNGLCOLOR3USVPROC glad_glColor3usv = NULL;$/;"	v
glad_glColor3usv	support/glad/glad.h	/^GLAPI PFNGLCOLOR3USVPROC glad_glColor3usv;$/;"	v
glad_glColor4b	support/GLFW/deps/glad.c	/^PFNGLCOLOR4BPROC glad_glColor4b;$/;"	v
glad_glColor4b	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4BPROC glad_glColor4b;$/;"	v
glad_glColor4b	support/glad/glad.c	/^PFNGLCOLOR4BPROC glad_glColor4b = NULL;$/;"	v
glad_glColor4b	support/glad/glad.h	/^GLAPI PFNGLCOLOR4BPROC glad_glColor4b;$/;"	v
glad_glColor4bv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4BVPROC glad_glColor4bv;$/;"	v
glad_glColor4bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4BVPROC glad_glColor4bv;$/;"	v
glad_glColor4bv	support/glad/glad.c	/^PFNGLCOLOR4BVPROC glad_glColor4bv = NULL;$/;"	v
glad_glColor4bv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4BVPROC glad_glColor4bv;$/;"	v
glad_glColor4d	support/GLFW/deps/glad.c	/^PFNGLCOLOR4DPROC glad_glColor4d;$/;"	v
glad_glColor4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4DPROC glad_glColor4d;$/;"	v
glad_glColor4d	support/glad/glad.c	/^PFNGLCOLOR4DPROC glad_glColor4d = NULL;$/;"	v
glad_glColor4d	support/glad/glad.h	/^GLAPI PFNGLCOLOR4DPROC glad_glColor4d;$/;"	v
glad_glColor4dv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4DVPROC glad_glColor4dv;$/;"	v
glad_glColor4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4DVPROC glad_glColor4dv;$/;"	v
glad_glColor4dv	support/glad/glad.c	/^PFNGLCOLOR4DVPROC glad_glColor4dv = NULL;$/;"	v
glad_glColor4dv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4DVPROC glad_glColor4dv;$/;"	v
glad_glColor4f	support/GLFW/deps/glad.c	/^PFNGLCOLOR4FPROC glad_glColor4f;$/;"	v
glad_glColor4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4FPROC glad_glColor4f;$/;"	v
glad_glColor4f	support/glad/glad.c	/^PFNGLCOLOR4FPROC glad_glColor4f = NULL;$/;"	v
glad_glColor4f	support/glad/glad.h	/^GLAPI PFNGLCOLOR4FPROC glad_glColor4f;$/;"	v
glad_glColor4fv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4FVPROC glad_glColor4fv;$/;"	v
glad_glColor4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4FVPROC glad_glColor4fv;$/;"	v
glad_glColor4fv	support/glad/glad.c	/^PFNGLCOLOR4FVPROC glad_glColor4fv = NULL;$/;"	v
glad_glColor4fv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4FVPROC glad_glColor4fv;$/;"	v
glad_glColor4i	support/GLFW/deps/glad.c	/^PFNGLCOLOR4IPROC glad_glColor4i;$/;"	v
glad_glColor4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4IPROC glad_glColor4i;$/;"	v
glad_glColor4i	support/glad/glad.c	/^PFNGLCOLOR4IPROC glad_glColor4i = NULL;$/;"	v
glad_glColor4i	support/glad/glad.h	/^GLAPI PFNGLCOLOR4IPROC glad_glColor4i;$/;"	v
glad_glColor4iv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4IVPROC glad_glColor4iv;$/;"	v
glad_glColor4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4IVPROC glad_glColor4iv;$/;"	v
glad_glColor4iv	support/glad/glad.c	/^PFNGLCOLOR4IVPROC glad_glColor4iv = NULL;$/;"	v
glad_glColor4iv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4IVPROC glad_glColor4iv;$/;"	v
glad_glColor4s	support/GLFW/deps/glad.c	/^PFNGLCOLOR4SPROC glad_glColor4s;$/;"	v
glad_glColor4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4SPROC glad_glColor4s;$/;"	v
glad_glColor4s	support/glad/glad.c	/^PFNGLCOLOR4SPROC glad_glColor4s = NULL;$/;"	v
glad_glColor4s	support/glad/glad.h	/^GLAPI PFNGLCOLOR4SPROC glad_glColor4s;$/;"	v
glad_glColor4sv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4SVPROC glad_glColor4sv;$/;"	v
glad_glColor4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4SVPROC glad_glColor4sv;$/;"	v
glad_glColor4sv	support/glad/glad.c	/^PFNGLCOLOR4SVPROC glad_glColor4sv = NULL;$/;"	v
glad_glColor4sv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4SVPROC glad_glColor4sv;$/;"	v
glad_glColor4ub	support/GLFW/deps/glad.c	/^PFNGLCOLOR4UBPROC glad_glColor4ub;$/;"	v
glad_glColor4ub	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4UBPROC glad_glColor4ub;$/;"	v
glad_glColor4ub	support/glad/glad.c	/^PFNGLCOLOR4UBPROC glad_glColor4ub = NULL;$/;"	v
glad_glColor4ub	support/glad/glad.h	/^GLAPI PFNGLCOLOR4UBPROC glad_glColor4ub;$/;"	v
glad_glColor4ubv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4UBVPROC glad_glColor4ubv;$/;"	v
glad_glColor4ubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4UBVPROC glad_glColor4ubv;$/;"	v
glad_glColor4ubv	support/glad/glad.c	/^PFNGLCOLOR4UBVPROC glad_glColor4ubv = NULL;$/;"	v
glad_glColor4ubv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4UBVPROC glad_glColor4ubv;$/;"	v
glad_glColor4ui	support/GLFW/deps/glad.c	/^PFNGLCOLOR4UIPROC glad_glColor4ui;$/;"	v
glad_glColor4ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4UIPROC glad_glColor4ui;$/;"	v
glad_glColor4ui	support/glad/glad.c	/^PFNGLCOLOR4UIPROC glad_glColor4ui = NULL;$/;"	v
glad_glColor4ui	support/glad/glad.h	/^GLAPI PFNGLCOLOR4UIPROC glad_glColor4ui;$/;"	v
glad_glColor4uiv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4UIVPROC glad_glColor4uiv;$/;"	v
glad_glColor4uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4UIVPROC glad_glColor4uiv;$/;"	v
glad_glColor4uiv	support/glad/glad.c	/^PFNGLCOLOR4UIVPROC glad_glColor4uiv = NULL;$/;"	v
glad_glColor4uiv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4UIVPROC glad_glColor4uiv;$/;"	v
glad_glColor4us	support/GLFW/deps/glad.c	/^PFNGLCOLOR4USPROC glad_glColor4us;$/;"	v
glad_glColor4us	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4USPROC glad_glColor4us;$/;"	v
glad_glColor4us	support/glad/glad.c	/^PFNGLCOLOR4USPROC glad_glColor4us = NULL;$/;"	v
glad_glColor4us	support/glad/glad.h	/^GLAPI PFNGLCOLOR4USPROC glad_glColor4us;$/;"	v
glad_glColor4usv	support/GLFW/deps/glad.c	/^PFNGLCOLOR4USVPROC glad_glColor4usv;$/;"	v
glad_glColor4usv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLOR4USVPROC glad_glColor4usv;$/;"	v
glad_glColor4usv	support/glad/glad.c	/^PFNGLCOLOR4USVPROC glad_glColor4usv = NULL;$/;"	v
glad_glColor4usv	support/glad/glad.h	/^GLAPI PFNGLCOLOR4USVPROC glad_glColor4usv;$/;"	v
glad_glColorMask	support/GLFW/deps/glad.c	/^PFNGLCOLORMASKPROC glad_glColorMask;$/;"	v
glad_glColorMask	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLORMASKPROC glad_glColorMask;$/;"	v
glad_glColorMask	support/glad/glad.c	/^PFNGLCOLORMASKPROC glad_glColorMask = NULL;$/;"	v
glad_glColorMask	support/glad/glad.h	/^GLAPI PFNGLCOLORMASKPROC glad_glColorMask;$/;"	v
glad_glColorMaski	support/GLFW/deps/glad.c	/^PFNGLCOLORMASKIPROC glad_glColorMaski;$/;"	v
glad_glColorMaski	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;$/;"	v
glad_glColorMaski	support/glad/glad.c	/^PFNGLCOLORMASKIPROC glad_glColorMaski = NULL;$/;"	v
glad_glColorMaski	support/glad/glad.h	/^GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;$/;"	v
glad_glColorMaterial	support/GLFW/deps/glad.c	/^PFNGLCOLORMATERIALPROC glad_glColorMaterial;$/;"	v
glad_glColorMaterial	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLORMATERIALPROC glad_glColorMaterial;$/;"	v
glad_glColorMaterial	support/glad/glad.c	/^PFNGLCOLORMATERIALPROC glad_glColorMaterial = NULL;$/;"	v
glad_glColorMaterial	support/glad/glad.h	/^GLAPI PFNGLCOLORMATERIALPROC glad_glColorMaterial;$/;"	v
glad_glColorP3ui	support/glad/glad.c	/^PFNGLCOLORP3UIPROC glad_glColorP3ui = NULL;$/;"	v
glad_glColorP3ui	support/glad/glad.h	/^GLAPI PFNGLCOLORP3UIPROC glad_glColorP3ui;$/;"	v
glad_glColorP3uiv	support/glad/glad.c	/^PFNGLCOLORP3UIVPROC glad_glColorP3uiv = NULL;$/;"	v
glad_glColorP3uiv	support/glad/glad.h	/^GLAPI PFNGLCOLORP3UIVPROC glad_glColorP3uiv;$/;"	v
glad_glColorP4ui	support/glad/glad.c	/^PFNGLCOLORP4UIPROC glad_glColorP4ui = NULL;$/;"	v
glad_glColorP4ui	support/glad/glad.h	/^GLAPI PFNGLCOLORP4UIPROC glad_glColorP4ui;$/;"	v
glad_glColorP4uiv	support/glad/glad.c	/^PFNGLCOLORP4UIVPROC glad_glColorP4uiv = NULL;$/;"	v
glad_glColorP4uiv	support/glad/glad.h	/^GLAPI PFNGLCOLORP4UIVPROC glad_glColorP4uiv;$/;"	v
glad_glColorPointer	support/GLFW/deps/glad.c	/^PFNGLCOLORPOINTERPROC glad_glColorPointer;$/;"	v
glad_glColorPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOLORPOINTERPROC glad_glColorPointer;$/;"	v
glad_glColorPointer	support/glad/glad.c	/^PFNGLCOLORPOINTERPROC glad_glColorPointer = NULL;$/;"	v
glad_glColorPointer	support/glad/glad.h	/^GLAPI PFNGLCOLORPOINTERPROC glad_glColorPointer;$/;"	v
glad_glCompileShader	support/GLFW/deps/glad.c	/^PFNGLCOMPILESHADERPROC glad_glCompileShader;$/;"	v
glad_glCompileShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;$/;"	v
glad_glCompileShader	support/glad/glad.c	/^PFNGLCOMPILESHADERPROC glad_glCompileShader = NULL;$/;"	v
glad_glCompileShader	support/glad/glad.h	/^GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;$/;"	v
glad_glCompressedTexImage1D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;$/;"	v
glad_glCompressedTexImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;$/;"	v
glad_glCompressedTexImage1D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = NULL;$/;"	v
glad_glCompressedTexImage1D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;$/;"	v
glad_glCompressedTexImage2D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;$/;"	v
glad_glCompressedTexImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;$/;"	v
glad_glCompressedTexImage2D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = NULL;$/;"	v
glad_glCompressedTexImage2D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;$/;"	v
glad_glCompressedTexImage3D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;$/;"	v
glad_glCompressedTexImage3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;$/;"	v
glad_glCompressedTexImage3D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = NULL;$/;"	v
glad_glCompressedTexImage3D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;$/;"	v
glad_glCompressedTexSubImage1D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;$/;"	v
glad_glCompressedTexSubImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;$/;"	v
glad_glCompressedTexSubImage1D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = NULL;$/;"	v
glad_glCompressedTexSubImage1D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;$/;"	v
glad_glCompressedTexSubImage2D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;$/;"	v
glad_glCompressedTexSubImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;$/;"	v
glad_glCompressedTexSubImage2D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = NULL;$/;"	v
glad_glCompressedTexSubImage2D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;$/;"	v
glad_glCompressedTexSubImage3D	support/GLFW/deps/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;$/;"	v
glad_glCompressedTexSubImage3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;$/;"	v
glad_glCompressedTexSubImage3D	support/glad/glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = NULL;$/;"	v
glad_glCompressedTexSubImage3D	support/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;$/;"	v
glad_glCopyBufferSubData	support/GLFW/deps/glad.c	/^PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;$/;"	v
glad_glCopyBufferSubData	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;$/;"	v
glad_glCopyBufferSubData	support/glad/glad.c	/^PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = NULL;$/;"	v
glad_glCopyBufferSubData	support/glad/glad.h	/^GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;$/;"	v
glad_glCopyPixels	support/GLFW/deps/glad.c	/^PFNGLCOPYPIXELSPROC glad_glCopyPixels;$/;"	v
glad_glCopyPixels	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYPIXELSPROC glad_glCopyPixels;$/;"	v
glad_glCopyPixels	support/glad/glad.c	/^PFNGLCOPYPIXELSPROC glad_glCopyPixels = NULL;$/;"	v
glad_glCopyPixels	support/glad/glad.h	/^GLAPI PFNGLCOPYPIXELSPROC glad_glCopyPixels;$/;"	v
glad_glCopyTexImage1D	support/GLFW/deps/glad.c	/^PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;$/;"	v
glad_glCopyTexImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;$/;"	v
glad_glCopyTexImage1D	support/glad/glad.c	/^PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = NULL;$/;"	v
glad_glCopyTexImage1D	support/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;$/;"	v
glad_glCopyTexImage2D	support/GLFW/deps/glad.c	/^PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;$/;"	v
glad_glCopyTexImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;$/;"	v
glad_glCopyTexImage2D	support/glad/glad.c	/^PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = NULL;$/;"	v
glad_glCopyTexImage2D	support/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;$/;"	v
glad_glCopyTexSubImage1D	support/GLFW/deps/glad.c	/^PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;$/;"	v
glad_glCopyTexSubImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;$/;"	v
glad_glCopyTexSubImage1D	support/glad/glad.c	/^PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = NULL;$/;"	v
glad_glCopyTexSubImage1D	support/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;$/;"	v
glad_glCopyTexSubImage2D	support/GLFW/deps/glad.c	/^PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;$/;"	v
glad_glCopyTexSubImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;$/;"	v
glad_glCopyTexSubImage2D	support/glad/glad.c	/^PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = NULL;$/;"	v
glad_glCopyTexSubImage2D	support/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;$/;"	v
glad_glCopyTexSubImage3D	support/GLFW/deps/glad.c	/^PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;$/;"	v
glad_glCopyTexSubImage3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;$/;"	v
glad_glCopyTexSubImage3D	support/glad/glad.c	/^PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = NULL;$/;"	v
glad_glCopyTexSubImage3D	support/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;$/;"	v
glad_glCreateProgram	support/GLFW/deps/glad.c	/^PFNGLCREATEPROGRAMPROC glad_glCreateProgram;$/;"	v
glad_glCreateProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;$/;"	v
glad_glCreateProgram	support/glad/glad.c	/^PFNGLCREATEPROGRAMPROC glad_glCreateProgram = NULL;$/;"	v
glad_glCreateProgram	support/glad/glad.h	/^GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;$/;"	v
glad_glCreateShader	support/GLFW/deps/glad.c	/^PFNGLCREATESHADERPROC glad_glCreateShader;$/;"	v
glad_glCreateShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;$/;"	v
glad_glCreateShader	support/glad/glad.c	/^PFNGLCREATESHADERPROC glad_glCreateShader = NULL;$/;"	v
glad_glCreateShader	support/glad/glad.h	/^GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;$/;"	v
glad_glCullFace	support/GLFW/deps/glad.c	/^PFNGLCULLFACEPROC glad_glCullFace;$/;"	v
glad_glCullFace	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLCULLFACEPROC glad_glCullFace;$/;"	v
glad_glCullFace	support/glad/glad.c	/^PFNGLCULLFACEPROC glad_glCullFace = NULL;$/;"	v
glad_glCullFace	support/glad/glad.h	/^GLAPI PFNGLCULLFACEPROC glad_glCullFace;$/;"	v
glad_glDeleteBuffers	support/GLFW/deps/glad.c	/^PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;$/;"	v
glad_glDeleteBuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;$/;"	v
glad_glDeleteBuffers	support/glad/glad.c	/^PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = NULL;$/;"	v
glad_glDeleteBuffers	support/glad/glad.h	/^GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;$/;"	v
glad_glDeleteFramebuffers	support/GLFW/deps/glad.c	/^PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;$/;"	v
glad_glDeleteFramebuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;$/;"	v
glad_glDeleteFramebuffers	support/glad/glad.c	/^PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = NULL;$/;"	v
glad_glDeleteFramebuffers	support/glad/glad.h	/^GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;$/;"	v
glad_glDeleteLists	support/GLFW/deps/glad.c	/^PFNGLDELETELISTSPROC glad_glDeleteLists;$/;"	v
glad_glDeleteLists	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETELISTSPROC glad_glDeleteLists;$/;"	v
glad_glDeleteLists	support/glad/glad.c	/^PFNGLDELETELISTSPROC glad_glDeleteLists = NULL;$/;"	v
glad_glDeleteLists	support/glad/glad.h	/^GLAPI PFNGLDELETELISTSPROC glad_glDeleteLists;$/;"	v
glad_glDeleteProgram	support/GLFW/deps/glad.c	/^PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;$/;"	v
glad_glDeleteProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;$/;"	v
glad_glDeleteProgram	support/glad/glad.c	/^PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = NULL;$/;"	v
glad_glDeleteProgram	support/glad/glad.h	/^GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;$/;"	v
glad_glDeleteQueries	support/GLFW/deps/glad.c	/^PFNGLDELETEQUERIESPROC glad_glDeleteQueries;$/;"	v
glad_glDeleteQueries	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;$/;"	v
glad_glDeleteQueries	support/glad/glad.c	/^PFNGLDELETEQUERIESPROC glad_glDeleteQueries = NULL;$/;"	v
glad_glDeleteQueries	support/glad/glad.h	/^GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;$/;"	v
glad_glDeleteRenderbuffers	support/GLFW/deps/glad.c	/^PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;$/;"	v
glad_glDeleteRenderbuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;$/;"	v
glad_glDeleteRenderbuffers	support/glad/glad.c	/^PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = NULL;$/;"	v
glad_glDeleteRenderbuffers	support/glad/glad.h	/^GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;$/;"	v
glad_glDeleteSamplers	support/glad/glad.c	/^PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = NULL;$/;"	v
glad_glDeleteSamplers	support/glad/glad.h	/^GLAPI PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;$/;"	v
glad_glDeleteShader	support/GLFW/deps/glad.c	/^PFNGLDELETESHADERPROC glad_glDeleteShader;$/;"	v
glad_glDeleteShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;$/;"	v
glad_glDeleteShader	support/glad/glad.c	/^PFNGLDELETESHADERPROC glad_glDeleteShader = NULL;$/;"	v
glad_glDeleteShader	support/glad/glad.h	/^GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;$/;"	v
glad_glDeleteSync	support/GLFW/deps/glad.c	/^PFNGLDELETESYNCPROC glad_glDeleteSync;$/;"	v
glad_glDeleteSync	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;$/;"	v
glad_glDeleteSync	support/glad/glad.c	/^PFNGLDELETESYNCPROC glad_glDeleteSync = NULL;$/;"	v
glad_glDeleteSync	support/glad/glad.h	/^GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;$/;"	v
glad_glDeleteTextures	support/GLFW/deps/glad.c	/^PFNGLDELETETEXTURESPROC glad_glDeleteTextures;$/;"	v
glad_glDeleteTextures	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;$/;"	v
glad_glDeleteTextures	support/glad/glad.c	/^PFNGLDELETETEXTURESPROC glad_glDeleteTextures = NULL;$/;"	v
glad_glDeleteTextures	support/glad/glad.h	/^GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;$/;"	v
glad_glDeleteVertexArrays	support/GLFW/deps/glad.c	/^PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;$/;"	v
glad_glDeleteVertexArrays	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;$/;"	v
glad_glDeleteVertexArrays	support/glad/glad.c	/^PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = NULL;$/;"	v
glad_glDeleteVertexArrays	support/glad/glad.h	/^GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;$/;"	v
glad_glDepthFunc	support/GLFW/deps/glad.c	/^PFNGLDEPTHFUNCPROC glad_glDepthFunc;$/;"	v
glad_glDepthFunc	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;$/;"	v
glad_glDepthFunc	support/glad/glad.c	/^PFNGLDEPTHFUNCPROC glad_glDepthFunc = NULL;$/;"	v
glad_glDepthFunc	support/glad/glad.h	/^GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;$/;"	v
glad_glDepthMask	support/GLFW/deps/glad.c	/^PFNGLDEPTHMASKPROC glad_glDepthMask;$/;"	v
glad_glDepthMask	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;$/;"	v
glad_glDepthMask	support/glad/glad.c	/^PFNGLDEPTHMASKPROC glad_glDepthMask = NULL;$/;"	v
glad_glDepthMask	support/glad/glad.h	/^GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;$/;"	v
glad_glDepthRange	support/GLFW/deps/glad.c	/^PFNGLDEPTHRANGEPROC glad_glDepthRange;$/;"	v
glad_glDepthRange	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;$/;"	v
glad_glDepthRange	support/glad/glad.c	/^PFNGLDEPTHRANGEPROC glad_glDepthRange = NULL;$/;"	v
glad_glDepthRange	support/glad/glad.h	/^GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;$/;"	v
glad_glDetachShader	support/GLFW/deps/glad.c	/^PFNGLDETACHSHADERPROC glad_glDetachShader;$/;"	v
glad_glDetachShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;$/;"	v
glad_glDetachShader	support/glad/glad.c	/^PFNGLDETACHSHADERPROC glad_glDetachShader = NULL;$/;"	v
glad_glDetachShader	support/glad/glad.h	/^GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;$/;"	v
glad_glDisable	support/GLFW/deps/glad.c	/^PFNGLDISABLEPROC glad_glDisable;$/;"	v
glad_glDisable	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDISABLEPROC glad_glDisable;$/;"	v
glad_glDisable	support/glad/glad.c	/^PFNGLDISABLEPROC glad_glDisable = NULL;$/;"	v
glad_glDisable	support/glad/glad.h	/^GLAPI PFNGLDISABLEPROC glad_glDisable;$/;"	v
glad_glDisableClientState	support/GLFW/deps/glad.c	/^PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;$/;"	v
glad_glDisableClientState	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;$/;"	v
glad_glDisableClientState	support/glad/glad.c	/^PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState = NULL;$/;"	v
glad_glDisableClientState	support/glad/glad.h	/^GLAPI PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;$/;"	v
glad_glDisableVertexAttribArray	support/GLFW/deps/glad.c	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;$/;"	v
glad_glDisableVertexAttribArray	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;$/;"	v
glad_glDisableVertexAttribArray	support/glad/glad.c	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = NULL;$/;"	v
glad_glDisableVertexAttribArray	support/glad/glad.h	/^GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;$/;"	v
glad_glDisablei	support/GLFW/deps/glad.c	/^PFNGLDISABLEIPROC glad_glDisablei;$/;"	v
glad_glDisablei	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDISABLEIPROC glad_glDisablei;$/;"	v
glad_glDisablei	support/glad/glad.c	/^PFNGLDISABLEIPROC glad_glDisablei = NULL;$/;"	v
glad_glDisablei	support/glad/glad.h	/^GLAPI PFNGLDISABLEIPROC glad_glDisablei;$/;"	v
glad_glDrawArrays	support/GLFW/deps/glad.c	/^PFNGLDRAWARRAYSPROC glad_glDrawArrays;$/;"	v
glad_glDrawArrays	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;$/;"	v
glad_glDrawArrays	support/glad/glad.c	/^PFNGLDRAWARRAYSPROC glad_glDrawArrays = NULL;$/;"	v
glad_glDrawArrays	support/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;$/;"	v
glad_glDrawArraysInstanced	support/GLFW/deps/glad.c	/^PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;$/;"	v
glad_glDrawArraysInstanced	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;$/;"	v
glad_glDrawArraysInstanced	support/glad/glad.c	/^PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = NULL;$/;"	v
glad_glDrawArraysInstanced	support/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;$/;"	v
glad_glDrawBuffer	support/GLFW/deps/glad.c	/^PFNGLDRAWBUFFERPROC glad_glDrawBuffer;$/;"	v
glad_glDrawBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;$/;"	v
glad_glDrawBuffer	support/glad/glad.c	/^PFNGLDRAWBUFFERPROC glad_glDrawBuffer = NULL;$/;"	v
glad_glDrawBuffer	support/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;$/;"	v
glad_glDrawBuffers	support/GLFW/deps/glad.c	/^PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;$/;"	v
glad_glDrawBuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;$/;"	v
glad_glDrawBuffers	support/glad/glad.c	/^PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = NULL;$/;"	v
glad_glDrawBuffers	support/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;$/;"	v
glad_glDrawElements	support/GLFW/deps/glad.c	/^PFNGLDRAWELEMENTSPROC glad_glDrawElements;$/;"	v
glad_glDrawElements	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;$/;"	v
glad_glDrawElements	support/glad/glad.c	/^PFNGLDRAWELEMENTSPROC glad_glDrawElements = NULL;$/;"	v
glad_glDrawElements	support/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;$/;"	v
glad_glDrawElementsBaseVertex	support/GLFW/deps/glad.c	/^PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;$/;"	v
glad_glDrawElementsBaseVertex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;$/;"	v
glad_glDrawElementsBaseVertex	support/glad/glad.c	/^PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = NULL;$/;"	v
glad_glDrawElementsBaseVertex	support/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;$/;"	v
glad_glDrawElementsInstanced	support/GLFW/deps/glad.c	/^PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;$/;"	v
glad_glDrawElementsInstanced	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;$/;"	v
glad_glDrawElementsInstanced	support/glad/glad.c	/^PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = NULL;$/;"	v
glad_glDrawElementsInstanced	support/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;$/;"	v
glad_glDrawElementsInstancedBaseVertex	support/GLFW/deps/glad.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;$/;"	v
glad_glDrawElementsInstancedBaseVertex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;$/;"	v
glad_glDrawElementsInstancedBaseVertex	support/glad/glad.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = NULL;$/;"	v
glad_glDrawElementsInstancedBaseVertex	support/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;$/;"	v
glad_glDrawPixels	support/GLFW/deps/glad.c	/^PFNGLDRAWPIXELSPROC glad_glDrawPixels;$/;"	v
glad_glDrawPixels	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWPIXELSPROC glad_glDrawPixels;$/;"	v
glad_glDrawPixels	support/glad/glad.c	/^PFNGLDRAWPIXELSPROC glad_glDrawPixels = NULL;$/;"	v
glad_glDrawPixels	support/glad/glad.h	/^GLAPI PFNGLDRAWPIXELSPROC glad_glDrawPixels;$/;"	v
glad_glDrawRangeElements	support/GLFW/deps/glad.c	/^PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;$/;"	v
glad_glDrawRangeElements	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;$/;"	v
glad_glDrawRangeElements	support/glad/glad.c	/^PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = NULL;$/;"	v
glad_glDrawRangeElements	support/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;$/;"	v
glad_glDrawRangeElementsBaseVertex	support/GLFW/deps/glad.c	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;$/;"	v
glad_glDrawRangeElementsBaseVertex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;$/;"	v
glad_glDrawRangeElementsBaseVertex	support/glad/glad.c	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = NULL;$/;"	v
glad_glDrawRangeElementsBaseVertex	support/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;$/;"	v
glad_glEdgeFlag	support/GLFW/deps/glad.c	/^PFNGLEDGEFLAGPROC glad_glEdgeFlag;$/;"	v
glad_glEdgeFlag	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEDGEFLAGPROC glad_glEdgeFlag;$/;"	v
glad_glEdgeFlag	support/glad/glad.c	/^PFNGLEDGEFLAGPROC glad_glEdgeFlag = NULL;$/;"	v
glad_glEdgeFlag	support/glad/glad.h	/^GLAPI PFNGLEDGEFLAGPROC glad_glEdgeFlag;$/;"	v
glad_glEdgeFlagPointer	support/GLFW/deps/glad.c	/^PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;$/;"	v
glad_glEdgeFlagPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;$/;"	v
glad_glEdgeFlagPointer	support/glad/glad.c	/^PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer = NULL;$/;"	v
glad_glEdgeFlagPointer	support/glad/glad.h	/^GLAPI PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;$/;"	v
glad_glEdgeFlagv	support/GLFW/deps/glad.c	/^PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;$/;"	v
glad_glEdgeFlagv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;$/;"	v
glad_glEdgeFlagv	support/glad/glad.c	/^PFNGLEDGEFLAGVPROC glad_glEdgeFlagv = NULL;$/;"	v
glad_glEdgeFlagv	support/glad/glad.h	/^GLAPI PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;$/;"	v
glad_glEnable	support/GLFW/deps/glad.c	/^PFNGLENABLEPROC glad_glEnable;$/;"	v
glad_glEnable	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENABLEPROC glad_glEnable;$/;"	v
glad_glEnable	support/glad/glad.c	/^PFNGLENABLEPROC glad_glEnable = NULL;$/;"	v
glad_glEnable	support/glad/glad.h	/^GLAPI PFNGLENABLEPROC glad_glEnable;$/;"	v
glad_glEnableClientState	support/GLFW/deps/glad.c	/^PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;$/;"	v
glad_glEnableClientState	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;$/;"	v
glad_glEnableClientState	support/glad/glad.c	/^PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState = NULL;$/;"	v
glad_glEnableClientState	support/glad/glad.h	/^GLAPI PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;$/;"	v
glad_glEnableVertexAttribArray	support/GLFW/deps/glad.c	/^PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;$/;"	v
glad_glEnableVertexAttribArray	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;$/;"	v
glad_glEnableVertexAttribArray	support/glad/glad.c	/^PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = NULL;$/;"	v
glad_glEnableVertexAttribArray	support/glad/glad.h	/^GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;$/;"	v
glad_glEnablei	support/GLFW/deps/glad.c	/^PFNGLENABLEIPROC glad_glEnablei;$/;"	v
glad_glEnablei	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENABLEIPROC glad_glEnablei;$/;"	v
glad_glEnablei	support/glad/glad.c	/^PFNGLENABLEIPROC glad_glEnablei = NULL;$/;"	v
glad_glEnablei	support/glad/glad.h	/^GLAPI PFNGLENABLEIPROC glad_glEnablei;$/;"	v
glad_glEnd	support/GLFW/deps/glad.c	/^PFNGLENDPROC glad_glEnd;$/;"	v
glad_glEnd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENDPROC glad_glEnd;$/;"	v
glad_glEnd	support/glad/glad.c	/^PFNGLENDPROC glad_glEnd = NULL;$/;"	v
glad_glEnd	support/glad/glad.h	/^GLAPI PFNGLENDPROC glad_glEnd;$/;"	v
glad_glEndConditionalRender	support/GLFW/deps/glad.c	/^PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;$/;"	v
glad_glEndConditionalRender	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;$/;"	v
glad_glEndConditionalRender	support/glad/glad.c	/^PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = NULL;$/;"	v
glad_glEndConditionalRender	support/glad/glad.h	/^GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;$/;"	v
glad_glEndList	support/GLFW/deps/glad.c	/^PFNGLENDLISTPROC glad_glEndList;$/;"	v
glad_glEndList	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENDLISTPROC glad_glEndList;$/;"	v
glad_glEndList	support/glad/glad.c	/^PFNGLENDLISTPROC glad_glEndList = NULL;$/;"	v
glad_glEndList	support/glad/glad.h	/^GLAPI PFNGLENDLISTPROC glad_glEndList;$/;"	v
glad_glEndQuery	support/GLFW/deps/glad.c	/^PFNGLENDQUERYPROC glad_glEndQuery;$/;"	v
glad_glEndQuery	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENDQUERYPROC glad_glEndQuery;$/;"	v
glad_glEndQuery	support/glad/glad.c	/^PFNGLENDQUERYPROC glad_glEndQuery = NULL;$/;"	v
glad_glEndQuery	support/glad/glad.h	/^GLAPI PFNGLENDQUERYPROC glad_glEndQuery;$/;"	v
glad_glEndTransformFeedback	support/GLFW/deps/glad.c	/^PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;$/;"	v
glad_glEndTransformFeedback	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;$/;"	v
glad_glEndTransformFeedback	support/glad/glad.c	/^PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = NULL;$/;"	v
glad_glEndTransformFeedback	support/glad/glad.h	/^GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;$/;"	v
glad_glEvalCoord1d	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;$/;"	v
glad_glEvalCoord1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;$/;"	v
glad_glEvalCoord1d	support/glad/glad.c	/^PFNGLEVALCOORD1DPROC glad_glEvalCoord1d = NULL;$/;"	v
glad_glEvalCoord1d	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;$/;"	v
glad_glEvalCoord1dv	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;$/;"	v
glad_glEvalCoord1dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;$/;"	v
glad_glEvalCoord1dv	support/glad/glad.c	/^PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv = NULL;$/;"	v
glad_glEvalCoord1dv	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;$/;"	v
glad_glEvalCoord1f	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;$/;"	v
glad_glEvalCoord1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;$/;"	v
glad_glEvalCoord1f	support/glad/glad.c	/^PFNGLEVALCOORD1FPROC glad_glEvalCoord1f = NULL;$/;"	v
glad_glEvalCoord1f	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;$/;"	v
glad_glEvalCoord1fv	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;$/;"	v
glad_glEvalCoord1fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;$/;"	v
glad_glEvalCoord1fv	support/glad/glad.c	/^PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv = NULL;$/;"	v
glad_glEvalCoord1fv	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;$/;"	v
glad_glEvalCoord2d	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;$/;"	v
glad_glEvalCoord2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;$/;"	v
glad_glEvalCoord2d	support/glad/glad.c	/^PFNGLEVALCOORD2DPROC glad_glEvalCoord2d = NULL;$/;"	v
glad_glEvalCoord2d	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;$/;"	v
glad_glEvalCoord2dv	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;$/;"	v
glad_glEvalCoord2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;$/;"	v
glad_glEvalCoord2dv	support/glad/glad.c	/^PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv = NULL;$/;"	v
glad_glEvalCoord2dv	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;$/;"	v
glad_glEvalCoord2f	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;$/;"	v
glad_glEvalCoord2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;$/;"	v
glad_glEvalCoord2f	support/glad/glad.c	/^PFNGLEVALCOORD2FPROC glad_glEvalCoord2f = NULL;$/;"	v
glad_glEvalCoord2f	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;$/;"	v
glad_glEvalCoord2fv	support/GLFW/deps/glad.c	/^PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;$/;"	v
glad_glEvalCoord2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;$/;"	v
glad_glEvalCoord2fv	support/glad/glad.c	/^PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv = NULL;$/;"	v
glad_glEvalCoord2fv	support/glad/glad.h	/^GLAPI PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;$/;"	v
glad_glEvalMesh1	support/GLFW/deps/glad.c	/^PFNGLEVALMESH1PROC glad_glEvalMesh1;$/;"	v
glad_glEvalMesh1	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALMESH1PROC glad_glEvalMesh1;$/;"	v
glad_glEvalMesh1	support/glad/glad.c	/^PFNGLEVALMESH1PROC glad_glEvalMesh1 = NULL;$/;"	v
glad_glEvalMesh1	support/glad/glad.h	/^GLAPI PFNGLEVALMESH1PROC glad_glEvalMesh1;$/;"	v
glad_glEvalMesh2	support/GLFW/deps/glad.c	/^PFNGLEVALMESH2PROC glad_glEvalMesh2;$/;"	v
glad_glEvalMesh2	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALMESH2PROC glad_glEvalMesh2;$/;"	v
glad_glEvalMesh2	support/glad/glad.c	/^PFNGLEVALMESH2PROC glad_glEvalMesh2 = NULL;$/;"	v
glad_glEvalMesh2	support/glad/glad.h	/^GLAPI PFNGLEVALMESH2PROC glad_glEvalMesh2;$/;"	v
glad_glEvalPoint1	support/GLFW/deps/glad.c	/^PFNGLEVALPOINT1PROC glad_glEvalPoint1;$/;"	v
glad_glEvalPoint1	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALPOINT1PROC glad_glEvalPoint1;$/;"	v
glad_glEvalPoint1	support/glad/glad.c	/^PFNGLEVALPOINT1PROC glad_glEvalPoint1 = NULL;$/;"	v
glad_glEvalPoint1	support/glad/glad.h	/^GLAPI PFNGLEVALPOINT1PROC glad_glEvalPoint1;$/;"	v
glad_glEvalPoint2	support/GLFW/deps/glad.c	/^PFNGLEVALPOINT2PROC glad_glEvalPoint2;$/;"	v
glad_glEvalPoint2	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLEVALPOINT2PROC glad_glEvalPoint2;$/;"	v
glad_glEvalPoint2	support/glad/glad.c	/^PFNGLEVALPOINT2PROC glad_glEvalPoint2 = NULL;$/;"	v
glad_glEvalPoint2	support/glad/glad.h	/^GLAPI PFNGLEVALPOINT2PROC glad_glEvalPoint2;$/;"	v
glad_glFeedbackBuffer	support/GLFW/deps/glad.c	/^PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;$/;"	v
glad_glFeedbackBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;$/;"	v
glad_glFeedbackBuffer	support/glad/glad.c	/^PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer = NULL;$/;"	v
glad_glFeedbackBuffer	support/glad/glad.h	/^GLAPI PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;$/;"	v
glad_glFenceSync	support/GLFW/deps/glad.c	/^PFNGLFENCESYNCPROC glad_glFenceSync;$/;"	v
glad_glFenceSync	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;$/;"	v
glad_glFenceSync	support/glad/glad.c	/^PFNGLFENCESYNCPROC glad_glFenceSync = NULL;$/;"	v
glad_glFenceSync	support/glad/glad.h	/^GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;$/;"	v
glad_glFinish	support/GLFW/deps/glad.c	/^PFNGLFINISHPROC glad_glFinish;$/;"	v
glad_glFinish	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFINISHPROC glad_glFinish;$/;"	v
glad_glFinish	support/glad/glad.c	/^PFNGLFINISHPROC glad_glFinish = NULL;$/;"	v
glad_glFinish	support/glad/glad.h	/^GLAPI PFNGLFINISHPROC glad_glFinish;$/;"	v
glad_glFlush	support/GLFW/deps/glad.c	/^PFNGLFLUSHPROC glad_glFlush;$/;"	v
glad_glFlush	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFLUSHPROC glad_glFlush;$/;"	v
glad_glFlush	support/glad/glad.c	/^PFNGLFLUSHPROC glad_glFlush = NULL;$/;"	v
glad_glFlush	support/glad/glad.h	/^GLAPI PFNGLFLUSHPROC glad_glFlush;$/;"	v
glad_glFlushMappedBufferRange	support/GLFW/deps/glad.c	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;$/;"	v
glad_glFlushMappedBufferRange	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;$/;"	v
glad_glFlushMappedBufferRange	support/glad/glad.c	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = NULL;$/;"	v
glad_glFlushMappedBufferRange	support/glad/glad.h	/^GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;$/;"	v
glad_glFogCoordPointer	support/GLFW/deps/glad.c	/^PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;$/;"	v
glad_glFogCoordPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;$/;"	v
glad_glFogCoordPointer	support/glad/glad.c	/^PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer = NULL;$/;"	v
glad_glFogCoordPointer	support/glad/glad.h	/^GLAPI PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;$/;"	v
glad_glFogCoordd	support/GLFW/deps/glad.c	/^PFNGLFOGCOORDDPROC glad_glFogCoordd;$/;"	v
glad_glFogCoordd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGCOORDDPROC glad_glFogCoordd;$/;"	v
glad_glFogCoordd	support/glad/glad.c	/^PFNGLFOGCOORDDPROC glad_glFogCoordd = NULL;$/;"	v
glad_glFogCoordd	support/glad/glad.h	/^GLAPI PFNGLFOGCOORDDPROC glad_glFogCoordd;$/;"	v
glad_glFogCoorddv	support/GLFW/deps/glad.c	/^PFNGLFOGCOORDDVPROC glad_glFogCoorddv;$/;"	v
glad_glFogCoorddv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGCOORDDVPROC glad_glFogCoorddv;$/;"	v
glad_glFogCoorddv	support/glad/glad.c	/^PFNGLFOGCOORDDVPROC glad_glFogCoorddv = NULL;$/;"	v
glad_glFogCoorddv	support/glad/glad.h	/^GLAPI PFNGLFOGCOORDDVPROC glad_glFogCoorddv;$/;"	v
glad_glFogCoordf	support/GLFW/deps/glad.c	/^PFNGLFOGCOORDFPROC glad_glFogCoordf;$/;"	v
glad_glFogCoordf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGCOORDFPROC glad_glFogCoordf;$/;"	v
glad_glFogCoordf	support/glad/glad.c	/^PFNGLFOGCOORDFPROC glad_glFogCoordf = NULL;$/;"	v
glad_glFogCoordf	support/glad/glad.h	/^GLAPI PFNGLFOGCOORDFPROC glad_glFogCoordf;$/;"	v
glad_glFogCoordfv	support/GLFW/deps/glad.c	/^PFNGLFOGCOORDFVPROC glad_glFogCoordfv;$/;"	v
glad_glFogCoordfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGCOORDFVPROC glad_glFogCoordfv;$/;"	v
glad_glFogCoordfv	support/glad/glad.c	/^PFNGLFOGCOORDFVPROC glad_glFogCoordfv = NULL;$/;"	v
glad_glFogCoordfv	support/glad/glad.h	/^GLAPI PFNGLFOGCOORDFVPROC glad_glFogCoordfv;$/;"	v
glad_glFogf	support/GLFW/deps/glad.c	/^PFNGLFOGFPROC glad_glFogf;$/;"	v
glad_glFogf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGFPROC glad_glFogf;$/;"	v
glad_glFogf	support/glad/glad.c	/^PFNGLFOGFPROC glad_glFogf = NULL;$/;"	v
glad_glFogf	support/glad/glad.h	/^GLAPI PFNGLFOGFPROC glad_glFogf;$/;"	v
glad_glFogfv	support/GLFW/deps/glad.c	/^PFNGLFOGFVPROC glad_glFogfv;$/;"	v
glad_glFogfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGFVPROC glad_glFogfv;$/;"	v
glad_glFogfv	support/glad/glad.c	/^PFNGLFOGFVPROC glad_glFogfv = NULL;$/;"	v
glad_glFogfv	support/glad/glad.h	/^GLAPI PFNGLFOGFVPROC glad_glFogfv;$/;"	v
glad_glFogi	support/GLFW/deps/glad.c	/^PFNGLFOGIPROC glad_glFogi;$/;"	v
glad_glFogi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGIPROC glad_glFogi;$/;"	v
glad_glFogi	support/glad/glad.c	/^PFNGLFOGIPROC glad_glFogi = NULL;$/;"	v
glad_glFogi	support/glad/glad.h	/^GLAPI PFNGLFOGIPROC glad_glFogi;$/;"	v
glad_glFogiv	support/GLFW/deps/glad.c	/^PFNGLFOGIVPROC glad_glFogiv;$/;"	v
glad_glFogiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFOGIVPROC glad_glFogiv;$/;"	v
glad_glFogiv	support/glad/glad.c	/^PFNGLFOGIVPROC glad_glFogiv = NULL;$/;"	v
glad_glFogiv	support/glad/glad.h	/^GLAPI PFNGLFOGIVPROC glad_glFogiv;$/;"	v
glad_glFramebufferRenderbuffer	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;$/;"	v
glad_glFramebufferRenderbuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;$/;"	v
glad_glFramebufferRenderbuffer	support/glad/glad.c	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = NULL;$/;"	v
glad_glFramebufferRenderbuffer	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;$/;"	v
glad_glFramebufferTexture	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;$/;"	v
glad_glFramebufferTexture	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;$/;"	v
glad_glFramebufferTexture	support/glad/glad.c	/^PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = NULL;$/;"	v
glad_glFramebufferTexture	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;$/;"	v
glad_glFramebufferTexture1D	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;$/;"	v
glad_glFramebufferTexture1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;$/;"	v
glad_glFramebufferTexture1D	support/glad/glad.c	/^PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = NULL;$/;"	v
glad_glFramebufferTexture1D	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;$/;"	v
glad_glFramebufferTexture2D	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;$/;"	v
glad_glFramebufferTexture2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;$/;"	v
glad_glFramebufferTexture2D	support/glad/glad.c	/^PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = NULL;$/;"	v
glad_glFramebufferTexture2D	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;$/;"	v
glad_glFramebufferTexture3D	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;$/;"	v
glad_glFramebufferTexture3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;$/;"	v
glad_glFramebufferTexture3D	support/glad/glad.c	/^PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = NULL;$/;"	v
glad_glFramebufferTexture3D	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;$/;"	v
glad_glFramebufferTextureLayer	support/GLFW/deps/glad.c	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;$/;"	v
glad_glFramebufferTextureLayer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;$/;"	v
glad_glFramebufferTextureLayer	support/glad/glad.c	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = NULL;$/;"	v
glad_glFramebufferTextureLayer	support/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;$/;"	v
glad_glFrontFace	support/GLFW/deps/glad.c	/^PFNGLFRONTFACEPROC glad_glFrontFace;$/;"	v
glad_glFrontFace	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;$/;"	v
glad_glFrontFace	support/glad/glad.c	/^PFNGLFRONTFACEPROC glad_glFrontFace = NULL;$/;"	v
glad_glFrontFace	support/glad/glad.h	/^GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;$/;"	v
glad_glFrustum	support/GLFW/deps/glad.c	/^PFNGLFRUSTUMPROC glad_glFrustum;$/;"	v
glad_glFrustum	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLFRUSTUMPROC glad_glFrustum;$/;"	v
glad_glFrustum	support/glad/glad.c	/^PFNGLFRUSTUMPROC glad_glFrustum = NULL;$/;"	v
glad_glFrustum	support/glad/glad.h	/^GLAPI PFNGLFRUSTUMPROC glad_glFrustum;$/;"	v
glad_glGenBuffers	support/GLFW/deps/glad.c	/^PFNGLGENBUFFERSPROC glad_glGenBuffers;$/;"	v
glad_glGenBuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;$/;"	v
glad_glGenBuffers	support/glad/glad.c	/^PFNGLGENBUFFERSPROC glad_glGenBuffers = NULL;$/;"	v
glad_glGenBuffers	support/glad/glad.h	/^GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;$/;"	v
glad_glGenFramebuffers	support/GLFW/deps/glad.c	/^PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;$/;"	v
glad_glGenFramebuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;$/;"	v
glad_glGenFramebuffers	support/glad/glad.c	/^PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = NULL;$/;"	v
glad_glGenFramebuffers	support/glad/glad.h	/^GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;$/;"	v
glad_glGenLists	support/GLFW/deps/glad.c	/^PFNGLGENLISTSPROC glad_glGenLists;$/;"	v
glad_glGenLists	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENLISTSPROC glad_glGenLists;$/;"	v
glad_glGenLists	support/glad/glad.c	/^PFNGLGENLISTSPROC glad_glGenLists = NULL;$/;"	v
glad_glGenLists	support/glad/glad.h	/^GLAPI PFNGLGENLISTSPROC glad_glGenLists;$/;"	v
glad_glGenQueries	support/GLFW/deps/glad.c	/^PFNGLGENQUERIESPROC glad_glGenQueries;$/;"	v
glad_glGenQueries	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;$/;"	v
glad_glGenQueries	support/glad/glad.c	/^PFNGLGENQUERIESPROC glad_glGenQueries = NULL;$/;"	v
glad_glGenQueries	support/glad/glad.h	/^GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;$/;"	v
glad_glGenRenderbuffers	support/GLFW/deps/glad.c	/^PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;$/;"	v
glad_glGenRenderbuffers	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;$/;"	v
glad_glGenRenderbuffers	support/glad/glad.c	/^PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = NULL;$/;"	v
glad_glGenRenderbuffers	support/glad/glad.h	/^GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;$/;"	v
glad_glGenSamplers	support/glad/glad.c	/^PFNGLGENSAMPLERSPROC glad_glGenSamplers = NULL;$/;"	v
glad_glGenSamplers	support/glad/glad.h	/^GLAPI PFNGLGENSAMPLERSPROC glad_glGenSamplers;$/;"	v
glad_glGenTextures	support/GLFW/deps/glad.c	/^PFNGLGENTEXTURESPROC glad_glGenTextures;$/;"	v
glad_glGenTextures	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;$/;"	v
glad_glGenTextures	support/glad/glad.c	/^PFNGLGENTEXTURESPROC glad_glGenTextures = NULL;$/;"	v
glad_glGenTextures	support/glad/glad.h	/^GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;$/;"	v
glad_glGenVertexArrays	support/GLFW/deps/glad.c	/^PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;$/;"	v
glad_glGenVertexArrays	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;$/;"	v
glad_glGenVertexArrays	support/glad/glad.c	/^PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = NULL;$/;"	v
glad_glGenVertexArrays	support/glad/glad.h	/^GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;$/;"	v
glad_glGenerateMipmap	support/GLFW/deps/glad.c	/^PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;$/;"	v
glad_glGenerateMipmap	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;$/;"	v
glad_glGenerateMipmap	support/glad/glad.c	/^PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = NULL;$/;"	v
glad_glGenerateMipmap	support/glad/glad.h	/^GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;$/;"	v
glad_glGetActiveAttrib	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;$/;"	v
glad_glGetActiveAttrib	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;$/;"	v
glad_glGetActiveAttrib	support/glad/glad.c	/^PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = NULL;$/;"	v
glad_glGetActiveAttrib	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;$/;"	v
glad_glGetActiveUniform	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;$/;"	v
glad_glGetActiveUniform	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;$/;"	v
glad_glGetActiveUniform	support/glad/glad.c	/^PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = NULL;$/;"	v
glad_glGetActiveUniform	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;$/;"	v
glad_glGetActiveUniformBlockName	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;$/;"	v
glad_glGetActiveUniformBlockName	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;$/;"	v
glad_glGetActiveUniformBlockName	support/glad/glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = NULL;$/;"	v
glad_glGetActiveUniformBlockName	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;$/;"	v
glad_glGetActiveUniformBlockiv	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;$/;"	v
glad_glGetActiveUniformBlockiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;$/;"	v
glad_glGetActiveUniformBlockiv	support/glad/glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = NULL;$/;"	v
glad_glGetActiveUniformBlockiv	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;$/;"	v
glad_glGetActiveUniformName	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;$/;"	v
glad_glGetActiveUniformName	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;$/;"	v
glad_glGetActiveUniformName	support/glad/glad.c	/^PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = NULL;$/;"	v
glad_glGetActiveUniformName	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;$/;"	v
glad_glGetActiveUniformsiv	support/GLFW/deps/glad.c	/^PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;$/;"	v
glad_glGetActiveUniformsiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;$/;"	v
glad_glGetActiveUniformsiv	support/glad/glad.c	/^PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = NULL;$/;"	v
glad_glGetActiveUniformsiv	support/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;$/;"	v
glad_glGetAttachedShaders	support/GLFW/deps/glad.c	/^PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;$/;"	v
glad_glGetAttachedShaders	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;$/;"	v
glad_glGetAttachedShaders	support/glad/glad.c	/^PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = NULL;$/;"	v
glad_glGetAttachedShaders	support/glad/glad.h	/^GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;$/;"	v
glad_glGetAttribLocation	support/GLFW/deps/glad.c	/^PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;$/;"	v
glad_glGetAttribLocation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;$/;"	v
glad_glGetAttribLocation	support/glad/glad.c	/^PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = NULL;$/;"	v
glad_glGetAttribLocation	support/glad/glad.h	/^GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;$/;"	v
glad_glGetBooleani_v	support/GLFW/deps/glad.c	/^PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;$/;"	v
glad_glGetBooleani_v	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;$/;"	v
glad_glGetBooleani_v	support/glad/glad.c	/^PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = NULL;$/;"	v
glad_glGetBooleani_v	support/glad/glad.h	/^GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;$/;"	v
glad_glGetBooleanv	support/GLFW/deps/glad.c	/^PFNGLGETBOOLEANVPROC glad_glGetBooleanv;$/;"	v
glad_glGetBooleanv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;$/;"	v
glad_glGetBooleanv	support/glad/glad.c	/^PFNGLGETBOOLEANVPROC glad_glGetBooleanv = NULL;$/;"	v
glad_glGetBooleanv	support/glad/glad.h	/^GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;$/;"	v
glad_glGetBufferParameteri64v	support/GLFW/deps/glad.c	/^PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;$/;"	v
glad_glGetBufferParameteri64v	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;$/;"	v
glad_glGetBufferParameteri64v	support/glad/glad.c	/^PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = NULL;$/;"	v
glad_glGetBufferParameteri64v	support/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;$/;"	v
glad_glGetBufferParameteriv	support/GLFW/deps/glad.c	/^PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;$/;"	v
glad_glGetBufferParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;$/;"	v
glad_glGetBufferParameteriv	support/glad/glad.c	/^PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = NULL;$/;"	v
glad_glGetBufferParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;$/;"	v
glad_glGetBufferPointerv	support/GLFW/deps/glad.c	/^PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;$/;"	v
glad_glGetBufferPointerv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;$/;"	v
glad_glGetBufferPointerv	support/glad/glad.c	/^PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = NULL;$/;"	v
glad_glGetBufferPointerv	support/glad/glad.h	/^GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;$/;"	v
glad_glGetBufferSubData	support/GLFW/deps/glad.c	/^PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;$/;"	v
glad_glGetBufferSubData	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;$/;"	v
glad_glGetBufferSubData	support/glad/glad.c	/^PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = NULL;$/;"	v
glad_glGetBufferSubData	support/glad/glad.h	/^GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;$/;"	v
glad_glGetClipPlane	support/GLFW/deps/glad.c	/^PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;$/;"	v
glad_glGetClipPlane	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;$/;"	v
glad_glGetClipPlane	support/glad/glad.c	/^PFNGLGETCLIPPLANEPROC glad_glGetClipPlane = NULL;$/;"	v
glad_glGetClipPlane	support/glad/glad.h	/^GLAPI PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;$/;"	v
glad_glGetCompressedTexImage	support/GLFW/deps/glad.c	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;$/;"	v
glad_glGetCompressedTexImage	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;$/;"	v
glad_glGetCompressedTexImage	support/glad/glad.c	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = NULL;$/;"	v
glad_glGetCompressedTexImage	support/glad/glad.h	/^GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;$/;"	v
glad_glGetDoublev	support/GLFW/deps/glad.c	/^PFNGLGETDOUBLEVPROC glad_glGetDoublev;$/;"	v
glad_glGetDoublev	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;$/;"	v
glad_glGetDoublev	support/glad/glad.c	/^PFNGLGETDOUBLEVPROC glad_glGetDoublev = NULL;$/;"	v
glad_glGetDoublev	support/glad/glad.h	/^GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;$/;"	v
glad_glGetError	support/GLFW/deps/glad.c	/^PFNGLGETERRORPROC glad_glGetError;$/;"	v
glad_glGetError	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETERRORPROC glad_glGetError;$/;"	v
glad_glGetError	support/glad/glad.c	/^PFNGLGETERRORPROC glad_glGetError = NULL;$/;"	v
glad_glGetError	support/glad/glad.h	/^GLAPI PFNGLGETERRORPROC glad_glGetError;$/;"	v
glad_glGetFloatv	support/GLFW/deps/glad.c	/^PFNGLGETFLOATVPROC glad_glGetFloatv;$/;"	v
glad_glGetFloatv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;$/;"	v
glad_glGetFloatv	support/glad/glad.c	/^PFNGLGETFLOATVPROC glad_glGetFloatv = NULL;$/;"	v
glad_glGetFloatv	support/glad/glad.h	/^GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;$/;"	v
glad_glGetFragDataIndex	support/glad/glad.c	/^PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = NULL;$/;"	v
glad_glGetFragDataIndex	support/glad/glad.h	/^GLAPI PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;$/;"	v
glad_glGetFragDataLocation	support/GLFW/deps/glad.c	/^PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;$/;"	v
glad_glGetFragDataLocation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;$/;"	v
glad_glGetFragDataLocation	support/glad/glad.c	/^PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = NULL;$/;"	v
glad_glGetFragDataLocation	support/glad/glad.h	/^GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;$/;"	v
glad_glGetFramebufferAttachmentParameteriv	support/GLFW/deps/glad.c	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;$/;"	v
glad_glGetFramebufferAttachmentParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;$/;"	v
glad_glGetFramebufferAttachmentParameteriv	support/glad/glad.c	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = NULL;$/;"	v
glad_glGetFramebufferAttachmentParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;$/;"	v
glad_glGetGraphicsResetStatusARB	support/GLFW/deps/glad.c	/^PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;$/;"	v
glad_glGetGraphicsResetStatusARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;$/;"	v
glad_glGetInteger64i_v	support/GLFW/deps/glad.c	/^PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;$/;"	v
glad_glGetInteger64i_v	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;$/;"	v
glad_glGetInteger64i_v	support/glad/glad.c	/^PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = NULL;$/;"	v
glad_glGetInteger64i_v	support/glad/glad.h	/^GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;$/;"	v
glad_glGetInteger64v	support/GLFW/deps/glad.c	/^PFNGLGETINTEGER64VPROC glad_glGetInteger64v;$/;"	v
glad_glGetInteger64v	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;$/;"	v
glad_glGetInteger64v	support/glad/glad.c	/^PFNGLGETINTEGER64VPROC glad_glGetInteger64v = NULL;$/;"	v
glad_glGetInteger64v	support/glad/glad.h	/^GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;$/;"	v
glad_glGetIntegeri_v	support/GLFW/deps/glad.c	/^PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;$/;"	v
glad_glGetIntegeri_v	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;$/;"	v
glad_glGetIntegeri_v	support/glad/glad.c	/^PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = NULL;$/;"	v
glad_glGetIntegeri_v	support/glad/glad.h	/^GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;$/;"	v
glad_glGetIntegerv	support/GLFW/deps/glad.c	/^PFNGLGETINTEGERVPROC glad_glGetIntegerv;$/;"	v
glad_glGetIntegerv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;$/;"	v
glad_glGetIntegerv	support/glad/glad.c	/^PFNGLGETINTEGERVPROC glad_glGetIntegerv = NULL;$/;"	v
glad_glGetIntegerv	support/glad/glad.h	/^GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;$/;"	v
glad_glGetLightfv	support/GLFW/deps/glad.c	/^PFNGLGETLIGHTFVPROC glad_glGetLightfv;$/;"	v
glad_glGetLightfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETLIGHTFVPROC glad_glGetLightfv;$/;"	v
glad_glGetLightfv	support/glad/glad.c	/^PFNGLGETLIGHTFVPROC glad_glGetLightfv = NULL;$/;"	v
glad_glGetLightfv	support/glad/glad.h	/^GLAPI PFNGLGETLIGHTFVPROC glad_glGetLightfv;$/;"	v
glad_glGetLightiv	support/GLFW/deps/glad.c	/^PFNGLGETLIGHTIVPROC glad_glGetLightiv;$/;"	v
glad_glGetLightiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETLIGHTIVPROC glad_glGetLightiv;$/;"	v
glad_glGetLightiv	support/glad/glad.c	/^PFNGLGETLIGHTIVPROC glad_glGetLightiv = NULL;$/;"	v
glad_glGetLightiv	support/glad/glad.h	/^GLAPI PFNGLGETLIGHTIVPROC glad_glGetLightiv;$/;"	v
glad_glGetMapdv	support/GLFW/deps/glad.c	/^PFNGLGETMAPDVPROC glad_glGetMapdv;$/;"	v
glad_glGetMapdv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMAPDVPROC glad_glGetMapdv;$/;"	v
glad_glGetMapdv	support/glad/glad.c	/^PFNGLGETMAPDVPROC glad_glGetMapdv = NULL;$/;"	v
glad_glGetMapdv	support/glad/glad.h	/^GLAPI PFNGLGETMAPDVPROC glad_glGetMapdv;$/;"	v
glad_glGetMapfv	support/GLFW/deps/glad.c	/^PFNGLGETMAPFVPROC glad_glGetMapfv;$/;"	v
glad_glGetMapfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMAPFVPROC glad_glGetMapfv;$/;"	v
glad_glGetMapfv	support/glad/glad.c	/^PFNGLGETMAPFVPROC glad_glGetMapfv = NULL;$/;"	v
glad_glGetMapfv	support/glad/glad.h	/^GLAPI PFNGLGETMAPFVPROC glad_glGetMapfv;$/;"	v
glad_glGetMapiv	support/GLFW/deps/glad.c	/^PFNGLGETMAPIVPROC glad_glGetMapiv;$/;"	v
glad_glGetMapiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMAPIVPROC glad_glGetMapiv;$/;"	v
glad_glGetMapiv	support/glad/glad.c	/^PFNGLGETMAPIVPROC glad_glGetMapiv = NULL;$/;"	v
glad_glGetMapiv	support/glad/glad.h	/^GLAPI PFNGLGETMAPIVPROC glad_glGetMapiv;$/;"	v
glad_glGetMaterialfv	support/GLFW/deps/glad.c	/^PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;$/;"	v
glad_glGetMaterialfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;$/;"	v
glad_glGetMaterialfv	support/glad/glad.c	/^PFNGLGETMATERIALFVPROC glad_glGetMaterialfv = NULL;$/;"	v
glad_glGetMaterialfv	support/glad/glad.h	/^GLAPI PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;$/;"	v
glad_glGetMaterialiv	support/GLFW/deps/glad.c	/^PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;$/;"	v
glad_glGetMaterialiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;$/;"	v
glad_glGetMaterialiv	support/glad/glad.c	/^PFNGLGETMATERIALIVPROC glad_glGetMaterialiv = NULL;$/;"	v
glad_glGetMaterialiv	support/glad/glad.h	/^GLAPI PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;$/;"	v
glad_glGetMultisamplefv	support/GLFW/deps/glad.c	/^PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;$/;"	v
glad_glGetMultisamplefv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;$/;"	v
glad_glGetMultisamplefv	support/glad/glad.c	/^PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = NULL;$/;"	v
glad_glGetMultisamplefv	support/glad/glad.h	/^GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;$/;"	v
glad_glGetPixelMapfv	support/GLFW/deps/glad.c	/^PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;$/;"	v
glad_glGetPixelMapfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;$/;"	v
glad_glGetPixelMapfv	support/glad/glad.c	/^PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv = NULL;$/;"	v
glad_glGetPixelMapfv	support/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;$/;"	v
glad_glGetPixelMapuiv	support/GLFW/deps/glad.c	/^PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;$/;"	v
glad_glGetPixelMapuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;$/;"	v
glad_glGetPixelMapuiv	support/glad/glad.c	/^PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv = NULL;$/;"	v
glad_glGetPixelMapuiv	support/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;$/;"	v
glad_glGetPixelMapusv	support/GLFW/deps/glad.c	/^PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;$/;"	v
glad_glGetPixelMapusv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;$/;"	v
glad_glGetPixelMapusv	support/glad/glad.c	/^PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv = NULL;$/;"	v
glad_glGetPixelMapusv	support/glad/glad.h	/^GLAPI PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;$/;"	v
glad_glGetPointerv	support/GLFW/deps/glad.c	/^PFNGLGETPOINTERVPROC glad_glGetPointerv;$/;"	v
glad_glGetPointerv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPOINTERVPROC glad_glGetPointerv;$/;"	v
glad_glGetPointerv	support/glad/glad.c	/^PFNGLGETPOINTERVPROC glad_glGetPointerv = NULL;$/;"	v
glad_glGetPointerv	support/glad/glad.h	/^GLAPI PFNGLGETPOINTERVPROC glad_glGetPointerv;$/;"	v
glad_glGetPolygonStipple	support/GLFW/deps/glad.c	/^PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;$/;"	v
glad_glGetPolygonStipple	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;$/;"	v
glad_glGetPolygonStipple	support/glad/glad.c	/^PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple = NULL;$/;"	v
glad_glGetPolygonStipple	support/glad/glad.h	/^GLAPI PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;$/;"	v
glad_glGetProgramInfoLog	support/GLFW/deps/glad.c	/^PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;$/;"	v
glad_glGetProgramInfoLog	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;$/;"	v
glad_glGetProgramInfoLog	support/glad/glad.c	/^PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = NULL;$/;"	v
glad_glGetProgramInfoLog	support/glad/glad.h	/^GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;$/;"	v
glad_glGetProgramiv	support/GLFW/deps/glad.c	/^PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;$/;"	v
glad_glGetProgramiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;$/;"	v
glad_glGetProgramiv	support/glad/glad.c	/^PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = NULL;$/;"	v
glad_glGetProgramiv	support/glad/glad.h	/^GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;$/;"	v
glad_glGetQueryObjecti64v	support/glad/glad.c	/^PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = NULL;$/;"	v
glad_glGetQueryObjecti64v	support/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;$/;"	v
glad_glGetQueryObjectiv	support/GLFW/deps/glad.c	/^PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;$/;"	v
glad_glGetQueryObjectiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;$/;"	v
glad_glGetQueryObjectiv	support/glad/glad.c	/^PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = NULL;$/;"	v
glad_glGetQueryObjectiv	support/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;$/;"	v
glad_glGetQueryObjectui64v	support/glad/glad.c	/^PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = NULL;$/;"	v
glad_glGetQueryObjectui64v	support/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;$/;"	v
glad_glGetQueryObjectuiv	support/GLFW/deps/glad.c	/^PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;$/;"	v
glad_glGetQueryObjectuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;$/;"	v
glad_glGetQueryObjectuiv	support/glad/glad.c	/^PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = NULL;$/;"	v
glad_glGetQueryObjectuiv	support/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;$/;"	v
glad_glGetQueryiv	support/GLFW/deps/glad.c	/^PFNGLGETQUERYIVPROC glad_glGetQueryiv;$/;"	v
glad_glGetQueryiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;$/;"	v
glad_glGetQueryiv	support/glad/glad.c	/^PFNGLGETQUERYIVPROC glad_glGetQueryiv = NULL;$/;"	v
glad_glGetQueryiv	support/glad/glad.h	/^GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;$/;"	v
glad_glGetRenderbufferParameteriv	support/GLFW/deps/glad.c	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;$/;"	v
glad_glGetRenderbufferParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;$/;"	v
glad_glGetRenderbufferParameteriv	support/glad/glad.c	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = NULL;$/;"	v
glad_glGetRenderbufferParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;$/;"	v
glad_glGetSamplerParameterIiv	support/glad/glad.c	/^PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = NULL;$/;"	v
glad_glGetSamplerParameterIiv	support/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;$/;"	v
glad_glGetSamplerParameterIuiv	support/glad/glad.c	/^PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = NULL;$/;"	v
glad_glGetSamplerParameterIuiv	support/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;$/;"	v
glad_glGetSamplerParameterfv	support/glad/glad.c	/^PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = NULL;$/;"	v
glad_glGetSamplerParameterfv	support/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;$/;"	v
glad_glGetSamplerParameteriv	support/glad/glad.c	/^PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = NULL;$/;"	v
glad_glGetSamplerParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;$/;"	v
glad_glGetShaderInfoLog	support/GLFW/deps/glad.c	/^PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;$/;"	v
glad_glGetShaderInfoLog	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;$/;"	v
glad_glGetShaderInfoLog	support/glad/glad.c	/^PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = NULL;$/;"	v
glad_glGetShaderInfoLog	support/glad/glad.h	/^GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;$/;"	v
glad_glGetShaderSource	support/GLFW/deps/glad.c	/^PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;$/;"	v
glad_glGetShaderSource	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;$/;"	v
glad_glGetShaderSource	support/glad/glad.c	/^PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = NULL;$/;"	v
glad_glGetShaderSource	support/glad/glad.h	/^GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;$/;"	v
glad_glGetShaderiv	support/GLFW/deps/glad.c	/^PFNGLGETSHADERIVPROC glad_glGetShaderiv;$/;"	v
glad_glGetShaderiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;$/;"	v
glad_glGetShaderiv	support/glad/glad.c	/^PFNGLGETSHADERIVPROC glad_glGetShaderiv = NULL;$/;"	v
glad_glGetShaderiv	support/glad/glad.h	/^GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;$/;"	v
glad_glGetString	support/GLFW/deps/glad.c	/^PFNGLGETSTRINGPROC glad_glGetString;$/;"	v
glad_glGetString	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSTRINGPROC glad_glGetString;$/;"	v
glad_glGetString	support/glad/glad.c	/^PFNGLGETSTRINGPROC glad_glGetString = NULL;$/;"	v
glad_glGetString	support/glad/glad.h	/^GLAPI PFNGLGETSTRINGPROC glad_glGetString;$/;"	v
glad_glGetStringi	support/GLFW/deps/glad.c	/^PFNGLGETSTRINGIPROC glad_glGetStringi;$/;"	v
glad_glGetStringi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;$/;"	v
glad_glGetStringi	support/glad/glad.c	/^PFNGLGETSTRINGIPROC glad_glGetStringi = NULL;$/;"	v
glad_glGetStringi	support/glad/glad.h	/^GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;$/;"	v
glad_glGetSynciv	support/GLFW/deps/glad.c	/^PFNGLGETSYNCIVPROC glad_glGetSynciv;$/;"	v
glad_glGetSynciv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;$/;"	v
glad_glGetSynciv	support/glad/glad.c	/^PFNGLGETSYNCIVPROC glad_glGetSynciv = NULL;$/;"	v
glad_glGetSynciv	support/glad/glad.h	/^GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;$/;"	v
glad_glGetTexEnvfv	support/GLFW/deps/glad.c	/^PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;$/;"	v
glad_glGetTexEnvfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;$/;"	v
glad_glGetTexEnvfv	support/glad/glad.c	/^PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv = NULL;$/;"	v
glad_glGetTexEnvfv	support/glad/glad.h	/^GLAPI PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;$/;"	v
glad_glGetTexEnviv	support/GLFW/deps/glad.c	/^PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;$/;"	v
glad_glGetTexEnviv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;$/;"	v
glad_glGetTexEnviv	support/glad/glad.c	/^PFNGLGETTEXENVIVPROC glad_glGetTexEnviv = NULL;$/;"	v
glad_glGetTexEnviv	support/glad/glad.h	/^GLAPI PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;$/;"	v
glad_glGetTexGendv	support/GLFW/deps/glad.c	/^PFNGLGETTEXGENDVPROC glad_glGetTexGendv;$/;"	v
glad_glGetTexGendv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXGENDVPROC glad_glGetTexGendv;$/;"	v
glad_glGetTexGendv	support/glad/glad.c	/^PFNGLGETTEXGENDVPROC glad_glGetTexGendv = NULL;$/;"	v
glad_glGetTexGendv	support/glad/glad.h	/^GLAPI PFNGLGETTEXGENDVPROC glad_glGetTexGendv;$/;"	v
glad_glGetTexGenfv	support/GLFW/deps/glad.c	/^PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;$/;"	v
glad_glGetTexGenfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;$/;"	v
glad_glGetTexGenfv	support/glad/glad.c	/^PFNGLGETTEXGENFVPROC glad_glGetTexGenfv = NULL;$/;"	v
glad_glGetTexGenfv	support/glad/glad.h	/^GLAPI PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;$/;"	v
glad_glGetTexGeniv	support/GLFW/deps/glad.c	/^PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;$/;"	v
glad_glGetTexGeniv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;$/;"	v
glad_glGetTexGeniv	support/glad/glad.c	/^PFNGLGETTEXGENIVPROC glad_glGetTexGeniv = NULL;$/;"	v
glad_glGetTexGeniv	support/glad/glad.h	/^GLAPI PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;$/;"	v
glad_glGetTexImage	support/GLFW/deps/glad.c	/^PFNGLGETTEXIMAGEPROC glad_glGetTexImage;$/;"	v
glad_glGetTexImage	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;$/;"	v
glad_glGetTexImage	support/glad/glad.c	/^PFNGLGETTEXIMAGEPROC glad_glGetTexImage = NULL;$/;"	v
glad_glGetTexImage	support/glad/glad.h	/^GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;$/;"	v
glad_glGetTexLevelParameterfv	support/GLFW/deps/glad.c	/^PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;$/;"	v
glad_glGetTexLevelParameterfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;$/;"	v
glad_glGetTexLevelParameterfv	support/glad/glad.c	/^PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = NULL;$/;"	v
glad_glGetTexLevelParameterfv	support/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;$/;"	v
glad_glGetTexLevelParameteriv	support/GLFW/deps/glad.c	/^PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;$/;"	v
glad_glGetTexLevelParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;$/;"	v
glad_glGetTexLevelParameteriv	support/glad/glad.c	/^PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = NULL;$/;"	v
glad_glGetTexLevelParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;$/;"	v
glad_glGetTexParameterIiv	support/GLFW/deps/glad.c	/^PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;$/;"	v
glad_glGetTexParameterIiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;$/;"	v
glad_glGetTexParameterIiv	support/glad/glad.c	/^PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = NULL;$/;"	v
glad_glGetTexParameterIiv	support/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;$/;"	v
glad_glGetTexParameterIuiv	support/GLFW/deps/glad.c	/^PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;$/;"	v
glad_glGetTexParameterIuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;$/;"	v
glad_glGetTexParameterIuiv	support/glad/glad.c	/^PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = NULL;$/;"	v
glad_glGetTexParameterIuiv	support/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;$/;"	v
glad_glGetTexParameterfv	support/GLFW/deps/glad.c	/^PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;$/;"	v
glad_glGetTexParameterfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;$/;"	v
glad_glGetTexParameterfv	support/glad/glad.c	/^PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = NULL;$/;"	v
glad_glGetTexParameterfv	support/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;$/;"	v
glad_glGetTexParameteriv	support/GLFW/deps/glad.c	/^PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;$/;"	v
glad_glGetTexParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;$/;"	v
glad_glGetTexParameteriv	support/glad/glad.c	/^PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = NULL;$/;"	v
glad_glGetTexParameteriv	support/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;$/;"	v
glad_glGetTransformFeedbackVarying	support/GLFW/deps/glad.c	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;$/;"	v
glad_glGetTransformFeedbackVarying	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;$/;"	v
glad_glGetTransformFeedbackVarying	support/glad/glad.c	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = NULL;$/;"	v
glad_glGetTransformFeedbackVarying	support/glad/glad.h	/^GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;$/;"	v
glad_glGetUniformBlockIndex	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;$/;"	v
glad_glGetUniformBlockIndex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;$/;"	v
glad_glGetUniformBlockIndex	support/glad/glad.c	/^PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = NULL;$/;"	v
glad_glGetUniformBlockIndex	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;$/;"	v
glad_glGetUniformIndices	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;$/;"	v
glad_glGetUniformIndices	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;$/;"	v
glad_glGetUniformIndices	support/glad/glad.c	/^PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = NULL;$/;"	v
glad_glGetUniformIndices	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;$/;"	v
glad_glGetUniformLocation	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;$/;"	v
glad_glGetUniformLocation	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;$/;"	v
glad_glGetUniformLocation	support/glad/glad.c	/^PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = NULL;$/;"	v
glad_glGetUniformLocation	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;$/;"	v
glad_glGetUniformfv	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;$/;"	v
glad_glGetUniformfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;$/;"	v
glad_glGetUniformfv	support/glad/glad.c	/^PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = NULL;$/;"	v
glad_glGetUniformfv	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;$/;"	v
glad_glGetUniformiv	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;$/;"	v
glad_glGetUniformiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;$/;"	v
glad_glGetUniformiv	support/glad/glad.c	/^PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = NULL;$/;"	v
glad_glGetUniformiv	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;$/;"	v
glad_glGetUniformuiv	support/GLFW/deps/glad.c	/^PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;$/;"	v
glad_glGetUniformuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;$/;"	v
glad_glGetUniformuiv	support/glad/glad.c	/^PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = NULL;$/;"	v
glad_glGetUniformuiv	support/glad/glad.h	/^GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;$/;"	v
glad_glGetVertexAttribIiv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;$/;"	v
glad_glGetVertexAttribIiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;$/;"	v
glad_glGetVertexAttribIiv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = NULL;$/;"	v
glad_glGetVertexAttribIiv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;$/;"	v
glad_glGetVertexAttribIuiv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;$/;"	v
glad_glGetVertexAttribIuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;$/;"	v
glad_glGetVertexAttribIuiv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = NULL;$/;"	v
glad_glGetVertexAttribIuiv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;$/;"	v
glad_glGetVertexAttribPointerv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;$/;"	v
glad_glGetVertexAttribPointerv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;$/;"	v
glad_glGetVertexAttribPointerv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = NULL;$/;"	v
glad_glGetVertexAttribPointerv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;$/;"	v
glad_glGetVertexAttribdv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;$/;"	v
glad_glGetVertexAttribdv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;$/;"	v
glad_glGetVertexAttribdv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = NULL;$/;"	v
glad_glGetVertexAttribdv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;$/;"	v
glad_glGetVertexAttribfv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;$/;"	v
glad_glGetVertexAttribfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;$/;"	v
glad_glGetVertexAttribfv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = NULL;$/;"	v
glad_glGetVertexAttribfv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;$/;"	v
glad_glGetVertexAttribiv	support/GLFW/deps/glad.c	/^PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;$/;"	v
glad_glGetVertexAttribiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;$/;"	v
glad_glGetVertexAttribiv	support/glad/glad.c	/^PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = NULL;$/;"	v
glad_glGetVertexAttribiv	support/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;$/;"	v
glad_glGetnColorTableARB	support/GLFW/deps/glad.c	/^PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;$/;"	v
glad_glGetnColorTableARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;$/;"	v
glad_glGetnCompressedTexImageARB	support/GLFW/deps/glad.c	/^PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;$/;"	v
glad_glGetnCompressedTexImageARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;$/;"	v
glad_glGetnConvolutionFilterARB	support/GLFW/deps/glad.c	/^PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;$/;"	v
glad_glGetnConvolutionFilterARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;$/;"	v
glad_glGetnHistogramARB	support/GLFW/deps/glad.c	/^PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;$/;"	v
glad_glGetnHistogramARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;$/;"	v
glad_glGetnMapdvARB	support/GLFW/deps/glad.c	/^PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;$/;"	v
glad_glGetnMapdvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;$/;"	v
glad_glGetnMapfvARB	support/GLFW/deps/glad.c	/^PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;$/;"	v
glad_glGetnMapfvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;$/;"	v
glad_glGetnMapivARB	support/GLFW/deps/glad.c	/^PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;$/;"	v
glad_glGetnMapivARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;$/;"	v
glad_glGetnMinmaxARB	support/GLFW/deps/glad.c	/^PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;$/;"	v
glad_glGetnMinmaxARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;$/;"	v
glad_glGetnPixelMapfvARB	support/GLFW/deps/glad.c	/^PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;$/;"	v
glad_glGetnPixelMapfvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;$/;"	v
glad_glGetnPixelMapuivARB	support/GLFW/deps/glad.c	/^PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;$/;"	v
glad_glGetnPixelMapuivARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;$/;"	v
glad_glGetnPixelMapusvARB	support/GLFW/deps/glad.c	/^PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;$/;"	v
glad_glGetnPixelMapusvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;$/;"	v
glad_glGetnPolygonStippleARB	support/GLFW/deps/glad.c	/^PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;$/;"	v
glad_glGetnPolygonStippleARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;$/;"	v
glad_glGetnSeparableFilterARB	support/GLFW/deps/glad.c	/^PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;$/;"	v
glad_glGetnSeparableFilterARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;$/;"	v
glad_glGetnTexImageARB	support/GLFW/deps/glad.c	/^PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;$/;"	v
glad_glGetnTexImageARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;$/;"	v
glad_glGetnUniformdvARB	support/GLFW/deps/glad.c	/^PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;$/;"	v
glad_glGetnUniformdvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;$/;"	v
glad_glGetnUniformfvARB	support/GLFW/deps/glad.c	/^PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;$/;"	v
glad_glGetnUniformfvARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;$/;"	v
glad_glGetnUniformivARB	support/GLFW/deps/glad.c	/^PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;$/;"	v
glad_glGetnUniformivARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;$/;"	v
glad_glGetnUniformuivARB	support/GLFW/deps/glad.c	/^PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;$/;"	v
glad_glGetnUniformuivARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;$/;"	v
glad_glHint	support/GLFW/deps/glad.c	/^PFNGLHINTPROC glad_glHint;$/;"	v
glad_glHint	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLHINTPROC glad_glHint;$/;"	v
glad_glHint	support/glad/glad.c	/^PFNGLHINTPROC glad_glHint = NULL;$/;"	v
glad_glHint	support/glad/glad.h	/^GLAPI PFNGLHINTPROC glad_glHint;$/;"	v
glad_glIndexMask	support/GLFW/deps/glad.c	/^PFNGLINDEXMASKPROC glad_glIndexMask;$/;"	v
glad_glIndexMask	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXMASKPROC glad_glIndexMask;$/;"	v
glad_glIndexMask	support/glad/glad.c	/^PFNGLINDEXMASKPROC glad_glIndexMask = NULL;$/;"	v
glad_glIndexMask	support/glad/glad.h	/^GLAPI PFNGLINDEXMASKPROC glad_glIndexMask;$/;"	v
glad_glIndexPointer	support/GLFW/deps/glad.c	/^PFNGLINDEXPOINTERPROC glad_glIndexPointer;$/;"	v
glad_glIndexPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXPOINTERPROC glad_glIndexPointer;$/;"	v
glad_glIndexPointer	support/glad/glad.c	/^PFNGLINDEXPOINTERPROC glad_glIndexPointer = NULL;$/;"	v
glad_glIndexPointer	support/glad/glad.h	/^GLAPI PFNGLINDEXPOINTERPROC glad_glIndexPointer;$/;"	v
glad_glIndexd	support/GLFW/deps/glad.c	/^PFNGLINDEXDPROC glad_glIndexd;$/;"	v
glad_glIndexd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXDPROC glad_glIndexd;$/;"	v
glad_glIndexd	support/glad/glad.c	/^PFNGLINDEXDPROC glad_glIndexd = NULL;$/;"	v
glad_glIndexd	support/glad/glad.h	/^GLAPI PFNGLINDEXDPROC glad_glIndexd;$/;"	v
glad_glIndexdv	support/GLFW/deps/glad.c	/^PFNGLINDEXDVPROC glad_glIndexdv;$/;"	v
glad_glIndexdv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXDVPROC glad_glIndexdv;$/;"	v
glad_glIndexdv	support/glad/glad.c	/^PFNGLINDEXDVPROC glad_glIndexdv = NULL;$/;"	v
glad_glIndexdv	support/glad/glad.h	/^GLAPI PFNGLINDEXDVPROC glad_glIndexdv;$/;"	v
glad_glIndexf	support/GLFW/deps/glad.c	/^PFNGLINDEXFPROC glad_glIndexf;$/;"	v
glad_glIndexf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXFPROC glad_glIndexf;$/;"	v
glad_glIndexf	support/glad/glad.c	/^PFNGLINDEXFPROC glad_glIndexf = NULL;$/;"	v
glad_glIndexf	support/glad/glad.h	/^GLAPI PFNGLINDEXFPROC glad_glIndexf;$/;"	v
glad_glIndexfv	support/GLFW/deps/glad.c	/^PFNGLINDEXFVPROC glad_glIndexfv;$/;"	v
glad_glIndexfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXFVPROC glad_glIndexfv;$/;"	v
glad_glIndexfv	support/glad/glad.c	/^PFNGLINDEXFVPROC glad_glIndexfv = NULL;$/;"	v
glad_glIndexfv	support/glad/glad.h	/^GLAPI PFNGLINDEXFVPROC glad_glIndexfv;$/;"	v
glad_glIndexi	support/GLFW/deps/glad.c	/^PFNGLINDEXIPROC glad_glIndexi;$/;"	v
glad_glIndexi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXIPROC glad_glIndexi;$/;"	v
glad_glIndexi	support/glad/glad.c	/^PFNGLINDEXIPROC glad_glIndexi = NULL;$/;"	v
glad_glIndexi	support/glad/glad.h	/^GLAPI PFNGLINDEXIPROC glad_glIndexi;$/;"	v
glad_glIndexiv	support/GLFW/deps/glad.c	/^PFNGLINDEXIVPROC glad_glIndexiv;$/;"	v
glad_glIndexiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXIVPROC glad_glIndexiv;$/;"	v
glad_glIndexiv	support/glad/glad.c	/^PFNGLINDEXIVPROC glad_glIndexiv = NULL;$/;"	v
glad_glIndexiv	support/glad/glad.h	/^GLAPI PFNGLINDEXIVPROC glad_glIndexiv;$/;"	v
glad_glIndexs	support/GLFW/deps/glad.c	/^PFNGLINDEXSPROC glad_glIndexs;$/;"	v
glad_glIndexs	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXSPROC glad_glIndexs;$/;"	v
glad_glIndexs	support/glad/glad.c	/^PFNGLINDEXSPROC glad_glIndexs = NULL;$/;"	v
glad_glIndexs	support/glad/glad.h	/^GLAPI PFNGLINDEXSPROC glad_glIndexs;$/;"	v
glad_glIndexsv	support/GLFW/deps/glad.c	/^PFNGLINDEXSVPROC glad_glIndexsv;$/;"	v
glad_glIndexsv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXSVPROC glad_glIndexsv;$/;"	v
glad_glIndexsv	support/glad/glad.c	/^PFNGLINDEXSVPROC glad_glIndexsv = NULL;$/;"	v
glad_glIndexsv	support/glad/glad.h	/^GLAPI PFNGLINDEXSVPROC glad_glIndexsv;$/;"	v
glad_glIndexub	support/GLFW/deps/glad.c	/^PFNGLINDEXUBPROC glad_glIndexub;$/;"	v
glad_glIndexub	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXUBPROC glad_glIndexub;$/;"	v
glad_glIndexub	support/glad/glad.c	/^PFNGLINDEXUBPROC glad_glIndexub = NULL;$/;"	v
glad_glIndexub	support/glad/glad.h	/^GLAPI PFNGLINDEXUBPROC glad_glIndexub;$/;"	v
glad_glIndexubv	support/GLFW/deps/glad.c	/^PFNGLINDEXUBVPROC glad_glIndexubv;$/;"	v
glad_glIndexubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINDEXUBVPROC glad_glIndexubv;$/;"	v
glad_glIndexubv	support/glad/glad.c	/^PFNGLINDEXUBVPROC glad_glIndexubv = NULL;$/;"	v
glad_glIndexubv	support/glad/glad.h	/^GLAPI PFNGLINDEXUBVPROC glad_glIndexubv;$/;"	v
glad_glInitNames	support/GLFW/deps/glad.c	/^PFNGLINITNAMESPROC glad_glInitNames;$/;"	v
glad_glInitNames	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINITNAMESPROC glad_glInitNames;$/;"	v
glad_glInitNames	support/glad/glad.c	/^PFNGLINITNAMESPROC glad_glInitNames = NULL;$/;"	v
glad_glInitNames	support/glad/glad.h	/^GLAPI PFNGLINITNAMESPROC glad_glInitNames;$/;"	v
glad_glInterleavedArrays	support/GLFW/deps/glad.c	/^PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;$/;"	v
glad_glInterleavedArrays	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;$/;"	v
glad_glInterleavedArrays	support/glad/glad.c	/^PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays = NULL;$/;"	v
glad_glInterleavedArrays	support/glad/glad.h	/^GLAPI PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;$/;"	v
glad_glIsBuffer	support/GLFW/deps/glad.c	/^PFNGLISBUFFERPROC glad_glIsBuffer;$/;"	v
glad_glIsBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;$/;"	v
glad_glIsBuffer	support/glad/glad.c	/^PFNGLISBUFFERPROC glad_glIsBuffer = NULL;$/;"	v
glad_glIsBuffer	support/glad/glad.h	/^GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;$/;"	v
glad_glIsEnabled	support/GLFW/deps/glad.c	/^PFNGLISENABLEDPROC glad_glIsEnabled;$/;"	v
glad_glIsEnabled	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;$/;"	v
glad_glIsEnabled	support/glad/glad.c	/^PFNGLISENABLEDPROC glad_glIsEnabled = NULL;$/;"	v
glad_glIsEnabled	support/glad/glad.h	/^GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;$/;"	v
glad_glIsEnabledi	support/GLFW/deps/glad.c	/^PFNGLISENABLEDIPROC glad_glIsEnabledi;$/;"	v
glad_glIsEnabledi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;$/;"	v
glad_glIsEnabledi	support/glad/glad.c	/^PFNGLISENABLEDIPROC glad_glIsEnabledi = NULL;$/;"	v
glad_glIsEnabledi	support/glad/glad.h	/^GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;$/;"	v
glad_glIsFramebuffer	support/GLFW/deps/glad.c	/^PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;$/;"	v
glad_glIsFramebuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;$/;"	v
glad_glIsFramebuffer	support/glad/glad.c	/^PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = NULL;$/;"	v
glad_glIsFramebuffer	support/glad/glad.h	/^GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;$/;"	v
glad_glIsList	support/GLFW/deps/glad.c	/^PFNGLISLISTPROC glad_glIsList;$/;"	v
glad_glIsList	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISLISTPROC glad_glIsList;$/;"	v
glad_glIsList	support/glad/glad.c	/^PFNGLISLISTPROC glad_glIsList = NULL;$/;"	v
glad_glIsList	support/glad/glad.h	/^GLAPI PFNGLISLISTPROC glad_glIsList;$/;"	v
glad_glIsProgram	support/GLFW/deps/glad.c	/^PFNGLISPROGRAMPROC glad_glIsProgram;$/;"	v
glad_glIsProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;$/;"	v
glad_glIsProgram	support/glad/glad.c	/^PFNGLISPROGRAMPROC glad_glIsProgram = NULL;$/;"	v
glad_glIsProgram	support/glad/glad.h	/^GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;$/;"	v
glad_glIsQuery	support/GLFW/deps/glad.c	/^PFNGLISQUERYPROC glad_glIsQuery;$/;"	v
glad_glIsQuery	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISQUERYPROC glad_glIsQuery;$/;"	v
glad_glIsQuery	support/glad/glad.c	/^PFNGLISQUERYPROC glad_glIsQuery = NULL;$/;"	v
glad_glIsQuery	support/glad/glad.h	/^GLAPI PFNGLISQUERYPROC glad_glIsQuery;$/;"	v
glad_glIsRenderbuffer	support/GLFW/deps/glad.c	/^PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;$/;"	v
glad_glIsRenderbuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;$/;"	v
glad_glIsRenderbuffer	support/glad/glad.c	/^PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = NULL;$/;"	v
glad_glIsRenderbuffer	support/glad/glad.h	/^GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;$/;"	v
glad_glIsSampler	support/glad/glad.c	/^PFNGLISSAMPLERPROC glad_glIsSampler = NULL;$/;"	v
glad_glIsSampler	support/glad/glad.h	/^GLAPI PFNGLISSAMPLERPROC glad_glIsSampler;$/;"	v
glad_glIsShader	support/GLFW/deps/glad.c	/^PFNGLISSHADERPROC glad_glIsShader;$/;"	v
glad_glIsShader	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISSHADERPROC glad_glIsShader;$/;"	v
glad_glIsShader	support/glad/glad.c	/^PFNGLISSHADERPROC glad_glIsShader = NULL;$/;"	v
glad_glIsShader	support/glad/glad.h	/^GLAPI PFNGLISSHADERPROC glad_glIsShader;$/;"	v
glad_glIsSync	support/GLFW/deps/glad.c	/^PFNGLISSYNCPROC glad_glIsSync;$/;"	v
glad_glIsSync	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISSYNCPROC glad_glIsSync;$/;"	v
glad_glIsSync	support/glad/glad.c	/^PFNGLISSYNCPROC glad_glIsSync = NULL;$/;"	v
glad_glIsSync	support/glad/glad.h	/^GLAPI PFNGLISSYNCPROC glad_glIsSync;$/;"	v
glad_glIsTexture	support/GLFW/deps/glad.c	/^PFNGLISTEXTUREPROC glad_glIsTexture;$/;"	v
glad_glIsTexture	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;$/;"	v
glad_glIsTexture	support/glad/glad.c	/^PFNGLISTEXTUREPROC glad_glIsTexture = NULL;$/;"	v
glad_glIsTexture	support/glad/glad.h	/^GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;$/;"	v
glad_glIsVertexArray	support/GLFW/deps/glad.c	/^PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;$/;"	v
glad_glIsVertexArray	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;$/;"	v
glad_glIsVertexArray	support/glad/glad.c	/^PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = NULL;$/;"	v
glad_glIsVertexArray	support/glad/glad.h	/^GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;$/;"	v
glad_glLightModelf	support/GLFW/deps/glad.c	/^PFNGLLIGHTMODELFPROC glad_glLightModelf;$/;"	v
glad_glLightModelf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTMODELFPROC glad_glLightModelf;$/;"	v
glad_glLightModelf	support/glad/glad.c	/^PFNGLLIGHTMODELFPROC glad_glLightModelf = NULL;$/;"	v
glad_glLightModelf	support/glad/glad.h	/^GLAPI PFNGLLIGHTMODELFPROC glad_glLightModelf;$/;"	v
glad_glLightModelfv	support/GLFW/deps/glad.c	/^PFNGLLIGHTMODELFVPROC glad_glLightModelfv;$/;"	v
glad_glLightModelfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTMODELFVPROC glad_glLightModelfv;$/;"	v
glad_glLightModelfv	support/glad/glad.c	/^PFNGLLIGHTMODELFVPROC glad_glLightModelfv = NULL;$/;"	v
glad_glLightModelfv	support/glad/glad.h	/^GLAPI PFNGLLIGHTMODELFVPROC glad_glLightModelfv;$/;"	v
glad_glLightModeli	support/GLFW/deps/glad.c	/^PFNGLLIGHTMODELIPROC glad_glLightModeli;$/;"	v
glad_glLightModeli	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTMODELIPROC glad_glLightModeli;$/;"	v
glad_glLightModeli	support/glad/glad.c	/^PFNGLLIGHTMODELIPROC glad_glLightModeli = NULL;$/;"	v
glad_glLightModeli	support/glad/glad.h	/^GLAPI PFNGLLIGHTMODELIPROC glad_glLightModeli;$/;"	v
glad_glLightModeliv	support/GLFW/deps/glad.c	/^PFNGLLIGHTMODELIVPROC glad_glLightModeliv;$/;"	v
glad_glLightModeliv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTMODELIVPROC glad_glLightModeliv;$/;"	v
glad_glLightModeliv	support/glad/glad.c	/^PFNGLLIGHTMODELIVPROC glad_glLightModeliv = NULL;$/;"	v
glad_glLightModeliv	support/glad/glad.h	/^GLAPI PFNGLLIGHTMODELIVPROC glad_glLightModeliv;$/;"	v
glad_glLightf	support/GLFW/deps/glad.c	/^PFNGLLIGHTFPROC glad_glLightf;$/;"	v
glad_glLightf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTFPROC glad_glLightf;$/;"	v
glad_glLightf	support/glad/glad.c	/^PFNGLLIGHTFPROC glad_glLightf = NULL;$/;"	v
glad_glLightf	support/glad/glad.h	/^GLAPI PFNGLLIGHTFPROC glad_glLightf;$/;"	v
glad_glLightfv	support/GLFW/deps/glad.c	/^PFNGLLIGHTFVPROC glad_glLightfv;$/;"	v
glad_glLightfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTFVPROC glad_glLightfv;$/;"	v
glad_glLightfv	support/glad/glad.c	/^PFNGLLIGHTFVPROC glad_glLightfv = NULL;$/;"	v
glad_glLightfv	support/glad/glad.h	/^GLAPI PFNGLLIGHTFVPROC glad_glLightfv;$/;"	v
glad_glLighti	support/GLFW/deps/glad.c	/^PFNGLLIGHTIPROC glad_glLighti;$/;"	v
glad_glLighti	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTIPROC glad_glLighti;$/;"	v
glad_glLighti	support/glad/glad.c	/^PFNGLLIGHTIPROC glad_glLighti = NULL;$/;"	v
glad_glLighti	support/glad/glad.h	/^GLAPI PFNGLLIGHTIPROC glad_glLighti;$/;"	v
glad_glLightiv	support/GLFW/deps/glad.c	/^PFNGLLIGHTIVPROC glad_glLightiv;$/;"	v
glad_glLightiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLIGHTIVPROC glad_glLightiv;$/;"	v
glad_glLightiv	support/glad/glad.c	/^PFNGLLIGHTIVPROC glad_glLightiv = NULL;$/;"	v
glad_glLightiv	support/glad/glad.h	/^GLAPI PFNGLLIGHTIVPROC glad_glLightiv;$/;"	v
glad_glLineStipple	support/GLFW/deps/glad.c	/^PFNGLLINESTIPPLEPROC glad_glLineStipple;$/;"	v
glad_glLineStipple	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLINESTIPPLEPROC glad_glLineStipple;$/;"	v
glad_glLineStipple	support/glad/glad.c	/^PFNGLLINESTIPPLEPROC glad_glLineStipple = NULL;$/;"	v
glad_glLineStipple	support/glad/glad.h	/^GLAPI PFNGLLINESTIPPLEPROC glad_glLineStipple;$/;"	v
glad_glLineWidth	support/GLFW/deps/glad.c	/^PFNGLLINEWIDTHPROC glad_glLineWidth;$/;"	v
glad_glLineWidth	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;$/;"	v
glad_glLineWidth	support/glad/glad.c	/^PFNGLLINEWIDTHPROC glad_glLineWidth = NULL;$/;"	v
glad_glLineWidth	support/glad/glad.h	/^GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;$/;"	v
glad_glLinkProgram	support/GLFW/deps/glad.c	/^PFNGLLINKPROGRAMPROC glad_glLinkProgram;$/;"	v
glad_glLinkProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;$/;"	v
glad_glLinkProgram	support/glad/glad.c	/^PFNGLLINKPROGRAMPROC glad_glLinkProgram = NULL;$/;"	v
glad_glLinkProgram	support/glad/glad.h	/^GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;$/;"	v
glad_glListBase	support/GLFW/deps/glad.c	/^PFNGLLISTBASEPROC glad_glListBase;$/;"	v
glad_glListBase	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLISTBASEPROC glad_glListBase;$/;"	v
glad_glListBase	support/glad/glad.c	/^PFNGLLISTBASEPROC glad_glListBase = NULL;$/;"	v
glad_glListBase	support/glad/glad.h	/^GLAPI PFNGLLISTBASEPROC glad_glListBase;$/;"	v
glad_glLoadIdentity	support/GLFW/deps/glad.c	/^PFNGLLOADIDENTITYPROC glad_glLoadIdentity;$/;"	v
glad_glLoadIdentity	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADIDENTITYPROC glad_glLoadIdentity;$/;"	v
glad_glLoadIdentity	support/glad/glad.c	/^PFNGLLOADIDENTITYPROC glad_glLoadIdentity = NULL;$/;"	v
glad_glLoadIdentity	support/glad/glad.h	/^GLAPI PFNGLLOADIDENTITYPROC glad_glLoadIdentity;$/;"	v
glad_glLoadMatrixd	support/GLFW/deps/glad.c	/^PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;$/;"	v
glad_glLoadMatrixd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;$/;"	v
glad_glLoadMatrixd	support/glad/glad.c	/^PFNGLLOADMATRIXDPROC glad_glLoadMatrixd = NULL;$/;"	v
glad_glLoadMatrixd	support/glad/glad.h	/^GLAPI PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;$/;"	v
glad_glLoadMatrixf	support/GLFW/deps/glad.c	/^PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;$/;"	v
glad_glLoadMatrixf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;$/;"	v
glad_glLoadMatrixf	support/glad/glad.c	/^PFNGLLOADMATRIXFPROC glad_glLoadMatrixf = NULL;$/;"	v
glad_glLoadMatrixf	support/glad/glad.h	/^GLAPI PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;$/;"	v
glad_glLoadName	support/GLFW/deps/glad.c	/^PFNGLLOADNAMEPROC glad_glLoadName;$/;"	v
glad_glLoadName	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADNAMEPROC glad_glLoadName;$/;"	v
glad_glLoadName	support/glad/glad.c	/^PFNGLLOADNAMEPROC glad_glLoadName = NULL;$/;"	v
glad_glLoadName	support/glad/glad.h	/^GLAPI PFNGLLOADNAMEPROC glad_glLoadName;$/;"	v
glad_glLoadTransposeMatrixd	support/GLFW/deps/glad.c	/^PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;$/;"	v
glad_glLoadTransposeMatrixd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;$/;"	v
glad_glLoadTransposeMatrixd	support/glad/glad.c	/^PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd = NULL;$/;"	v
glad_glLoadTransposeMatrixd	support/glad/glad.h	/^GLAPI PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;$/;"	v
glad_glLoadTransposeMatrixf	support/GLFW/deps/glad.c	/^PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;$/;"	v
glad_glLoadTransposeMatrixf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;$/;"	v
glad_glLoadTransposeMatrixf	support/glad/glad.c	/^PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf = NULL;$/;"	v
glad_glLoadTransposeMatrixf	support/glad/glad.h	/^GLAPI PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;$/;"	v
glad_glLogicOp	support/GLFW/deps/glad.c	/^PFNGLLOGICOPPROC glad_glLogicOp;$/;"	v
glad_glLogicOp	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLLOGICOPPROC glad_glLogicOp;$/;"	v
glad_glLogicOp	support/glad/glad.c	/^PFNGLLOGICOPPROC glad_glLogicOp = NULL;$/;"	v
glad_glLogicOp	support/glad/glad.h	/^GLAPI PFNGLLOGICOPPROC glad_glLogicOp;$/;"	v
glad_glMap1d	support/GLFW/deps/glad.c	/^PFNGLMAP1DPROC glad_glMap1d;$/;"	v
glad_glMap1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAP1DPROC glad_glMap1d;$/;"	v
glad_glMap1d	support/glad/glad.c	/^PFNGLMAP1DPROC glad_glMap1d = NULL;$/;"	v
glad_glMap1d	support/glad/glad.h	/^GLAPI PFNGLMAP1DPROC glad_glMap1d;$/;"	v
glad_glMap1f	support/GLFW/deps/glad.c	/^PFNGLMAP1FPROC glad_glMap1f;$/;"	v
glad_glMap1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAP1FPROC glad_glMap1f;$/;"	v
glad_glMap1f	support/glad/glad.c	/^PFNGLMAP1FPROC glad_glMap1f = NULL;$/;"	v
glad_glMap1f	support/glad/glad.h	/^GLAPI PFNGLMAP1FPROC glad_glMap1f;$/;"	v
glad_glMap2d	support/GLFW/deps/glad.c	/^PFNGLMAP2DPROC glad_glMap2d;$/;"	v
glad_glMap2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAP2DPROC glad_glMap2d;$/;"	v
glad_glMap2d	support/glad/glad.c	/^PFNGLMAP2DPROC glad_glMap2d = NULL;$/;"	v
glad_glMap2d	support/glad/glad.h	/^GLAPI PFNGLMAP2DPROC glad_glMap2d;$/;"	v
glad_glMap2f	support/GLFW/deps/glad.c	/^PFNGLMAP2FPROC glad_glMap2f;$/;"	v
glad_glMap2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAP2FPROC glad_glMap2f;$/;"	v
glad_glMap2f	support/glad/glad.c	/^PFNGLMAP2FPROC glad_glMap2f = NULL;$/;"	v
glad_glMap2f	support/glad/glad.h	/^GLAPI PFNGLMAP2FPROC glad_glMap2f;$/;"	v
glad_glMapBuffer	support/GLFW/deps/glad.c	/^PFNGLMAPBUFFERPROC glad_glMapBuffer;$/;"	v
glad_glMapBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;$/;"	v
glad_glMapBuffer	support/glad/glad.c	/^PFNGLMAPBUFFERPROC glad_glMapBuffer = NULL;$/;"	v
glad_glMapBuffer	support/glad/glad.h	/^GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;$/;"	v
glad_glMapBufferRange	support/GLFW/deps/glad.c	/^PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;$/;"	v
glad_glMapBufferRange	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;$/;"	v
glad_glMapBufferRange	support/glad/glad.c	/^PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = NULL;$/;"	v
glad_glMapBufferRange	support/glad/glad.h	/^GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;$/;"	v
glad_glMapGrid1d	support/GLFW/deps/glad.c	/^PFNGLMAPGRID1DPROC glad_glMapGrid1d;$/;"	v
glad_glMapGrid1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPGRID1DPROC glad_glMapGrid1d;$/;"	v
glad_glMapGrid1d	support/glad/glad.c	/^PFNGLMAPGRID1DPROC glad_glMapGrid1d = NULL;$/;"	v
glad_glMapGrid1d	support/glad/glad.h	/^GLAPI PFNGLMAPGRID1DPROC glad_glMapGrid1d;$/;"	v
glad_glMapGrid1f	support/GLFW/deps/glad.c	/^PFNGLMAPGRID1FPROC glad_glMapGrid1f;$/;"	v
glad_glMapGrid1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPGRID1FPROC glad_glMapGrid1f;$/;"	v
glad_glMapGrid1f	support/glad/glad.c	/^PFNGLMAPGRID1FPROC glad_glMapGrid1f = NULL;$/;"	v
glad_glMapGrid1f	support/glad/glad.h	/^GLAPI PFNGLMAPGRID1FPROC glad_glMapGrid1f;$/;"	v
glad_glMapGrid2d	support/GLFW/deps/glad.c	/^PFNGLMAPGRID2DPROC glad_glMapGrid2d;$/;"	v
glad_glMapGrid2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPGRID2DPROC glad_glMapGrid2d;$/;"	v
glad_glMapGrid2d	support/glad/glad.c	/^PFNGLMAPGRID2DPROC glad_glMapGrid2d = NULL;$/;"	v
glad_glMapGrid2d	support/glad/glad.h	/^GLAPI PFNGLMAPGRID2DPROC glad_glMapGrid2d;$/;"	v
glad_glMapGrid2f	support/GLFW/deps/glad.c	/^PFNGLMAPGRID2FPROC glad_glMapGrid2f;$/;"	v
glad_glMapGrid2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMAPGRID2FPROC glad_glMapGrid2f;$/;"	v
glad_glMapGrid2f	support/glad/glad.c	/^PFNGLMAPGRID2FPROC glad_glMapGrid2f = NULL;$/;"	v
glad_glMapGrid2f	support/glad/glad.h	/^GLAPI PFNGLMAPGRID2FPROC glad_glMapGrid2f;$/;"	v
glad_glMaterialf	support/GLFW/deps/glad.c	/^PFNGLMATERIALFPROC glad_glMaterialf;$/;"	v
glad_glMaterialf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMATERIALFPROC glad_glMaterialf;$/;"	v
glad_glMaterialf	support/glad/glad.c	/^PFNGLMATERIALFPROC glad_glMaterialf = NULL;$/;"	v
glad_glMaterialf	support/glad/glad.h	/^GLAPI PFNGLMATERIALFPROC glad_glMaterialf;$/;"	v
glad_glMaterialfv	support/GLFW/deps/glad.c	/^PFNGLMATERIALFVPROC glad_glMaterialfv;$/;"	v
glad_glMaterialfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMATERIALFVPROC glad_glMaterialfv;$/;"	v
glad_glMaterialfv	support/glad/glad.c	/^PFNGLMATERIALFVPROC glad_glMaterialfv = NULL;$/;"	v
glad_glMaterialfv	support/glad/glad.h	/^GLAPI PFNGLMATERIALFVPROC glad_glMaterialfv;$/;"	v
glad_glMateriali	support/GLFW/deps/glad.c	/^PFNGLMATERIALIPROC glad_glMateriali;$/;"	v
glad_glMateriali	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMATERIALIPROC glad_glMateriali;$/;"	v
glad_glMateriali	support/glad/glad.c	/^PFNGLMATERIALIPROC glad_glMateriali = NULL;$/;"	v
glad_glMateriali	support/glad/glad.h	/^GLAPI PFNGLMATERIALIPROC glad_glMateriali;$/;"	v
glad_glMaterialiv	support/GLFW/deps/glad.c	/^PFNGLMATERIALIVPROC glad_glMaterialiv;$/;"	v
glad_glMaterialiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMATERIALIVPROC glad_glMaterialiv;$/;"	v
glad_glMaterialiv	support/glad/glad.c	/^PFNGLMATERIALIVPROC glad_glMaterialiv = NULL;$/;"	v
glad_glMaterialiv	support/glad/glad.h	/^GLAPI PFNGLMATERIALIVPROC glad_glMaterialiv;$/;"	v
glad_glMatrixMode	support/GLFW/deps/glad.c	/^PFNGLMATRIXMODEPROC glad_glMatrixMode;$/;"	v
glad_glMatrixMode	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMATRIXMODEPROC glad_glMatrixMode;$/;"	v
glad_glMatrixMode	support/glad/glad.c	/^PFNGLMATRIXMODEPROC glad_glMatrixMode = NULL;$/;"	v
glad_glMatrixMode	support/glad/glad.h	/^GLAPI PFNGLMATRIXMODEPROC glad_glMatrixMode;$/;"	v
glad_glMultMatrixd	support/GLFW/deps/glad.c	/^PFNGLMULTMATRIXDPROC glad_glMultMatrixd;$/;"	v
glad_glMultMatrixd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTMATRIXDPROC glad_glMultMatrixd;$/;"	v
glad_glMultMatrixd	support/glad/glad.c	/^PFNGLMULTMATRIXDPROC glad_glMultMatrixd = NULL;$/;"	v
glad_glMultMatrixd	support/glad/glad.h	/^GLAPI PFNGLMULTMATRIXDPROC glad_glMultMatrixd;$/;"	v
glad_glMultMatrixf	support/GLFW/deps/glad.c	/^PFNGLMULTMATRIXFPROC glad_glMultMatrixf;$/;"	v
glad_glMultMatrixf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTMATRIXFPROC glad_glMultMatrixf;$/;"	v
glad_glMultMatrixf	support/glad/glad.c	/^PFNGLMULTMATRIXFPROC glad_glMultMatrixf = NULL;$/;"	v
glad_glMultMatrixf	support/glad/glad.h	/^GLAPI PFNGLMULTMATRIXFPROC glad_glMultMatrixf;$/;"	v
glad_glMultTransposeMatrixd	support/GLFW/deps/glad.c	/^PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;$/;"	v
glad_glMultTransposeMatrixd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;$/;"	v
glad_glMultTransposeMatrixd	support/glad/glad.c	/^PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd = NULL;$/;"	v
glad_glMultTransposeMatrixd	support/glad/glad.h	/^GLAPI PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;$/;"	v
glad_glMultTransposeMatrixf	support/GLFW/deps/glad.c	/^PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;$/;"	v
glad_glMultTransposeMatrixf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;$/;"	v
glad_glMultTransposeMatrixf	support/glad/glad.c	/^PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf = NULL;$/;"	v
glad_glMultTransposeMatrixf	support/glad/glad.h	/^GLAPI PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;$/;"	v
glad_glMultiDrawArrays	support/GLFW/deps/glad.c	/^PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;$/;"	v
glad_glMultiDrawArrays	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;$/;"	v
glad_glMultiDrawArrays	support/glad/glad.c	/^PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = NULL;$/;"	v
glad_glMultiDrawArrays	support/glad/glad.h	/^GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;$/;"	v
glad_glMultiDrawElements	support/GLFW/deps/glad.c	/^PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;$/;"	v
glad_glMultiDrawElements	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;$/;"	v
glad_glMultiDrawElements	support/glad/glad.c	/^PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = NULL;$/;"	v
glad_glMultiDrawElements	support/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;$/;"	v
glad_glMultiDrawElementsBaseVertex	support/GLFW/deps/glad.c	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;$/;"	v
glad_glMultiDrawElementsBaseVertex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;$/;"	v
glad_glMultiDrawElementsBaseVertex	support/glad/glad.c	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = NULL;$/;"	v
glad_glMultiDrawElementsBaseVertex	support/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;$/;"	v
glad_glMultiTexCoord1d	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;$/;"	v
glad_glMultiTexCoord1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;$/;"	v
glad_glMultiTexCoord1d	support/glad/glad.c	/^PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d = NULL;$/;"	v
glad_glMultiTexCoord1d	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;$/;"	v
glad_glMultiTexCoord1dv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;$/;"	v
glad_glMultiTexCoord1dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;$/;"	v
glad_glMultiTexCoord1dv	support/glad/glad.c	/^PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv = NULL;$/;"	v
glad_glMultiTexCoord1dv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;$/;"	v
glad_glMultiTexCoord1f	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;$/;"	v
glad_glMultiTexCoord1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;$/;"	v
glad_glMultiTexCoord1f	support/glad/glad.c	/^PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f = NULL;$/;"	v
glad_glMultiTexCoord1f	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;$/;"	v
glad_glMultiTexCoord1fv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;$/;"	v
glad_glMultiTexCoord1fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;$/;"	v
glad_glMultiTexCoord1fv	support/glad/glad.c	/^PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv = NULL;$/;"	v
glad_glMultiTexCoord1fv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;$/;"	v
glad_glMultiTexCoord1i	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;$/;"	v
glad_glMultiTexCoord1i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;$/;"	v
glad_glMultiTexCoord1i	support/glad/glad.c	/^PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i = NULL;$/;"	v
glad_glMultiTexCoord1i	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;$/;"	v
glad_glMultiTexCoord1iv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;$/;"	v
glad_glMultiTexCoord1iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;$/;"	v
glad_glMultiTexCoord1iv	support/glad/glad.c	/^PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv = NULL;$/;"	v
glad_glMultiTexCoord1iv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;$/;"	v
glad_glMultiTexCoord1s	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;$/;"	v
glad_glMultiTexCoord1s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;$/;"	v
glad_glMultiTexCoord1s	support/glad/glad.c	/^PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s = NULL;$/;"	v
glad_glMultiTexCoord1s	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;$/;"	v
glad_glMultiTexCoord1sv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;$/;"	v
glad_glMultiTexCoord1sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;$/;"	v
glad_glMultiTexCoord1sv	support/glad/glad.c	/^PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv = NULL;$/;"	v
glad_glMultiTexCoord1sv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;$/;"	v
glad_glMultiTexCoord2d	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;$/;"	v
glad_glMultiTexCoord2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;$/;"	v
glad_glMultiTexCoord2d	support/glad/glad.c	/^PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d = NULL;$/;"	v
glad_glMultiTexCoord2d	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;$/;"	v
glad_glMultiTexCoord2dv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;$/;"	v
glad_glMultiTexCoord2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;$/;"	v
glad_glMultiTexCoord2dv	support/glad/glad.c	/^PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv = NULL;$/;"	v
glad_glMultiTexCoord2dv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;$/;"	v
glad_glMultiTexCoord2f	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;$/;"	v
glad_glMultiTexCoord2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;$/;"	v
glad_glMultiTexCoord2f	support/glad/glad.c	/^PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f = NULL;$/;"	v
glad_glMultiTexCoord2f	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;$/;"	v
glad_glMultiTexCoord2fv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;$/;"	v
glad_glMultiTexCoord2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;$/;"	v
glad_glMultiTexCoord2fv	support/glad/glad.c	/^PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv = NULL;$/;"	v
glad_glMultiTexCoord2fv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;$/;"	v
glad_glMultiTexCoord2i	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;$/;"	v
glad_glMultiTexCoord2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;$/;"	v
glad_glMultiTexCoord2i	support/glad/glad.c	/^PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i = NULL;$/;"	v
glad_glMultiTexCoord2i	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;$/;"	v
glad_glMultiTexCoord2iv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;$/;"	v
glad_glMultiTexCoord2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;$/;"	v
glad_glMultiTexCoord2iv	support/glad/glad.c	/^PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv = NULL;$/;"	v
glad_glMultiTexCoord2iv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;$/;"	v
glad_glMultiTexCoord2s	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;$/;"	v
glad_glMultiTexCoord2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;$/;"	v
glad_glMultiTexCoord2s	support/glad/glad.c	/^PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s = NULL;$/;"	v
glad_glMultiTexCoord2s	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;$/;"	v
glad_glMultiTexCoord2sv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;$/;"	v
glad_glMultiTexCoord2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;$/;"	v
glad_glMultiTexCoord2sv	support/glad/glad.c	/^PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv = NULL;$/;"	v
glad_glMultiTexCoord2sv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;$/;"	v
glad_glMultiTexCoord3d	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;$/;"	v
glad_glMultiTexCoord3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;$/;"	v
glad_glMultiTexCoord3d	support/glad/glad.c	/^PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d = NULL;$/;"	v
glad_glMultiTexCoord3d	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;$/;"	v
glad_glMultiTexCoord3dv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;$/;"	v
glad_glMultiTexCoord3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;$/;"	v
glad_glMultiTexCoord3dv	support/glad/glad.c	/^PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv = NULL;$/;"	v
glad_glMultiTexCoord3dv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;$/;"	v
glad_glMultiTexCoord3f	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;$/;"	v
glad_glMultiTexCoord3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;$/;"	v
glad_glMultiTexCoord3f	support/glad/glad.c	/^PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f = NULL;$/;"	v
glad_glMultiTexCoord3f	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;$/;"	v
glad_glMultiTexCoord3fv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;$/;"	v
glad_glMultiTexCoord3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;$/;"	v
glad_glMultiTexCoord3fv	support/glad/glad.c	/^PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv = NULL;$/;"	v
glad_glMultiTexCoord3fv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;$/;"	v
glad_glMultiTexCoord3i	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;$/;"	v
glad_glMultiTexCoord3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;$/;"	v
glad_glMultiTexCoord3i	support/glad/glad.c	/^PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i = NULL;$/;"	v
glad_glMultiTexCoord3i	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;$/;"	v
glad_glMultiTexCoord3iv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;$/;"	v
glad_glMultiTexCoord3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;$/;"	v
glad_glMultiTexCoord3iv	support/glad/glad.c	/^PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv = NULL;$/;"	v
glad_glMultiTexCoord3iv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;$/;"	v
glad_glMultiTexCoord3s	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;$/;"	v
glad_glMultiTexCoord3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;$/;"	v
glad_glMultiTexCoord3s	support/glad/glad.c	/^PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s = NULL;$/;"	v
glad_glMultiTexCoord3s	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;$/;"	v
glad_glMultiTexCoord3sv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;$/;"	v
glad_glMultiTexCoord3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;$/;"	v
glad_glMultiTexCoord3sv	support/glad/glad.c	/^PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv = NULL;$/;"	v
glad_glMultiTexCoord3sv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;$/;"	v
glad_glMultiTexCoord4d	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;$/;"	v
glad_glMultiTexCoord4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;$/;"	v
glad_glMultiTexCoord4d	support/glad/glad.c	/^PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d = NULL;$/;"	v
glad_glMultiTexCoord4d	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;$/;"	v
glad_glMultiTexCoord4dv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;$/;"	v
glad_glMultiTexCoord4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;$/;"	v
glad_glMultiTexCoord4dv	support/glad/glad.c	/^PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv = NULL;$/;"	v
glad_glMultiTexCoord4dv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;$/;"	v
glad_glMultiTexCoord4f	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;$/;"	v
glad_glMultiTexCoord4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;$/;"	v
glad_glMultiTexCoord4f	support/glad/glad.c	/^PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f = NULL;$/;"	v
glad_glMultiTexCoord4f	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;$/;"	v
glad_glMultiTexCoord4fv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;$/;"	v
glad_glMultiTexCoord4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;$/;"	v
glad_glMultiTexCoord4fv	support/glad/glad.c	/^PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv = NULL;$/;"	v
glad_glMultiTexCoord4fv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;$/;"	v
glad_glMultiTexCoord4i	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;$/;"	v
glad_glMultiTexCoord4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;$/;"	v
glad_glMultiTexCoord4i	support/glad/glad.c	/^PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i = NULL;$/;"	v
glad_glMultiTexCoord4i	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;$/;"	v
glad_glMultiTexCoord4iv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;$/;"	v
glad_glMultiTexCoord4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;$/;"	v
glad_glMultiTexCoord4iv	support/glad/glad.c	/^PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv = NULL;$/;"	v
glad_glMultiTexCoord4iv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;$/;"	v
glad_glMultiTexCoord4s	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;$/;"	v
glad_glMultiTexCoord4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;$/;"	v
glad_glMultiTexCoord4s	support/glad/glad.c	/^PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s = NULL;$/;"	v
glad_glMultiTexCoord4s	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;$/;"	v
glad_glMultiTexCoord4sv	support/GLFW/deps/glad.c	/^PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;$/;"	v
glad_glMultiTexCoord4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;$/;"	v
glad_glMultiTexCoord4sv	support/glad/glad.c	/^PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv = NULL;$/;"	v
glad_glMultiTexCoord4sv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;$/;"	v
glad_glMultiTexCoordP1ui	support/glad/glad.c	/^PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui = NULL;$/;"	v
glad_glMultiTexCoordP1ui	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;$/;"	v
glad_glMultiTexCoordP1uiv	support/glad/glad.c	/^PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv = NULL;$/;"	v
glad_glMultiTexCoordP1uiv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;$/;"	v
glad_glMultiTexCoordP2ui	support/glad/glad.c	/^PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui = NULL;$/;"	v
glad_glMultiTexCoordP2ui	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;$/;"	v
glad_glMultiTexCoordP2uiv	support/glad/glad.c	/^PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv = NULL;$/;"	v
glad_glMultiTexCoordP2uiv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;$/;"	v
glad_glMultiTexCoordP3ui	support/glad/glad.c	/^PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui = NULL;$/;"	v
glad_glMultiTexCoordP3ui	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;$/;"	v
glad_glMultiTexCoordP3uiv	support/glad/glad.c	/^PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv = NULL;$/;"	v
glad_glMultiTexCoordP3uiv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;$/;"	v
glad_glMultiTexCoordP4ui	support/glad/glad.c	/^PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui = NULL;$/;"	v
glad_glMultiTexCoordP4ui	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;$/;"	v
glad_glMultiTexCoordP4uiv	support/glad/glad.c	/^PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv = NULL;$/;"	v
glad_glMultiTexCoordP4uiv	support/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;$/;"	v
glad_glNewList	support/GLFW/deps/glad.c	/^PFNGLNEWLISTPROC glad_glNewList;$/;"	v
glad_glNewList	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNEWLISTPROC glad_glNewList;$/;"	v
glad_glNewList	support/glad/glad.c	/^PFNGLNEWLISTPROC glad_glNewList = NULL;$/;"	v
glad_glNewList	support/glad/glad.h	/^GLAPI PFNGLNEWLISTPROC glad_glNewList;$/;"	v
glad_glNormal3b	support/GLFW/deps/glad.c	/^PFNGLNORMAL3BPROC glad_glNormal3b;$/;"	v
glad_glNormal3b	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3BPROC glad_glNormal3b;$/;"	v
glad_glNormal3b	support/glad/glad.c	/^PFNGLNORMAL3BPROC glad_glNormal3b = NULL;$/;"	v
glad_glNormal3b	support/glad/glad.h	/^GLAPI PFNGLNORMAL3BPROC glad_glNormal3b;$/;"	v
glad_glNormal3bv	support/GLFW/deps/glad.c	/^PFNGLNORMAL3BVPROC glad_glNormal3bv;$/;"	v
glad_glNormal3bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3BVPROC glad_glNormal3bv;$/;"	v
glad_glNormal3bv	support/glad/glad.c	/^PFNGLNORMAL3BVPROC glad_glNormal3bv = NULL;$/;"	v
glad_glNormal3bv	support/glad/glad.h	/^GLAPI PFNGLNORMAL3BVPROC glad_glNormal3bv;$/;"	v
glad_glNormal3d	support/GLFW/deps/glad.c	/^PFNGLNORMAL3DPROC glad_glNormal3d;$/;"	v
glad_glNormal3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3DPROC glad_glNormal3d;$/;"	v
glad_glNormal3d	support/glad/glad.c	/^PFNGLNORMAL3DPROC glad_glNormal3d = NULL;$/;"	v
glad_glNormal3d	support/glad/glad.h	/^GLAPI PFNGLNORMAL3DPROC glad_glNormal3d;$/;"	v
glad_glNormal3dv	support/GLFW/deps/glad.c	/^PFNGLNORMAL3DVPROC glad_glNormal3dv;$/;"	v
glad_glNormal3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3DVPROC glad_glNormal3dv;$/;"	v
glad_glNormal3dv	support/glad/glad.c	/^PFNGLNORMAL3DVPROC glad_glNormal3dv = NULL;$/;"	v
glad_glNormal3dv	support/glad/glad.h	/^GLAPI PFNGLNORMAL3DVPROC glad_glNormal3dv;$/;"	v
glad_glNormal3f	support/GLFW/deps/glad.c	/^PFNGLNORMAL3FPROC glad_glNormal3f;$/;"	v
glad_glNormal3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3FPROC glad_glNormal3f;$/;"	v
glad_glNormal3f	support/glad/glad.c	/^PFNGLNORMAL3FPROC glad_glNormal3f = NULL;$/;"	v
glad_glNormal3f	support/glad/glad.h	/^GLAPI PFNGLNORMAL3FPROC glad_glNormal3f;$/;"	v
glad_glNormal3fv	support/GLFW/deps/glad.c	/^PFNGLNORMAL3FVPROC glad_glNormal3fv;$/;"	v
glad_glNormal3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3FVPROC glad_glNormal3fv;$/;"	v
glad_glNormal3fv	support/glad/glad.c	/^PFNGLNORMAL3FVPROC glad_glNormal3fv = NULL;$/;"	v
glad_glNormal3fv	support/glad/glad.h	/^GLAPI PFNGLNORMAL3FVPROC glad_glNormal3fv;$/;"	v
glad_glNormal3i	support/GLFW/deps/glad.c	/^PFNGLNORMAL3IPROC glad_glNormal3i;$/;"	v
glad_glNormal3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3IPROC glad_glNormal3i;$/;"	v
glad_glNormal3i	support/glad/glad.c	/^PFNGLNORMAL3IPROC glad_glNormal3i = NULL;$/;"	v
glad_glNormal3i	support/glad/glad.h	/^GLAPI PFNGLNORMAL3IPROC glad_glNormal3i;$/;"	v
glad_glNormal3iv	support/GLFW/deps/glad.c	/^PFNGLNORMAL3IVPROC glad_glNormal3iv;$/;"	v
glad_glNormal3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3IVPROC glad_glNormal3iv;$/;"	v
glad_glNormal3iv	support/glad/glad.c	/^PFNGLNORMAL3IVPROC glad_glNormal3iv = NULL;$/;"	v
glad_glNormal3iv	support/glad/glad.h	/^GLAPI PFNGLNORMAL3IVPROC glad_glNormal3iv;$/;"	v
glad_glNormal3s	support/GLFW/deps/glad.c	/^PFNGLNORMAL3SPROC glad_glNormal3s;$/;"	v
glad_glNormal3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3SPROC glad_glNormal3s;$/;"	v
glad_glNormal3s	support/glad/glad.c	/^PFNGLNORMAL3SPROC glad_glNormal3s = NULL;$/;"	v
glad_glNormal3s	support/glad/glad.h	/^GLAPI PFNGLNORMAL3SPROC glad_glNormal3s;$/;"	v
glad_glNormal3sv	support/GLFW/deps/glad.c	/^PFNGLNORMAL3SVPROC glad_glNormal3sv;$/;"	v
glad_glNormal3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMAL3SVPROC glad_glNormal3sv;$/;"	v
glad_glNormal3sv	support/glad/glad.c	/^PFNGLNORMAL3SVPROC glad_glNormal3sv = NULL;$/;"	v
glad_glNormal3sv	support/glad/glad.h	/^GLAPI PFNGLNORMAL3SVPROC glad_glNormal3sv;$/;"	v
glad_glNormalP3ui	support/glad/glad.c	/^PFNGLNORMALP3UIPROC glad_glNormalP3ui = NULL;$/;"	v
glad_glNormalP3ui	support/glad/glad.h	/^GLAPI PFNGLNORMALP3UIPROC glad_glNormalP3ui;$/;"	v
glad_glNormalP3uiv	support/glad/glad.c	/^PFNGLNORMALP3UIVPROC glad_glNormalP3uiv = NULL;$/;"	v
glad_glNormalP3uiv	support/glad/glad.h	/^GLAPI PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;$/;"	v
glad_glNormalPointer	support/GLFW/deps/glad.c	/^PFNGLNORMALPOINTERPROC glad_glNormalPointer;$/;"	v
glad_glNormalPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLNORMALPOINTERPROC glad_glNormalPointer;$/;"	v
glad_glNormalPointer	support/glad/glad.c	/^PFNGLNORMALPOINTERPROC glad_glNormalPointer = NULL;$/;"	v
glad_glNormalPointer	support/glad/glad.h	/^GLAPI PFNGLNORMALPOINTERPROC glad_glNormalPointer;$/;"	v
glad_glOrtho	support/GLFW/deps/glad.c	/^PFNGLORTHOPROC glad_glOrtho;$/;"	v
glad_glOrtho	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLORTHOPROC glad_glOrtho;$/;"	v
glad_glOrtho	support/glad/glad.c	/^PFNGLORTHOPROC glad_glOrtho = NULL;$/;"	v
glad_glOrtho	support/glad/glad.h	/^GLAPI PFNGLORTHOPROC glad_glOrtho;$/;"	v
glad_glPassThrough	support/GLFW/deps/glad.c	/^PFNGLPASSTHROUGHPROC glad_glPassThrough;$/;"	v
glad_glPassThrough	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPASSTHROUGHPROC glad_glPassThrough;$/;"	v
glad_glPassThrough	support/glad/glad.c	/^PFNGLPASSTHROUGHPROC glad_glPassThrough = NULL;$/;"	v
glad_glPassThrough	support/glad/glad.h	/^GLAPI PFNGLPASSTHROUGHPROC glad_glPassThrough;$/;"	v
glad_glPixelMapfv	support/GLFW/deps/glad.c	/^PFNGLPIXELMAPFVPROC glad_glPixelMapfv;$/;"	v
glad_glPixelMapfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELMAPFVPROC glad_glPixelMapfv;$/;"	v
glad_glPixelMapfv	support/glad/glad.c	/^PFNGLPIXELMAPFVPROC glad_glPixelMapfv = NULL;$/;"	v
glad_glPixelMapfv	support/glad/glad.h	/^GLAPI PFNGLPIXELMAPFVPROC glad_glPixelMapfv;$/;"	v
glad_glPixelMapuiv	support/GLFW/deps/glad.c	/^PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;$/;"	v
glad_glPixelMapuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;$/;"	v
glad_glPixelMapuiv	support/glad/glad.c	/^PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv = NULL;$/;"	v
glad_glPixelMapuiv	support/glad/glad.h	/^GLAPI PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;$/;"	v
glad_glPixelMapusv	support/GLFW/deps/glad.c	/^PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;$/;"	v
glad_glPixelMapusv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;$/;"	v
glad_glPixelMapusv	support/glad/glad.c	/^PFNGLPIXELMAPUSVPROC glad_glPixelMapusv = NULL;$/;"	v
glad_glPixelMapusv	support/glad/glad.h	/^GLAPI PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;$/;"	v
glad_glPixelStoref	support/GLFW/deps/glad.c	/^PFNGLPIXELSTOREFPROC glad_glPixelStoref;$/;"	v
glad_glPixelStoref	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;$/;"	v
glad_glPixelStoref	support/glad/glad.c	/^PFNGLPIXELSTOREFPROC glad_glPixelStoref = NULL;$/;"	v
glad_glPixelStoref	support/glad/glad.h	/^GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;$/;"	v
glad_glPixelStorei	support/GLFW/deps/glad.c	/^PFNGLPIXELSTOREIPROC glad_glPixelStorei;$/;"	v
glad_glPixelStorei	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;$/;"	v
glad_glPixelStorei	support/glad/glad.c	/^PFNGLPIXELSTOREIPROC glad_glPixelStorei = NULL;$/;"	v
glad_glPixelStorei	support/glad/glad.h	/^GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;$/;"	v
glad_glPixelTransferf	support/GLFW/deps/glad.c	/^PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;$/;"	v
glad_glPixelTransferf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;$/;"	v
glad_glPixelTransferf	support/glad/glad.c	/^PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf = NULL;$/;"	v
glad_glPixelTransferf	support/glad/glad.h	/^GLAPI PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;$/;"	v
glad_glPixelTransferi	support/GLFW/deps/glad.c	/^PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;$/;"	v
glad_glPixelTransferi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;$/;"	v
glad_glPixelTransferi	support/glad/glad.c	/^PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi = NULL;$/;"	v
glad_glPixelTransferi	support/glad/glad.h	/^GLAPI PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;$/;"	v
glad_glPixelZoom	support/GLFW/deps/glad.c	/^PFNGLPIXELZOOMPROC glad_glPixelZoom;$/;"	v
glad_glPixelZoom	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPIXELZOOMPROC glad_glPixelZoom;$/;"	v
glad_glPixelZoom	support/glad/glad.c	/^PFNGLPIXELZOOMPROC glad_glPixelZoom = NULL;$/;"	v
glad_glPixelZoom	support/glad/glad.h	/^GLAPI PFNGLPIXELZOOMPROC glad_glPixelZoom;$/;"	v
glad_glPointParameterf	support/GLFW/deps/glad.c	/^PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;$/;"	v
glad_glPointParameterf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;$/;"	v
glad_glPointParameterf	support/glad/glad.c	/^PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = NULL;$/;"	v
glad_glPointParameterf	support/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;$/;"	v
glad_glPointParameterfv	support/GLFW/deps/glad.c	/^PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;$/;"	v
glad_glPointParameterfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;$/;"	v
glad_glPointParameterfv	support/glad/glad.c	/^PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = NULL;$/;"	v
glad_glPointParameterfv	support/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;$/;"	v
glad_glPointParameteri	support/GLFW/deps/glad.c	/^PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;$/;"	v
glad_glPointParameteri	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;$/;"	v
glad_glPointParameteri	support/glad/glad.c	/^PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = NULL;$/;"	v
glad_glPointParameteri	support/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;$/;"	v
glad_glPointParameteriv	support/GLFW/deps/glad.c	/^PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;$/;"	v
glad_glPointParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;$/;"	v
glad_glPointParameteriv	support/glad/glad.c	/^PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = NULL;$/;"	v
glad_glPointParameteriv	support/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;$/;"	v
glad_glPointSize	support/GLFW/deps/glad.c	/^PFNGLPOINTSIZEPROC glad_glPointSize;$/;"	v
glad_glPointSize	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;$/;"	v
glad_glPointSize	support/glad/glad.c	/^PFNGLPOINTSIZEPROC glad_glPointSize = NULL;$/;"	v
glad_glPointSize	support/glad/glad.h	/^GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;$/;"	v
glad_glPolygonMode	support/GLFW/deps/glad.c	/^PFNGLPOLYGONMODEPROC glad_glPolygonMode;$/;"	v
glad_glPolygonMode	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;$/;"	v
glad_glPolygonMode	support/glad/glad.c	/^PFNGLPOLYGONMODEPROC glad_glPolygonMode = NULL;$/;"	v
glad_glPolygonMode	support/glad/glad.h	/^GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;$/;"	v
glad_glPolygonOffset	support/GLFW/deps/glad.c	/^PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;$/;"	v
glad_glPolygonOffset	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;$/;"	v
glad_glPolygonOffset	support/glad/glad.c	/^PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = NULL;$/;"	v
glad_glPolygonOffset	support/glad/glad.h	/^GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;$/;"	v
glad_glPolygonStipple	support/GLFW/deps/glad.c	/^PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;$/;"	v
glad_glPolygonStipple	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;$/;"	v
glad_glPolygonStipple	support/glad/glad.c	/^PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple = NULL;$/;"	v
glad_glPolygonStipple	support/glad/glad.h	/^GLAPI PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;$/;"	v
glad_glPopAttrib	support/GLFW/deps/glad.c	/^PFNGLPOPATTRIBPROC glad_glPopAttrib;$/;"	v
glad_glPopAttrib	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOPATTRIBPROC glad_glPopAttrib;$/;"	v
glad_glPopAttrib	support/glad/glad.c	/^PFNGLPOPATTRIBPROC glad_glPopAttrib = NULL;$/;"	v
glad_glPopAttrib	support/glad/glad.h	/^GLAPI PFNGLPOPATTRIBPROC glad_glPopAttrib;$/;"	v
glad_glPopClientAttrib	support/GLFW/deps/glad.c	/^PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;$/;"	v
glad_glPopClientAttrib	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;$/;"	v
glad_glPopClientAttrib	support/glad/glad.c	/^PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib = NULL;$/;"	v
glad_glPopClientAttrib	support/glad/glad.h	/^GLAPI PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;$/;"	v
glad_glPopMatrix	support/GLFW/deps/glad.c	/^PFNGLPOPMATRIXPROC glad_glPopMatrix;$/;"	v
glad_glPopMatrix	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOPMATRIXPROC glad_glPopMatrix;$/;"	v
glad_glPopMatrix	support/glad/glad.c	/^PFNGLPOPMATRIXPROC glad_glPopMatrix = NULL;$/;"	v
glad_glPopMatrix	support/glad/glad.h	/^GLAPI PFNGLPOPMATRIXPROC glad_glPopMatrix;$/;"	v
glad_glPopName	support/GLFW/deps/glad.c	/^PFNGLPOPNAMEPROC glad_glPopName;$/;"	v
glad_glPopName	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPOPNAMEPROC glad_glPopName;$/;"	v
glad_glPopName	support/glad/glad.c	/^PFNGLPOPNAMEPROC glad_glPopName = NULL;$/;"	v
glad_glPopName	support/glad/glad.h	/^GLAPI PFNGLPOPNAMEPROC glad_glPopName;$/;"	v
glad_glPrimitiveRestartIndex	support/GLFW/deps/glad.c	/^PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;$/;"	v
glad_glPrimitiveRestartIndex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;$/;"	v
glad_glPrimitiveRestartIndex	support/glad/glad.c	/^PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = NULL;$/;"	v
glad_glPrimitiveRestartIndex	support/glad/glad.h	/^GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;$/;"	v
glad_glPrioritizeTextures	support/GLFW/deps/glad.c	/^PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;$/;"	v
glad_glPrioritizeTextures	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;$/;"	v
glad_glPrioritizeTextures	support/glad/glad.c	/^PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures = NULL;$/;"	v
glad_glPrioritizeTextures	support/glad/glad.h	/^GLAPI PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;$/;"	v
glad_glProvokingVertex	support/GLFW/deps/glad.c	/^PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;$/;"	v
glad_glProvokingVertex	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;$/;"	v
glad_glProvokingVertex	support/glad/glad.c	/^PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = NULL;$/;"	v
glad_glProvokingVertex	support/glad/glad.h	/^GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;$/;"	v
glad_glPushAttrib	support/GLFW/deps/glad.c	/^PFNGLPUSHATTRIBPROC glad_glPushAttrib;$/;"	v
glad_glPushAttrib	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPUSHATTRIBPROC glad_glPushAttrib;$/;"	v
glad_glPushAttrib	support/glad/glad.c	/^PFNGLPUSHATTRIBPROC glad_glPushAttrib = NULL;$/;"	v
glad_glPushAttrib	support/glad/glad.h	/^GLAPI PFNGLPUSHATTRIBPROC glad_glPushAttrib;$/;"	v
glad_glPushClientAttrib	support/GLFW/deps/glad.c	/^PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;$/;"	v
glad_glPushClientAttrib	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;$/;"	v
glad_glPushClientAttrib	support/glad/glad.c	/^PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib = NULL;$/;"	v
glad_glPushClientAttrib	support/glad/glad.h	/^GLAPI PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;$/;"	v
glad_glPushMatrix	support/GLFW/deps/glad.c	/^PFNGLPUSHMATRIXPROC glad_glPushMatrix;$/;"	v
glad_glPushMatrix	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPUSHMATRIXPROC glad_glPushMatrix;$/;"	v
glad_glPushMatrix	support/glad/glad.c	/^PFNGLPUSHMATRIXPROC glad_glPushMatrix = NULL;$/;"	v
glad_glPushMatrix	support/glad/glad.h	/^GLAPI PFNGLPUSHMATRIXPROC glad_glPushMatrix;$/;"	v
glad_glPushName	support/GLFW/deps/glad.c	/^PFNGLPUSHNAMEPROC glad_glPushName;$/;"	v
glad_glPushName	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLPUSHNAMEPROC glad_glPushName;$/;"	v
glad_glPushName	support/glad/glad.c	/^PFNGLPUSHNAMEPROC glad_glPushName = NULL;$/;"	v
glad_glPushName	support/glad/glad.h	/^GLAPI PFNGLPUSHNAMEPROC glad_glPushName;$/;"	v
glad_glQueryCounter	support/glad/glad.c	/^PFNGLQUERYCOUNTERPROC glad_glQueryCounter = NULL;$/;"	v
glad_glQueryCounter	support/glad/glad.h	/^GLAPI PFNGLQUERYCOUNTERPROC glad_glQueryCounter;$/;"	v
glad_glRasterPos2d	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2DPROC glad_glRasterPos2d;$/;"	v
glad_glRasterPos2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2DPROC glad_glRasterPos2d;$/;"	v
glad_glRasterPos2d	support/glad/glad.c	/^PFNGLRASTERPOS2DPROC glad_glRasterPos2d = NULL;$/;"	v
glad_glRasterPos2d	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2DPROC glad_glRasterPos2d;$/;"	v
glad_glRasterPos2dv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;$/;"	v
glad_glRasterPos2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;$/;"	v
glad_glRasterPos2dv	support/glad/glad.c	/^PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv = NULL;$/;"	v
glad_glRasterPos2dv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;$/;"	v
glad_glRasterPos2f	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2FPROC glad_glRasterPos2f;$/;"	v
glad_glRasterPos2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2FPROC glad_glRasterPos2f;$/;"	v
glad_glRasterPos2f	support/glad/glad.c	/^PFNGLRASTERPOS2FPROC glad_glRasterPos2f = NULL;$/;"	v
glad_glRasterPos2f	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2FPROC glad_glRasterPos2f;$/;"	v
glad_glRasterPos2fv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;$/;"	v
glad_glRasterPos2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;$/;"	v
glad_glRasterPos2fv	support/glad/glad.c	/^PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv = NULL;$/;"	v
glad_glRasterPos2fv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;$/;"	v
glad_glRasterPos2i	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2IPROC glad_glRasterPos2i;$/;"	v
glad_glRasterPos2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2IPROC glad_glRasterPos2i;$/;"	v
glad_glRasterPos2i	support/glad/glad.c	/^PFNGLRASTERPOS2IPROC glad_glRasterPos2i = NULL;$/;"	v
glad_glRasterPos2i	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2IPROC glad_glRasterPos2i;$/;"	v
glad_glRasterPos2iv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;$/;"	v
glad_glRasterPos2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;$/;"	v
glad_glRasterPos2iv	support/glad/glad.c	/^PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv = NULL;$/;"	v
glad_glRasterPos2iv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;$/;"	v
glad_glRasterPos2s	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2SPROC glad_glRasterPos2s;$/;"	v
glad_glRasterPos2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2SPROC glad_glRasterPos2s;$/;"	v
glad_glRasterPos2s	support/glad/glad.c	/^PFNGLRASTERPOS2SPROC glad_glRasterPos2s = NULL;$/;"	v
glad_glRasterPos2s	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2SPROC glad_glRasterPos2s;$/;"	v
glad_glRasterPos2sv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;$/;"	v
glad_glRasterPos2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;$/;"	v
glad_glRasterPos2sv	support/glad/glad.c	/^PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv = NULL;$/;"	v
glad_glRasterPos2sv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;$/;"	v
glad_glRasterPos3d	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3DPROC glad_glRasterPos3d;$/;"	v
glad_glRasterPos3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3DPROC glad_glRasterPos3d;$/;"	v
glad_glRasterPos3d	support/glad/glad.c	/^PFNGLRASTERPOS3DPROC glad_glRasterPos3d = NULL;$/;"	v
glad_glRasterPos3d	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3DPROC glad_glRasterPos3d;$/;"	v
glad_glRasterPos3dv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;$/;"	v
glad_glRasterPos3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;$/;"	v
glad_glRasterPos3dv	support/glad/glad.c	/^PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv = NULL;$/;"	v
glad_glRasterPos3dv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;$/;"	v
glad_glRasterPos3f	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3FPROC glad_glRasterPos3f;$/;"	v
glad_glRasterPos3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3FPROC glad_glRasterPos3f;$/;"	v
glad_glRasterPos3f	support/glad/glad.c	/^PFNGLRASTERPOS3FPROC glad_glRasterPos3f = NULL;$/;"	v
glad_glRasterPos3f	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3FPROC glad_glRasterPos3f;$/;"	v
glad_glRasterPos3fv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;$/;"	v
glad_glRasterPos3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;$/;"	v
glad_glRasterPos3fv	support/glad/glad.c	/^PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv = NULL;$/;"	v
glad_glRasterPos3fv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;$/;"	v
glad_glRasterPos3i	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3IPROC glad_glRasterPos3i;$/;"	v
glad_glRasterPos3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3IPROC glad_glRasterPos3i;$/;"	v
glad_glRasterPos3i	support/glad/glad.c	/^PFNGLRASTERPOS3IPROC glad_glRasterPos3i = NULL;$/;"	v
glad_glRasterPos3i	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3IPROC glad_glRasterPos3i;$/;"	v
glad_glRasterPos3iv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;$/;"	v
glad_glRasterPos3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;$/;"	v
glad_glRasterPos3iv	support/glad/glad.c	/^PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv = NULL;$/;"	v
glad_glRasterPos3iv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;$/;"	v
glad_glRasterPos3s	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3SPROC glad_glRasterPos3s;$/;"	v
glad_glRasterPos3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3SPROC glad_glRasterPos3s;$/;"	v
glad_glRasterPos3s	support/glad/glad.c	/^PFNGLRASTERPOS3SPROC glad_glRasterPos3s = NULL;$/;"	v
glad_glRasterPos3s	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3SPROC glad_glRasterPos3s;$/;"	v
glad_glRasterPos3sv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;$/;"	v
glad_glRasterPos3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;$/;"	v
glad_glRasterPos3sv	support/glad/glad.c	/^PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv = NULL;$/;"	v
glad_glRasterPos3sv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;$/;"	v
glad_glRasterPos4d	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4DPROC glad_glRasterPos4d;$/;"	v
glad_glRasterPos4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4DPROC glad_glRasterPos4d;$/;"	v
glad_glRasterPos4d	support/glad/glad.c	/^PFNGLRASTERPOS4DPROC glad_glRasterPos4d = NULL;$/;"	v
glad_glRasterPos4d	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4DPROC glad_glRasterPos4d;$/;"	v
glad_glRasterPos4dv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;$/;"	v
glad_glRasterPos4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;$/;"	v
glad_glRasterPos4dv	support/glad/glad.c	/^PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv = NULL;$/;"	v
glad_glRasterPos4dv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;$/;"	v
glad_glRasterPos4f	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4FPROC glad_glRasterPos4f;$/;"	v
glad_glRasterPos4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4FPROC glad_glRasterPos4f;$/;"	v
glad_glRasterPos4f	support/glad/glad.c	/^PFNGLRASTERPOS4FPROC glad_glRasterPos4f = NULL;$/;"	v
glad_glRasterPos4f	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4FPROC glad_glRasterPos4f;$/;"	v
glad_glRasterPos4fv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;$/;"	v
glad_glRasterPos4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;$/;"	v
glad_glRasterPos4fv	support/glad/glad.c	/^PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv = NULL;$/;"	v
glad_glRasterPos4fv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;$/;"	v
glad_glRasterPos4i	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4IPROC glad_glRasterPos4i;$/;"	v
glad_glRasterPos4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4IPROC glad_glRasterPos4i;$/;"	v
glad_glRasterPos4i	support/glad/glad.c	/^PFNGLRASTERPOS4IPROC glad_glRasterPos4i = NULL;$/;"	v
glad_glRasterPos4i	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4IPROC glad_glRasterPos4i;$/;"	v
glad_glRasterPos4iv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;$/;"	v
glad_glRasterPos4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;$/;"	v
glad_glRasterPos4iv	support/glad/glad.c	/^PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv = NULL;$/;"	v
glad_glRasterPos4iv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;$/;"	v
glad_glRasterPos4s	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4SPROC glad_glRasterPos4s;$/;"	v
glad_glRasterPos4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4SPROC glad_glRasterPos4s;$/;"	v
glad_glRasterPos4s	support/glad/glad.c	/^PFNGLRASTERPOS4SPROC glad_glRasterPos4s = NULL;$/;"	v
glad_glRasterPos4s	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4SPROC glad_glRasterPos4s;$/;"	v
glad_glRasterPos4sv	support/GLFW/deps/glad.c	/^PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;$/;"	v
glad_glRasterPos4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;$/;"	v
glad_glRasterPos4sv	support/glad/glad.c	/^PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv = NULL;$/;"	v
glad_glRasterPos4sv	support/glad/glad.h	/^GLAPI PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;$/;"	v
glad_glReadBuffer	support/GLFW/deps/glad.c	/^PFNGLREADBUFFERPROC glad_glReadBuffer;$/;"	v
glad_glReadBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;$/;"	v
glad_glReadBuffer	support/glad/glad.c	/^PFNGLREADBUFFERPROC glad_glReadBuffer = NULL;$/;"	v
glad_glReadBuffer	support/glad/glad.h	/^GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;$/;"	v
glad_glReadPixels	support/GLFW/deps/glad.c	/^PFNGLREADPIXELSPROC glad_glReadPixels;$/;"	v
glad_glReadPixels	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;$/;"	v
glad_glReadPixels	support/glad/glad.c	/^PFNGLREADPIXELSPROC glad_glReadPixels = NULL;$/;"	v
glad_glReadPixels	support/glad/glad.h	/^GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;$/;"	v
glad_glReadnPixelsARB	support/GLFW/deps/glad.c	/^PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;$/;"	v
glad_glReadnPixelsARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;$/;"	v
glad_glRectd	support/GLFW/deps/glad.c	/^PFNGLRECTDPROC glad_glRectd;$/;"	v
glad_glRectd	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTDPROC glad_glRectd;$/;"	v
glad_glRectd	support/glad/glad.c	/^PFNGLRECTDPROC glad_glRectd = NULL;$/;"	v
glad_glRectd	support/glad/glad.h	/^GLAPI PFNGLRECTDPROC glad_glRectd;$/;"	v
glad_glRectdv	support/GLFW/deps/glad.c	/^PFNGLRECTDVPROC glad_glRectdv;$/;"	v
glad_glRectdv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTDVPROC glad_glRectdv;$/;"	v
glad_glRectdv	support/glad/glad.c	/^PFNGLRECTDVPROC glad_glRectdv = NULL;$/;"	v
glad_glRectdv	support/glad/glad.h	/^GLAPI PFNGLRECTDVPROC glad_glRectdv;$/;"	v
glad_glRectf	support/GLFW/deps/glad.c	/^PFNGLRECTFPROC glad_glRectf;$/;"	v
glad_glRectf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTFPROC glad_glRectf;$/;"	v
glad_glRectf	support/glad/glad.c	/^PFNGLRECTFPROC glad_glRectf = NULL;$/;"	v
glad_glRectf	support/glad/glad.h	/^GLAPI PFNGLRECTFPROC glad_glRectf;$/;"	v
glad_glRectfv	support/GLFW/deps/glad.c	/^PFNGLRECTFVPROC glad_glRectfv;$/;"	v
glad_glRectfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTFVPROC glad_glRectfv;$/;"	v
glad_glRectfv	support/glad/glad.c	/^PFNGLRECTFVPROC glad_glRectfv = NULL;$/;"	v
glad_glRectfv	support/glad/glad.h	/^GLAPI PFNGLRECTFVPROC glad_glRectfv;$/;"	v
glad_glRecti	support/GLFW/deps/glad.c	/^PFNGLRECTIPROC glad_glRecti;$/;"	v
glad_glRecti	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTIPROC glad_glRecti;$/;"	v
glad_glRecti	support/glad/glad.c	/^PFNGLRECTIPROC glad_glRecti = NULL;$/;"	v
glad_glRecti	support/glad/glad.h	/^GLAPI PFNGLRECTIPROC glad_glRecti;$/;"	v
glad_glRectiv	support/GLFW/deps/glad.c	/^PFNGLRECTIVPROC glad_glRectiv;$/;"	v
glad_glRectiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTIVPROC glad_glRectiv;$/;"	v
glad_glRectiv	support/glad/glad.c	/^PFNGLRECTIVPROC glad_glRectiv = NULL;$/;"	v
glad_glRectiv	support/glad/glad.h	/^GLAPI PFNGLRECTIVPROC glad_glRectiv;$/;"	v
glad_glRects	support/GLFW/deps/glad.c	/^PFNGLRECTSPROC glad_glRects;$/;"	v
glad_glRects	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTSPROC glad_glRects;$/;"	v
glad_glRects	support/glad/glad.c	/^PFNGLRECTSPROC glad_glRects = NULL;$/;"	v
glad_glRects	support/glad/glad.h	/^GLAPI PFNGLRECTSPROC glad_glRects;$/;"	v
glad_glRectsv	support/GLFW/deps/glad.c	/^PFNGLRECTSVPROC glad_glRectsv;$/;"	v
glad_glRectsv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRECTSVPROC glad_glRectsv;$/;"	v
glad_glRectsv	support/glad/glad.c	/^PFNGLRECTSVPROC glad_glRectsv = NULL;$/;"	v
glad_glRectsv	support/glad/glad.h	/^GLAPI PFNGLRECTSVPROC glad_glRectsv;$/;"	v
glad_glRenderMode	support/GLFW/deps/glad.c	/^PFNGLRENDERMODEPROC glad_glRenderMode;$/;"	v
glad_glRenderMode	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRENDERMODEPROC glad_glRenderMode;$/;"	v
glad_glRenderMode	support/glad/glad.c	/^PFNGLRENDERMODEPROC glad_glRenderMode = NULL;$/;"	v
glad_glRenderMode	support/glad/glad.h	/^GLAPI PFNGLRENDERMODEPROC glad_glRenderMode;$/;"	v
glad_glRenderbufferStorage	support/GLFW/deps/glad.c	/^PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;$/;"	v
glad_glRenderbufferStorage	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;$/;"	v
glad_glRenderbufferStorage	support/glad/glad.c	/^PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = NULL;$/;"	v
glad_glRenderbufferStorage	support/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;$/;"	v
glad_glRenderbufferStorageMultisample	support/GLFW/deps/glad.c	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;$/;"	v
glad_glRenderbufferStorageMultisample	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;$/;"	v
glad_glRenderbufferStorageMultisample	support/glad/glad.c	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = NULL;$/;"	v
glad_glRenderbufferStorageMultisample	support/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;$/;"	v
glad_glRotated	support/GLFW/deps/glad.c	/^PFNGLROTATEDPROC glad_glRotated;$/;"	v
glad_glRotated	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLROTATEDPROC glad_glRotated;$/;"	v
glad_glRotated	support/glad/glad.c	/^PFNGLROTATEDPROC glad_glRotated = NULL;$/;"	v
glad_glRotated	support/glad/glad.h	/^GLAPI PFNGLROTATEDPROC glad_glRotated;$/;"	v
glad_glRotatef	support/GLFW/deps/glad.c	/^PFNGLROTATEFPROC glad_glRotatef;$/;"	v
glad_glRotatef	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLROTATEFPROC glad_glRotatef;$/;"	v
glad_glRotatef	support/glad/glad.c	/^PFNGLROTATEFPROC glad_glRotatef = NULL;$/;"	v
glad_glRotatef	support/glad/glad.h	/^GLAPI PFNGLROTATEFPROC glad_glRotatef;$/;"	v
glad_glSampleCoverage	support/GLFW/deps/glad.c	/^PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;$/;"	v
glad_glSampleCoverage	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;$/;"	v
glad_glSampleCoverage	support/glad/glad.c	/^PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = NULL;$/;"	v
glad_glSampleCoverage	support/glad/glad.h	/^GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;$/;"	v
glad_glSampleCoverageARB	support/GLFW/deps/glad.c	/^PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;$/;"	v
glad_glSampleCoverageARB	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;$/;"	v
glad_glSampleMaski	support/GLFW/deps/glad.c	/^PFNGLSAMPLEMASKIPROC glad_glSampleMaski;$/;"	v
glad_glSampleMaski	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;$/;"	v
glad_glSampleMaski	support/glad/glad.c	/^PFNGLSAMPLEMASKIPROC glad_glSampleMaski = NULL;$/;"	v
glad_glSampleMaski	support/glad/glad.h	/^GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;$/;"	v
glad_glSamplerParameterIiv	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = NULL;$/;"	v
glad_glSamplerParameterIiv	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;$/;"	v
glad_glSamplerParameterIuiv	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = NULL;$/;"	v
glad_glSamplerParameterIuiv	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;$/;"	v
glad_glSamplerParameterf	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = NULL;$/;"	v
glad_glSamplerParameterf	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;$/;"	v
glad_glSamplerParameterfv	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = NULL;$/;"	v
glad_glSamplerParameterfv	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;$/;"	v
glad_glSamplerParameteri	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = NULL;$/;"	v
glad_glSamplerParameteri	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;$/;"	v
glad_glSamplerParameteriv	support/glad/glad.c	/^PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = NULL;$/;"	v
glad_glSamplerParameteriv	support/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;$/;"	v
glad_glScaled	support/GLFW/deps/glad.c	/^PFNGLSCALEDPROC glad_glScaled;$/;"	v
glad_glScaled	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSCALEDPROC glad_glScaled;$/;"	v
glad_glScaled	support/glad/glad.c	/^PFNGLSCALEDPROC glad_glScaled = NULL;$/;"	v
glad_glScaled	support/glad/glad.h	/^GLAPI PFNGLSCALEDPROC glad_glScaled;$/;"	v
glad_glScalef	support/GLFW/deps/glad.c	/^PFNGLSCALEFPROC glad_glScalef;$/;"	v
glad_glScalef	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSCALEFPROC glad_glScalef;$/;"	v
glad_glScalef	support/glad/glad.c	/^PFNGLSCALEFPROC glad_glScalef = NULL;$/;"	v
glad_glScalef	support/glad/glad.h	/^GLAPI PFNGLSCALEFPROC glad_glScalef;$/;"	v
glad_glScissor	support/GLFW/deps/glad.c	/^PFNGLSCISSORPROC glad_glScissor;$/;"	v
glad_glScissor	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSCISSORPROC glad_glScissor;$/;"	v
glad_glScissor	support/glad/glad.c	/^PFNGLSCISSORPROC glad_glScissor = NULL;$/;"	v
glad_glScissor	support/glad/glad.h	/^GLAPI PFNGLSCISSORPROC glad_glScissor;$/;"	v
glad_glSecondaryColor3b	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;$/;"	v
glad_glSecondaryColor3b	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;$/;"	v
glad_glSecondaryColor3b	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b = NULL;$/;"	v
glad_glSecondaryColor3b	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;$/;"	v
glad_glSecondaryColor3bv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;$/;"	v
glad_glSecondaryColor3bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;$/;"	v
glad_glSecondaryColor3bv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv = NULL;$/;"	v
glad_glSecondaryColor3bv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;$/;"	v
glad_glSecondaryColor3d	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;$/;"	v
glad_glSecondaryColor3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;$/;"	v
glad_glSecondaryColor3d	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d = NULL;$/;"	v
glad_glSecondaryColor3d	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;$/;"	v
glad_glSecondaryColor3dv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;$/;"	v
glad_glSecondaryColor3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;$/;"	v
glad_glSecondaryColor3dv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv = NULL;$/;"	v
glad_glSecondaryColor3dv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;$/;"	v
glad_glSecondaryColor3f	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;$/;"	v
glad_glSecondaryColor3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;$/;"	v
glad_glSecondaryColor3f	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f = NULL;$/;"	v
glad_glSecondaryColor3f	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;$/;"	v
glad_glSecondaryColor3fv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;$/;"	v
glad_glSecondaryColor3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;$/;"	v
glad_glSecondaryColor3fv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv = NULL;$/;"	v
glad_glSecondaryColor3fv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;$/;"	v
glad_glSecondaryColor3i	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;$/;"	v
glad_glSecondaryColor3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;$/;"	v
glad_glSecondaryColor3i	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i = NULL;$/;"	v
glad_glSecondaryColor3i	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;$/;"	v
glad_glSecondaryColor3iv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;$/;"	v
glad_glSecondaryColor3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;$/;"	v
glad_glSecondaryColor3iv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv = NULL;$/;"	v
glad_glSecondaryColor3iv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;$/;"	v
glad_glSecondaryColor3s	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;$/;"	v
glad_glSecondaryColor3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;$/;"	v
glad_glSecondaryColor3s	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s = NULL;$/;"	v
glad_glSecondaryColor3s	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;$/;"	v
glad_glSecondaryColor3sv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;$/;"	v
glad_glSecondaryColor3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;$/;"	v
glad_glSecondaryColor3sv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv = NULL;$/;"	v
glad_glSecondaryColor3sv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;$/;"	v
glad_glSecondaryColor3ub	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;$/;"	v
glad_glSecondaryColor3ub	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;$/;"	v
glad_glSecondaryColor3ub	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub = NULL;$/;"	v
glad_glSecondaryColor3ub	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;$/;"	v
glad_glSecondaryColor3ubv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;$/;"	v
glad_glSecondaryColor3ubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;$/;"	v
glad_glSecondaryColor3ubv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv = NULL;$/;"	v
glad_glSecondaryColor3ubv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;$/;"	v
glad_glSecondaryColor3ui	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;$/;"	v
glad_glSecondaryColor3ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;$/;"	v
glad_glSecondaryColor3ui	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui = NULL;$/;"	v
glad_glSecondaryColor3ui	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;$/;"	v
glad_glSecondaryColor3uiv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;$/;"	v
glad_glSecondaryColor3uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;$/;"	v
glad_glSecondaryColor3uiv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv = NULL;$/;"	v
glad_glSecondaryColor3uiv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;$/;"	v
glad_glSecondaryColor3us	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;$/;"	v
glad_glSecondaryColor3us	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;$/;"	v
glad_glSecondaryColor3us	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us = NULL;$/;"	v
glad_glSecondaryColor3us	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;$/;"	v
glad_glSecondaryColor3usv	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;$/;"	v
glad_glSecondaryColor3usv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;$/;"	v
glad_glSecondaryColor3usv	support/glad/glad.c	/^PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv = NULL;$/;"	v
glad_glSecondaryColor3usv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;$/;"	v
glad_glSecondaryColorP3ui	support/glad/glad.c	/^PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui = NULL;$/;"	v
glad_glSecondaryColorP3ui	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;$/;"	v
glad_glSecondaryColorP3uiv	support/glad/glad.c	/^PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv = NULL;$/;"	v
glad_glSecondaryColorP3uiv	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;$/;"	v
glad_glSecondaryColorPointer	support/GLFW/deps/glad.c	/^PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;$/;"	v
glad_glSecondaryColorPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;$/;"	v
glad_glSecondaryColorPointer	support/glad/glad.c	/^PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer = NULL;$/;"	v
glad_glSecondaryColorPointer	support/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;$/;"	v
glad_glSelectBuffer	support/GLFW/deps/glad.c	/^PFNGLSELECTBUFFERPROC glad_glSelectBuffer;$/;"	v
glad_glSelectBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSELECTBUFFERPROC glad_glSelectBuffer;$/;"	v
glad_glSelectBuffer	support/glad/glad.c	/^PFNGLSELECTBUFFERPROC glad_glSelectBuffer = NULL;$/;"	v
glad_glSelectBuffer	support/glad/glad.h	/^GLAPI PFNGLSELECTBUFFERPROC glad_glSelectBuffer;$/;"	v
glad_glShadeModel	support/GLFW/deps/glad.c	/^PFNGLSHADEMODELPROC glad_glShadeModel;$/;"	v
glad_glShadeModel	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSHADEMODELPROC glad_glShadeModel;$/;"	v
glad_glShadeModel	support/glad/glad.c	/^PFNGLSHADEMODELPROC glad_glShadeModel = NULL;$/;"	v
glad_glShadeModel	support/glad/glad.h	/^GLAPI PFNGLSHADEMODELPROC glad_glShadeModel;$/;"	v
glad_glShaderSource	support/GLFW/deps/glad.c	/^PFNGLSHADERSOURCEPROC glad_glShaderSource;$/;"	v
glad_glShaderSource	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;$/;"	v
glad_glShaderSource	support/glad/glad.c	/^PFNGLSHADERSOURCEPROC glad_glShaderSource = NULL;$/;"	v
glad_glShaderSource	support/glad/glad.h	/^GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;$/;"	v
glad_glStencilFunc	support/GLFW/deps/glad.c	/^PFNGLSTENCILFUNCPROC glad_glStencilFunc;$/;"	v
glad_glStencilFunc	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;$/;"	v
glad_glStencilFunc	support/glad/glad.c	/^PFNGLSTENCILFUNCPROC glad_glStencilFunc = NULL;$/;"	v
glad_glStencilFunc	support/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;$/;"	v
glad_glStencilFuncSeparate	support/GLFW/deps/glad.c	/^PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;$/;"	v
glad_glStencilFuncSeparate	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;$/;"	v
glad_glStencilFuncSeparate	support/glad/glad.c	/^PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = NULL;$/;"	v
glad_glStencilFuncSeparate	support/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;$/;"	v
glad_glStencilMask	support/GLFW/deps/glad.c	/^PFNGLSTENCILMASKPROC glad_glStencilMask;$/;"	v
glad_glStencilMask	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;$/;"	v
glad_glStencilMask	support/glad/glad.c	/^PFNGLSTENCILMASKPROC glad_glStencilMask = NULL;$/;"	v
glad_glStencilMask	support/glad/glad.h	/^GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;$/;"	v
glad_glStencilMaskSeparate	support/GLFW/deps/glad.c	/^PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;$/;"	v
glad_glStencilMaskSeparate	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;$/;"	v
glad_glStencilMaskSeparate	support/glad/glad.c	/^PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = NULL;$/;"	v
glad_glStencilMaskSeparate	support/glad/glad.h	/^GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;$/;"	v
glad_glStencilOp	support/GLFW/deps/glad.c	/^PFNGLSTENCILOPPROC glad_glStencilOp;$/;"	v
glad_glStencilOp	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;$/;"	v
glad_glStencilOp	support/glad/glad.c	/^PFNGLSTENCILOPPROC glad_glStencilOp = NULL;$/;"	v
glad_glStencilOp	support/glad/glad.h	/^GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;$/;"	v
glad_glStencilOpSeparate	support/GLFW/deps/glad.c	/^PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;$/;"	v
glad_glStencilOpSeparate	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;$/;"	v
glad_glStencilOpSeparate	support/glad/glad.c	/^PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = NULL;$/;"	v
glad_glStencilOpSeparate	support/glad/glad.h	/^GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;$/;"	v
glad_glTexBuffer	support/GLFW/deps/glad.c	/^PFNGLTEXBUFFERPROC glad_glTexBuffer;$/;"	v
glad_glTexBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;$/;"	v
glad_glTexBuffer	support/glad/glad.c	/^PFNGLTEXBUFFERPROC glad_glTexBuffer = NULL;$/;"	v
glad_glTexBuffer	support/glad/glad.h	/^GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;$/;"	v
glad_glTexCoord1d	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1DPROC glad_glTexCoord1d;$/;"	v
glad_glTexCoord1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1DPROC glad_glTexCoord1d;$/;"	v
glad_glTexCoord1d	support/glad/glad.c	/^PFNGLTEXCOORD1DPROC glad_glTexCoord1d = NULL;$/;"	v
glad_glTexCoord1d	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1DPROC glad_glTexCoord1d;$/;"	v
glad_glTexCoord1dv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;$/;"	v
glad_glTexCoord1dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;$/;"	v
glad_glTexCoord1dv	support/glad/glad.c	/^PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv = NULL;$/;"	v
glad_glTexCoord1dv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;$/;"	v
glad_glTexCoord1f	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1FPROC glad_glTexCoord1f;$/;"	v
glad_glTexCoord1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1FPROC glad_glTexCoord1f;$/;"	v
glad_glTexCoord1f	support/glad/glad.c	/^PFNGLTEXCOORD1FPROC glad_glTexCoord1f = NULL;$/;"	v
glad_glTexCoord1f	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1FPROC glad_glTexCoord1f;$/;"	v
glad_glTexCoord1fv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;$/;"	v
glad_glTexCoord1fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;$/;"	v
glad_glTexCoord1fv	support/glad/glad.c	/^PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv = NULL;$/;"	v
glad_glTexCoord1fv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;$/;"	v
glad_glTexCoord1i	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1IPROC glad_glTexCoord1i;$/;"	v
glad_glTexCoord1i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1IPROC glad_glTexCoord1i;$/;"	v
glad_glTexCoord1i	support/glad/glad.c	/^PFNGLTEXCOORD1IPROC glad_glTexCoord1i = NULL;$/;"	v
glad_glTexCoord1i	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1IPROC glad_glTexCoord1i;$/;"	v
glad_glTexCoord1iv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;$/;"	v
glad_glTexCoord1iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;$/;"	v
glad_glTexCoord1iv	support/glad/glad.c	/^PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv = NULL;$/;"	v
glad_glTexCoord1iv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;$/;"	v
glad_glTexCoord1s	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1SPROC glad_glTexCoord1s;$/;"	v
glad_glTexCoord1s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1SPROC glad_glTexCoord1s;$/;"	v
glad_glTexCoord1s	support/glad/glad.c	/^PFNGLTEXCOORD1SPROC glad_glTexCoord1s = NULL;$/;"	v
glad_glTexCoord1s	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1SPROC glad_glTexCoord1s;$/;"	v
glad_glTexCoord1sv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;$/;"	v
glad_glTexCoord1sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;$/;"	v
glad_glTexCoord1sv	support/glad/glad.c	/^PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv = NULL;$/;"	v
glad_glTexCoord1sv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;$/;"	v
glad_glTexCoord2d	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2DPROC glad_glTexCoord2d;$/;"	v
glad_glTexCoord2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2DPROC glad_glTexCoord2d;$/;"	v
glad_glTexCoord2d	support/glad/glad.c	/^PFNGLTEXCOORD2DPROC glad_glTexCoord2d = NULL;$/;"	v
glad_glTexCoord2d	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2DPROC glad_glTexCoord2d;$/;"	v
glad_glTexCoord2dv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;$/;"	v
glad_glTexCoord2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;$/;"	v
glad_glTexCoord2dv	support/glad/glad.c	/^PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv = NULL;$/;"	v
glad_glTexCoord2dv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;$/;"	v
glad_glTexCoord2f	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2FPROC glad_glTexCoord2f;$/;"	v
glad_glTexCoord2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2FPROC glad_glTexCoord2f;$/;"	v
glad_glTexCoord2f	support/glad/glad.c	/^PFNGLTEXCOORD2FPROC glad_glTexCoord2f = NULL;$/;"	v
glad_glTexCoord2f	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2FPROC glad_glTexCoord2f;$/;"	v
glad_glTexCoord2fv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;$/;"	v
glad_glTexCoord2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;$/;"	v
glad_glTexCoord2fv	support/glad/glad.c	/^PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv = NULL;$/;"	v
glad_glTexCoord2fv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;$/;"	v
glad_glTexCoord2i	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2IPROC glad_glTexCoord2i;$/;"	v
glad_glTexCoord2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2IPROC glad_glTexCoord2i;$/;"	v
glad_glTexCoord2i	support/glad/glad.c	/^PFNGLTEXCOORD2IPROC glad_glTexCoord2i = NULL;$/;"	v
glad_glTexCoord2i	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2IPROC glad_glTexCoord2i;$/;"	v
glad_glTexCoord2iv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;$/;"	v
glad_glTexCoord2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;$/;"	v
glad_glTexCoord2iv	support/glad/glad.c	/^PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv = NULL;$/;"	v
glad_glTexCoord2iv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;$/;"	v
glad_glTexCoord2s	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2SPROC glad_glTexCoord2s;$/;"	v
glad_glTexCoord2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2SPROC glad_glTexCoord2s;$/;"	v
glad_glTexCoord2s	support/glad/glad.c	/^PFNGLTEXCOORD2SPROC glad_glTexCoord2s = NULL;$/;"	v
glad_glTexCoord2s	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2SPROC glad_glTexCoord2s;$/;"	v
glad_glTexCoord2sv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;$/;"	v
glad_glTexCoord2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;$/;"	v
glad_glTexCoord2sv	support/glad/glad.c	/^PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv = NULL;$/;"	v
glad_glTexCoord2sv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;$/;"	v
glad_glTexCoord3d	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3DPROC glad_glTexCoord3d;$/;"	v
glad_glTexCoord3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3DPROC glad_glTexCoord3d;$/;"	v
glad_glTexCoord3d	support/glad/glad.c	/^PFNGLTEXCOORD3DPROC glad_glTexCoord3d = NULL;$/;"	v
glad_glTexCoord3d	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3DPROC glad_glTexCoord3d;$/;"	v
glad_glTexCoord3dv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;$/;"	v
glad_glTexCoord3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;$/;"	v
glad_glTexCoord3dv	support/glad/glad.c	/^PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv = NULL;$/;"	v
glad_glTexCoord3dv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;$/;"	v
glad_glTexCoord3f	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3FPROC glad_glTexCoord3f;$/;"	v
glad_glTexCoord3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3FPROC glad_glTexCoord3f;$/;"	v
glad_glTexCoord3f	support/glad/glad.c	/^PFNGLTEXCOORD3FPROC glad_glTexCoord3f = NULL;$/;"	v
glad_glTexCoord3f	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3FPROC glad_glTexCoord3f;$/;"	v
glad_glTexCoord3fv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;$/;"	v
glad_glTexCoord3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;$/;"	v
glad_glTexCoord3fv	support/glad/glad.c	/^PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv = NULL;$/;"	v
glad_glTexCoord3fv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;$/;"	v
glad_glTexCoord3i	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3IPROC glad_glTexCoord3i;$/;"	v
glad_glTexCoord3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3IPROC glad_glTexCoord3i;$/;"	v
glad_glTexCoord3i	support/glad/glad.c	/^PFNGLTEXCOORD3IPROC glad_glTexCoord3i = NULL;$/;"	v
glad_glTexCoord3i	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3IPROC glad_glTexCoord3i;$/;"	v
glad_glTexCoord3iv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;$/;"	v
glad_glTexCoord3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;$/;"	v
glad_glTexCoord3iv	support/glad/glad.c	/^PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv = NULL;$/;"	v
glad_glTexCoord3iv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;$/;"	v
glad_glTexCoord3s	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3SPROC glad_glTexCoord3s;$/;"	v
glad_glTexCoord3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3SPROC glad_glTexCoord3s;$/;"	v
glad_glTexCoord3s	support/glad/glad.c	/^PFNGLTEXCOORD3SPROC glad_glTexCoord3s = NULL;$/;"	v
glad_glTexCoord3s	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3SPROC glad_glTexCoord3s;$/;"	v
glad_glTexCoord3sv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;$/;"	v
glad_glTexCoord3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;$/;"	v
glad_glTexCoord3sv	support/glad/glad.c	/^PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv = NULL;$/;"	v
glad_glTexCoord3sv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;$/;"	v
glad_glTexCoord4d	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4DPROC glad_glTexCoord4d;$/;"	v
glad_glTexCoord4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4DPROC glad_glTexCoord4d;$/;"	v
glad_glTexCoord4d	support/glad/glad.c	/^PFNGLTEXCOORD4DPROC glad_glTexCoord4d = NULL;$/;"	v
glad_glTexCoord4d	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4DPROC glad_glTexCoord4d;$/;"	v
glad_glTexCoord4dv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;$/;"	v
glad_glTexCoord4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;$/;"	v
glad_glTexCoord4dv	support/glad/glad.c	/^PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv = NULL;$/;"	v
glad_glTexCoord4dv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;$/;"	v
glad_glTexCoord4f	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4FPROC glad_glTexCoord4f;$/;"	v
glad_glTexCoord4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4FPROC glad_glTexCoord4f;$/;"	v
glad_glTexCoord4f	support/glad/glad.c	/^PFNGLTEXCOORD4FPROC glad_glTexCoord4f = NULL;$/;"	v
glad_glTexCoord4f	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4FPROC glad_glTexCoord4f;$/;"	v
glad_glTexCoord4fv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;$/;"	v
glad_glTexCoord4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;$/;"	v
glad_glTexCoord4fv	support/glad/glad.c	/^PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv = NULL;$/;"	v
glad_glTexCoord4fv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;$/;"	v
glad_glTexCoord4i	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4IPROC glad_glTexCoord4i;$/;"	v
glad_glTexCoord4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4IPROC glad_glTexCoord4i;$/;"	v
glad_glTexCoord4i	support/glad/glad.c	/^PFNGLTEXCOORD4IPROC glad_glTexCoord4i = NULL;$/;"	v
glad_glTexCoord4i	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4IPROC glad_glTexCoord4i;$/;"	v
glad_glTexCoord4iv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;$/;"	v
glad_glTexCoord4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;$/;"	v
glad_glTexCoord4iv	support/glad/glad.c	/^PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv = NULL;$/;"	v
glad_glTexCoord4iv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;$/;"	v
glad_glTexCoord4s	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4SPROC glad_glTexCoord4s;$/;"	v
glad_glTexCoord4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4SPROC glad_glTexCoord4s;$/;"	v
glad_glTexCoord4s	support/glad/glad.c	/^PFNGLTEXCOORD4SPROC glad_glTexCoord4s = NULL;$/;"	v
glad_glTexCoord4s	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4SPROC glad_glTexCoord4s;$/;"	v
glad_glTexCoord4sv	support/GLFW/deps/glad.c	/^PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;$/;"	v
glad_glTexCoord4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;$/;"	v
glad_glTexCoord4sv	support/glad/glad.c	/^PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv = NULL;$/;"	v
glad_glTexCoord4sv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;$/;"	v
glad_glTexCoordP1ui	support/glad/glad.c	/^PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui = NULL;$/;"	v
glad_glTexCoordP1ui	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;$/;"	v
glad_glTexCoordP1uiv	support/glad/glad.c	/^PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv = NULL;$/;"	v
glad_glTexCoordP1uiv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;$/;"	v
glad_glTexCoordP2ui	support/glad/glad.c	/^PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui = NULL;$/;"	v
glad_glTexCoordP2ui	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;$/;"	v
glad_glTexCoordP2uiv	support/glad/glad.c	/^PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv = NULL;$/;"	v
glad_glTexCoordP2uiv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;$/;"	v
glad_glTexCoordP3ui	support/glad/glad.c	/^PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui = NULL;$/;"	v
glad_glTexCoordP3ui	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;$/;"	v
glad_glTexCoordP3uiv	support/glad/glad.c	/^PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv = NULL;$/;"	v
glad_glTexCoordP3uiv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;$/;"	v
glad_glTexCoordP4ui	support/glad/glad.c	/^PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui = NULL;$/;"	v
glad_glTexCoordP4ui	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;$/;"	v
glad_glTexCoordP4uiv	support/glad/glad.c	/^PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv = NULL;$/;"	v
glad_glTexCoordP4uiv	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;$/;"	v
glad_glTexCoordPointer	support/GLFW/deps/glad.c	/^PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;$/;"	v
glad_glTexCoordPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;$/;"	v
glad_glTexCoordPointer	support/glad/glad.c	/^PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer = NULL;$/;"	v
glad_glTexCoordPointer	support/glad/glad.h	/^GLAPI PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;$/;"	v
glad_glTexEnvf	support/GLFW/deps/glad.c	/^PFNGLTEXENVFPROC glad_glTexEnvf;$/;"	v
glad_glTexEnvf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXENVFPROC glad_glTexEnvf;$/;"	v
glad_glTexEnvf	support/glad/glad.c	/^PFNGLTEXENVFPROC glad_glTexEnvf = NULL;$/;"	v
glad_glTexEnvf	support/glad/glad.h	/^GLAPI PFNGLTEXENVFPROC glad_glTexEnvf;$/;"	v
glad_glTexEnvfv	support/GLFW/deps/glad.c	/^PFNGLTEXENVFVPROC glad_glTexEnvfv;$/;"	v
glad_glTexEnvfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXENVFVPROC glad_glTexEnvfv;$/;"	v
glad_glTexEnvfv	support/glad/glad.c	/^PFNGLTEXENVFVPROC glad_glTexEnvfv = NULL;$/;"	v
glad_glTexEnvfv	support/glad/glad.h	/^GLAPI PFNGLTEXENVFVPROC glad_glTexEnvfv;$/;"	v
glad_glTexEnvi	support/GLFW/deps/glad.c	/^PFNGLTEXENVIPROC glad_glTexEnvi;$/;"	v
glad_glTexEnvi	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXENVIPROC glad_glTexEnvi;$/;"	v
glad_glTexEnvi	support/glad/glad.c	/^PFNGLTEXENVIPROC glad_glTexEnvi = NULL;$/;"	v
glad_glTexEnvi	support/glad/glad.h	/^GLAPI PFNGLTEXENVIPROC glad_glTexEnvi;$/;"	v
glad_glTexEnviv	support/GLFW/deps/glad.c	/^PFNGLTEXENVIVPROC glad_glTexEnviv;$/;"	v
glad_glTexEnviv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXENVIVPROC glad_glTexEnviv;$/;"	v
glad_glTexEnviv	support/glad/glad.c	/^PFNGLTEXENVIVPROC glad_glTexEnviv = NULL;$/;"	v
glad_glTexEnviv	support/glad/glad.h	/^GLAPI PFNGLTEXENVIVPROC glad_glTexEnviv;$/;"	v
glad_glTexGend	support/GLFW/deps/glad.c	/^PFNGLTEXGENDPROC glad_glTexGend;$/;"	v
glad_glTexGend	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENDPROC glad_glTexGend;$/;"	v
glad_glTexGend	support/glad/glad.c	/^PFNGLTEXGENDPROC glad_glTexGend = NULL;$/;"	v
glad_glTexGend	support/glad/glad.h	/^GLAPI PFNGLTEXGENDPROC glad_glTexGend;$/;"	v
glad_glTexGendv	support/GLFW/deps/glad.c	/^PFNGLTEXGENDVPROC glad_glTexGendv;$/;"	v
glad_glTexGendv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENDVPROC glad_glTexGendv;$/;"	v
glad_glTexGendv	support/glad/glad.c	/^PFNGLTEXGENDVPROC glad_glTexGendv = NULL;$/;"	v
glad_glTexGendv	support/glad/glad.h	/^GLAPI PFNGLTEXGENDVPROC glad_glTexGendv;$/;"	v
glad_glTexGenf	support/GLFW/deps/glad.c	/^PFNGLTEXGENFPROC glad_glTexGenf;$/;"	v
glad_glTexGenf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENFPROC glad_glTexGenf;$/;"	v
glad_glTexGenf	support/glad/glad.c	/^PFNGLTEXGENFPROC glad_glTexGenf = NULL;$/;"	v
glad_glTexGenf	support/glad/glad.h	/^GLAPI PFNGLTEXGENFPROC glad_glTexGenf;$/;"	v
glad_glTexGenfv	support/GLFW/deps/glad.c	/^PFNGLTEXGENFVPROC glad_glTexGenfv;$/;"	v
glad_glTexGenfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENFVPROC glad_glTexGenfv;$/;"	v
glad_glTexGenfv	support/glad/glad.c	/^PFNGLTEXGENFVPROC glad_glTexGenfv = NULL;$/;"	v
glad_glTexGenfv	support/glad/glad.h	/^GLAPI PFNGLTEXGENFVPROC glad_glTexGenfv;$/;"	v
glad_glTexGeni	support/GLFW/deps/glad.c	/^PFNGLTEXGENIPROC glad_glTexGeni;$/;"	v
glad_glTexGeni	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENIPROC glad_glTexGeni;$/;"	v
glad_glTexGeni	support/glad/glad.c	/^PFNGLTEXGENIPROC glad_glTexGeni = NULL;$/;"	v
glad_glTexGeni	support/glad/glad.h	/^GLAPI PFNGLTEXGENIPROC glad_glTexGeni;$/;"	v
glad_glTexGeniv	support/GLFW/deps/glad.c	/^PFNGLTEXGENIVPROC glad_glTexGeniv;$/;"	v
glad_glTexGeniv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXGENIVPROC glad_glTexGeniv;$/;"	v
glad_glTexGeniv	support/glad/glad.c	/^PFNGLTEXGENIVPROC glad_glTexGeniv = NULL;$/;"	v
glad_glTexGeniv	support/glad/glad.h	/^GLAPI PFNGLTEXGENIVPROC glad_glTexGeniv;$/;"	v
glad_glTexImage1D	support/GLFW/deps/glad.c	/^PFNGLTEXIMAGE1DPROC glad_glTexImage1D;$/;"	v
glad_glTexImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;$/;"	v
glad_glTexImage1D	support/glad/glad.c	/^PFNGLTEXIMAGE1DPROC glad_glTexImage1D = NULL;$/;"	v
glad_glTexImage1D	support/glad/glad.h	/^GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;$/;"	v
glad_glTexImage2D	support/GLFW/deps/glad.c	/^PFNGLTEXIMAGE2DPROC glad_glTexImage2D;$/;"	v
glad_glTexImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;$/;"	v
glad_glTexImage2D	support/glad/glad.c	/^PFNGLTEXIMAGE2DPROC glad_glTexImage2D = NULL;$/;"	v
glad_glTexImage2D	support/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;$/;"	v
glad_glTexImage2DMultisample	support/GLFW/deps/glad.c	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;$/;"	v
glad_glTexImage2DMultisample	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;$/;"	v
glad_glTexImage2DMultisample	support/glad/glad.c	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = NULL;$/;"	v
glad_glTexImage2DMultisample	support/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;$/;"	v
glad_glTexImage3D	support/GLFW/deps/glad.c	/^PFNGLTEXIMAGE3DPROC glad_glTexImage3D;$/;"	v
glad_glTexImage3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;$/;"	v
glad_glTexImage3D	support/glad/glad.c	/^PFNGLTEXIMAGE3DPROC glad_glTexImage3D = NULL;$/;"	v
glad_glTexImage3D	support/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;$/;"	v
glad_glTexImage3DMultisample	support/GLFW/deps/glad.c	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;$/;"	v
glad_glTexImage3DMultisample	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;$/;"	v
glad_glTexImage3DMultisample	support/glad/glad.c	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = NULL;$/;"	v
glad_glTexImage3DMultisample	support/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;$/;"	v
glad_glTexParameterIiv	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;$/;"	v
glad_glTexParameterIiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;$/;"	v
glad_glTexParameterIiv	support/glad/glad.c	/^PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = NULL;$/;"	v
glad_glTexParameterIiv	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;$/;"	v
glad_glTexParameterIuiv	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;$/;"	v
glad_glTexParameterIuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;$/;"	v
glad_glTexParameterIuiv	support/glad/glad.c	/^PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = NULL;$/;"	v
glad_glTexParameterIuiv	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;$/;"	v
glad_glTexParameterf	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERFPROC glad_glTexParameterf;$/;"	v
glad_glTexParameterf	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;$/;"	v
glad_glTexParameterf	support/glad/glad.c	/^PFNGLTEXPARAMETERFPROC glad_glTexParameterf = NULL;$/;"	v
glad_glTexParameterf	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;$/;"	v
glad_glTexParameterfv	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;$/;"	v
glad_glTexParameterfv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;$/;"	v
glad_glTexParameterfv	support/glad/glad.c	/^PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = NULL;$/;"	v
glad_glTexParameterfv	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;$/;"	v
glad_glTexParameteri	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERIPROC glad_glTexParameteri;$/;"	v
glad_glTexParameteri	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;$/;"	v
glad_glTexParameteri	support/glad/glad.c	/^PFNGLTEXPARAMETERIPROC glad_glTexParameteri = NULL;$/;"	v
glad_glTexParameteri	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;$/;"	v
glad_glTexParameteriv	support/GLFW/deps/glad.c	/^PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;$/;"	v
glad_glTexParameteriv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;$/;"	v
glad_glTexParameteriv	support/glad/glad.c	/^PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = NULL;$/;"	v
glad_glTexParameteriv	support/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;$/;"	v
glad_glTexSubImage1D	support/GLFW/deps/glad.c	/^PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;$/;"	v
glad_glTexSubImage1D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;$/;"	v
glad_glTexSubImage1D	support/glad/glad.c	/^PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = NULL;$/;"	v
glad_glTexSubImage1D	support/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;$/;"	v
glad_glTexSubImage2D	support/GLFW/deps/glad.c	/^PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;$/;"	v
glad_glTexSubImage2D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;$/;"	v
glad_glTexSubImage2D	support/glad/glad.c	/^PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = NULL;$/;"	v
glad_glTexSubImage2D	support/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;$/;"	v
glad_glTexSubImage3D	support/GLFW/deps/glad.c	/^PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;$/;"	v
glad_glTexSubImage3D	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;$/;"	v
glad_glTexSubImage3D	support/glad/glad.c	/^PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = NULL;$/;"	v
glad_glTexSubImage3D	support/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;$/;"	v
glad_glTransformFeedbackVaryings	support/GLFW/deps/glad.c	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;$/;"	v
glad_glTransformFeedbackVaryings	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;$/;"	v
glad_glTransformFeedbackVaryings	support/glad/glad.c	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = NULL;$/;"	v
glad_glTransformFeedbackVaryings	support/glad/glad.h	/^GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;$/;"	v
glad_glTranslated	support/GLFW/deps/glad.c	/^PFNGLTRANSLATEDPROC glad_glTranslated;$/;"	v
glad_glTranslated	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTRANSLATEDPROC glad_glTranslated;$/;"	v
glad_glTranslated	support/glad/glad.c	/^PFNGLTRANSLATEDPROC glad_glTranslated = NULL;$/;"	v
glad_glTranslated	support/glad/glad.h	/^GLAPI PFNGLTRANSLATEDPROC glad_glTranslated;$/;"	v
glad_glTranslatef	support/GLFW/deps/glad.c	/^PFNGLTRANSLATEFPROC glad_glTranslatef;$/;"	v
glad_glTranslatef	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLTRANSLATEFPROC glad_glTranslatef;$/;"	v
glad_glTranslatef	support/glad/glad.c	/^PFNGLTRANSLATEFPROC glad_glTranslatef = NULL;$/;"	v
glad_glTranslatef	support/glad/glad.h	/^GLAPI PFNGLTRANSLATEFPROC glad_glTranslatef;$/;"	v
glad_glUniform1f	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1FPROC glad_glUniform1f;$/;"	v
glad_glUniform1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;$/;"	v
glad_glUniform1f	support/glad/glad.c	/^PFNGLUNIFORM1FPROC glad_glUniform1f = NULL;$/;"	v
glad_glUniform1f	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;$/;"	v
glad_glUniform1fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1FVPROC glad_glUniform1fv;$/;"	v
glad_glUniform1fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;$/;"	v
glad_glUniform1fv	support/glad/glad.c	/^PFNGLUNIFORM1FVPROC glad_glUniform1fv = NULL;$/;"	v
glad_glUniform1fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;$/;"	v
glad_glUniform1i	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1IPROC glad_glUniform1i;$/;"	v
glad_glUniform1i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;$/;"	v
glad_glUniform1i	support/glad/glad.c	/^PFNGLUNIFORM1IPROC glad_glUniform1i = NULL;$/;"	v
glad_glUniform1i	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;$/;"	v
glad_glUniform1iv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1IVPROC glad_glUniform1iv;$/;"	v
glad_glUniform1iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;$/;"	v
glad_glUniform1iv	support/glad/glad.c	/^PFNGLUNIFORM1IVPROC glad_glUniform1iv = NULL;$/;"	v
glad_glUniform1iv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;$/;"	v
glad_glUniform1ui	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1UIPROC glad_glUniform1ui;$/;"	v
glad_glUniform1ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;$/;"	v
glad_glUniform1ui	support/glad/glad.c	/^PFNGLUNIFORM1UIPROC glad_glUniform1ui = NULL;$/;"	v
glad_glUniform1ui	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;$/;"	v
glad_glUniform1uiv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;$/;"	v
glad_glUniform1uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;$/;"	v
glad_glUniform1uiv	support/glad/glad.c	/^PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = NULL;$/;"	v
glad_glUniform1uiv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;$/;"	v
glad_glUniform2f	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2FPROC glad_glUniform2f;$/;"	v
glad_glUniform2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;$/;"	v
glad_glUniform2f	support/glad/glad.c	/^PFNGLUNIFORM2FPROC glad_glUniform2f = NULL;$/;"	v
glad_glUniform2f	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;$/;"	v
glad_glUniform2fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2FVPROC glad_glUniform2fv;$/;"	v
glad_glUniform2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;$/;"	v
glad_glUniform2fv	support/glad/glad.c	/^PFNGLUNIFORM2FVPROC glad_glUniform2fv = NULL;$/;"	v
glad_glUniform2fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;$/;"	v
glad_glUniform2i	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2IPROC glad_glUniform2i;$/;"	v
glad_glUniform2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;$/;"	v
glad_glUniform2i	support/glad/glad.c	/^PFNGLUNIFORM2IPROC glad_glUniform2i = NULL;$/;"	v
glad_glUniform2i	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;$/;"	v
glad_glUniform2iv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2IVPROC glad_glUniform2iv;$/;"	v
glad_glUniform2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;$/;"	v
glad_glUniform2iv	support/glad/glad.c	/^PFNGLUNIFORM2IVPROC glad_glUniform2iv = NULL;$/;"	v
glad_glUniform2iv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;$/;"	v
glad_glUniform2ui	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2UIPROC glad_glUniform2ui;$/;"	v
glad_glUniform2ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;$/;"	v
glad_glUniform2ui	support/glad/glad.c	/^PFNGLUNIFORM2UIPROC glad_glUniform2ui = NULL;$/;"	v
glad_glUniform2ui	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;$/;"	v
glad_glUniform2uiv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;$/;"	v
glad_glUniform2uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;$/;"	v
glad_glUniform2uiv	support/glad/glad.c	/^PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = NULL;$/;"	v
glad_glUniform2uiv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;$/;"	v
glad_glUniform3f	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3FPROC glad_glUniform3f;$/;"	v
glad_glUniform3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;$/;"	v
glad_glUniform3f	support/glad/glad.c	/^PFNGLUNIFORM3FPROC glad_glUniform3f = NULL;$/;"	v
glad_glUniform3f	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;$/;"	v
glad_glUniform3fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3FVPROC glad_glUniform3fv;$/;"	v
glad_glUniform3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;$/;"	v
glad_glUniform3fv	support/glad/glad.c	/^PFNGLUNIFORM3FVPROC glad_glUniform3fv = NULL;$/;"	v
glad_glUniform3fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;$/;"	v
glad_glUniform3i	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3IPROC glad_glUniform3i;$/;"	v
glad_glUniform3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;$/;"	v
glad_glUniform3i	support/glad/glad.c	/^PFNGLUNIFORM3IPROC glad_glUniform3i = NULL;$/;"	v
glad_glUniform3i	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;$/;"	v
glad_glUniform3iv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3IVPROC glad_glUniform3iv;$/;"	v
glad_glUniform3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;$/;"	v
glad_glUniform3iv	support/glad/glad.c	/^PFNGLUNIFORM3IVPROC glad_glUniform3iv = NULL;$/;"	v
glad_glUniform3iv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;$/;"	v
glad_glUniform3ui	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3UIPROC glad_glUniform3ui;$/;"	v
glad_glUniform3ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;$/;"	v
glad_glUniform3ui	support/glad/glad.c	/^PFNGLUNIFORM3UIPROC glad_glUniform3ui = NULL;$/;"	v
glad_glUniform3ui	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;$/;"	v
glad_glUniform3uiv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;$/;"	v
glad_glUniform3uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;$/;"	v
glad_glUniform3uiv	support/glad/glad.c	/^PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = NULL;$/;"	v
glad_glUniform3uiv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;$/;"	v
glad_glUniform4f	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4FPROC glad_glUniform4f;$/;"	v
glad_glUniform4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;$/;"	v
glad_glUniform4f	support/glad/glad.c	/^PFNGLUNIFORM4FPROC glad_glUniform4f = NULL;$/;"	v
glad_glUniform4f	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;$/;"	v
glad_glUniform4fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4FVPROC glad_glUniform4fv;$/;"	v
glad_glUniform4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;$/;"	v
glad_glUniform4fv	support/glad/glad.c	/^PFNGLUNIFORM4FVPROC glad_glUniform4fv = NULL;$/;"	v
glad_glUniform4fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;$/;"	v
glad_glUniform4i	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4IPROC glad_glUniform4i;$/;"	v
glad_glUniform4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;$/;"	v
glad_glUniform4i	support/glad/glad.c	/^PFNGLUNIFORM4IPROC glad_glUniform4i = NULL;$/;"	v
glad_glUniform4i	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;$/;"	v
glad_glUniform4iv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4IVPROC glad_glUniform4iv;$/;"	v
glad_glUniform4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;$/;"	v
glad_glUniform4iv	support/glad/glad.c	/^PFNGLUNIFORM4IVPROC glad_glUniform4iv = NULL;$/;"	v
glad_glUniform4iv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;$/;"	v
glad_glUniform4ui	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4UIPROC glad_glUniform4ui;$/;"	v
glad_glUniform4ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;$/;"	v
glad_glUniform4ui	support/glad/glad.c	/^PFNGLUNIFORM4UIPROC glad_glUniform4ui = NULL;$/;"	v
glad_glUniform4ui	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;$/;"	v
glad_glUniform4uiv	support/GLFW/deps/glad.c	/^PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;$/;"	v
glad_glUniform4uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;$/;"	v
glad_glUniform4uiv	support/glad/glad.c	/^PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = NULL;$/;"	v
glad_glUniform4uiv	support/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;$/;"	v
glad_glUniformBlockBinding	support/GLFW/deps/glad.c	/^PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;$/;"	v
glad_glUniformBlockBinding	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;$/;"	v
glad_glUniformBlockBinding	support/glad/glad.c	/^PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = NULL;$/;"	v
glad_glUniformBlockBinding	support/glad/glad.h	/^GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;$/;"	v
glad_glUniformMatrix2fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;$/;"	v
glad_glUniformMatrix2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;$/;"	v
glad_glUniformMatrix2fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = NULL;$/;"	v
glad_glUniformMatrix2fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;$/;"	v
glad_glUniformMatrix2x3fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;$/;"	v
glad_glUniformMatrix2x3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;$/;"	v
glad_glUniformMatrix2x3fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = NULL;$/;"	v
glad_glUniformMatrix2x3fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;$/;"	v
glad_glUniformMatrix2x4fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;$/;"	v
glad_glUniformMatrix2x4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;$/;"	v
glad_glUniformMatrix2x4fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = NULL;$/;"	v
glad_glUniformMatrix2x4fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;$/;"	v
glad_glUniformMatrix3fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;$/;"	v
glad_glUniformMatrix3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;$/;"	v
glad_glUniformMatrix3fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = NULL;$/;"	v
glad_glUniformMatrix3fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;$/;"	v
glad_glUniformMatrix3x2fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;$/;"	v
glad_glUniformMatrix3x2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;$/;"	v
glad_glUniformMatrix3x2fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = NULL;$/;"	v
glad_glUniformMatrix3x2fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;$/;"	v
glad_glUniformMatrix3x4fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;$/;"	v
glad_glUniformMatrix3x4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;$/;"	v
glad_glUniformMatrix3x4fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = NULL;$/;"	v
glad_glUniformMatrix3x4fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;$/;"	v
glad_glUniformMatrix4fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;$/;"	v
glad_glUniformMatrix4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;$/;"	v
glad_glUniformMatrix4fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = NULL;$/;"	v
glad_glUniformMatrix4fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;$/;"	v
glad_glUniformMatrix4x2fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;$/;"	v
glad_glUniformMatrix4x2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;$/;"	v
glad_glUniformMatrix4x2fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = NULL;$/;"	v
glad_glUniformMatrix4x2fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;$/;"	v
glad_glUniformMatrix4x3fv	support/GLFW/deps/glad.c	/^PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;$/;"	v
glad_glUniformMatrix4x3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;$/;"	v
glad_glUniformMatrix4x3fv	support/glad/glad.c	/^PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = NULL;$/;"	v
glad_glUniformMatrix4x3fv	support/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;$/;"	v
glad_glUnmapBuffer	support/GLFW/deps/glad.c	/^PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;$/;"	v
glad_glUnmapBuffer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;$/;"	v
glad_glUnmapBuffer	support/glad/glad.c	/^PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = NULL;$/;"	v
glad_glUnmapBuffer	support/glad/glad.h	/^GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;$/;"	v
glad_glUseProgram	support/GLFW/deps/glad.c	/^PFNGLUSEPROGRAMPROC glad_glUseProgram;$/;"	v
glad_glUseProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;$/;"	v
glad_glUseProgram	support/glad/glad.c	/^PFNGLUSEPROGRAMPROC glad_glUseProgram = NULL;$/;"	v
glad_glUseProgram	support/glad/glad.h	/^GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;$/;"	v
glad_glValidateProgram	support/GLFW/deps/glad.c	/^PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;$/;"	v
glad_glValidateProgram	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;$/;"	v
glad_glValidateProgram	support/glad/glad.c	/^PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = NULL;$/;"	v
glad_glValidateProgram	support/glad/glad.h	/^GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;$/;"	v
glad_glVertex2d	support/GLFW/deps/glad.c	/^PFNGLVERTEX2DPROC glad_glVertex2d;$/;"	v
glad_glVertex2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2DPROC glad_glVertex2d;$/;"	v
glad_glVertex2d	support/glad/glad.c	/^PFNGLVERTEX2DPROC glad_glVertex2d = NULL;$/;"	v
glad_glVertex2d	support/glad/glad.h	/^GLAPI PFNGLVERTEX2DPROC glad_glVertex2d;$/;"	v
glad_glVertex2dv	support/GLFW/deps/glad.c	/^PFNGLVERTEX2DVPROC glad_glVertex2dv;$/;"	v
glad_glVertex2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2DVPROC glad_glVertex2dv;$/;"	v
glad_glVertex2dv	support/glad/glad.c	/^PFNGLVERTEX2DVPROC glad_glVertex2dv = NULL;$/;"	v
glad_glVertex2dv	support/glad/glad.h	/^GLAPI PFNGLVERTEX2DVPROC glad_glVertex2dv;$/;"	v
glad_glVertex2f	support/GLFW/deps/glad.c	/^PFNGLVERTEX2FPROC glad_glVertex2f;$/;"	v
glad_glVertex2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2FPROC glad_glVertex2f;$/;"	v
glad_glVertex2f	support/glad/glad.c	/^PFNGLVERTEX2FPROC glad_glVertex2f = NULL;$/;"	v
glad_glVertex2f	support/glad/glad.h	/^GLAPI PFNGLVERTEX2FPROC glad_glVertex2f;$/;"	v
glad_glVertex2fv	support/GLFW/deps/glad.c	/^PFNGLVERTEX2FVPROC glad_glVertex2fv;$/;"	v
glad_glVertex2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2FVPROC glad_glVertex2fv;$/;"	v
glad_glVertex2fv	support/glad/glad.c	/^PFNGLVERTEX2FVPROC glad_glVertex2fv = NULL;$/;"	v
glad_glVertex2fv	support/glad/glad.h	/^GLAPI PFNGLVERTEX2FVPROC glad_glVertex2fv;$/;"	v
glad_glVertex2i	support/GLFW/deps/glad.c	/^PFNGLVERTEX2IPROC glad_glVertex2i;$/;"	v
glad_glVertex2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2IPROC glad_glVertex2i;$/;"	v
glad_glVertex2i	support/glad/glad.c	/^PFNGLVERTEX2IPROC glad_glVertex2i = NULL;$/;"	v
glad_glVertex2i	support/glad/glad.h	/^GLAPI PFNGLVERTEX2IPROC glad_glVertex2i;$/;"	v
glad_glVertex2iv	support/GLFW/deps/glad.c	/^PFNGLVERTEX2IVPROC glad_glVertex2iv;$/;"	v
glad_glVertex2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2IVPROC glad_glVertex2iv;$/;"	v
glad_glVertex2iv	support/glad/glad.c	/^PFNGLVERTEX2IVPROC glad_glVertex2iv = NULL;$/;"	v
glad_glVertex2iv	support/glad/glad.h	/^GLAPI PFNGLVERTEX2IVPROC glad_glVertex2iv;$/;"	v
glad_glVertex2s	support/GLFW/deps/glad.c	/^PFNGLVERTEX2SPROC glad_glVertex2s;$/;"	v
glad_glVertex2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2SPROC glad_glVertex2s;$/;"	v
glad_glVertex2s	support/glad/glad.c	/^PFNGLVERTEX2SPROC glad_glVertex2s = NULL;$/;"	v
glad_glVertex2s	support/glad/glad.h	/^GLAPI PFNGLVERTEX2SPROC glad_glVertex2s;$/;"	v
glad_glVertex2sv	support/GLFW/deps/glad.c	/^PFNGLVERTEX2SVPROC glad_glVertex2sv;$/;"	v
glad_glVertex2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX2SVPROC glad_glVertex2sv;$/;"	v
glad_glVertex2sv	support/glad/glad.c	/^PFNGLVERTEX2SVPROC glad_glVertex2sv = NULL;$/;"	v
glad_glVertex2sv	support/glad/glad.h	/^GLAPI PFNGLVERTEX2SVPROC glad_glVertex2sv;$/;"	v
glad_glVertex3d	support/GLFW/deps/glad.c	/^PFNGLVERTEX3DPROC glad_glVertex3d;$/;"	v
glad_glVertex3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3DPROC glad_glVertex3d;$/;"	v
glad_glVertex3d	support/glad/glad.c	/^PFNGLVERTEX3DPROC glad_glVertex3d = NULL;$/;"	v
glad_glVertex3d	support/glad/glad.h	/^GLAPI PFNGLVERTEX3DPROC glad_glVertex3d;$/;"	v
glad_glVertex3dv	support/GLFW/deps/glad.c	/^PFNGLVERTEX3DVPROC glad_glVertex3dv;$/;"	v
glad_glVertex3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3DVPROC glad_glVertex3dv;$/;"	v
glad_glVertex3dv	support/glad/glad.c	/^PFNGLVERTEX3DVPROC glad_glVertex3dv = NULL;$/;"	v
glad_glVertex3dv	support/glad/glad.h	/^GLAPI PFNGLVERTEX3DVPROC glad_glVertex3dv;$/;"	v
glad_glVertex3f	support/GLFW/deps/glad.c	/^PFNGLVERTEX3FPROC glad_glVertex3f;$/;"	v
glad_glVertex3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3FPROC glad_glVertex3f;$/;"	v
glad_glVertex3f	support/glad/glad.c	/^PFNGLVERTEX3FPROC glad_glVertex3f = NULL;$/;"	v
glad_glVertex3f	support/glad/glad.h	/^GLAPI PFNGLVERTEX3FPROC glad_glVertex3f;$/;"	v
glad_glVertex3fv	support/GLFW/deps/glad.c	/^PFNGLVERTEX3FVPROC glad_glVertex3fv;$/;"	v
glad_glVertex3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3FVPROC glad_glVertex3fv;$/;"	v
glad_glVertex3fv	support/glad/glad.c	/^PFNGLVERTEX3FVPROC glad_glVertex3fv = NULL;$/;"	v
glad_glVertex3fv	support/glad/glad.h	/^GLAPI PFNGLVERTEX3FVPROC glad_glVertex3fv;$/;"	v
glad_glVertex3i	support/GLFW/deps/glad.c	/^PFNGLVERTEX3IPROC glad_glVertex3i;$/;"	v
glad_glVertex3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3IPROC glad_glVertex3i;$/;"	v
glad_glVertex3i	support/glad/glad.c	/^PFNGLVERTEX3IPROC glad_glVertex3i = NULL;$/;"	v
glad_glVertex3i	support/glad/glad.h	/^GLAPI PFNGLVERTEX3IPROC glad_glVertex3i;$/;"	v
glad_glVertex3iv	support/GLFW/deps/glad.c	/^PFNGLVERTEX3IVPROC glad_glVertex3iv;$/;"	v
glad_glVertex3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3IVPROC glad_glVertex3iv;$/;"	v
glad_glVertex3iv	support/glad/glad.c	/^PFNGLVERTEX3IVPROC glad_glVertex3iv = NULL;$/;"	v
glad_glVertex3iv	support/glad/glad.h	/^GLAPI PFNGLVERTEX3IVPROC glad_glVertex3iv;$/;"	v
glad_glVertex3s	support/GLFW/deps/glad.c	/^PFNGLVERTEX3SPROC glad_glVertex3s;$/;"	v
glad_glVertex3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3SPROC glad_glVertex3s;$/;"	v
glad_glVertex3s	support/glad/glad.c	/^PFNGLVERTEX3SPROC glad_glVertex3s = NULL;$/;"	v
glad_glVertex3s	support/glad/glad.h	/^GLAPI PFNGLVERTEX3SPROC glad_glVertex3s;$/;"	v
glad_glVertex3sv	support/GLFW/deps/glad.c	/^PFNGLVERTEX3SVPROC glad_glVertex3sv;$/;"	v
glad_glVertex3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX3SVPROC glad_glVertex3sv;$/;"	v
glad_glVertex3sv	support/glad/glad.c	/^PFNGLVERTEX3SVPROC glad_glVertex3sv = NULL;$/;"	v
glad_glVertex3sv	support/glad/glad.h	/^GLAPI PFNGLVERTEX3SVPROC glad_glVertex3sv;$/;"	v
glad_glVertex4d	support/GLFW/deps/glad.c	/^PFNGLVERTEX4DPROC glad_glVertex4d;$/;"	v
glad_glVertex4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4DPROC glad_glVertex4d;$/;"	v
glad_glVertex4d	support/glad/glad.c	/^PFNGLVERTEX4DPROC glad_glVertex4d = NULL;$/;"	v
glad_glVertex4d	support/glad/glad.h	/^GLAPI PFNGLVERTEX4DPROC glad_glVertex4d;$/;"	v
glad_glVertex4dv	support/GLFW/deps/glad.c	/^PFNGLVERTEX4DVPROC glad_glVertex4dv;$/;"	v
glad_glVertex4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4DVPROC glad_glVertex4dv;$/;"	v
glad_glVertex4dv	support/glad/glad.c	/^PFNGLVERTEX4DVPROC glad_glVertex4dv = NULL;$/;"	v
glad_glVertex4dv	support/glad/glad.h	/^GLAPI PFNGLVERTEX4DVPROC glad_glVertex4dv;$/;"	v
glad_glVertex4f	support/GLFW/deps/glad.c	/^PFNGLVERTEX4FPROC glad_glVertex4f;$/;"	v
glad_glVertex4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4FPROC glad_glVertex4f;$/;"	v
glad_glVertex4f	support/glad/glad.c	/^PFNGLVERTEX4FPROC glad_glVertex4f = NULL;$/;"	v
glad_glVertex4f	support/glad/glad.h	/^GLAPI PFNGLVERTEX4FPROC glad_glVertex4f;$/;"	v
glad_glVertex4fv	support/GLFW/deps/glad.c	/^PFNGLVERTEX4FVPROC glad_glVertex4fv;$/;"	v
glad_glVertex4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4FVPROC glad_glVertex4fv;$/;"	v
glad_glVertex4fv	support/glad/glad.c	/^PFNGLVERTEX4FVPROC glad_glVertex4fv = NULL;$/;"	v
glad_glVertex4fv	support/glad/glad.h	/^GLAPI PFNGLVERTEX4FVPROC glad_glVertex4fv;$/;"	v
glad_glVertex4i	support/GLFW/deps/glad.c	/^PFNGLVERTEX4IPROC glad_glVertex4i;$/;"	v
glad_glVertex4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4IPROC glad_glVertex4i;$/;"	v
glad_glVertex4i	support/glad/glad.c	/^PFNGLVERTEX4IPROC glad_glVertex4i = NULL;$/;"	v
glad_glVertex4i	support/glad/glad.h	/^GLAPI PFNGLVERTEX4IPROC glad_glVertex4i;$/;"	v
glad_glVertex4iv	support/GLFW/deps/glad.c	/^PFNGLVERTEX4IVPROC glad_glVertex4iv;$/;"	v
glad_glVertex4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4IVPROC glad_glVertex4iv;$/;"	v
glad_glVertex4iv	support/glad/glad.c	/^PFNGLVERTEX4IVPROC glad_glVertex4iv = NULL;$/;"	v
glad_glVertex4iv	support/glad/glad.h	/^GLAPI PFNGLVERTEX4IVPROC glad_glVertex4iv;$/;"	v
glad_glVertex4s	support/GLFW/deps/glad.c	/^PFNGLVERTEX4SPROC glad_glVertex4s;$/;"	v
glad_glVertex4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4SPROC glad_glVertex4s;$/;"	v
glad_glVertex4s	support/glad/glad.c	/^PFNGLVERTEX4SPROC glad_glVertex4s = NULL;$/;"	v
glad_glVertex4s	support/glad/glad.h	/^GLAPI PFNGLVERTEX4SPROC glad_glVertex4s;$/;"	v
glad_glVertex4sv	support/GLFW/deps/glad.c	/^PFNGLVERTEX4SVPROC glad_glVertex4sv;$/;"	v
glad_glVertex4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEX4SVPROC glad_glVertex4sv;$/;"	v
glad_glVertex4sv	support/glad/glad.c	/^PFNGLVERTEX4SVPROC glad_glVertex4sv = NULL;$/;"	v
glad_glVertex4sv	support/glad/glad.h	/^GLAPI PFNGLVERTEX4SVPROC glad_glVertex4sv;$/;"	v
glad_glVertexAttrib1d	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;$/;"	v
glad_glVertexAttrib1d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;$/;"	v
glad_glVertexAttrib1d	support/glad/glad.c	/^PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = NULL;$/;"	v
glad_glVertexAttrib1d	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;$/;"	v
glad_glVertexAttrib1dv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;$/;"	v
glad_glVertexAttrib1dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;$/;"	v
glad_glVertexAttrib1dv	support/glad/glad.c	/^PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = NULL;$/;"	v
glad_glVertexAttrib1dv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;$/;"	v
glad_glVertexAttrib1f	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;$/;"	v
glad_glVertexAttrib1f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;$/;"	v
glad_glVertexAttrib1f	support/glad/glad.c	/^PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = NULL;$/;"	v
glad_glVertexAttrib1f	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;$/;"	v
glad_glVertexAttrib1fv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;$/;"	v
glad_glVertexAttrib1fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;$/;"	v
glad_glVertexAttrib1fv	support/glad/glad.c	/^PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = NULL;$/;"	v
glad_glVertexAttrib1fv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;$/;"	v
glad_glVertexAttrib1s	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;$/;"	v
glad_glVertexAttrib1s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;$/;"	v
glad_glVertexAttrib1s	support/glad/glad.c	/^PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = NULL;$/;"	v
glad_glVertexAttrib1s	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;$/;"	v
glad_glVertexAttrib1sv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;$/;"	v
glad_glVertexAttrib1sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;$/;"	v
glad_glVertexAttrib1sv	support/glad/glad.c	/^PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = NULL;$/;"	v
glad_glVertexAttrib1sv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;$/;"	v
glad_glVertexAttrib2d	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;$/;"	v
glad_glVertexAttrib2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;$/;"	v
glad_glVertexAttrib2d	support/glad/glad.c	/^PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = NULL;$/;"	v
glad_glVertexAttrib2d	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;$/;"	v
glad_glVertexAttrib2dv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;$/;"	v
glad_glVertexAttrib2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;$/;"	v
glad_glVertexAttrib2dv	support/glad/glad.c	/^PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = NULL;$/;"	v
glad_glVertexAttrib2dv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;$/;"	v
glad_glVertexAttrib2f	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;$/;"	v
glad_glVertexAttrib2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;$/;"	v
glad_glVertexAttrib2f	support/glad/glad.c	/^PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = NULL;$/;"	v
glad_glVertexAttrib2f	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;$/;"	v
glad_glVertexAttrib2fv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;$/;"	v
glad_glVertexAttrib2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;$/;"	v
glad_glVertexAttrib2fv	support/glad/glad.c	/^PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = NULL;$/;"	v
glad_glVertexAttrib2fv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;$/;"	v
glad_glVertexAttrib2s	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;$/;"	v
glad_glVertexAttrib2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;$/;"	v
glad_glVertexAttrib2s	support/glad/glad.c	/^PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = NULL;$/;"	v
glad_glVertexAttrib2s	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;$/;"	v
glad_glVertexAttrib2sv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;$/;"	v
glad_glVertexAttrib2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;$/;"	v
glad_glVertexAttrib2sv	support/glad/glad.c	/^PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = NULL;$/;"	v
glad_glVertexAttrib2sv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;$/;"	v
glad_glVertexAttrib3d	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;$/;"	v
glad_glVertexAttrib3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;$/;"	v
glad_glVertexAttrib3d	support/glad/glad.c	/^PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = NULL;$/;"	v
glad_glVertexAttrib3d	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;$/;"	v
glad_glVertexAttrib3dv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;$/;"	v
glad_glVertexAttrib3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;$/;"	v
glad_glVertexAttrib3dv	support/glad/glad.c	/^PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = NULL;$/;"	v
glad_glVertexAttrib3dv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;$/;"	v
glad_glVertexAttrib3f	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;$/;"	v
glad_glVertexAttrib3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;$/;"	v
glad_glVertexAttrib3f	support/glad/glad.c	/^PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = NULL;$/;"	v
glad_glVertexAttrib3f	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;$/;"	v
glad_glVertexAttrib3fv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;$/;"	v
glad_glVertexAttrib3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;$/;"	v
glad_glVertexAttrib3fv	support/glad/glad.c	/^PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = NULL;$/;"	v
glad_glVertexAttrib3fv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;$/;"	v
glad_glVertexAttrib3s	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;$/;"	v
glad_glVertexAttrib3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;$/;"	v
glad_glVertexAttrib3s	support/glad/glad.c	/^PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = NULL;$/;"	v
glad_glVertexAttrib3s	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;$/;"	v
glad_glVertexAttrib3sv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;$/;"	v
glad_glVertexAttrib3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;$/;"	v
glad_glVertexAttrib3sv	support/glad/glad.c	/^PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = NULL;$/;"	v
glad_glVertexAttrib3sv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;$/;"	v
glad_glVertexAttrib4Nbv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;$/;"	v
glad_glVertexAttrib4Nbv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;$/;"	v
glad_glVertexAttrib4Nbv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = NULL;$/;"	v
glad_glVertexAttrib4Nbv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;$/;"	v
glad_glVertexAttrib4Niv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;$/;"	v
glad_glVertexAttrib4Niv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;$/;"	v
glad_glVertexAttrib4Niv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = NULL;$/;"	v
glad_glVertexAttrib4Niv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;$/;"	v
glad_glVertexAttrib4Nsv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;$/;"	v
glad_glVertexAttrib4Nsv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;$/;"	v
glad_glVertexAttrib4Nsv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = NULL;$/;"	v
glad_glVertexAttrib4Nsv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;$/;"	v
glad_glVertexAttrib4Nub	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;$/;"	v
glad_glVertexAttrib4Nub	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;$/;"	v
glad_glVertexAttrib4Nub	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = NULL;$/;"	v
glad_glVertexAttrib4Nub	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;$/;"	v
glad_glVertexAttrib4Nubv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;$/;"	v
glad_glVertexAttrib4Nubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;$/;"	v
glad_glVertexAttrib4Nubv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = NULL;$/;"	v
glad_glVertexAttrib4Nubv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;$/;"	v
glad_glVertexAttrib4Nuiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;$/;"	v
glad_glVertexAttrib4Nuiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;$/;"	v
glad_glVertexAttrib4Nuiv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = NULL;$/;"	v
glad_glVertexAttrib4Nuiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;$/;"	v
glad_glVertexAttrib4Nusv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;$/;"	v
glad_glVertexAttrib4Nusv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;$/;"	v
glad_glVertexAttrib4Nusv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = NULL;$/;"	v
glad_glVertexAttrib4Nusv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;$/;"	v
glad_glVertexAttrib4bv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;$/;"	v
glad_glVertexAttrib4bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;$/;"	v
glad_glVertexAttrib4bv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = NULL;$/;"	v
glad_glVertexAttrib4bv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;$/;"	v
glad_glVertexAttrib4d	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;$/;"	v
glad_glVertexAttrib4d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;$/;"	v
glad_glVertexAttrib4d	support/glad/glad.c	/^PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = NULL;$/;"	v
glad_glVertexAttrib4d	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;$/;"	v
glad_glVertexAttrib4dv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;$/;"	v
glad_glVertexAttrib4dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;$/;"	v
glad_glVertexAttrib4dv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = NULL;$/;"	v
glad_glVertexAttrib4dv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;$/;"	v
glad_glVertexAttrib4f	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;$/;"	v
glad_glVertexAttrib4f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;$/;"	v
glad_glVertexAttrib4f	support/glad/glad.c	/^PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = NULL;$/;"	v
glad_glVertexAttrib4f	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;$/;"	v
glad_glVertexAttrib4fv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;$/;"	v
glad_glVertexAttrib4fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;$/;"	v
glad_glVertexAttrib4fv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = NULL;$/;"	v
glad_glVertexAttrib4fv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;$/;"	v
glad_glVertexAttrib4iv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;$/;"	v
glad_glVertexAttrib4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;$/;"	v
glad_glVertexAttrib4iv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = NULL;$/;"	v
glad_glVertexAttrib4iv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;$/;"	v
glad_glVertexAttrib4s	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;$/;"	v
glad_glVertexAttrib4s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;$/;"	v
glad_glVertexAttrib4s	support/glad/glad.c	/^PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = NULL;$/;"	v
glad_glVertexAttrib4s	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;$/;"	v
glad_glVertexAttrib4sv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;$/;"	v
glad_glVertexAttrib4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;$/;"	v
glad_glVertexAttrib4sv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = NULL;$/;"	v
glad_glVertexAttrib4sv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;$/;"	v
glad_glVertexAttrib4ubv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;$/;"	v
glad_glVertexAttrib4ubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;$/;"	v
glad_glVertexAttrib4ubv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = NULL;$/;"	v
glad_glVertexAttrib4ubv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;$/;"	v
glad_glVertexAttrib4uiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;$/;"	v
glad_glVertexAttrib4uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;$/;"	v
glad_glVertexAttrib4uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = NULL;$/;"	v
glad_glVertexAttrib4uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;$/;"	v
glad_glVertexAttrib4usv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;$/;"	v
glad_glVertexAttrib4usv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;$/;"	v
glad_glVertexAttrib4usv	support/glad/glad.c	/^PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = NULL;$/;"	v
glad_glVertexAttrib4usv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;$/;"	v
glad_glVertexAttribDivisor	support/glad/glad.c	/^PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = NULL;$/;"	v
glad_glVertexAttribDivisor	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;$/;"	v
glad_glVertexAttribI1i	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;$/;"	v
glad_glVertexAttribI1i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;$/;"	v
glad_glVertexAttribI1i	support/glad/glad.c	/^PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = NULL;$/;"	v
glad_glVertexAttribI1i	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;$/;"	v
glad_glVertexAttribI1iv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;$/;"	v
glad_glVertexAttribI1iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;$/;"	v
glad_glVertexAttribI1iv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = NULL;$/;"	v
glad_glVertexAttribI1iv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;$/;"	v
glad_glVertexAttribI1ui	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;$/;"	v
glad_glVertexAttribI1ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;$/;"	v
glad_glVertexAttribI1ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = NULL;$/;"	v
glad_glVertexAttribI1ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;$/;"	v
glad_glVertexAttribI1uiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;$/;"	v
glad_glVertexAttribI1uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;$/;"	v
glad_glVertexAttribI1uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = NULL;$/;"	v
glad_glVertexAttribI1uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;$/;"	v
glad_glVertexAttribI2i	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;$/;"	v
glad_glVertexAttribI2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;$/;"	v
glad_glVertexAttribI2i	support/glad/glad.c	/^PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = NULL;$/;"	v
glad_glVertexAttribI2i	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;$/;"	v
glad_glVertexAttribI2iv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;$/;"	v
glad_glVertexAttribI2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;$/;"	v
glad_glVertexAttribI2iv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = NULL;$/;"	v
glad_glVertexAttribI2iv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;$/;"	v
glad_glVertexAttribI2ui	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;$/;"	v
glad_glVertexAttribI2ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;$/;"	v
glad_glVertexAttribI2ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = NULL;$/;"	v
glad_glVertexAttribI2ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;$/;"	v
glad_glVertexAttribI2uiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;$/;"	v
glad_glVertexAttribI2uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;$/;"	v
glad_glVertexAttribI2uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = NULL;$/;"	v
glad_glVertexAttribI2uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;$/;"	v
glad_glVertexAttribI3i	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;$/;"	v
glad_glVertexAttribI3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;$/;"	v
glad_glVertexAttribI3i	support/glad/glad.c	/^PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = NULL;$/;"	v
glad_glVertexAttribI3i	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;$/;"	v
glad_glVertexAttribI3iv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;$/;"	v
glad_glVertexAttribI3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;$/;"	v
glad_glVertexAttribI3iv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = NULL;$/;"	v
glad_glVertexAttribI3iv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;$/;"	v
glad_glVertexAttribI3ui	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;$/;"	v
glad_glVertexAttribI3ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;$/;"	v
glad_glVertexAttribI3ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = NULL;$/;"	v
glad_glVertexAttribI3ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;$/;"	v
glad_glVertexAttribI3uiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;$/;"	v
glad_glVertexAttribI3uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;$/;"	v
glad_glVertexAttribI3uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = NULL;$/;"	v
glad_glVertexAttribI3uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;$/;"	v
glad_glVertexAttribI4bv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;$/;"	v
glad_glVertexAttribI4bv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;$/;"	v
glad_glVertexAttribI4bv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = NULL;$/;"	v
glad_glVertexAttribI4bv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;$/;"	v
glad_glVertexAttribI4i	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;$/;"	v
glad_glVertexAttribI4i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;$/;"	v
glad_glVertexAttribI4i	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = NULL;$/;"	v
glad_glVertexAttribI4i	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;$/;"	v
glad_glVertexAttribI4iv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;$/;"	v
glad_glVertexAttribI4iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;$/;"	v
glad_glVertexAttribI4iv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = NULL;$/;"	v
glad_glVertexAttribI4iv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;$/;"	v
glad_glVertexAttribI4sv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;$/;"	v
glad_glVertexAttribI4sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;$/;"	v
glad_glVertexAttribI4sv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = NULL;$/;"	v
glad_glVertexAttribI4sv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;$/;"	v
glad_glVertexAttribI4ubv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;$/;"	v
glad_glVertexAttribI4ubv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;$/;"	v
glad_glVertexAttribI4ubv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = NULL;$/;"	v
glad_glVertexAttribI4ubv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;$/;"	v
glad_glVertexAttribI4ui	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;$/;"	v
glad_glVertexAttribI4ui	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;$/;"	v
glad_glVertexAttribI4ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = NULL;$/;"	v
glad_glVertexAttribI4ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;$/;"	v
glad_glVertexAttribI4uiv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;$/;"	v
glad_glVertexAttribI4uiv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;$/;"	v
glad_glVertexAttribI4uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = NULL;$/;"	v
glad_glVertexAttribI4uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;$/;"	v
glad_glVertexAttribI4usv	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;$/;"	v
glad_glVertexAttribI4usv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;$/;"	v
glad_glVertexAttribI4usv	support/glad/glad.c	/^PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = NULL;$/;"	v
glad_glVertexAttribI4usv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;$/;"	v
glad_glVertexAttribIPointer	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;$/;"	v
glad_glVertexAttribIPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;$/;"	v
glad_glVertexAttribIPointer	support/glad/glad.c	/^PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = NULL;$/;"	v
glad_glVertexAttribIPointer	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;$/;"	v
glad_glVertexAttribP1ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = NULL;$/;"	v
glad_glVertexAttribP1ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;$/;"	v
glad_glVertexAttribP1uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = NULL;$/;"	v
glad_glVertexAttribP1uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;$/;"	v
glad_glVertexAttribP2ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = NULL;$/;"	v
glad_glVertexAttribP2ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;$/;"	v
glad_glVertexAttribP2uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = NULL;$/;"	v
glad_glVertexAttribP2uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;$/;"	v
glad_glVertexAttribP3ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = NULL;$/;"	v
glad_glVertexAttribP3ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;$/;"	v
glad_glVertexAttribP3uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = NULL;$/;"	v
glad_glVertexAttribP3uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;$/;"	v
glad_glVertexAttribP4ui	support/glad/glad.c	/^PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = NULL;$/;"	v
glad_glVertexAttribP4ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;$/;"	v
glad_glVertexAttribP4uiv	support/glad/glad.c	/^PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = NULL;$/;"	v
glad_glVertexAttribP4uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;$/;"	v
glad_glVertexAttribPointer	support/GLFW/deps/glad.c	/^PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;$/;"	v
glad_glVertexAttribPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;$/;"	v
glad_glVertexAttribPointer	support/glad/glad.c	/^PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = NULL;$/;"	v
glad_glVertexAttribPointer	support/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;$/;"	v
glad_glVertexP2ui	support/glad/glad.c	/^PFNGLVERTEXP2UIPROC glad_glVertexP2ui = NULL;$/;"	v
glad_glVertexP2ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXP2UIPROC glad_glVertexP2ui;$/;"	v
glad_glVertexP2uiv	support/glad/glad.c	/^PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv = NULL;$/;"	v
glad_glVertexP2uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;$/;"	v
glad_glVertexP3ui	support/glad/glad.c	/^PFNGLVERTEXP3UIPROC glad_glVertexP3ui = NULL;$/;"	v
glad_glVertexP3ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXP3UIPROC glad_glVertexP3ui;$/;"	v
glad_glVertexP3uiv	support/glad/glad.c	/^PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv = NULL;$/;"	v
glad_glVertexP3uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;$/;"	v
glad_glVertexP4ui	support/glad/glad.c	/^PFNGLVERTEXP4UIPROC glad_glVertexP4ui = NULL;$/;"	v
glad_glVertexP4ui	support/glad/glad.h	/^GLAPI PFNGLVERTEXP4UIPROC glad_glVertexP4ui;$/;"	v
glad_glVertexP4uiv	support/glad/glad.c	/^PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv = NULL;$/;"	v
glad_glVertexP4uiv	support/glad/glad.h	/^GLAPI PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;$/;"	v
glad_glVertexPointer	support/GLFW/deps/glad.c	/^PFNGLVERTEXPOINTERPROC glad_glVertexPointer;$/;"	v
glad_glVertexPointer	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVERTEXPOINTERPROC glad_glVertexPointer;$/;"	v
glad_glVertexPointer	support/glad/glad.c	/^PFNGLVERTEXPOINTERPROC glad_glVertexPointer = NULL;$/;"	v
glad_glVertexPointer	support/glad/glad.h	/^GLAPI PFNGLVERTEXPOINTERPROC glad_glVertexPointer;$/;"	v
glad_glViewport	support/GLFW/deps/glad.c	/^PFNGLVIEWPORTPROC glad_glViewport;$/;"	v
glad_glViewport	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLVIEWPORTPROC glad_glViewport;$/;"	v
glad_glViewport	support/glad/glad.c	/^PFNGLVIEWPORTPROC glad_glViewport = NULL;$/;"	v
glad_glViewport	support/glad/glad.h	/^GLAPI PFNGLVIEWPORTPROC glad_glViewport;$/;"	v
glad_glWaitSync	support/GLFW/deps/glad.c	/^PFNGLWAITSYNCPROC glad_glWaitSync;$/;"	v
glad_glWaitSync	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;$/;"	v
glad_glWaitSync	support/glad/glad.c	/^PFNGLWAITSYNCPROC glad_glWaitSync = NULL;$/;"	v
glad_glWaitSync	support/glad/glad.h	/^GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;$/;"	v
glad_glWindowPos2d	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;$/;"	v
glad_glWindowPos2d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;$/;"	v
glad_glWindowPos2d	support/glad/glad.c	/^PFNGLWINDOWPOS2DPROC glad_glWindowPos2d = NULL;$/;"	v
glad_glWindowPos2d	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;$/;"	v
glad_glWindowPos2dv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;$/;"	v
glad_glWindowPos2dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;$/;"	v
glad_glWindowPos2dv	support/glad/glad.c	/^PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv = NULL;$/;"	v
glad_glWindowPos2dv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;$/;"	v
glad_glWindowPos2f	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;$/;"	v
glad_glWindowPos2f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;$/;"	v
glad_glWindowPos2f	support/glad/glad.c	/^PFNGLWINDOWPOS2FPROC glad_glWindowPos2f = NULL;$/;"	v
glad_glWindowPos2f	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;$/;"	v
glad_glWindowPos2fv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;$/;"	v
glad_glWindowPos2fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;$/;"	v
glad_glWindowPos2fv	support/glad/glad.c	/^PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv = NULL;$/;"	v
glad_glWindowPos2fv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;$/;"	v
glad_glWindowPos2i	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;$/;"	v
glad_glWindowPos2i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;$/;"	v
glad_glWindowPos2i	support/glad/glad.c	/^PFNGLWINDOWPOS2IPROC glad_glWindowPos2i = NULL;$/;"	v
glad_glWindowPos2i	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;$/;"	v
glad_glWindowPos2iv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;$/;"	v
glad_glWindowPos2iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;$/;"	v
glad_glWindowPos2iv	support/glad/glad.c	/^PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv = NULL;$/;"	v
glad_glWindowPos2iv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;$/;"	v
glad_glWindowPos2s	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;$/;"	v
glad_glWindowPos2s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;$/;"	v
glad_glWindowPos2s	support/glad/glad.c	/^PFNGLWINDOWPOS2SPROC glad_glWindowPos2s = NULL;$/;"	v
glad_glWindowPos2s	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;$/;"	v
glad_glWindowPos2sv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;$/;"	v
glad_glWindowPos2sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;$/;"	v
glad_glWindowPos2sv	support/glad/glad.c	/^PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv = NULL;$/;"	v
glad_glWindowPos2sv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;$/;"	v
glad_glWindowPos3d	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;$/;"	v
glad_glWindowPos3d	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;$/;"	v
glad_glWindowPos3d	support/glad/glad.c	/^PFNGLWINDOWPOS3DPROC glad_glWindowPos3d = NULL;$/;"	v
glad_glWindowPos3d	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;$/;"	v
glad_glWindowPos3dv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;$/;"	v
glad_glWindowPos3dv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;$/;"	v
glad_glWindowPos3dv	support/glad/glad.c	/^PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv = NULL;$/;"	v
glad_glWindowPos3dv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;$/;"	v
glad_glWindowPos3f	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;$/;"	v
glad_glWindowPos3f	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;$/;"	v
glad_glWindowPos3f	support/glad/glad.c	/^PFNGLWINDOWPOS3FPROC glad_glWindowPos3f = NULL;$/;"	v
glad_glWindowPos3f	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;$/;"	v
glad_glWindowPos3fv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;$/;"	v
glad_glWindowPos3fv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;$/;"	v
glad_glWindowPos3fv	support/glad/glad.c	/^PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv = NULL;$/;"	v
glad_glWindowPos3fv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;$/;"	v
glad_glWindowPos3i	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;$/;"	v
glad_glWindowPos3i	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;$/;"	v
glad_glWindowPos3i	support/glad/glad.c	/^PFNGLWINDOWPOS3IPROC glad_glWindowPos3i = NULL;$/;"	v
glad_glWindowPos3i	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;$/;"	v
glad_glWindowPos3iv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;$/;"	v
glad_glWindowPos3iv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;$/;"	v
glad_glWindowPos3iv	support/glad/glad.c	/^PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv = NULL;$/;"	v
glad_glWindowPos3iv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;$/;"	v
glad_glWindowPos3s	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;$/;"	v
glad_glWindowPos3s	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;$/;"	v
glad_glWindowPos3s	support/glad/glad.c	/^PFNGLWINDOWPOS3SPROC glad_glWindowPos3s = NULL;$/;"	v
glad_glWindowPos3s	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;$/;"	v
glad_glWindowPos3sv	support/GLFW/deps/glad.c	/^PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;$/;"	v
glad_glWindowPos3sv	support/GLFW/deps/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;$/;"	v
glad_glWindowPos3sv	support/glad/glad.c	/^PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv = NULL;$/;"	v
glad_glWindowPos3sv	support/glad/glad.h	/^GLAPI PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;$/;"	v
glass	cuda/MaterialData.h	/^        Glass        glass;$/;"	m	union:MaterialData::__anon1
glfwCreateCursor	support/GLFW/src/input.c	/^GLFWAPI GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot)$/;"	f
glfwCreateStandardCursor	support/GLFW/src/input.c	/^GLFWAPI GLFWcursor* glfwCreateStandardCursor(int shape)$/;"	f
glfwCreateWindow	support/GLFW/src/window.c	/^GLFWAPI GLFWwindow* glfwCreateWindow(int width, int height,$/;"	f
glfwCreateWindowSurface	support/GLFW/src/vulkan.c	/^GLFWAPI VkResult glfwCreateWindowSurface(VkInstance instance,$/;"	f
glfwDefaultWindowHints	support/GLFW/src/window.c	/^void glfwDefaultWindowHints(void)$/;"	f
glfwDestroyCursor	support/GLFW/src/input.c	/^GLFWAPI void glfwDestroyCursor(GLFWcursor* handle)$/;"	f
glfwDestroyWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwDestroyWindow(GLFWwindow* handle)$/;"	f
glfwExtensionSupported	support/GLFW/src/context.c	/^GLFWAPI int glfwExtensionSupported(const char* extension)$/;"	f
glfwFocusWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwFocusWindow(GLFWwindow* handle)$/;"	f
glfwGetClipboardString	support/GLFW/src/input.c	/^GLFWAPI const char* glfwGetClipboardString(GLFWwindow* handle)$/;"	f
glfwGetCurrentContext	support/GLFW/src/context.c	/^GLFWAPI GLFWwindow* glfwGetCurrentContext(void)$/;"	f
glfwGetCursorPos	support/GLFW/src/input.c	/^GLFWAPI void glfwGetCursorPos(GLFWwindow* handle, double* xpos, double* ypos)$/;"	f
glfwGetEGLContext	support/GLFW/src/egl_context.c	/^GLFWAPI EGLContext glfwGetEGLContext(GLFWwindow* handle)$/;"	f
glfwGetEGLDisplay	support/GLFW/src/egl_context.c	/^GLFWAPI EGLDisplay glfwGetEGLDisplay(void)$/;"	f
glfwGetEGLSurface	support/GLFW/src/egl_context.c	/^GLFWAPI EGLSurface glfwGetEGLSurface(GLFWwindow* handle)$/;"	f
glfwGetFramebufferSize	support/GLFW/src/window.c	/^GLFWAPI void glfwGetFramebufferSize(GLFWwindow* handle, int* width, int* height)$/;"	f
glfwGetGLXContext	support/GLFW/src/glx_context.c	/^GLFWAPI GLXContext glfwGetGLXContext(GLFWwindow* handle)$/;"	f
glfwGetGLXWindow	support/GLFW/src/glx_context.c	/^GLFWAPI GLXWindow glfwGetGLXWindow(GLFWwindow* handle)$/;"	f
glfwGetGammaRamp	support/GLFW/src/monitor.c	/^GLFWAPI const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* handle)$/;"	f
glfwGetInputMode	support/GLFW/src/input.c	/^GLFWAPI int glfwGetInputMode(GLFWwindow* handle, int mode)$/;"	f
glfwGetInstanceProcAddress	support/GLFW/src/vulkan.c	/^GLFWAPI GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance,$/;"	f
glfwGetJoystickAxes	support/GLFW/src/input.c	/^GLFWAPI const float* glfwGetJoystickAxes(int joy, int* count)$/;"	f
glfwGetJoystickButtons	support/GLFW/src/input.c	/^GLFWAPI const unsigned char* glfwGetJoystickButtons(int joy, int* count)$/;"	f
glfwGetJoystickName	support/GLFW/src/input.c	/^GLFWAPI const char* glfwGetJoystickName(int joy)$/;"	f
glfwGetKey	support/GLFW/src/input.c	/^GLFWAPI int glfwGetKey(GLFWwindow* handle, int key)$/;"	f
glfwGetKeyName	support/GLFW/src/input.c	/^GLFWAPI const char* glfwGetKeyName(int key, int scancode)$/;"	f
glfwGetMirDisplay	support/GLFW/src/mir_window.c	/^GLFWAPI MirConnection* glfwGetMirDisplay(void)$/;"	f
glfwGetMirMonitor	support/GLFW/src/mir_monitor.c	/^GLFWAPI int glfwGetMirMonitor(GLFWmonitor* handle)$/;"	f
glfwGetMirWindow	support/GLFW/src/mir_window.c	/^GLFWAPI MirSurface* glfwGetMirWindow(GLFWwindow* handle)$/;"	f
glfwGetMonitorName	support/GLFW/src/monitor.c	/^GLFWAPI const char* glfwGetMonitorName(GLFWmonitor* handle)$/;"	f
glfwGetMonitorPhysicalSize	support/GLFW/src/monitor.c	/^GLFWAPI void glfwGetMonitorPhysicalSize(GLFWmonitor* handle, int* widthMM, int* heightMM)$/;"	f
glfwGetMonitorPos	support/GLFW/src/monitor.c	/^GLFWAPI void glfwGetMonitorPos(GLFWmonitor* handle, int* xpos, int* ypos)$/;"	f
glfwGetMonitors	support/GLFW/src/monitor.c	/^GLFWAPI GLFWmonitor** glfwGetMonitors(int* count)$/;"	f
glfwGetMouseButton	support/GLFW/src/input.c	/^GLFWAPI int glfwGetMouseButton(GLFWwindow* handle, int button)$/;"	f
glfwGetPhysicalDevicePresentationSupport	support/GLFW/src/vulkan.c	/^GLFWAPI int glfwGetPhysicalDevicePresentationSupport(VkInstance instance,$/;"	f
glfwGetPrimaryMonitor	support/GLFW/src/monitor.c	/^GLFWAPI GLFWmonitor* glfwGetPrimaryMonitor(void)$/;"	f
glfwGetProcAddress	support/GLFW/src/context.c	/^GLFWAPI GLFWglproc glfwGetProcAddress(const char* procname)$/;"	f
glfwGetRequiredInstanceExtensions	support/GLFW/src/vulkan.c	/^GLFWAPI const char** glfwGetRequiredInstanceExtensions(uint32_t* count)$/;"	f
glfwGetTime	support/GLFW/src/input.c	/^GLFWAPI double glfwGetTime(void)$/;"	f
glfwGetTimerFrequency	support/GLFW/src/input.c	/^GLFWAPI uint64_t glfwGetTimerFrequency(void)$/;"	f
glfwGetTimerValue	support/GLFW/src/input.c	/^GLFWAPI uint64_t glfwGetTimerValue(void)$/;"	f
glfwGetVersion	support/GLFW/src/init.c	/^GLFWAPI void glfwGetVersion(int* major, int* minor, int* rev)$/;"	f
glfwGetVersionString	support/GLFW/src/init.c	/^GLFWAPI const char* glfwGetVersionString(void)$/;"	f
glfwGetVideoMode	support/GLFW/src/monitor.c	/^GLFWAPI const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* handle)$/;"	f
glfwGetVideoModes	support/GLFW/src/monitor.c	/^GLFWAPI const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* handle, int* count)$/;"	f
glfwGetWGLContext	support/GLFW/src/wgl_context.c	/^GLFWAPI HGLRC glfwGetWGLContext(GLFWwindow* handle)$/;"	f
glfwGetWaylandDisplay	support/GLFW/src/wl_window.c	/^GLFWAPI struct wl_display* glfwGetWaylandDisplay(void)$/;"	f
glfwGetWaylandMonitor	support/GLFW/src/wl_monitor.c	/^GLFWAPI struct wl_output* glfwGetWaylandMonitor(GLFWmonitor* handle)$/;"	f
glfwGetWaylandWindow	support/GLFW/src/wl_window.c	/^GLFWAPI struct wl_surface* glfwGetWaylandWindow(GLFWwindow* handle)$/;"	f
glfwGetWin32Adapter	support/GLFW/src/win32_monitor.c	/^GLFWAPI const char* glfwGetWin32Adapter(GLFWmonitor* handle)$/;"	f
glfwGetWin32Monitor	support/GLFW/src/win32_monitor.c	/^GLFWAPI const char* glfwGetWin32Monitor(GLFWmonitor* handle)$/;"	f
glfwGetWin32Window	support/GLFW/src/win32_window.c	/^GLFWAPI HWND glfwGetWin32Window(GLFWwindow* handle)$/;"	f
glfwGetWindowAttrib	support/GLFW/src/window.c	/^GLFWAPI int glfwGetWindowAttrib(GLFWwindow* handle, int attrib)$/;"	f
glfwGetWindowFrameSize	support/GLFW/src/window.c	/^GLFWAPI void glfwGetWindowFrameSize(GLFWwindow* handle,$/;"	f
glfwGetWindowMonitor	support/GLFW/src/window.c	/^GLFWAPI GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* handle)$/;"	f
glfwGetWindowPos	support/GLFW/src/window.c	/^GLFWAPI void glfwGetWindowPos(GLFWwindow* handle, int* xpos, int* ypos)$/;"	f
glfwGetWindowSize	support/GLFW/src/window.c	/^GLFWAPI void glfwGetWindowSize(GLFWwindow* handle, int* width, int* height)$/;"	f
glfwGetWindowUserPointer	support/GLFW/src/window.c	/^GLFWAPI void* glfwGetWindowUserPointer(GLFWwindow* handle)$/;"	f
glfwGetX11Adapter	support/GLFW/src/x11_monitor.c	/^GLFWAPI RRCrtc glfwGetX11Adapter(GLFWmonitor* handle)$/;"	f
glfwGetX11Display	support/GLFW/src/x11_window.c	/^GLFWAPI Display* glfwGetX11Display(void)$/;"	f
glfwGetX11Monitor	support/GLFW/src/x11_monitor.c	/^GLFWAPI RROutput glfwGetX11Monitor(GLFWmonitor* handle)$/;"	f
glfwGetX11Window	support/GLFW/src/x11_window.c	/^GLFWAPI Window glfwGetX11Window(GLFWwindow* handle)$/;"	f
glfwHideWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwHideWindow(GLFWwindow* handle)$/;"	f
glfwIconifyWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwIconifyWindow(GLFWwindow* handle)$/;"	f
glfwInit	support/GLFW/src/init.c	/^GLFWAPI int glfwInit(void)$/;"	f
glfwJoystickPresent	support/GLFW/src/input.c	/^GLFWAPI int glfwJoystickPresent(int joy)$/;"	f
glfwMakeContextCurrent	support/GLFW/src/context.c	/^GLFWAPI void glfwMakeContextCurrent(GLFWwindow* handle)$/;"	f
glfwMaximizeWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwMaximizeWindow(GLFWwindow* handle)$/;"	f
glfwPollEvents	support/GLFW/src/window.c	/^GLFWAPI void glfwPollEvents(void)$/;"	f
glfwPostEmptyEvent	support/GLFW/src/window.c	/^GLFWAPI void glfwPostEmptyEvent(void)$/;"	f
glfwRestoreWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwRestoreWindow(GLFWwindow* handle)$/;"	f
glfwSetCharCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWcharfun glfwSetCharCallback(GLFWwindow* handle, GLFWcharfun cbfun)$/;"	f
glfwSetCharModsCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* handle, GLFWcharmodsfun cbfun)$/;"	f
glfwSetClipboardString	support/GLFW/src/input.c	/^GLFWAPI void glfwSetClipboardString(GLFWwindow* handle, const char* string)$/;"	f
glfwSetCursor	support/GLFW/src/input.c	/^GLFWAPI void glfwSetCursor(GLFWwindow* windowHandle, GLFWcursor* cursorHandle)$/;"	f
glfwSetCursorEnterCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* handle,$/;"	f
glfwSetCursorPos	support/GLFW/src/input.c	/^GLFWAPI void glfwSetCursorPos(GLFWwindow* handle, double xpos, double ypos)$/;"	f
glfwSetCursorPosCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* handle,$/;"	f
glfwSetDropCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWdropfun glfwSetDropCallback(GLFWwindow* handle, GLFWdropfun cbfun)$/;"	f
glfwSetErrorCallback	support/GLFW/src/init.c	/^GLFWAPI GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun)$/;"	f
glfwSetFramebufferSizeCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* handle,$/;"	f
glfwSetGamma	support/GLFW/src/monitor.c	/^GLFWAPI void glfwSetGamma(GLFWmonitor* handle, float gamma)$/;"	f
glfwSetGammaRamp	support/GLFW/src/monitor.c	/^GLFWAPI void glfwSetGammaRamp(GLFWmonitor* handle, const GLFWgammaramp* ramp)$/;"	f
glfwSetInputMode	support/GLFW/src/input.c	/^GLFWAPI void glfwSetInputMode(GLFWwindow* handle, int mode, int value)$/;"	f
glfwSetJoystickCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun)$/;"	f
glfwSetKeyCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWkeyfun glfwSetKeyCallback(GLFWwindow* handle, GLFWkeyfun cbfun)$/;"	f
glfwSetMonitorCallback	support/GLFW/src/monitor.c	/^GLFWAPI GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun)$/;"	f
glfwSetMouseButtonCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* handle,$/;"	f
glfwSetScrollCallback	support/GLFW/src/input.c	/^GLFWAPI GLFWscrollfun glfwSetScrollCallback(GLFWwindow* handle,$/;"	f
glfwSetTime	support/GLFW/src/input.c	/^GLFWAPI void glfwSetTime(double time)$/;"	f
glfwSetWindowAspectRatio	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowAspectRatio(GLFWwindow* handle, int numer, int denom)$/;"	f
glfwSetWindowCloseCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowFocusCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowIcon	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowIcon(GLFWwindow* handle,$/;"	f
glfwSetWindowIconifyCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowMonitor	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowMonitor(GLFWwindow* wh,$/;"	f
glfwSetWindowPos	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowPos(GLFWwindow* handle, int xpos, int ypos)$/;"	f
glfwSetWindowPosCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowRefreshCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowShouldClose	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowShouldClose(GLFWwindow* handle, int value)$/;"	f
glfwSetWindowSize	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowSize(GLFWwindow* handle, int width, int height)$/;"	f
glfwSetWindowSizeCallback	support/GLFW/src/window.c	/^GLFWAPI GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* handle,$/;"	f
glfwSetWindowSizeLimits	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowSizeLimits(GLFWwindow* handle,$/;"	f
glfwSetWindowTitle	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowTitle(GLFWwindow* handle, const char* title)$/;"	f
glfwSetWindowUserPointer	support/GLFW/src/window.c	/^GLFWAPI void glfwSetWindowUserPointer(GLFWwindow* handle, void* pointer)$/;"	f
glfwShowWindow	support/GLFW/src/window.c	/^GLFWAPI void glfwShowWindow(GLFWwindow* handle)$/;"	f
glfwSwapBuffers	support/GLFW/src/context.c	/^GLFWAPI void glfwSwapBuffers(GLFWwindow* handle)$/;"	f
glfwSwapInterval	support/GLFW/src/context.c	/^GLFWAPI void glfwSwapInterval(int interval)$/;"	f
glfwTerminate	support/GLFW/src/init.c	/^GLFWAPI void glfwTerminate(void)$/;"	f
glfwVulkanSupported	support/GLFW/src/vulkan.c	/^GLFWAPI int glfwVulkanSupported(void)$/;"	f
glfwWaitEvents	support/GLFW/src/window.c	/^GLFWAPI void glfwWaitEvents(void)$/;"	f
glfwWaitEventsTimeout	support/GLFW/src/window.c	/^GLFWAPI void glfwWaitEventsTimeout(double timeout)$/;"	f
glfwWindowHint	support/GLFW/src/window.c	/^GLFWAPI void glfwWindowHint(int hint, int value)$/;"	f
glfwWindowShouldClose	support/GLFW/src/window.c	/^GLFWAPI int glfwWindowShouldClose(GLFWwindow* handle)$/;"	f
globalAlpha	support/GLFW/deps/vulkan/vulkan.h	/^    float                             globalAlpha;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
glyf	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
gpos	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
green	support/GLFW/include/GLFW/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp
greenBits	support/GLFW/include/GLFW/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode
greenBits	support/GLFW/src/internal.h	/^    int         greenBits;$/;"	m	struct:_GLFWfbconfig
grid	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const GridT& grid() const { return *reinterpret_cast<const GridT*>(this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
grid	optixVolumeViewer/nanovdb/util/GridHandle.h	/^inline NanoGrid<ValueT>* GridHandle<BufferT>::grid()$/;"	f	class:nanovdb::GridHandle
grid	optixVolumeViewer/nanovdb/util/GridHandle.h	/^inline const NanoGrid<ValueT>* GridHandle<BufferT>::grid() const$/;"	f	class:nanovdb::GridHandle
grid	optixVolumeViewer/volume.h	/^        void* grid;$/;"	m	struct:GeometryData::Volume
gridClass	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ GridClass   gridClass() const { return this->grid().gridClass(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
gridClass	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const GridClass& gridClass() const { return DataType::mGridClass; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
gridClass	optixVolumeViewer/nanovdb/util/IO.h	/^    GridClass   gridClass; \/\/ 4B.$/;"	m	struct:nanovdb::io::Codec::MetaData
gridCount	optixVolumeViewer/nanovdb/util/IO.h	/^    uint16_t gridCount; \/\/ 2 bytes$/;"	m	struct:nanovdb::io::Codec::Header
gridMetaData	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    const GridMetaData* gridMetaData() const { return reinterpret_cast<const GridMetaData*>(data()); }$/;"	f	class:nanovdb::GridHandleBase
gridName	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const char* gridName() const { return DataType::mGridName; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
gridName	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const char* gridName() const { return this->grid().gridName(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
gridName	optixVolumeViewer/nanovdb/util/IO.h	/^    , gridName(grid.gridName())$/;"	f	class:nanovdb::io::Codec
gridName	optixVolumeViewer/nanovdb/util/IO.h	/^    std::string gridName;$/;"	m	struct:nanovdb::io::Codec::GridMetaData
gridPoints	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t gridPoints(const AttT*& begin, const AttT*& end) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
gridSize	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t    gridSize, fileSize, nameKey, voxelCount; \/\/ 4 * 8 = 32B.$/;"	m	struct:nanovdb::io::Codec::MetaData
gridType	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ GridType    gridType() const { return this->grid().gridType(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
gridType	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const GridType& gridType() const { return DataType::mGridType; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
gridType	optixVolumeViewer/nanovdb/util/IO.h	/^    GridType    gridType; \/\/ 4B.$/;"	m	struct:nanovdb::io::Codec::MetaData
grisu2	support/tinygltf/json.hpp	/^inline void grisu2(char* buf, int& len, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl
grisu2	support/tinygltf/json.hpp	/^void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl
grisu2_digit_gen	support/tinygltf/json.hpp	/^inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl
grisu2_round	support/tinygltf/json.hpp	/^inline void grisu2_round(char* buf, int len, uint64_t dist, uint64_t delta,$/;"	f	namespace:nlohmann::detail::dtoa_impl
group_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*group_cb)(void *user_data, const char **names, int num_names);$/;"	m	struct:tinyobj::callback_t
gsubrs	support/imgui/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo
guid	support/GLFW/deps/mingw/dinput.h	/^	GUID			guid;$/;"	m	struct:DIEFFECTINFOA
guid	support/GLFW/deps/mingw/dinput.h	/^	GUID			guid;$/;"	m	struct:DIEFFECTINFOW
guid	support/GLFW/src/win32_joystick.h	/^    GUID                    guid;$/;"	m	struct:_GLFWjoystickWin32
guidActionMap	support/GLFW/deps/mingw/dinput.h	/^	GUID		guidActionMap;$/;"	m	struct:_DIACTIONFORMATA
guidActionMap	support/GLFW/deps/mingw/dinput.h	/^	GUID		guidActionMap;$/;"	m	struct:_DIACTIONFORMATW
guidClass	support/GLFW/deps/mingw/dinput.h	/^	GUID    guidClass;$/;"	m	struct:DIPROPGUIDANDPATH
guidFFDriver	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidFFDriver;$/;"	m	struct:DIDEVICEINSTANCEA
guidFFDriver	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidFFDriver;$/;"	m	struct:DIDEVICEINSTANCEW
guidInstance	support/GLFW/deps/mingw/dinput.h	/^	GUID		guidInstance;$/;"	m	struct:_DIACTIONA
guidInstance	support/GLFW/deps/mingw/dinput.h	/^	GUID		guidInstance;$/;"	m	struct:_DIACTIONW
guidInstance	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidInstance;$/;"	m	struct:DIDEVICEINSTANCEA
guidInstance	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidInstance;$/;"	m	struct:DIDEVICEINSTANCEW
guidInstance	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidInstance;$/;"	m	struct:DIDEVICEINSTANCE_DX3A
guidInstance	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidInstance;$/;"	m	struct:DIDEVICEINSTANCE_DX3W
guidProduct	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidProduct;$/;"	m	struct:DIDEVICEINSTANCEA
guidProduct	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidProduct;$/;"	m	struct:DIDEVICEINSTANCEW
guidProduct	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidProduct;$/;"	m	struct:DIDEVICEINSTANCE_DX3A
guidProduct	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidProduct;$/;"	m	struct:DIDEVICEINSTANCE_DX3W
guidType	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidType;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
guidType	support/GLFW/deps/mingw/dinput.h	/^    GUID	guidType;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
guidType	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidType;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
guidType	support/GLFW/deps/mingw/dinput.h	/^    GUID    guidType;$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
h	support/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
h	support/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	support/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon71
h	support/tinygltf/stb_image.h	/^      int h,v;$/;"	m	struct:__anon99::__anon100
h	support/tinygltf/stb_image.h	/^   int w,h;$/;"	m	struct:__anon110
h2	support/tinygltf/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon99::__anon100
hHairGAS	optixHair/optixHair.h	/^    OptixTraversableHandle hHairGAS            = 0;$/;"	m	struct:HairState
hIAS	optixHair/optixHair.h	/^    OptixTraversableHandle hIAS            = 0;$/;"	m	struct:HairState
hInstString	support/GLFW/deps/mingw/dinput.h	/^	HINSTANCE	hInstString;$/;"	m	struct:_DIACTIONFORMATA
hInstString	support/GLFW/deps/mingw/dinput.h	/^	HINSTANCE	hInstString;$/;"	m	struct:_DIACTIONFORMATW
hPrivData	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFPrivDataHandle              hPrivData;                        \/**< [in]: Optical flow private data. It is reserved field and should be set to NULL. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
hPrivData	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFPrivDataHandle              hPrivData;                       \/**< [in]: Optical flow private data handle. It is reserved field and should be set to NULL. *\/$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
hPrivData	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFPrivDataHandle             hPrivData;                        \/**< [in]: Optical flow private data handle. It is reserved field and should be set to NULL. *\/$/;"	m	struct:_NV_OF_EXECUTE_OUTPUT_PARAMS
h_oversample	support/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon68
h_oversample	support/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
ha	support/tinygltf/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon99::__anon100
hairSbtHitRecords	optixHair/optixHair.cpp	/^std::vector<HitRecord> hairSbtHitRecords( HairState* pState, const ProgramGroups& programs )$/;"	f
halfArea	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::halfArea() const$/;"	f	class:sutil::Aabb
half_to_float	support/tinyexr/tinyexr.h	/^static FP32 half_to_float(FP16 h) {$/;"	f	namespace:tinyexr
handle	cuda/whitted.h	/^    OptixTraversableHandle   handle;$/;"	m	struct:whitted::LaunchParams
handle	optixBoundValues/optixBoundValues.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixCurves/optixCurves.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixCustomPrimitive/optixCustomPrimitive.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixCutouts/optixCutouts.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixTraversableHandle handle;$/;"	m	struct:AS	file:
handle	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Globals
handle	optixDynamicGeometry/optixDynamicGeometry.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixDynamicMaterials/optixDynamicMaterials.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixMotionGeometry/optixMotionGeometry.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixMultiGPU/optixMultiGPU.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixNVLink/optixNVLink.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixOpacityMicromap/optixOpacityMicromap.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixPathTracer/optixPathTracer.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixRaycasting/optixRaycasting.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixRibbons/optixRibbons.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixSphere/optixSphere.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixTriangle/optixTriangle.h	/^    OptixTraversableHandle handle;$/;"	m	struct:Params
handle	optixVolumeViewer/optixVolumeViewer.h	/^	OptixTraversableHandle handle = 0;$/;"	m	struct:VolumeAccel
handle	optixVolumeViewer/optixVolumeViewer.h	/^    OptixTraversableHandle handle          = 0;$/;"	m	struct:IAS
handle	optixVolumeViewer/optixVolumeViewer.h	/^    OptixTraversableHandle handle   = 0;$/;"	m	struct:CubeAccel
handle	optixVolumeViewer/optixVolumeViewer.h	/^    OptixTraversableHandle handle   = 0;$/;"	m	struct:PlaneAccel
handle	optixVolumeViewer/optixVolumeViewer.h	/^    nanovdb::GridHandle<> handle;$/;"	m	struct:Volume
handle	optixVolumeViewer/volume.h	/^    OptixTraversableHandle   handle;$/;"	m	struct:LaunchParams
handle	support/GLFW/src/egl_context.h	/^    void*           handle;$/;"	m	struct:_GLFWlibraryEGL
handle	support/GLFW/src/egl_context.h	/^   EGLContext       handle;$/;"	m	struct:_GLFWcontextEGL
handle	support/GLFW/src/glx_context.h	/^    GLXContext      handle;$/;"	m	struct:_GLFWcontextGLX
handle	support/GLFW/src/glx_context.h	/^    void*           handle;$/;"	m	struct:_GLFWlibraryGLX
handle	support/GLFW/src/internal.h	/^        void*           handle;$/;"	m	struct:_GLFWlibrary::__anon10
handle	support/GLFW/src/internal.h	/^    uintptr_t   handle;$/;"	m	struct:_GLFWfbconfig
handle	support/GLFW/src/wgl_context.h	/^    HGLRC     handle;$/;"	m	struct:_GLFWcontextWGL
handle	support/GLFW/src/win32_platform.h	/^    HCURSOR handle;$/;"	m	struct:_GLFWcursorWin32
handle	support/GLFW/src/win32_platform.h	/^    HWND                handle;$/;"	m	struct:_GLFWwindowWin32
handle	support/GLFW/src/x11_platform.h	/^        void*       handle;$/;"	m	struct:_GLFWlibraryX11::__anon25
handle	support/GLFW/src/x11_platform.h	/^    Cursor handle;$/;"	m	struct:_GLFWcursorX11
handle	support/GLFW/src/x11_platform.h	/^    Window          handle;$/;"	m	struct:_GLFWwindowX11
handleCameraUpdate	optixBoundValues/optixBoundValues.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixCallablePrograms/optixCallablePrograms.cpp	/^void handleCameraUpdate( CallableProgramsState& state )$/;"	f
handleCameraUpdate	optixCutouts/optixCutouts.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void handleCameraUpdate( DisplacedMicromeshState& state )$/;"	f
handleCameraUpdate	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixMeshViewer/optixMeshViewer.cpp	/^void handleCameraUpdate( whitted::LaunchParams& params )$/;"	f
handleCameraUpdate	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixMotionGeometry/optixMotionGeometry.cpp	/^void handleCameraUpdate( MotionGeometryState& state )$/;"	f
handleCameraUpdate	optixMultiGPU/optixMultiGPU.cpp	/^void handleCameraUpdate( std::vector<PathTracerState>& states )$/;"	f
handleCameraUpdate	optixNVLink/optixNVLink.cpp	/^void handleCameraUpdate( std::vector<PerDeviceSampleState>& pd_states )$/;"	f
handleCameraUpdate	optixPathTracer/optixPathTracer.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void handleCameraUpdate( Params& params )$/;"	f
handleCameraUpdate	optixVolumeViewer/optixVolumeViewer.cpp	/^void handleCameraUpdate( LaunchParams& params )$/;"	f
handleCameraUpdate	optixWhitted/optixWhitted.cpp	/^void handleCameraUpdate( WhittedState &state )$/;"	f
handleConfigure	support/GLFW/src/wl_window.c	/^static void handleConfigure(void* data,$/;"	f	file:
handleEnter	support/GLFW/src/wl_window.c	/^static void handleEnter(void *data,$/;"	f	file:
handleEvent	support/GLFW/src/mir_window.c	/^static void handleEvent(const MirEvent* event, _GLFWwindow* window)$/;"	f	file:
handleEvents	support/GLFW/src/wl_window.c	/^handleEvents(int timeout)$/;"	f	file:
handleIASUpdate	optixVolumeViewer/optixVolumeViewer.cpp	/^void handleIASUpdate()$/;"	f
handleInput	support/GLFW/src/mir_window.c	/^static void handleInput(const MirInputEvent* input_event, _GLFWwindow* window)$/;"	f	file:
handleKeyEvent	support/GLFW/src/mir_window.c	/^static void handleKeyEvent(const MirKeyboardEvent* key_event, _GLFWwindow* window)$/;"	f	file:
handleLeave	support/GLFW/src/wl_window.c	/^static void handleLeave(void *data,$/;"	f	file:
handleLocked	support/GLFW/src/wl_window.c	/^static void handleLocked(void* data,$/;"	f	file:
handlePing	support/GLFW/src/wl_window.c	/^static void handlePing(void* data,$/;"	f	file:
handlePointerButton	support/GLFW/src/mir_window.c	/^static void handlePointerButton(_GLFWwindow* window,$/;"	f	file:
handlePointerEvent	support/GLFW/src/mir_window.c	/^static void handlePointerEvent(const MirPointerEvent* pointer_event,$/;"	f	file:
handlePointerMotion	support/GLFW/src/mir_window.c	/^static void handlePointerMotion(_GLFWwindow* window,$/;"	f	file:
handlePopupDone	support/GLFW/src/wl_window.c	/^static void handlePopupDone(void* data,$/;"	f	file:
handleRelativeMotion	support/GLFW/src/wl_window.c	/^static void handleRelativeMotion(void* data,$/;"	f	file:
handleResize	optixBoundValues/optixBoundValues.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixCallablePrograms/optixCallablePrograms.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, whitted::LaunchParams& params )$/;"	f
handleResize	optixCutouts/optixCutouts.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void handleResize( DisplacedMicromeshState& state, sutil::CUDAOutputBuffer<uchar4>& output_buffer )$/;"	f
handleResize	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixMeshViewer/optixMeshViewer.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer )$/;"	f
handleResize	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixMotionGeometry/optixMotionGeometry.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixMultiGPU/optixMultiGPU.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PathTracerState>& states )$/;"	f
handleResize	optixNVLink/optixNVLink.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PerDeviceSampleState>& pd_states )$/;"	f
handleResize	optixPathTracer/optixPathTracer.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
handleResize	optixVolumeViewer/optixVolumeViewer.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer )$/;"	f
handleResize	optixWhitted/optixWhitted.cpp	/^void handleResize( sutil::CUDAOutputBuffer<uchar4>& output_buffer, whitted::LaunchParams& params )$/;"	f
handleSelectionClear	support/GLFW/src/x11_window.c	/^static void handleSelectionClear(XEvent* event)$/;"	f	file:
handleSelectionRequest	support/GLFW/src/x11_window.c	/^static void handleSelectionRequest(XEvent* event)$/;"	f	file:
handleShading	optixCallablePrograms/optixCallablePrograms.cpp	/^void handleShading( CallableProgramsState& state )$/;"	f
handleUnlocked	support/GLFW/src/wl_window.c	/^static void handleUnlocked(void* data,$/;"	f	file:
handle_value	support/tinygltf/json.hpp	/^    BasicJsonType* handle_value(Value&& v)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
handle_value	support/tinygltf/json.hpp	/^    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
hasAlpha	optixHair/Hair.cpp	/^bool Hair::hasAlpha() const$/;"	f	class:Hair
hasAverage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             hasAverage() const { return DataType::mFlags & static_cast<uint32_t>(GridFlags::HasAverage); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
hasBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             hasBBox() const { return DataType::mFlags & static_cast<uint32_t>(GridFlags::HasBBox); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
hasColor	optixHair/Hair.cpp	/^bool Hair::hasColor() const$/;"	f	class:Hair
hasDeviceDual	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    static const bool hasDeviceDual = false;$/;"	m	struct:nanovdb::BufferTraits
hasGrid	optixVolumeViewer/nanovdb/util/IO.h	/^inline bool hasGrid(const std::string& fileName, const std::string& gridName)$/;"	f	class:nanovdb::io::Codec
hasGrid	optixVolumeViewer/nanovdb/util/IO.h	/^inline bool hasGrid(std::istream& is, const std::string& gridName)$/;"	f	class:nanovdb::io::Codec
hasMinMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             hasMinMax() const { return DataType::mFlags & static_cast<uint32_t>(GridFlags::HasMinMax); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
hasPC	support/GLFW/src/win32_platform.h	/^    GLFWbool            hasPC;$/;"	m	struct:_GLFWtimeWin32
hasPoints	optixHair/Hair.cpp	/^bool Hair::hasPoints() const$/;"	f	class:Hair
hasSegments	optixHair/Hair.cpp	/^bool Hair::hasSegments() const$/;"	f	class:Hair
hasStdDeviation	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             hasStdDeviation() const { return DataType::mFlags & static_cast<uint32_t>(GridFlags::HasStdDeviation); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
hasThickness	optixHair/Hair.cpp	/^bool Hair::hasThickness() const$/;"	f	class:Hair
hasTrunctedGridName	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             hasTrunctedGridName() const { return DataType::mFlags & static_cast<uint32_t>(GridFlags::HasTruncatedGridname); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
hasUsableInputMethodStyle	support/GLFW/src/x11_init.c	/^static GLFWbool hasUsableInputMethodStyle(void)$/;"	f	file:
has_arg	support/GLFW/deps/getopt.h	/^  int has_arg;$/;"	m	struct:option
has_ext	support/GLFW/deps/glad.c	/^static int has_ext(const char *ext) {$/;"	f	file:
has_ext	support/glad/glad.c	/^static int has_ext(const char *ext) {$/;"	f	file:
has_from_json	support/tinygltf/json.hpp	/^struct has_from_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_from_json	support/tinygltf/json.hpp	/^struct has_from_json<BasicJsonType, T,$/;"	s	namespace:nlohmann::detail
has_non_default_from_json	support/tinygltf/json.hpp	/^struct has_non_default_from_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_non_default_from_json	support/tinygltf/json.hpp	/^struct has_non_default_from_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>$/;"	s	namespace:nlohmann::detail
has_number_value	support/tinygltf/tiny_gltf.h	/^  bool has_number_value = false;$/;"	m	struct:tinygltf::Parameter
has_preferred_x	support/imgui/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon84
has_to_json	support/tinygltf/json.hpp	/^struct has_to_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_to_json	support/tinygltf/json.hpp	/^struct has_to_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>$/;"	s	namespace:nlohmann::detail
hash	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t hash() const { return ((1 << Log2N) - 1) & (mVec[0] * 73856093 ^ mVec[1] * 19349663 ^ mVec[2] * 83492791); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
hash	support/tinygltf/json.hpp	/^struct hash<nlohmann::json>$/;"	s	namespace:std
hatElements	support/GLFW/src/cocoa_joystick.h	/^    CFMutableArrayRef hatElements;$/;"	m	struct:_GLFWjoystickNS
hd	support/tinygltf/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon99::__anon100
head	support/GLFW/src/mir_platform.h	/^    TAILQ_HEAD(, EventNode) head;$/;"	m	struct:EventQueue
head	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	support/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
header	optixBoundValues/optixBoundValues.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixCallablePrograms/optixCallablePrograms.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixCurves/optixCurves.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixCustomPrimitive/optixCustomPrimitive.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixCutouts/optixCutouts.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixHello/optixHello.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixMotionGeometry/optixMotionGeometry.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixMultiGPU/optixMultiGPU.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixNVLink/optixNVLink.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixOpacityMicromap/optixOpacityMicromap.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixPathTracer/optixPathTracer.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixRibbons/optixRibbons.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:Record	file:
header	optixSphere/optixSphere.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixTriangle/optixTriangle.cpp	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:SbtRecord	file:
header	optixVolumeViewer/nanovdb/util/IO.h	/^    Header                    header;$/;"	m	struct:nanovdb::io::Codec::Segment
header	sutil/Record.h	/^    __align__( OPTIX_SBT_RECORD_ALIGNMENT ) char header[OPTIX_SBT_RECORD_HEADER_SIZE];$/;"	m	struct:sutil::Record
header_len	support/tinyexr/tinyexr.h	/^  unsigned int header_len;$/;"	m	struct:_EXRHeader
header_len	support/tinyexr/tinyexr.h	/^  unsigned int header_len;$/;"	m	struct:tinyexr::HeaderInfo
headers	support/tinyexr/tinyexr.h	/^  EXRHeader *headers;$/;"	m	struct:_EXRMultiPartHeader
heapIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 heapIndex;$/;"	m	struct:VkMemoryType
height	cuda/whitted.h	/^    unsigned int             height;$/;"	m	struct:whitted::LaunchParams
height	optixBoundValues/optixBoundValues.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixCutouts/optixCutouts.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixDenoiser/OptiXDenoiser.h	/^        uint32_t  height    = 0;$/;"	m	struct:OptiXDenoiser::Data
height	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    unsigned int           height;$/;"	m	struct:Globals
height	optixDynamicGeometry/optixDynamicGeometry.h	/^    unsigned int           height;$/;"	m	struct:Params
height	optixHair/optixHair.h	/^    unsigned int height = 0;$/;"	m	struct:HairState
height	optixMeshViewer/optixMeshViewer.cpp	/^int32_t                 height   = 768;$/;"	v
height	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixMotionGeometry/optixMotionGeometry.h	/^    unsigned int           height;$/;"	m	struct:Params
height	optixMultiGPU/optixMultiGPU.cpp	/^int32_t           height = 768;$/;"	v
height	optixMultiGPU/optixMultiGPU.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixNVLink/optixNVLink.cpp	/^int32_t           height = 768;$/;"	v
height	optixNVLink/optixNVLink.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        height;                           \/**< [in]: Specifies input buffer height *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
height	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        height;                          \/**< [in]: Buffer height. *\/$/;"	m	struct:_NV_OF_BUFFER_DESCRIPTOR
height	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        height;                          \/**< [in]: Height of ROI. *\/$/;"	m	struct:NV_OF_ROI_RECT
height	optixPathTracer/optixPathTracer.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixRaycasting/optixRaycasting.cpp	/^    int                         height                   = 0;$/;"	m	struct:RaycastingState	file:
height	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    unsigned int height;$/;"	m	struct:Params
height	optixVolumeViewer/optixVolumeViewer.cpp	/^int32_t height = 768;$/;"	v
height	optixVolumeViewer/volume.h	/^    unsigned int             height;$/;"	m	struct:LaunchParams
height	support/GLFW/deps/vulkan/vulkan.h	/^    float    height;$/;"	m	struct:VkViewport
height	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    height;$/;"	m	struct:VkFramebufferCreateInfo
height	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent2D
height	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent3D
height	support/GLFW/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage
height	support/GLFW/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode
height	support/GLFW/src/internal.h	/^    int           height;$/;"	m	struct:_GLFWwndconfig
height	support/GLFW/src/mir_platform.h	/^    int                     height;$/;"	m	struct:_GLFWwindowMir
height	support/GLFW/src/wl_platform.h	/^    int                         width, height;$/;"	m	struct:_GLFWcursorWayland
height	support/GLFW/src/wl_platform.h	/^    int                         width, height;$/;"	m	struct:_GLFWwindowWayland
height	support/GLFW/src/x11_platform.h	/^    int             width, height;$/;"	m	struct:_GLFWwindowX11
height	support/imgui/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context
height	support/imgui/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon86
height	support/imgui/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context
height	support/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon80
height	support/tinyexr/tinyexr.h	/^  int height;  \/\/ actual height int a tile.$/;"	m	struct:_EXRTile
height	support/tinyexr/tinyexr.h	/^  int height;$/;"	m	struct:_DeepImage
height	support/tinyexr/tinyexr.h	/^  int height;$/;"	m	struct:_EXRImage
height	support/tinygltf/tiny_gltf.h	/^  int height;$/;"	m	struct:tinygltf::Image
height	sutil/CUDAOutputBuffer.h	/^    int32_t        height() const { return m_height; }$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
height	sutil/PPMLoader.cpp	/^unsigned int PPMLoader::height() const$/;"	f	class:PPMLoader
height	sutil/sutil.h	/^    unsigned int      height = 0;$/;"	m	struct:sutil::ImageBuffer
heightMM	support/GLFW/src/internal.h	/^    int             widthMM, heightMM;$/;"	m	struct:_GLFWmonitor
helperWindowHandle	support/GLFW/src/win32_platform.h	/^    HWND                helperWindowHandle;$/;"	m	struct:_GLFWlibraryWin32
heuristic	support/imgui/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context
hhea	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hidManager	support/GLFW/src/cocoa_platform.h	/^    IOHIDManagerRef     hidManager;$/;"	m	struct:_GLFWlibraryNS
hinstance	support/GLFW/deps/vulkan/vulkan.h	/^    HINSTANCE                       hinstance;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
hinstance	support/GLFW/src/win32_platform.h	/^    HINSTANCE                       hinstance;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
hintGridSize	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_HINT_VECTOR_GRID_SIZE     hintGridSize;                     \/**< [in]: Specifies flow vector grid size for ::NV_OF_EXECUTE_PARAMS::externalHints buffer.$/;"	m	struct:_NV_OF_INIT_PARAMS
hints	support/GLFW/src/internal.h	/^    } hints;$/;"	m	struct:_GLFWlibrary	typeref:struct:_GLFWlibrary::__anon9
histogram	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^        OptixDisplacementMicromapHistogramEntry histogram;$/;"	m	struct:MeshData::DmmArray	file:
history	support/tinygltf/stb_image.h	/^   stbi_uc *history; $/;"	m	struct:__anon110
hit_group	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixProgramGroup hit_group              = 0;$/;"	m	struct:DisplacedMicromeshState	file:
hit_group	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixProgramGroup              hit_group = 0;$/;"	m	struct:DynamicGeometryState	file:
hit_group	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixProgramGroup              hit_group = 0;$/;"	m	struct:MotionGeometryState	file:
hit_prog_group	optixRaycasting/optixRaycasting.cpp	/^    OptixProgramGroup           hit_prog_group           = 0;$/;"	m	struct:RaycastingState	file:
hitgroupRecordIdx_0	optixDynamicMaterials/optixDynamicMaterials.h	/^    unsigned int           hitgroupRecordIdx_0;$/;"	m	struct:Params
hitgroupRecordStride	optixDynamicMaterials/optixDynamicMaterials.h	/^    unsigned int           hitgroupRecordStride;$/;"	m	struct:Params
hitgroupSbtRecordStride	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    size_t                         hitgroupSbtRecordStride  = 0;$/;"	m	struct:SampleState	file:
hitgroup_prog_group	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixProgramGroup           hitgroup_prog_group      = 0;$/;"	m	struct:CallableProgramsState	file:
hitgroup_prog_groups	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    std::vector<OptixProgramGroup> hitgroup_prog_groups;$/;"	m	struct:SampleState	file:
hits	optixRaycasting/optixRaycasting.h	/^    Hit*                   hits;$/;"	m	struct:Params
hmtx	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hs	support/tinygltf/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon101
hsz	support/tinygltf/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon107
hufBuildDecTable	support/tinyexr/tinyexr.h	/^static bool hufBuildDecTable(const long long *hcode,  \/\/ i : encoding table$/;"	f	namespace:tinyexr
hufBuildEncTable	support/tinyexr/tinyexr.h	/^static void hufBuildEncTable($/;"	f	namespace:tinyexr
hufCanonicalCodeTable	support/tinyexr/tinyexr.h	/^static void hufCanonicalCodeTable(long long hcode[HUF_ENCSIZE]) {$/;"	f	namespace:tinyexr
hufClearDecTable	support/tinyexr/tinyexr.h	/^static void hufClearDecTable(HufDec *hdecod)  \/\/ io: (allocated by caller)$/;"	f	namespace:tinyexr
hufCode	support/tinyexr/tinyexr.h	/^inline long long hufCode(long long code) { return code >> 6; }$/;"	f	namespace:tinyexr
hufCompress	support/tinyexr/tinyexr.h	/^static int hufCompress(const unsigned short raw[], int nRaw,$/;"	f	namespace:tinyexr
hufDecode	support/tinyexr/tinyexr.h	/^static bool hufDecode(const long long *hcode,  \/\/ i : encoding table$/;"	f	namespace:tinyexr
hufEncode	support/tinyexr/tinyexr.h	/^static int hufEncode            \/\/ return: output size (in bits)$/;"	f	namespace:tinyexr
hufFreeDecTable	support/tinyexr/tinyexr.h	/^static void hufFreeDecTable(HufDec *hdecod)  \/\/ io: Decoding table$/;"	f	namespace:tinyexr
hufLength	support/tinyexr/tinyexr.h	/^inline long long hufLength(long long code) { return code & 63; }$/;"	f	namespace:tinyexr
hufPackEncTable	support/tinyexr/tinyexr.h	/^static void hufPackEncTable($/;"	f	namespace:tinyexr
hufUncompress	support/tinyexr/tinyexr.h	/^static bool hufUncompress(const char compressed[], int nCompressed,$/;"	f	namespace:tinyexr
hufUnpackEncTable	support/tinyexr/tinyexr.h	/^static bool hufUnpackEncTable($/;"	f	namespace:tinyexr
huff_ac	support/tinygltf/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon99
huff_dc	support/tinygltf/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon99
hwnd	support/GLFW/deps/mingw/dinput.h	/^	HWND			hwnd;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
hwnd	support/GLFW/deps/mingw/dinput.h	/^	HWND			hwnd;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
hwnd	support/GLFW/deps/vulkan/vulkan.h	/^    HWND                            hwnd;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
hwnd	support/GLFW/src/win32_platform.h	/^    HWND                            hwnd;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
ia	support/tinygltf/json.hpp	/^    detail::input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::lexer
ia	support/tinygltf/json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::binary_reader
ia	support/tinygltf/json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::input_adapter
ias	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    AS                  ias;$/;"	m	struct:MeshData	file:
ias	optixVolumeViewer/optixVolumeViewer.cpp	/^IAS         ias          = {};$/;"	v
ias_accel_options	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixAccelBuildOptions         ias_accel_options ={};$/;"	m	struct:MotionGeometryState	file:
ias_changed	optixVolumeViewer/optixVolumeViewer.cpp	/^bool ias_changed = false;$/;"	v
ias_handle	optixCutouts/optixCutouts.cpp	/^    OptixTraversableHandle ias_handle          = 0;  \/\/ Traversable handle for instance AS$/;"	m	struct:CutoutsState	file:
ias_handle	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixTraversableHandle         ias_handle;$/;"	m	struct:DynamicGeometryState	file:
ias_handle	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixTraversableHandle         ias_handle;$/;"	m	struct:SampleState	file:
ias_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         ias_handle;$/;"	m	struct:MotionGeometryState	file:
ias_handle	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixTraversableHandle       ias_handle                     = 0;   \/\/ Traversable handle for instance AS$/;"	m	struct:SimpleMotionBlurState	file:
ias_instance_input	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixBuildInput                ias_instance_input = {};$/;"	m	struct:DynamicGeometryState	file:
ias_instance_input	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixBuildInput                ias_instance_input = {};$/;"	m	struct:MotionGeometryState	file:
ias_output_buffer_size	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    size_t                         ias_output_buffer_size = 0;$/;"	m	struct:DynamicGeometryState	file:
ias_output_buffer_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         ias_output_buffer_size = 0;$/;"	m	struct:MotionGeometryState	file:
ic	support/GLFW/src/x11_platform.h	/^    XIC             ic;$/;"	m	struct:_GLFWwindowX11
iconified	support/GLFW/src/win32_platform.h	/^    GLFWbool            iconified;$/;"	m	struct:_GLFWwindowWin32
iconify	support/GLFW/src/internal.h	/^        GLFWwindowiconifyfun    iconify;$/;"	m	struct:_GLFWwindow::__anon8
id	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t id()       const { return mData; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
id	support/GLFW/include/GLFW/glfw3native.h	/^  typedef void* id;$/;"	t
id	support/GLFW/src/cocoa_platform.h	/^typedef void* id;$/;"	t
id	support/imgui/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect
id	support/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
id	support/tinygltf/json.hpp	/^    const int id;$/;"	m	class:nlohmann::detail::exception
id	support/tinygltf/stb_image.h	/^      int id;$/;"	m	struct:__anon99::__anon100
idata	support/tinygltf/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon105
idct_block_kernel	support/tinygltf/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon99
identity	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<N,N> Matrix<M,N>::identity()$/;"	f	class:sutil::Matrix
if_pixel	cuda/util.h	34;"	d
illum	optixMotionGeometry/tiny_obj_loader.h	/^  int illum;$/;"	m	struct:tinyobj::material_t
im	support/GLFW/src/x11_platform.h	/^    XIM             im;$/;"	m	struct:_GLFWlibraryX11
image	optixCurves/optixCurves.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixCustomPrimitive/optixCustomPrimitive.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixDynamicMaterials/optixDynamicMaterials.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixHello/optixHello.h	/^    uchar4* image;$/;"	m	struct:Params
image	optixOpacityMicromap/optixOpacityMicromap.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixRibbons/optixRibbons.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixSphere/optixSphere.h	/^    uchar4*                image;$/;"	m	struct:Params
image	optixTriangle/optixTriangle.h	/^    uchar4*                image;$/;"	m	struct:Params
image	support/GLFW/deps/vulkan/vulkan.h	/^    VkImage                           image;$/;"	m	struct:VkSparseImageMemoryBindInfo
image	support/GLFW/deps/vulkan/vulkan.h	/^    VkImage                      image;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo
image	support/GLFW/deps/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageMemoryBarrier
image	support/GLFW/deps/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageViewCreateInfo
image	support/GLFW/src/wl_platform.h	/^    struct wl_cursor_image*     image;$/;"	m	struct:_GLFWcursorWayland	typeref:struct:_GLFWcursorWayland::wl_cursor_image
image	support/tinyexr/tinyexr.h	/^  float ***image;      \/\/ image[channels][scanlines][samples]$/;"	m	struct:_DeepImage
image	support/tinygltf/tiny_gltf.h	/^  std::vector<unsigned char> image;$/;"	m	struct:tinygltf::Image
imageArrayLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         imageArrayLayers;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageBindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    imageBindCount;$/;"	m	struct:VkBindSparseInfo
imageColorSpace	support/GLFW/deps/vulkan/vulkan.h	/^    VkColorSpaceKHR                  imageColorSpace;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageCubeArray	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    imageCubeArray;$/;"	m	struct:VkPhysicalDeviceFeatures
imageExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                        imageExtent;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
imageExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                       imageExtent;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D                  imageExtent;$/;"	m	struct:VkBufferImageCopy
imageFormat	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormat                         imageFormat;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageGranularity	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D                  imageGranularity;$/;"	m	struct:VkSparseImageFormatProperties
imageLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout    imageLayout;$/;"	m	struct:VkDescriptorImageInfo
imageMipTailFirstLod	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         imageMipTailFirstLod;$/;"	m	struct:VkSparseImageMemoryRequirements
imageMipTailOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailOffset;$/;"	m	struct:VkSparseImageMemoryRequirements
imageMipTailSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailSize;$/;"	m	struct:VkSparseImageMemoryRequirements
imageMipTailStride	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailStride;$/;"	m	struct:VkSparseImageMemoryRequirements
imageOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  imageOffset;$/;"	m	struct:VkBufferImageCopy
imageOpaqueBindCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    imageOpaqueBindCount;$/;"	m	struct:VkBindSparseInfo
imageSharingMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkSharingMode                    imageSharingMode;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    imageSubresource;$/;"	m	struct:VkBufferImageCopy
imageType	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageType              imageType;$/;"	m	struct:VkImageCreateInfo
imageUsage	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageUsageFlags                imageUsage;$/;"	m	struct:VkSwapchainCreateInfoKHR
imageView	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageView      imageView;$/;"	m	struct:VkDescriptorImageInfo
image_height	optixCurves/optixCurves.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixCustomPrimitive/optixCustomPrimitive.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixDynamicMaterials/optixDynamicMaterials.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixOpacityMicromap/optixOpacityMicromap.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixRibbons/optixRibbons.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixSphere/optixSphere.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_height	optixTriangle/optixTriangle.h	/^    unsigned int           image_height;$/;"	m	struct:Params
image_width	optixCurves/optixCurves.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixCustomPrimitive/optixCustomPrimitive.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixDynamicMaterials/optixDynamicMaterials.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixHello/optixHello.h	/^    unsigned int image_width;$/;"	m	struct:Params
image_width	optixOpacityMicromap/optixOpacityMicromap.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixRibbons/optixRibbons.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixSphere/optixSphere.h	/^    unsigned int           image_width;$/;"	m	struct:Params
image_width	optixTriangle/optixTriangle.h	/^    unsigned int           image_width;$/;"	m	struct:Params
images	support/tinyexr/tinyexr.h	/^  EXRImage *images;$/;"	m	struct:_EXRMultiPartImage
images	support/tinyexr/tinyexr.h	/^  unsigned char **images;  \/\/ image[channels][pixels]$/;"	m	struct:_EXRTile
images	support/tinyexr/tinyexr.h	/^  unsigned char **images;  \/\/ image[channels][pixels]. NULL if tiled format.$/;"	m	struct:_EXRImage
images	support/tinygltf/tiny_gltf.h	/^  std::vector<Image> images;$/;"	m	class:tinygltf::Model
imfchan	optixMotionGeometry/tiny_obj_loader.h	/^  char imfchan;  \/\/ -imfchan (the default for bump is 'l' and for decal is 'm')$/;"	m	struct:tinyobj::texture_option_t
img_buffer	support/tinygltf/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon94
img_buffer_end	support/tinygltf/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon94
img_buffer_original	support/tinygltf/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon94
img_buffer_original_end	support/tinygltf/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon94
img_comp	support/tinygltf/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon99	typeref:struct:__anon99::__anon100
img_h_max	support/tinygltf/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon99
img_mcu_h	support/tinygltf/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon99
img_mcu_w	support/tinygltf/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon99
img_mcu_x	support/tinygltf/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon99
img_mcu_y	support/tinygltf/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon99
img_n	support/tinygltf/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon94
img_out_n	support/tinygltf/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon94
img_v_max	support/tinygltf/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon99
img_x	support/tinygltf/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon94
img_y	support/tinygltf/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon94
implementationVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    implementationVersion;$/;"	m	struct:VkLayerProperties
importance	cuda/whitted.h	/^    float  importance;$/;"	m	struct:whitted::PayloadRadiance
importance_cutoff	cuda/MaterialData.h	/^        float  importance_cutoff;$/;"	m	struct:MaterialData::Glass
inCircle	optixOpacityMicromap/optixOpacityMicromap.h	/^static __host__ __device__ __inline__ bool inCircle( const float2 uv )$/;"	f
incCubeX	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void incCubeX()$/;"	f
incCubeZ	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void incCubeZ()$/;"	f
include	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::include( const Aabb& other )$/;"	f	class:sutil::Aabb
include	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::include( const float3& min, const float3& max )$/;"	f	class:sutil::Aabb
include	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::include( const float3& p )$/;"	f	class:sutil::Aabb
increaseOpacity	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void increaseOpacity()$/;"	f
indent_char	support/tinygltf/json.hpp	/^    const char indent_char;$/;"	m	class:nlohmann::detail::serializer
indent_string	support/tinygltf/json.hpp	/^    string_t indent_string;$/;"	m	class:nlohmann::detail::serializer
independentBlend	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    independentBlend;$/;"	m	struct:VkPhysicalDeviceFeatures
index	support/GLFW/src/win32_joystick.h	/^    DWORD                   index;$/;"	m	struct:_GLFWjoystickWin32
index	support/GLFW/src/x11_platform.h	/^    int             index;$/;"	m	struct:_GLFWmonitorX11
index	support/tinygltf/tiny_gltf.h	/^  int index = -1;   \/\/ required$/;"	m	struct:tinygltf::OcclusionTextureInfo
index	support/tinygltf/tiny_gltf.h	/^  int index = -1;  \/\/ required$/;"	m	struct:tinygltf::NormalTextureInfo
index	support/tinygltf/tiny_gltf.h	/^  int index = -1;  \/\/ required.$/;"	m	struct:tinygltf::TextureInfo
indexBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<Coord>& indexBBox() const { return this->grid().indexBBox(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
indexBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<CoordType>& indexBBox() const { return this->tree().bbox(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexBBox	optixVolumeViewer/nanovdb/util/IO.h	/^    CoordBBox   indexBBox; \/\/ 2 * 3 * 4 = 24B.$/;"	m	struct:nanovdb::io::Codec::MetaData
indexCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    indexCount;$/;"	m	struct:VkDrawIndexedIndirectCommand
indexToLocFormat	support/imgui/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
indexToWorld	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorld(const Vec3T& xyz) const { return this->applyMap(xyz); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexToWorldDir	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorldDir(const Vec3T& dir) const { return this->applyJacobian(dir); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexToWorldDirF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorldDirF(const Vec3T& dir) const { return this->applyJacobianF(dir); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexToWorldF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorldF(const Vec3T& xyz) const { return this->applyMapF(xyz); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexToWorldF	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray indexToWorldF(const GridType& grid) const$/;"	f	class:nanovdb::Ray
indexToWorldGrad	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorldGrad(const Vec3T& grad) const { return this->applyIJT(grad); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
indexToWorldGradF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T indexToWorldGradF(const Vec3T& grad) const { return DataType::applyIJTF(grad); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
index_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*index_cb)(void *user_data, index_t *indices, int num_indices);$/;"	m	struct:tinyobj::callback_t
index_from_ptr	support/imgui/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; return (int)off; }$/;"	f	struct:ImVector
index_map	support/imgui/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
index_sequence	support/tinygltf/json.hpp	/^struct index_sequence$/;"	s	namespace:nlohmann::detail
index_t	optixMotionGeometry/tiny_obj_loader.h	/^struct index_t {$/;"	s	namespace:tinyobj
indices	cuda/GeometryData.h	/^        GenericBufferView  indices;$/;"	m	struct:GeometryData::TriangleMesh
indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<index_t> indices;        \/\/ indices for vertices(poly lines)$/;"	m	struct:tinyobj::lines_t
indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<index_t> indices;  \/\/ indices for points$/;"	m	struct:tinyobj::points_t
indices	optixRibbons/optixRibbons.h	/^std::vector<unsigned int> indices = {$/;"	v
indices	optixVolumeViewer/optixVolumeViewer.h	/^    const unsigned int        indices[num_indices] = {0, 1, 2, 0, 2, 3,$/;"	m	struct:Cube
indices	optixVolumeViewer/optixVolumeViewer.h	/^    const unsigned int        indices[num_indices] = {0, 1, 3, 1, 2, 3};$/;"	m	struct:Plane
indices	support/tinygltf/tiny_gltf.h	/^    } indices;$/;"	m	struct:tinygltf::Accessor::__anon115	typeref:struct:tinygltf::Accessor::__anon115::__anon116
indices	support/tinygltf/tiny_gltf.h	/^  int indices;   \/\/ The index of the accessor that contains the indices.$/;"	m	struct:tinygltf::Primitive
indices	sutil/Scene.h	/^        std::vector<GenericBufferView>    indices;$/;"	m	struct:sutil::Scene::MeshGroup
inflate	support/tinyexr/tinyexr.h	1206;"	d
inflateEnd	support/tinyexr/tinyexr.h	1207;"	d
inflateInit	support/tinyexr/tinyexr.h	1204;"	d
inflateInit2	support/tinyexr/tinyexr.h	1205;"	d
inflate_state	support/tinyexr/tinyexr.h	/^} inflate_state;$/;"	t	typeref:struct:tinyexr::miniz::__anon54
info_arch	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_extensions_default	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_extensions_default	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_standard_default	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v
info_language_standard_default	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v
info_platform	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version_internal	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
info_version_internal	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
inheritedQueries	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    inheritedQueries;$/;"	m	struct:VkPhysicalDeviceFeatures
init	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::init( const Data&  data,$/;"	f	class:OptiXDenoiser
init	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    OptixResult init( CUcontext ctx, CUstream stream, unsigned int width, unsigned int height )$/;"	f	class:OptixUtilOpticalFlow
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ bool init(RayT ray) { return BaseT::init(ray.offsetEye(0.5)); }$/;"	f	class:nanovdb::PointTreeMarcher
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ void init(const RayT& ray) { this->init(ray, ray.t0(), ray.t1()); }$/;"	f	class:nanovdb::DDA
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ void init(const RayT& ray, RealT startTime, RealT maxTime)$/;"	f	class:nanovdb::DDA
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ void init(const RayT& ray, RealT startTime, RealT maxTime, int dim)$/;"	f	class:nanovdb::HDDA
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ void init(const RayT& ray, int dim) { this->init(ray, ray.t0(), ray.t1(), dim); }$/;"	f	class:nanovdb::HDDA
init	optixVolumeViewer/nanovdb/util/HDDA.h	/^    inline __hostdev__ bool init(const RayT& indexRay)$/;"	f	class:nanovdb::TreeMarcher
init	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^inline void HostBuffer::init(uint64_t size)$/;"	f	class:nanovdb::HostBuffer
initCamera	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void initCamera( SampleState& state )$/;"	f
initCameraState	optixBoundValues/optixBoundValues.cpp	/^void initCameraState()$/;"	f
initCameraState	optixCallablePrograms/optixCallablePrograms.cpp	/^void initCameraState()$/;"	f
initCameraState	optixCutouts/optixCutouts.cpp	/^void initCameraState()$/;"	f
initCameraState	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void initCameraState()$/;"	f
initCameraState	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void initCameraState()$/;"	f
initCameraState	optixMeshViewer/optixMeshViewer.cpp	/^void initCameraState( const sutil::Scene& scene )$/;"	f
initCameraState	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void initCameraState()$/;"	f
initCameraState	optixMotionGeometry/optixMotionGeometry.cpp	/^void initCameraState()$/;"	f
initCameraState	optixMultiGPU/optixMultiGPU.cpp	/^void initCameraState()$/;"	f
initCameraState	optixNVLink/optixNVLink.cpp	/^void initCameraState()$/;"	f
initCameraState	optixPathTracer/optixPathTracer.cpp	/^void initCameraState()$/;"	f
initCameraState	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void initCameraState()$/;"	f
initCameraState	optixVolumeViewer/optixVolumeViewer.cpp	/^void initCameraState( const sutil::Aabb& aabb )$/;"	f
initCameraState	optixWhitted/optixWhitted.cpp	/^void initCameraState()$/;"	f
initExtensions	support/GLFW/src/x11_init.c	/^static GLFWbool initExtensions(void)$/;"	f	file:
initGL	sutil/sutil.cpp	/^void initGL()$/;"	f	namespace:sutil
initGLFW	sutil/sutil.cpp	/^GLFWwindow* initGLFW( const char* window_title, int width, int height )$/;"	f	namespace:sutil
initGLFW	sutil/sutil.cpp	/^void initGLFW()$/;"	f	namespace:sutil
initImGui	sutil/sutil.cpp	/^void initImGui( GLFWwindow* window )$/;"	f	namespace:sutil
initLaunch	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void initLaunch( SampleState& state )$/;"	f
initLaunchGlobals	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void initLaunchGlobals( DisplacedMicromeshState& state )$/;"	f
initLaunchParams	optixBoundValues/optixBoundValues.cpp	/^void initLaunchParams( PathTracerState& state )$/;"	f
initLaunchParams	optixCallablePrograms/optixCallablePrograms.cpp	/^void initLaunchParams( CallableProgramsState& state )$/;"	f
initLaunchParams	optixConsole/optixConsole.cpp	/^void initLaunchParams( OptixConsoleState& state )$/;"	f
initLaunchParams	optixCutouts/optixCutouts.cpp	/^void initLaunchParams( CutoutsState& state )$/;"	f
initLaunchParams	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void initLaunchParams( DynamicGeometryState& state )$/;"	f
initLaunchParams	optixMeshViewer/optixMeshViewer.cpp	/^void initLaunchParams( const sutil::Scene& scene ) {$/;"	f
initLaunchParams	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void initLaunchParams( PathTracerState& state )$/;"	f
initLaunchParams	optixMotionGeometry/optixMotionGeometry.cpp	/^void initLaunchParams( MotionGeometryState& state )$/;"	f
initLaunchParams	optixMultiGPU/optixMultiGPU.cpp	/^void initLaunchParams( PathTracerState& state )$/;"	f
initLaunchParams	optixNVLink/optixNVLink.cpp	/^void initLaunchParams( PerDeviceSampleState& pd_state )$/;"	f
initLaunchParams	optixPathTracer/optixPathTracer.cpp	/^void initLaunchParams( PathTracerState& state )$/;"	f
initLaunchParams	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void initLaunchParams( SimpleMotionBlurState& state )$/;"	f
initLaunchParams	optixVolumeViewer/optixVolumeViewer.cpp	/^void initLaunchParams( Params& launch_params, const OptixTraversableHandle& handle, const sutil::Aabb& aabb ) $/;"	f
initLaunchParams	optixWhitted/optixWhitted.cpp	/^void initLaunchParams( WhittedState& state )$/;"	f
initOptixImage2D	optixOpticalFlow/optixOpticalFlow.cpp	/^static void initOptixImage2D( OptixImage2D& result, const float* hmem )$/;"	f	file:
initUI	sutil/sutil.cpp	/^GLFWwindow* initUI( const char* window_title, int width, int height )$/;"	f	namespace:sutil
init_mode	support/imgui/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context
initialDataSize	support/GLFW/deps/vulkan/vulkan.h	/^    size_t                        initialDataSize;$/;"	m	struct:VkPipelineCacheCreateInfo
initialLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout                   initialLayout;$/;"	m	struct:VkAttachmentDescription
initialLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout            initialLayout;$/;"	m	struct:VkImageCreateInfo
initialize	cuda/curve.h	/^    __device__ __forceinline__ void initialize( const float4* q )$/;"	f	struct:LinearInterpolator
initializeCamera	optixHair/optixHair.cpp	/^void initializeCamera( HairState* pState )$/;"	f
initializeFromBSpline	cuda/curve.h	/^    __device__ __forceinline__ void initializeFromBSpline( const float4* q )$/;"	f	struct:CubicInterpolator
initializeFromBSpline	cuda/curve.h	/^    __device__ __forceinline__ void initializeFromBSpline( const float4* q )$/;"	f	struct:QuadraticInterpolator
initializeFromBezier	cuda/curve.h	/^    __device__ __forceinline__ void initializeFromBezier(const float4* q)$/;"	f	struct:CubicInterpolator
initializeFromCatrom	cuda/curve.h	/^    __device__ __forceinline__ void initializeFromCatrom(const float4* q)$/;"	f	struct:CubicInterpolator
initializeNvml	optixNVLink/optixNVLink.cpp	/^void initializeNvml()$/;"	f
initializeOptix	optixHair/optixHair.cpp	/^void initializeOptix( HairState* pState )$/;"	f
initializeParams	optixHair/optixHair.cpp	/^void initializeParams( HairState* pState )$/;"	f
initialized	support/imgui/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon84
inline	support/GLFW/deps/linmath.h	7;"	d
innerConeAngle	support/tinygltf/tiny_gltf.h	/^  double innerConeAngle;$/;"	m	struct:tinygltf::SpotLight
inotify	support/GLFW/src/linux_joystick.h	/^    int             inotify;$/;"	m	struct:_GLFWjoylistLinux
input	support/tinygltf/tiny_gltf.h	/^  int input;                  \/\/ required$/;"	m	struct:tinygltf::AnimationSampler
inputAttachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        inputAttachmentCount;$/;"	m	struct:VkSubpassDescription
inputFrame	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFGPUBufferHandle             inputFrame;                      \/**< [in]: If ::NV_OF_INIT_PARAMS::mode is ::NV_OF_MODE_OPTICALFLOW, this specifies the handle to the buffer containing the input frame.$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
inputRate	support/GLFW/deps/vulkan/vulkan.h	/^    VkVertexInputRate    inputRate;$/;"	m	struct:VkVertexInputBindingDescription
inputSource	support/GLFW/src/cocoa_platform.h	/^    TISInputSourceRef   inputSource;$/;"	m	struct:_GLFWlibraryNS
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(CharT b)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(CharT b, std::size_t l)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(const ContiguousContainer& c)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(const std::u16string& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(const std::u32string& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(const std::wstring& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(std::FILE* file)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^    input_adapter(std::istream&& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	support/tinygltf/json.hpp	/^class input_adapter$/;"	c	namespace:nlohmann::detail
input_adapter_protocol	support/tinygltf/json.hpp	/^struct input_adapter_protocol$/;"	s	namespace:nlohmann::detail
input_buffer_adapter	support/tinygltf/json.hpp	/^class input_buffer_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
input_format_t	support/tinygltf/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	c	namespace:nlohmann::detail
input_stream_adapter	support/tinygltf/json.hpp	/^    explicit input_stream_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_stream_adapter
input_stream_adapter	support/tinygltf/json.hpp	/^class input_stream_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType& ijk, const Node1T* node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType& ijk, const Node2T* node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType& ijk, const NodeT* node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType& ijk, const NodeT* node) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType&, const NodeT*) const {}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType&, const OtherNodeT*) const {}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
insert	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void insert(const CoordType&, const OtherNodeT*) const {}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
insert	support/imgui/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(T)); memcpy(&Data[off], &v, sizeof(v)); Size++; return Data + off; }$/;"	f	struct:ImVector
insert	support/tinygltf/json.hpp	/^    iterator insert(const_iterator pos, basic_json&& val)$/;"	f	class:nlohmann::basic_json
insert	support/tinygltf/json.hpp	/^    iterator insert(const_iterator pos, const basic_json& val)$/;"	f	class:nlohmann::basic_json
insert	support/tinygltf/json.hpp	/^    iterator insert(const_iterator pos, const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json
insert	support/tinygltf/json.hpp	/^    iterator insert(const_iterator pos, initializer_list_t ilist)$/;"	f	class:nlohmann::basic_json
insert	support/tinygltf/json.hpp	/^    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json
insert	support/tinygltf/json.hpp	/^    void insert(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json
insert_iterator	support/tinygltf/json.hpp	/^    iterator insert_iterator(const_iterator pos, Args&& ... args)$/;"	f	class:nlohmann::basic_json
insert_length	support/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon82
insert_mode	support/imgui/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon84
instance	support/GLFW/src/wgl_context.h	/^    HINSTANCE                           instance;$/;"	m	struct:_GLFWlibraryWGL
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE                     instance;$/;"	m	struct:_GLFWlibraryWin32::__anon15
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE               instance;$/;"	m	struct:_GLFWlibraryWin32::__anon14
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE            instance;$/;"	m	struct:_GLFWlibraryWin32::__anon13
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE       instance;$/;"	m	struct:_GLFWlibraryWin32::__anon12
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE       instance;$/;"	m	struct:_GLFWlibraryWin32::__anon16
instance	support/GLFW/src/win32_platform.h	/^        HINSTANCE       instance;$/;"	m	struct:_GLFWlibraryWin32::__anon17
instanceCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndexedIndirectCommand
instanceCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndirectCommand
instances	optixMotionGeometry/optixMotionGeometry.cpp	/^    std::vector<OptixInstance>     instances;$/;"	m	struct:MotionGeometryState	file:
instances	sutil/Scene.h	/^    SUTILAPI const std::vector<std::shared_ptr<Instance>>&  instances() const         { return m_instances;  }$/;"	f	class:sutil::Scene
int16_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef short               int16_t;$/;"	t
int16_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef short              int16_t;$/;"	t
int16_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef signed   __int16 int16_t;$/;"	t
int32	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t     int32[4];$/;"	m	union:VkClearColorValue
int32_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef __int32             int32_t;$/;"	t
int32_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef int                int32_t;$/;"	t
int32_t	support/GLFW/deps/glad/glad.h	/^typedef __int32 int32_t;$/;"	t
int32_t	support/GLFW/deps/glad/glad.h	/^typedef long int int32_t;$/;"	t
int32_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef signed   __int32 int32_t;$/;"	t
int64_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef __int64             int64_t;$/;"	t
int64_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef long long          int64_t;$/;"	t
int64_t	support/GLFW/deps/glad/glad.h	/^typedef __int64 int64_t;$/;"	t
int64_t	support/GLFW/deps/glad/glad.h	/^typedef long int int64_t;$/;"	t
int64_t	support/GLFW/deps/glad/glad.h	/^typedef long long int int64_t;$/;"	t
int64_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef signed   __int64 int64_t;$/;"	t
int8_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef signed char         int8_t;$/;"	t
int8_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef signed char        int8_t;$/;"	t
int8_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef signed   __int8  int8_t;$/;"	t
intValues	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> intValues;$/;"	m	struct:tinyobj::tag_t
int_value_	support/tinygltf/tiny_gltf.h	/^  int int_value_ = 0;$/;"	m	class:tinygltf::Value
internal_iterator	support/tinygltf/json.hpp	/^template<typename BasicJsonType> struct internal_iterator$/;"	s	namespace:nlohmann::detail
internal_state	support/tinyexr/tinyexr.h	1193;"	d
interpolation	support/tinygltf/tiny_gltf.h	/^  std::string interpolation;  \/\/ "LINEAR", "STEP","CUBICSPLINE" or user defined$/;"	m	struct:tinygltf::AnimationSampler
intersection	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::intersection( const Aabb& other )$/;"	f	class:sutil::Aabb
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const BBox<OtherVec3T>& bbox, RealT& t0, RealT& t1) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const BBoxT& bbox) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const CoordBBox& bbox, RealT& t0, RealT& t1) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const Vec3T& center, RealT radius) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const Vec3T& center, RealT radius, RealT& t0, RealT& t1) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const Vec3T& normal, RealT distance, RealT& t) const$/;"	f	class:nanovdb::Ray
intersects	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool intersects(const Vec3T& normal, const Vec3T& point, RealT& t) const$/;"	f	class:nanovdb::Ray
intersects	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::intersects( const Aabb& other ) const$/;"	f	class:sutil::Aabb
interval	support/GLFW/src/wgl_context.h	/^    int       interval;$/;"	m	struct:_GLFWcontextWGL
interval	support/GLFW/src/x11_platform.h	/^        int         interval;$/;"	m	struct:_GLFWlibraryX11::__anon22
intf	support/tinyexr/tinyexr.h	/^typedef int intf;$/;"	t
invDir	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ const Vec3T& invDir() const { return mInvDir; }$/;"	f	class:nanovdb::Ray
inv_checker_size	cuda/MaterialData.h	/^        float2 inv_checker_size;$/;"	m	struct:MaterialData::CheckerPhong
invalid_iterator	support/tinygltf/json.hpp	/^    invalid_iterator(int id_, const char* what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator
invalid_iterator	support/tinygltf/json.hpp	/^class invalid_iterator : public exception$/;"	c	namespace:nlohmann::detail
invalidate	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::invalidate()$/;"	f	class:sutil::Aabb
inverse	optixMotionGeometry/motionHelper.hpp	/^    Matrix3x4 inverse() const$/;"	f	struct:__anon4::Matrix3x4
inverse	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<4,4> Matrix<4,4>::inverse() const$/;"	f	class:sutil::Matrix
inverseBindMatrices	support/tinygltf/tiny_gltf.h	/^  int inverseBindMatrices;  \/\/ required here but not in the spec$/;"	m	struct:tinygltf::Skin
inverse_transform	optixBoundValues/optixBoundValues.h	/^    __forceinline__ __device__ void inverse_transform( float3& p ) const$/;"	f	struct:Onb
inverse_transform	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    __forceinline__ __device__ void inverse_transform( float3& p ) const$/;"	f	struct:Onb
invert	support/imgui/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge
io	optixVolumeViewer/nanovdb/util/IO.h	/^namespace io {$/;"	n	namespace:nanovdb
io	support/tinygltf/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon94
io_user_data	support/tinygltf/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon94
ior	optixMotionGeometry/tiny_obj_loader.h	/^  real_t ior;       \/\/ index of refraction$/;"	m	struct:tinyobj::material_t
is	support/tinygltf/json.hpp	/^    std::istream& is;$/;"	m	class:nlohmann::detail::input_stream_adapter
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive() const $/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordT& ijk) const { return DataType::mValueMask.isOn(CoordToOffset(ijk)); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordType& ijk) const { return this->root().isActive(ijk); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
isActive	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActive(uint32_t n) const { return DataType::mValueMask.isOn(n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
isActiveAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActiveAndCache(const CoordT& ijk, const AccT&) const { return this->isActive(ijk); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
isActiveAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isActiveAndCache(const CoordType& ijk, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
isApproxZero	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ inline bool isApproxZero(const Type& x)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
isCached	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isCached(CoordValueType dirty) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
isCached	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isCached(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
isCached	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isCached(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
isCompositionEnabled	support/GLFW/src/wgl_context.c	/^static GLFWbool isCompositionEnabled(void)$/;"	f	file:
isEmpty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool                     isEmpty() const { return this->grid().isEmpty(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isEmpty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isEmpty() const { return DataType::mTileCount == uint32_t(0); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
isEmpty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isEmpty() const { return this->root().isEmpty(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
isEmpty	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isEmpty() const { return this->tree().isEmpty(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isFlat	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::isFlat() const$/;"	f	class:sutil::Aabb
isFogVolume	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isFogVolume() const { return DataType::mGridClass == GridClass::FogVolume; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isFogVolume	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isFogVolume() const { return this->grid().isFogVolume(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isFrameExtentsEvent	support/GLFW/src/x11_window.c	/^static Bool isFrameExtentsEvent(Display* display, XEvent* event, XPointer pointer)$/;"	f	file:
isInside	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool   isInside(const BBox& b) const$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
isInside	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool   isInside(const CoordT& p) const { return !(CoordT::lessThan(p, this->min()) || CoordT::lessThan(this->max(), p)); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
isInside	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool  isInside(const Vec3T& p) const$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
isInside	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isInside(const Vec3T& xyz)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
isLevelSet	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isLevelSet() const { return DataType::mGridClass == GridClass::LevelSet; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isLevelSet	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isLevelSet() const { return this->grid().isLevelSet(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isOff	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isOff() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
isOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isOn() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
isOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool isOn(uint32_t n) const { return 0 != (mWords[n >> 6] & (uint64_t(1) << (n & 63))); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
isPointData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isPointData() const { return DataType::mGridClass == GridClass::PointData; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isPointData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isPointData() const { return this->grid().isPointData(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isPointIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isPointIndex() const { return DataType::mGridClass == GridClass::PointIndex; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isPointIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isPointIndex() const { return this->grid().isPointIndex(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isPointerLocked	support/GLFW/src/wl_window.c	/^static GLFWbool isPointerLocked(_GLFWwindow* window)$/;"	f	file:
isSelectionEvent	support/GLFW/src/x11_window.c	/^static Bool isSelectionEvent(Display* display, XEvent* event, XPointer pointer)$/;"	f	file:
isSparse	support/tinygltf/tiny_gltf.h	/^    bool isSparse;$/;"	m	struct:tinygltf::Accessor::__anon115
isStaggered	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isStaggered() const { return DataType::mGridClass == GridClass::Staggered; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isStaggered	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isStaggered() const { return this->grid().isStaggered(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isUnknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool             isUnknown() const { return DataType::mGridClass == GridClass::Unknown; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
isUnknown	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isUnknown() const { return this->grid().isUnknown(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isValid	cuda/BufferView.h	/^    SUTIL_HOSTDEVICE bool isValid() const$/;"	f	struct:BufferView
isValid	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool        isValid() const { return this->grid().isValid(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
isValid	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool  isValid() const { return DataType::mMagic == NANOVDB_MAGIC_NUMBER; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
is_base64	support/tinygltf/tiny_gltf.h	/^static inline bool is_base64(unsigned char c) {$/;"	f	namespace:tinygltf
is_basic_json	support/tinygltf/json.hpp	/^struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_basic_json	support/tinygltf/json.hpp	/^template<typename> struct is_basic_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_binary_	support/tinygltf/tiny_gltf.h	/^  bool is_binary_ = false;$/;"	m	class:tinygltf::TinyGLTF
is_compatible_array_type	support/tinygltf/json.hpp	/^struct is_compatible_array_type$/;"	s	namespace:nlohmann::detail
is_compatible_array_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_array_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_array_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_array_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type	support/tinygltf/json.hpp	/^struct is_compatible_integer_type$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_integer_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_integer_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_object_type	support/tinygltf/json.hpp	/^struct is_compatible_object_type$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_object_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_object_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_string_type	support/tinygltf/json.hpp	/^struct is_compatible_string_type$/;"	s	namespace:nlohmann::detail
is_compatible_string_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_string_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_string_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_string_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_type	support/tinygltf/json.hpp	/^struct is_compatible_type$/;"	s	namespace:nlohmann::detail
is_compatible_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_type_impl	support/tinygltf/json.hpp	/^struct is_compatible_type_impl: std::false_type {};$/;"	s	namespace:nlohmann::detail
is_complete_type	support/tinygltf/json.hpp	/^struct is_complete_type : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_complete_type	support/tinygltf/json.hpp	/^struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_array_type	support/tinygltf/json.hpp	/^struct is_constructible_array_type$/;"	s	namespace:nlohmann::detail
is_constructible_array_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_array_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_array_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_array_type_impl <$/;"	s	namespace:nlohmann::detail
is_constructible_object_type	support/tinygltf/json.hpp	/^struct is_constructible_object_type$/;"	s	namespace:nlohmann::detail
is_constructible_object_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_object_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_object_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_object_type_impl <$/;"	s	namespace:nlohmann::detail
is_constructible_string_type	support/tinygltf/json.hpp	/^struct is_constructible_string_type$/;"	s	namespace:nlohmann::detail
is_constructible_string_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_string_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_string_type_impl	support/tinygltf/json.hpp	/^struct is_constructible_string_type_impl <$/;"	s	namespace:nlohmann::detail
is_divisible	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool is_divisible() const { return mCoord[0][0] < mCoord[1][0] &&$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox
is_errored	support/tinygltf/json.hpp	/^    constexpr bool is_errored() const$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
is_errored	support/tinygltf/json.hpp	/^    constexpr bool is_errored() const$/;"	f	class:nlohmann::detail::json_sax_dom_parser
is_floating_point	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct is_floating_point$/;"	s	namespace:nanovdb
is_iterator_traits	support/tinygltf/json.hpp	/^struct is_iterator_traits : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_iterator_traits	support/tinygltf/json.hpp	/^struct is_iterator_traits<iterator_traits<T>>$/;"	s	namespace:nlohmann::detail
is_little_endian	support/tinygltf/json.hpp	/^    const bool is_little_endian = binary_reader<BasicJsonType>::little_endianess();$/;"	m	class:nlohmann::detail::binary_writer
is_little_endian	support/tinygltf/json.hpp	/^    const bool is_little_endian = little_endianess();$/;"	m	class:nlohmann::detail::binary_reader
is_rvalue	support/tinygltf/json.hpp	/^    const bool is_rvalue;$/;"	m	class:nlohmann::detail::json_ref
is_same	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct is_same$/;"	s	namespace:nanovdb
is_same	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct is_same<T, T>$/;"	s	namespace:nanovdb
is_sax	support/tinygltf/json.hpp	/^struct is_sax$/;"	s	namespace:nlohmann::detail
is_sax_static_asserts	support/tinygltf/json.hpp	/^struct is_sax_static_asserts$/;"	s	namespace:nlohmann::detail
is_separator	support/imgui/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharIsBlankW(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }$/;"	f	namespace:ImStb
is_specialization	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct is_specialization$/;"	s	namespace:nanovdb
is_specialization	optixVolumeViewer/nanovdb/NanoVDB.h	/^struct is_specialization<TemplateType<Args...>, TemplateType>$/;"	s	namespace:nanovdb
is_word_boundary	support/imgui/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f
is_word_boundary_from_left	support/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->TextW[idx-1] ) && is_separator( obj->TextW[idx] ) ) : 1; }$/;"	f	namespace:ImStb
is_word_boundary_from_right	support/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->TextW[idx-1] ) && !is_separator( obj->TextW[idx] ) ) : 1; }$/;"	f	namespace:ImStb
iter_impl	support/tinygltf/json.hpp	/^class iter_impl$/;"	c	namespace:nlohmann::detail
iteration_proxy	support/tinygltf/json.hpp	/^template<typename IteratorType> class iteration_proxy$/;"	c	namespace:nlohmann::detail
iteration_proxy_value	support/tinygltf/json.hpp	/^template <typename IteratorType> class iteration_proxy_value$/;"	c	namespace:nlohmann::detail
iterator	support/imgui/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector
iterator_traits	support/tinygltf/json.hpp	/^struct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>$/;"	s	namespace:nlohmann::detail
iterator_traits	support/tinygltf/json.hpp	/^struct iterator_traits$/;"	s	namespace:nlohmann::detail
iterator_traits	support/tinygltf/json.hpp	/^struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>$/;"	s	namespace:nlohmann::detail
iterator_types	support/tinygltf/json.hpp	/^struct iterator_types <$/;"	s	namespace:nlohmann::detail
iterator_types	support/tinygltf/json.hpp	/^struct iterator_types {};$/;"	s	namespace:nlohmann::detail
jfif	support/tinygltf/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon99
joints	support/tinygltf/tiny_gltf.h	/^  std::vector<int> joints;  \/\/ Indices of skeleton nodes$/;"	m	struct:tinygltf::Skin
joystick	support/GLFW/src/internal.h	/^        GLFWjoystickfun joystick;$/;"	m	struct:_GLFWlibrary::__anon11
js	support/GLFW/src/linux_joystick.h	/^    _GLFWjoystickLinux js[GLFW_JOYSTICK_LAST + 1];$/;"	m	struct:_GLFWjoylistLinux
json	support/tinygltf/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	m	class:nlohmann::detail::input_format_t
json_double_value	support/tinygltf/tiny_gltf.h	/^  std::map<std::string, double> json_double_value;$/;"	m	struct:tinygltf::Parameter
json_pointer	support/tinygltf/json.hpp	/^    explicit json_pointer(const std::string& s = "")$/;"	f	class:nlohmann::json_pointer
json_pointer	support/tinygltf/json.hpp	/^class json_pointer$/;"	c	namespace:nlohmann
json_ref	support/tinygltf/json.hpp	/^    json_ref(Args && ... args)$/;"	f	class:nlohmann::detail::json_ref
json_ref	support/tinygltf/json.hpp	/^    json_ref(const value_type& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	support/tinygltf/json.hpp	/^    json_ref(std::initializer_list<json_ref> init)$/;"	f	class:nlohmann::detail::json_ref
json_ref	support/tinygltf/json.hpp	/^    json_ref(value_type&& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	support/tinygltf/json.hpp	/^class json_ref$/;"	c	namespace:nlohmann::detail
json_reverse_iterator	support/tinygltf/json.hpp	/^class json_reverse_iterator : public std::reverse_iterator<Base>$/;"	c	namespace:nlohmann::detail
json_sax	support/tinygltf/json.hpp	/^struct json_sax$/;"	s	namespace:nlohmann
json_sax_acceptor	support/tinygltf/json.hpp	/^class json_sax_acceptor$/;"	c	namespace:nlohmann::detail
json_sax_dom_callback_parser	support/tinygltf/json.hpp	/^    json_sax_dom_callback_parser(BasicJsonType& r,$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
json_sax_dom_callback_parser	support/tinygltf/json.hpp	/^class json_sax_dom_callback_parser$/;"	c	namespace:nlohmann::detail
json_sax_dom_parser	support/tinygltf/json.hpp	/^    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
json_sax_dom_parser	support/tinygltf/json.hpp	/^class json_sax_dom_parser$/;"	c	namespace:nlohmann::detail
json_value	support/tinygltf/json.hpp	/^        json_value(array_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(const array_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(const object_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(const string_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(object_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(string_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^        json_value(value_t t)$/;"	f	union:nlohmann::basic_json::json_value
json_value	support/tinygltf/json.hpp	/^    union json_value$/;"	u	class:nlohmann::basic_json
k	support/tinygltf/json.hpp	/^    int k;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power
kAlpha	support/tinygltf/json.hpp	/^constexpr int kAlpha = -60;$/;"	m	namespace:nlohmann::detail::dtoa_impl
kEXRVersionSize	support/tinyexr/tinyexr.h	/^static const int kEXRVersionSize = 8;$/;"	m	namespace:tinyexr
kGamma	support/tinygltf/json.hpp	/^constexpr int kGamma = -32;$/;"	m	namespace:nlohmann::detail::dtoa_impl
kNotifySelectedKeyboardInputSourceChanged	support/GLFW/src/cocoa_platform.h	/^        CFStringRef     kNotifySelectedKeyboardInputSourceChanged;$/;"	m	struct:_GLFWlibraryNS::__anon27
kPrecision	support/tinygltf/json.hpp	/^    static constexpr int kPrecision = 64; \/\/ = q$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp
kPropertyUnicodeKeyLayoutData	support/GLFW/src/cocoa_platform.h	/^        CFStringRef     kPropertyUnicodeKeyLayoutData;$/;"	m	struct:_GLFWlibraryNS::__anon27
kTISNotifySelectedKeyboardInputSourceChanged	support/GLFW/src/cocoa_platform.h	61;"	d
kTISPropertyUnicodeKeyLayoutData	support/GLFW/src/cocoa_platform.h	60;"	d
keep_stack	support/tinygltf/json.hpp	/^    std::vector<bool> keep_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
kern	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
key	support/GLFW/src/internal.h	/^        GLFWkeyfun              key;$/;"	m	struct:_GLFWwindow::__anon8
key	support/imgui/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::Pair
key	support/tinygltf/json.hpp	/^        key,$/;"	m	class:nlohmann::detail::parser::parse_event_t
key	support/tinygltf/json.hpp	/^    auto key() const -> decltype(std::declval<Base>().key())$/;"	f	class:nlohmann::detail::json_reverse_iterator
key	support/tinygltf/json.hpp	/^    bool key(string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
key	support/tinygltf/json.hpp	/^    bool key(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
key	support/tinygltf/json.hpp	/^    bool key(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
key	support/tinygltf/json.hpp	/^    const std::string& key() const$/;"	f	class:nlohmann::detail::iteration_proxy_value
key	support/tinygltf/json.hpp	/^    const typename object_t::key_type& key() const$/;"	f	class:nlohmann::detail::iter_impl
keyCallback	optixBoundValues/optixBoundValues.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixCutouts/optixCutouts.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t mods )$/;"	f	file:
keyCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixDynamicMaterials/optixDynamicMaterials.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixHair/Renderers.cpp	/^void WindowRenderer::keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	class:WindowRenderer
keyCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixMultiGPU/optixMultiGPU.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixNVLink/optixNVLink.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixPathTracer/optixPathTracer.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	optixWhitted/optixWhitted.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	file:
keyCallback	sutil/sutil.cpp	/^static void keyCallback( GLFWwindow* window, int32_t key, int32_t \/*scancode*\/, int32_t action, int32_t \/*mods*\/ )$/;"	f	namespace:sutil
keyName	support/GLFW/src/cocoa_platform.h	/^    char                keyName[64];$/;"	m	struct:_GLFWlibraryNS
keyName	support/GLFW/src/win32_platform.h	/^    char                keyName[64];$/;"	m	struct:_GLFWlibraryWin32
keyName	support/GLFW/src/x11_platform.h	/^    char            keyName[64];$/;"	m	struct:_GLFWlibraryX11
key_keep_stack	support/tinygltf/json.hpp	/^    std::vector<bool> key_keep_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
keyboard	support/GLFW/src/wl_platform.h	/^    struct wl_keyboard*         keyboard;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_keyboard
keyboardFocus	support/GLFW/src/wl_platform.h	/^    _GLFWwindow*                keyboardFocus;$/;"	m	struct:_GLFWlibraryWayland
keyboardHandleEnter	support/GLFW/src/wl_init.c	/^static void keyboardHandleEnter(void* data,$/;"	f	file:
keyboardHandleKey	support/GLFW/src/wl_init.c	/^static void keyboardHandleKey(void* data,$/;"	f	file:
keyboardHandleKeymap	support/GLFW/src/wl_init.c	/^static void keyboardHandleKeymap(void* data,$/;"	f	file:
keyboardHandleLeave	support/GLFW/src/wl_init.c	/^static void keyboardHandleLeave(void* data,$/;"	f	file:
keyboardHandleModifiers	support/GLFW/src/wl_init.c	/^static void keyboardHandleModifiers(void* data,$/;"	f	file:
keyboardListener	support/GLFW/src/wl_init.c	/^static const struct wl_keyboard_listener keyboardListener = {$/;"	v	typeref:struct:wl_keyboard_listener	file:
keymap	support/GLFW/src/wl_platform.h	/^        struct xkb_keymap*      keymap;$/;"	m	struct:_GLFWlibraryWayland::__anon19	typeref:struct:_GLFWlibraryWayland::__anon19::xkb_keymap
keys	support/GLFW/src/internal.h	/^    char                keys[GLFW_KEY_LAST + 1];$/;"	m	struct:_GLFWwindow
keysym	support/GLFW/src/xkb_unicode.c	/^  unsigned short keysym;$/;"	m	struct:codepair	file:
keysymtab	support/GLFW/src/xkb_unicode.c	/^} keysymtab[] = {$/;"	v	typeref:struct:codepair	file:
khronos_boolean_enum_t	support/GLFW/deps/KHR/khrplatform.h	/^} khronos_boolean_enum_t;$/;"	t	typeref:enum:__anon31
khronos_boolean_enum_t	support/KHR/khrplatform.h	/^} khronos_boolean_enum_t;$/;"	t	typeref:enum:__anon121
khronos_float_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef          float         khronos_float_t;$/;"	t
khronos_float_t	support/KHR/khrplatform.h	/^typedef          float         khronos_float_t;$/;"	t
khronos_int16_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   short int     khronos_int16_t;$/;"	t
khronos_int16_t	support/KHR/khrplatform.h	/^typedef signed   short int     khronos_int16_t;$/;"	t
khronos_int32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef __int32                 khronos_int32_t;$/;"	t
khronos_int32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef int                     khronos_int32_t;$/;"	t
khronos_int32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef int32_t                 khronos_int32_t;$/;"	t
khronos_int32_t	support/KHR/khrplatform.h	/^typedef __int32                 khronos_int32_t;$/;"	t
khronos_int32_t	support/KHR/khrplatform.h	/^typedef int                     khronos_int32_t;$/;"	t
khronos_int32_t	support/KHR/khrplatform.h	/^typedef int32_t                 khronos_int32_t;$/;"	t
khronos_int64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef __int64                 khronos_int64_t;$/;"	t
khronos_int64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef int64_t                 khronos_int64_t;$/;"	t
khronos_int64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef long int                khronos_int64_t;$/;"	t
khronos_int64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef long long int           khronos_int64_t;$/;"	t
khronos_int64_t	support/KHR/khrplatform.h	/^typedef __int64                 khronos_int64_t;$/;"	t
khronos_int64_t	support/KHR/khrplatform.h	/^typedef int64_t                 khronos_int64_t;$/;"	t
khronos_int64_t	support/KHR/khrplatform.h	/^typedef long int                khronos_int64_t;$/;"	t
khronos_int64_t	support/KHR/khrplatform.h	/^typedef long long int           khronos_int64_t;$/;"	t
khronos_int8_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   char          khronos_int8_t;$/;"	t
khronos_int8_t	support/KHR/khrplatform.h	/^typedef signed   char          khronos_int8_t;$/;"	t
khronos_intptr_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t
khronos_intptr_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t
khronos_intptr_t	support/KHR/khrplatform.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t
khronos_intptr_t	support/KHR/khrplatform.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t
khronos_ssize_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t
khronos_ssize_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t
khronos_ssize_t	support/KHR/khrplatform.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t
khronos_ssize_t	support/KHR/khrplatform.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t
khronos_stime_nanoseconds_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef khronos_int64_t        khronos_stime_nanoseconds_t;$/;"	t
khronos_stime_nanoseconds_t	support/KHR/khrplatform.h	/^typedef khronos_int64_t        khronos_stime_nanoseconds_t;$/;"	t
khronos_uint16_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t
khronos_uint16_t	support/KHR/khrplatform.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t
khronos_uint32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef uint32_t                khronos_uint32_t;$/;"	t
khronos_uint32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned __int32        khronos_uint32_t;$/;"	t
khronos_uint32_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned int            khronos_uint32_t;$/;"	t
khronos_uint32_t	support/KHR/khrplatform.h	/^typedef uint32_t                khronos_uint32_t;$/;"	t
khronos_uint32_t	support/KHR/khrplatform.h	/^typedef unsigned __int32        khronos_uint32_t;$/;"	t
khronos_uint32_t	support/KHR/khrplatform.h	/^typedef unsigned int            khronos_uint32_t;$/;"	t
khronos_uint64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef uint64_t                khronos_uint64_t;$/;"	t
khronos_uint64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned __int64        khronos_uint64_t;$/;"	t
khronos_uint64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long int       khronos_uint64_t;$/;"	t
khronos_uint64_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long long int  khronos_uint64_t;$/;"	t
khronos_uint64_t	support/KHR/khrplatform.h	/^typedef uint64_t                khronos_uint64_t;$/;"	t
khronos_uint64_t	support/KHR/khrplatform.h	/^typedef unsigned __int64        khronos_uint64_t;$/;"	t
khronos_uint64_t	support/KHR/khrplatform.h	/^typedef unsigned long int       khronos_uint64_t;$/;"	t
khronos_uint64_t	support/KHR/khrplatform.h	/^typedef unsigned long long int  khronos_uint64_t;$/;"	t
khronos_uint8_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t
khronos_uint8_t	support/KHR/khrplatform.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t
khronos_uintptr_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_uintptr_t;$/;"	t
khronos_uintptr_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long long int khronos_uintptr_t;$/;"	t
khronos_uintptr_t	support/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_uintptr_t;$/;"	t
khronos_uintptr_t	support/KHR/khrplatform.h	/^typedef unsigned long long int khronos_uintptr_t;$/;"	t
khronos_usize_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_usize_t;$/;"	t
khronos_usize_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef unsigned long long int khronos_usize_t;$/;"	t
khronos_usize_t	support/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_usize_t;$/;"	t
khronos_usize_t	support/KHR/khrplatform.h	/^typedef unsigned long long int khronos_usize_t;$/;"	t
khronos_utime_nanoseconds_t	support/GLFW/deps/KHR/khrplatform.h	/^typedef khronos_uint64_t       khronos_utime_nanoseconds_t;$/;"	t
khronos_utime_nanoseconds_t	support/KHR/khrplatform.h	/^typedef khronos_uint64_t       khronos_utime_nanoseconds_t;$/;"	t
lARx	support/GLFW/deps/mingw/dinput.h	/^	LONG	lARx;$/;"	m	struct:DIJOYSTATE2
lARy	support/GLFW/deps/mingw/dinput.h	/^	LONG	lARy;$/;"	m	struct:DIJOYSTATE2
lARz	support/GLFW/deps/mingw/dinput.h	/^	LONG	lARz;$/;"	m	struct:DIJOYSTATE2
lAX	support/GLFW/deps/mingw/dinput.h	/^	LONG	lAX;		\/* 'a' as in acceleration *\/$/;"	m	struct:DIJOYSTATE2
lAY	support/GLFW/deps/mingw/dinput.h	/^	LONG	lAY;$/;"	m	struct:DIJOYSTATE2
lAZ	support/GLFW/deps/mingw/dinput.h	/^	LONG	lAZ;$/;"	m	struct:DIJOYSTATE2
lAxisMax	support/GLFW/deps/mingw/dinput.h	/^	LONG		lAxisMax;$/;"	m	struct:_DIACTIONFORMATA
lAxisMax	support/GLFW/deps/mingw/dinput.h	/^	LONG		lAxisMax;$/;"	m	struct:_DIACTIONFORMATW
lAxisMin	support/GLFW/deps/mingw/dinput.h	/^	LONG		lAxisMin;$/;"	m	struct:_DIACTIONFORMATA
lAxisMin	support/GLFW/deps/mingw/dinput.h	/^	LONG		lAxisMin;$/;"	m	struct:_DIACTIONFORMATW
lCenter	support/GLFW/deps/mingw/dinput.h	/^	LONG	lCenter;$/;"	m	struct:DIPROPCAL
lDeadBand	support/GLFW/deps/mingw/dinput.h	/^	LONG			lDeadBand;$/;"	m	struct:DICONDITION
lEnd	support/GLFW/deps/mingw/dinput.h	/^	LONG			lEnd;$/;"	m	struct:DIRAMPFORCE
lFRx	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFRx;		\/* 'fr' as in rotational force aka torque *\/$/;"	m	struct:DIJOYSTATE2
lFRy	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFRy;$/;"	m	struct:DIJOYSTATE2
lFRz	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFRz;$/;"	m	struct:DIJOYSTATE2
lFX	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFX;		\/* 'f' as in force *\/$/;"	m	struct:DIJOYSTATE2
lFY	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFY;$/;"	m	struct:DIJOYSTATE2
lFZ	support/GLFW/deps/mingw/dinput.h	/^	LONG	lFZ;$/;"	m	struct:DIJOYSTATE2
lMagnitude	support/GLFW/deps/mingw/dinput.h	/^	LONG			lMagnitude;$/;"	m	struct:DICONSTANTFORCE
lMax	support/GLFW/deps/mingw/dinput.h	/^	LONG		lMax;$/;"	m	struct:DIPROPRANGE
lMax	support/GLFW/deps/mingw/dinput.h	/^	LONG		lMax[5];$/;"	m	struct:DIPROPCALPOV
lMax	support/GLFW/deps/mingw/dinput.h	/^	LONG	lMax;$/;"	m	struct:DIPROPCAL
lMin	support/GLFW/deps/mingw/dinput.h	/^	LONG		lMin;$/;"	m	struct:DIPROPRANGE
lMin	support/GLFW/deps/mingw/dinput.h	/^	LONG		lMin[5];$/;"	m	struct:DIPROPCALPOV
lMin	support/GLFW/deps/mingw/dinput.h	/^	LONG	lMin;$/;"	m	struct:DIPROPCAL
lNegativeCoefficient	support/GLFW/deps/mingw/dinput.h	/^	LONG			lNegativeCoefficient;$/;"	m	struct:DICONDITION
lOffset	support/GLFW/deps/mingw/dinput.h	/^	LONG			lOffset;$/;"	m	struct:DICONDITION
lOffset	support/GLFW/deps/mingw/dinput.h	/^	LONG			lOffset;$/;"	m	struct:DIPERIODIC
lP	support/GLFW/deps/mingw/dinput.h	/^    LONG	lP;$/;"	m	struct:_CPOINT
lPositiveCoefficient	support/GLFW/deps/mingw/dinput.h	/^	LONG			lPositiveCoefficient;$/;"	m	struct:DICONDITION
lRx	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRx;$/;"	m	struct:DIJOYSTATE
lRx	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRx;$/;"	m	struct:DIJOYSTATE2
lRy	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRy;$/;"	m	struct:DIJOYSTATE
lRy	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRy;$/;"	m	struct:DIJOYSTATE2
lRz	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRz;$/;"	m	struct:DIJOYSTATE
lRz	support/GLFW/deps/mingw/dinput.h	/^	LONG	lRz;$/;"	m	struct:DIJOYSTATE2
lStart	support/GLFW/deps/mingw/dinput.h	/^	LONG			lStart;$/;"	m	struct:DIRAMPFORCE
lVRx	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVRx;$/;"	m	struct:DIJOYSTATE2
lVRy	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVRy;$/;"	m	struct:DIJOYSTATE2
lVRz	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVRz;$/;"	m	struct:DIJOYSTATE2
lVX	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVX;		\/* 'v' as in velocity *\/$/;"	m	struct:DIJOYSTATE2
lVY	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVY;$/;"	m	struct:DIJOYSTATE2
lVZ	support/GLFW/deps/mingw/dinput.h	/^	LONG	lVZ;$/;"	m	struct:DIJOYSTATE2
lX	support/GLFW/deps/mingw/dinput.h	/^	LONG	lX;$/;"	m	struct:DIJOYSTATE
lX	support/GLFW/deps/mingw/dinput.h	/^	LONG	lX;$/;"	m	struct:DIJOYSTATE2
lX	support/GLFW/deps/mingw/dinput.h	/^  LONG lX;$/;"	m	struct:DIMOUSESTATE
lX	support/GLFW/deps/mingw/dinput.h	/^  LONG lX;$/;"	m	struct:DIMOUSESTATE2
lY	support/GLFW/deps/mingw/dinput.h	/^	LONG	lY;$/;"	m	struct:DIJOYSTATE
lY	support/GLFW/deps/mingw/dinput.h	/^	LONG	lY;$/;"	m	struct:DIJOYSTATE2
lY	support/GLFW/deps/mingw/dinput.h	/^  LONG lY;$/;"	m	struct:DIMOUSESTATE
lY	support/GLFW/deps/mingw/dinput.h	/^  LONG lY;$/;"	m	struct:DIMOUSESTATE2
lZ	support/GLFW/deps/mingw/dinput.h	/^	LONG	lZ;$/;"	m	struct:DIJOYSTATE
lZ	support/GLFW/deps/mingw/dinput.h	/^	LONG	lZ;$/;"	m	struct:DIJOYSTATE2
lZ	support/GLFW/deps/mingw/dinput.h	/^  LONG lZ;$/;"	m	struct:DIMOUSESTATE
lZ	support/GLFW/deps/mingw/dinput.h	/^  LONG lZ;$/;"	m	struct:DIMOUSESTATE2
lambert	optixVolumeViewer/volume.h	/^        Lambert lambert;$/;"	m	union:MaterialData::__anon6
largePoints	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    largePoints;$/;"	m	struct:VkPhysicalDeviceFeatures
lastCursorPosX	support/GLFW/src/win32_platform.h	/^    int                 lastCursorPosX, lastCursorPosY;$/;"	m	struct:_GLFWwindowWin32
lastCursorPosX	support/GLFW/src/x11_platform.h	/^    int             lastCursorPosX, lastCursorPosY;$/;"	m	struct:_GLFWwindowX11
lastCursorPosY	support/GLFW/src/win32_platform.h	/^    int                 lastCursorPosX, lastCursorPosY;$/;"	m	struct:_GLFWwindowWin32
lastCursorPosY	support/GLFW/src/x11_platform.h	/^    int             lastCursorPosX, lastCursorPosY;$/;"	m	struct:_GLFWwindowX11
lastKeyCode	support/GLFW/src/x11_platform.h	/^    unsigned int    lastKeyCode;$/;"	m	struct:_GLFWwindowX11
lastKeyTime	support/GLFW/src/x11_platform.h	/^    Time            lastKeyTime;$/;"	m	struct:_GLFWwindowX11
lastRotationDegree	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                      lastRotationDegree = 0;$/;"	m	struct:DeformSphereAnimation	file:
lastRotationDegree	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   lastRotationDegree = 0.f;$/;"	m	class:ExhaustFume	file:
lastRotationDegree	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   lastRotationDegree = 120;$/;"	m	struct:PlaneAnimation	file:
last_exploding_sphere_rebuild_time	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    float                          last_exploding_sphere_rebuild_time = 0.f;$/;"	m	struct:DynamicGeometryState	file:
last_token	support/tinygltf/json.hpp	/^    token_type last_token = token_type::uninitialized;$/;"	m	class:nlohmann::detail::parser
launch	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void launch( DisplacedMicromeshState& state )$/;"	f
launch	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void launch( SampleState& state, sutil::CUDAOutputBuffer<uchar4>& output_buffer )$/;"	f
launch	optixRaycasting/optixRaycasting.cpp	/^void launch( RaycastingState& state )$/;"	f
launchGenerateAnimatedVertices	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void launchGenerateAnimatedVertices( DynamicGeometryState& state, AnimationMode animation_mode )$/;"	f
launchGenerateAnimatedVertices	optixMotionGeometry/optixMotionGeometry.cpp	/^void launchGenerateAnimatedVertices( MotionGeometryState& state, AnimationMode animation_mode, float time_last_frame, float time_now, int tessellation_resolution )$/;"	f
launchSubframe	optixBoundValues/optixBoundValues.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, PathTracerState& state )$/;"	f
launchSubframe	optixCallablePrograms/optixCallablePrograms.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, CallableProgramsState& state )$/;"	f
launchSubframe	optixConsole/optixConsole.cpp	/^void launchSubframe( OptixConsoleState& state )$/;"	f
launchSubframe	optixCutouts/optixCutouts.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, CutoutsState& state )$/;"	f
launchSubframe	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, DynamicGeometryState& state )$/;"	f
launchSubframe	optixMeshViewer/optixMeshViewer.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, const sutil::Scene& scene )$/;"	f
launchSubframe	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, PathTracerState& state )$/;"	f
launchSubframe	optixMotionGeometry/optixMotionGeometry.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, MotionGeometryState& state )$/;"	f
launchSubframe	optixMultiGPU/optixMultiGPU.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PathTracerState>& states )$/;"	f
launchSubframe	optixNVLink/optixNVLink.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PerDeviceSampleState>& pd_states )$/;"	f
launchSubframe	optixPathTracer/optixPathTracer.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, PathTracerState& state )$/;"	f
launchSubframe	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, SimpleMotionBlurState& state )$/;"	f
launchSubframe	optixVolumeViewer/optixVolumeViewer.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer )$/;"	f
launchSubframe	optixWhitted/optixWhitted.cpp	/^void launchSubframe( sutil::CUDAOutputBuffer<uchar4>& output_buffer, WhittedState& state )$/;"	f
launch_params	optixVolumeViewer/optixVolumeViewer.cpp	/^Params launch_params = {};$/;"	v
layerCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceLayers
layerCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceRange
layerCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    layerCount;$/;"	m	struct:VkClearRect
layerName	support/GLFW/deps/vulkan/vulkan.h	/^    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkLayerProperties
layers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    layers;$/;"	m	struct:VkFramebufferCreateInfo
layout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout    layout;$/;"	m	struct:VkAttachmentReference
layout	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineLayout                                 layout;$/;"	m	struct:VkGraphicsPipelineCreateInfo
layout	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineLayout                   layout;$/;"	m	struct:VkComputePipelineCreateInfo
lcg	cuda/random.h	/^static __host__ __device__ __inline__ unsigned int lcg(unsigned int &prev)$/;"	f
lcg2	cuda/random.h	/^static __host__ __device__ __inline__ unsigned int lcg2(unsigned int &prev)$/;"	f
leafPoints	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t leafPoints(const Coord& ijk, const AttT*& begin, const AttT*& end) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
len	support/tinyexr/tinyexr.h	/^  int len : 8;   \/\/ code length    0$/;"	m	struct:tinyexr::HufDec
length	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T    length() const { return Sqrt(this->lengthSqr()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
length	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T    length() const { return Sqrt(this->lengthSqr()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
length	support/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon86
length	support/tinygltf/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon104
length	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float length(const float2& v)$/;"	f
length	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float length(const float3& v)$/;"	f
length	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float length(const float4& r)$/;"	f
lengthSqr	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T lengthSqr() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
lengthSqr	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T lengthSqr() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
lerp	optixMotionGeometry/motionHelper.hpp	/^OptixSRTData lerp( const OptixSRTData& a, const OptixSRTData& b, float t )$/;"	f	namespace:__anon4
lerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float lerp(const float a, const float b, const float t)$/;"	f
lerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 lerp(const float2& a, const float2& b, const float t)$/;"	f
lerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 lerp(const float3& a, const float3& b, const float t)$/;"	f
lerp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 lerp(const float4& a, const float4& b, const float t)$/;"	f
less	support/tinygltf/json.hpp	/^struct less< ::nlohmann::detail::value_t>$/;"	s	namespace:std
lessThan	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static inline bool lessThan(const Coord& a, const Coord& b)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
level	support/GLFW/deps/vulkan/vulkan.h	/^    VkCommandBufferLevel    level;$/;"	m	struct:VkCommandBufferAllocateInfo
levelCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              levelCount;$/;"	m	struct:VkImageSubresourceRange
level_x	support/tinyexr/tinyexr.h	/^  int level_x;$/;"	m	struct:_EXRTile
level_y	support/tinyexr/tinyexr.h	/^  int level_y;$/;"	m	struct:_EXRTile
lexer	support/tinygltf/json.hpp	/^    explicit lexer(detail::input_adapter_t&& adapter)$/;"	f	class:nlohmann::detail::lexer
lexer	support/tinygltf/json.hpp	/^class lexer$/;"	c	namespace:nlohmann::detail
lflags	support/tinygltf/stb_image.h	/^   int lflags;$/;"	m	struct:__anon110
libGL	support/glad/glad.c	/^static HMODULE libGL;$/;"	v	file:
libGL	support/glad/glad.c	/^static void* libGL;$/;"	v	file:
light	optixBoundValues/optixBoundValues.h	/^    ParallelogramLight     light; \/\/ TODO: make light list$/;"	m	struct:Params
light	optixCutouts/optixCutouts.h	/^    ParallelogramLight     light; \/\/ TODO: make light list$/;"	m	struct:Params
light	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    ParallelogramLight     light; \/\/ TODO: make light list$/;"	m	struct:Params
light	optixMultiGPU/optixMultiGPU.h	/^    ParallelogramLight     light; \/\/ TODO: make light list$/;"	m	struct:Params
light	optixNVLink/optixNVLink.h	/^    ParallelogramLight     light; $/;"	m	struct:Params
light	optixPathTracer/optixPathTracer.h	/^    ParallelogramLight     light; \/\/ TODO: make light list$/;"	m	struct:Params
light_samples	optixBoundValues/optixBoundValues.cpp	/^unsigned int light_samples = 1;$/;"	v
light_samples	optixBoundValues/optixBoundValues.h	/^    unsigned int light_samples;$/;"	m	struct:Params
light_samples	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^unsigned int light_samples = 1;$/;"	v
light_samples	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int light_samples;$/;"	m	struct:Params
lights	cuda/whitted.h	/^    BufferView<Light>        lights;$/;"	m	struct:whitted::LaunchParams
lights	optixHair/optixHair.h	/^    Light lights[2] = {};$/;"	m	struct:HairState
lights	optixVolumeViewer/volume.h	/^    BufferView<Light>        lights;$/;"	m	struct:LaunchParams
lights	support/tinygltf/tiny_gltf.h	/^  std::vector<Light> lights;$/;"	m	class:tinygltf::Model
limit	support/tinygltf/json.hpp	/^    const char* const limit;$/;"	m	class:nlohmann::detail::input_buffer_adapter
limits	support/GLFW/deps/vulkan/vulkan.h	/^    VkPhysicalDeviceLimits              limits;$/;"	m	struct:VkPhysicalDeviceProperties
line0	support/tinygltf/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon101
line1	support/tinygltf/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon101
lineGroup	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<__line_t> lineGroup;$/;"	m	struct:tinyobj::PrimGroup
lineWidth	support/GLFW/deps/vulkan/vulkan.h	/^    float                                      lineWidth;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
lineWidthGranularity	support/GLFW/deps/vulkan/vulkan.h	/^    float                 lineWidthGranularity;$/;"	m	struct:VkPhysicalDeviceLimits
lineWidthRange	support/GLFW/deps/vulkan/vulkan.h	/^    float                 lineWidthRange[2];$/;"	m	struct:VkPhysicalDeviceLimits
line_order	support/tinyexr/tinyexr.h	/^  int line_order;$/;"	m	struct:_EXRHeader
line_order	support/tinyexr/tinyexr.h	/^  int line_order;$/;"	m	struct:tinyexr::HeaderInfo
line_size	support/tinygltf/stb_image.h	/^   int line_size;$/;"	m	struct:__anon110
linearTilingFeatures	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormatFeatureFlags    linearTilingFeatures;$/;"	m	struct:VkFormatProperties
linearize	cuda/whitted_cuda.h	/^__device__ __forceinline__ float3 linearize( float3 c )$/;"	f	namespace:whitted
linebuf	support/tinygltf/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon99::__anon100
lines	optixMotionGeometry/tiny_obj_loader.h	/^  lines_t lines;$/;"	m	struct:tinyobj::shape_t
lines_read	support/tinygltf/json.hpp	/^    std::size_t lines_read = 0;$/;"	m	struct:nlohmann::detail::position_t
lines_t	optixMotionGeometry/tiny_obj_loader.h	/^struct lines_t {$/;"	s	namespace:tinyobj
listener	support/GLFW/src/cocoa_platform.h	/^    id                  listener;$/;"	m	struct:_GLFWlibraryNS
lit	support/tinyexr/tinyexr.h	/^  int lit : 24;  \/\/ lit      p size$/;"	m	struct:tinyexr::HufDec
literal_false	support/tinygltf/json.hpp	/^        literal_false,    \/\/\/< the `false` literal$/;"	m	class:nlohmann::detail::lexer::token_type
literal_null	support/tinygltf/json.hpp	/^        literal_null,     \/\/\/< the `null` literal$/;"	m	class:nlohmann::detail::lexer::token_type
literal_true	support/tinygltf/json.hpp	/^        literal_true,     \/\/\/< the `true` literal$/;"	m	class:nlohmann::detail::lexer::token_type
loadDllHandle	optixNVLink/optixNVLink.cpp	/^void* loadDllHandle( const char* dllName )$/;"	f
loadImage	sutil/sutil.cpp	/^ImageBuffer loadImage( const char* fname, int32_t force_components )$/;"	f	namespace:sutil
loadLibraries	support/GLFW/src/win32_init.c	/^static GLFWbool loadLibraries(void)$/;"	f	file:
loadNvmlFunctions	optixNVLink/optixNVLink.cpp	/^static bool loadNvmlFunctions()$/;"	f	file:
loadOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkAttachmentLoadOp              loadOp;$/;"	m	struct:VkAttachmentDescription
loadPPMTexture	sutil/PPMLoader.cpp	/^sutil::Texture loadPPMTexture( const std::string& filename, const float3& default_color, cudaTextureDesc* tex_desc )$/;"	f
loadScene	sutil/Scene.cpp	/^void loadScene( const std::string& filename, Scene& scene )$/;"	f	namespace:sutil
loadSharedObjectHandle	optixNVLink/optixNVLink.cpp	/^void* loadSharedObjectHandle( const char* soName )$/;"	f
loadTexture	optixNVLink/optixNVLink.cpp	/^float loadTexture( std::vector<PerDeviceSampleState>& pd_states, std::vector<int>& p2p_islands, int mat_index )$/;"	f
loadTexture	sutil/PPMLoader.cpp	/^sutil::Texture PPMLoader::loadTexture( const float3& default_color, cudaTextureDesc* tex_desc )$/;"	f	class:PPMLoader
loadTexture	sutil/sutil.cpp	/^Texture loadTexture( const char* fname, float3 default_color, cudaTextureDesc* tex_desc )$/;"	f	namespace:sutil
loadTextureOnDevice	optixNVLink/optixNVLink.cpp	/^float loadTextureOnDevice( int mat_index, int device_idx )$/;"	f
loadTextures	optixNVLink/optixNVLink.cpp	/^void loadTextures( std::vector<PerDeviceSampleState>& pd_states, std::vector<int>& p2p_islands )$/;"	f
loadVolume	optixVolumeViewer/optixVolumeViewer.cpp	/^void loadVolume( Volume& grid, const std::string& filename )$/;"	f
loadWGLExtensions	support/GLFW/src/wgl_context.c	/^static void loadWGLExtensions(void)$/;"	f	file:
load_GL_ARB_multisample	support/GLFW/deps/glad.c	/^static void load_GL_ARB_multisample(GLADloadproc load) {$/;"	f	file:
load_GL_ARB_robustness	support/GLFW/deps/glad.c	/^static void load_GL_ARB_robustness(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_0	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_0	support/glad/glad.c	/^static void load_GL_VERSION_1_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_1	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_1	support/glad/glad.c	/^static void load_GL_VERSION_1_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_2	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_2(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_2	support/glad/glad.c	/^static void load_GL_VERSION_1_2(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_3	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_3(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_3	support/glad/glad.c	/^static void load_GL_VERSION_1_3(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_4	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_4(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_4	support/glad/glad.c	/^static void load_GL_VERSION_1_4(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_5	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_1_5(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_1_5	support/glad/glad.c	/^static void load_GL_VERSION_1_5(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_2_0	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_2_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_2_0	support/glad/glad.c	/^static void load_GL_VERSION_2_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_2_1	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_2_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_2_1	support/glad/glad.c	/^static void load_GL_VERSION_2_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_0	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_3_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_0	support/glad/glad.c	/^static void load_GL_VERSION_3_0(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_1	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_3_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_1	support/glad/glad.c	/^static void load_GL_VERSION_3_1(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_2	support/GLFW/deps/glad.c	/^static void load_GL_VERSION_3_2(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_2	support/glad/glad.c	/^static void load_GL_VERSION_3_2(GLADloadproc load) {$/;"	f	file:
load_GL_VERSION_3_3	support/glad/glad.c	/^static void load_GL_VERSION_3_3(GLADloadproc load) {$/;"	f	file:
load_jpeg_image	support/tinygltf/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
loc	support/tinygltf/json.hpp	/^    const std::lconv* loc = nullptr;$/;"	m	class:nlohmann::detail::serializer
loca	support/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
localTime	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   localTime = 0.f;$/;"	m	class:ExhaustFume	file:
localToGlobalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void localToGlobalCoord(Coord& ijk) const { ijk += this->origin(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
localToGlobalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void localToGlobalCoord(Coord& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
location	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    location;$/;"	m	struct:VkVertexInputAttributeDescription
lockPointer	support/GLFW/src/wl_window.c	/^static void lockPointer(_GLFWwindow* window)$/;"	f	file:
lockedPointer	support/GLFW/src/wl_platform.h	/^        struct zwp_locked_pointer_v1*      lockedPointer;$/;"	m	struct:_GLFWwindowWayland::__anon18	typeref:struct:_GLFWwindowWayland::__anon18::zwp_locked_pointer_v1
lockedPointerListener	support/GLFW/src/wl_window.c	/^static const struct zwp_locked_pointer_v1_listener lockedPointerListener = {$/;"	v	typeref:struct:zwp_locked_pointer_v1_listener	file:
logicOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    logicOp;$/;"	m	struct:VkPhysicalDeviceFeatures
logicOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkLogicOp                                     logicOp;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
logicOpEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                      logicOpEnable;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
long_name	support/tinyexr/tinyexr.h	/^  int long_name;  \/\/ long name attribute$/;"	m	struct:_EXRVersion
long_name	support/tinyexr/tinyexr.h	/^  int long_name;$/;"	m	struct:_EXRHeader
longestAxis	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE int Aabb::longestAxis() const$/;"	f	class:sutil::Aabb
lookat	sutil/Camera.h	/^    SUTILAPI const float3& lookat() const { return m_lookat; }$/;"	f	class:sutil::Camera
lowerPlane	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void lowerPlane()$/;"	f
lpDiEffect	support/GLFW/deps/mingw/dinput.h	/^  LPCDIEFFECT lpDiEffect;$/;"	m	struct:DIFILEEFFECT
lpEnvelope	support/GLFW/deps/mingw/dinput.h	/^	LPDIENVELOPE		lpEnvelope;$/;"	m	struct:DIEFFECT
lpEnvelope	support/GLFW/deps/mingw/dinput.h	/^	LPDIENVELOPE		lpEnvelope;$/;"	m	struct:DIEFFECT_DX5
lpUnkDDSTarget	support/GLFW/deps/mingw/dinput.h	/^	LPUNKNOWN		lpUnkDDSTarget;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
lpUnkDDSTarget	support/GLFW/deps/mingw/dinput.h	/^	LPUNKNOWN		lpUnkDDSTarget;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
lpal	support/tinygltf/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon110
lprgFormats	support/GLFW/deps/mingw/dinput.h	/^	LPDIACTIONFORMATA	lprgFormats;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
lprgFormats	support/GLFW/deps/mingw/dinput.h	/^	LPDIACTIONFORMATW	lprgFormats;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
lprgImageInfoArray	support/GLFW/deps/mingw/dinput.h	/^	LPDIDEVICEIMAGEINFOA	lprgImageInfoArray;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERA
lprgImageInfoArray	support/GLFW/deps/mingw/dinput.h	/^	LPDIDEVICEIMAGEINFOW	lprgImageInfoArray;$/;"	m	struct:_DIDEVICEIMAGEINFOHEADERW
lptszActionName	support/GLFW/deps/mingw/dinput.h	/^		LPCSTR	lptszActionName;$/;"	m	union:_DIACTIONA::__anon29
lptszActionName	support/GLFW/deps/mingw/dinput.h	/^		LPCWSTR	lptszActionName;$/;"	m	union:_DIACTIONW::__anon30
lptszUserNames	support/GLFW/deps/mingw/dinput.h	/^	LPSTR			lptszUserNames;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSA
lptszUserNames	support/GLFW/deps/mingw/dinput.h	/^	LPWSTR			lptszUserNames;$/;"	m	struct:_DICONFIGUREDEVICESPARAMSW
lpvInBuffer	support/GLFW/deps/mingw/dinput.h	/^	LPVOID	lpvInBuffer;$/;"	m	struct:DIEFFESCAPE
lpvOutBuffer	support/GLFW/deps/mingw/dinput.h	/^	LPVOID	lpvOutBuffer;$/;"	m	struct:DIEFFESCAPE
lpvTypeSpecificParams	support/GLFW/deps/mingw/dinput.h	/^	LPVOID			lpvTypeSpecificParams;$/;"	m	struct:DIEFFECT
lpvTypeSpecificParams	support/GLFW/deps/mingw/dinput.h	/^	LPVOID			lpvTypeSpecificParams;$/;"	m	struct:DIEFFECT_DX5
luminance	cuda/helpers.h	/^__forceinline__ __device__ float luminance( const float3& rgb )$/;"	f
m	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    float m[12];$/;"	m	struct:Instance	file:
m	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    float m[12];$/;"	m	struct:Matrix	file:
m	optixMotionGeometry/motionHelper.hpp	/^    float m[12];$/;"	m	struct:__anon4::Matrix3x4
m	support/tinygltf/json.hpp	/^    std::runtime_error m;$/;"	m	class:nlohmann::detail::exception
mAcc	optixVolumeViewer/nanovdb/util/HDDA.h	/^    AccT&             mAcc;$/;"	m	class:nanovdb::TreeMarcher
mAlreadyLocked	support/GLFW/deps/tinycthread.h	/^  int mAlreadyLocked;         \/* TRUE if the mutex is already locked *\/$/;"	m	struct:__anon32
mArg	support/GLFW/deps/tinycthread.c	/^  void * mArg;            \/**< Function argument for the thread function. *\/$/;"	m	struct:__anon28	file:
mAverage	optixVolumeViewer/nanovdb/NanoVDB.h	/^        FloatType mAverage; \/\/ typically 4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^        const BBox& mBBox;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
mBBoxMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^        CoordType mBBoxMax; \/\/ 3*4B $/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mBBoxMin	optixVolumeViewer/nanovdb/NanoVDB.h	/^        CoordType mBBoxMin; \/\/ 3*4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mBuffer	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    BufferT mBuffer;$/;"	m	class:nanovdb::GridHandle
mCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    Vec3T             mCoord[2];$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
mData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    const AttT*       mData;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
mData	optixVolumeViewer/nanovdb/NanoVDB.h	/^    uint32_t mData;\/\/ 11 + 11 + 10 bit packing of major + minor + patch$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
mData	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^        , mData(other.mData)$/;"	f	class:nanovdb::HostBuffer
mData	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    uint8_t* mData; \/\/ raw buffer for the NanoVDB grid.$/;"	m	class:nanovdb::HostBuffer
mDelta	optixVolumeViewer/nanovdb/util/HDDA.h	/^    Vec3T   mDelta, mNext; \/\/ delta time and next time$/;"	m	class:nanovdb::HDDA
mDelta	optixVolumeViewer/nanovdb/util/HDDA.h	/^    Vec3T  mDelta, mNext; \/\/ delta time and next time$/;"	m	class:nanovdb::DDA
mDim	optixVolumeViewer/nanovdb/NanoVDB.h	/^        uint32_t  mDim; \/\/     4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mDim	optixVolumeViewer/nanovdb/util/HDDA.h	/^    int32_t mDim;$/;"	m	class:nanovdb::HDDA
mDir	optixVolumeViewer/nanovdb/util/Ray.h	/^    Vec3T    mEye, mDir, mInvDir;$/;"	m	class:nanovdb::Ray
mDummy	optixVolumeViewer/nanovdb/NanoVDB.h	/^const uint32_t LeafData<ValueMask, CoordT, MaskT, LOG2DIM>::mDummy = 1u;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafData
mEvents	support/GLFW/deps/tinycthread.h	/^  HANDLE mEvents[2];                  \/* Signal and broadcast event HANDLEs. *\/$/;"	m	struct:__anon33
mEye	optixVolumeViewer/nanovdb/util/Ray.h	/^    Vec3T    mEye, mDir, mInvDir;$/;"	m	class:nanovdb::Ray
mFunction	support/GLFW/deps/tinycthread.c	/^  thrd_start_t mFunction; \/**< Pointer to the function to be executed. *\/$/;"	m	struct:__anon28	file:
mGrid	optixVolumeViewer/nanovdb/NanoVDB.h	/^    const UInt32Grid* mGrid;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
mHandle	support/GLFW/deps/tinycthread.h	/^  CRITICAL_SECTION mHandle;   \/* Critical section handle *\/$/;"	m	struct:__anon32
mHdda	optixVolumeViewer/nanovdb/util/HDDA.h	/^    HDDA<RayT, Coord> mHdda;$/;"	m	class:nanovdb::TreeMarcher
mIndex	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    unsigned int mIndex;$/;"	m	struct:MaterialIndex	file:
mInvDir	optixVolumeViewer/nanovdb/util/Ray.h	/^    Vec3T    mEye, mDir, mInvDir;$/;"	m	class:nanovdb::Ray
mInvMatD	optixVolumeViewer/nanovdb/NanoVDB.h	/^    double mInvMatD[9]; \/\/ 9*8B <- 3x3 matrix$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mInvMatF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    float  mInvMatF[9]; \/\/ 9*4B <- 3x3 matrix$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mLevel	optixVolumeViewer/nanovdb/NanoVDB.h	/^        uint32_t  mLevel; \/\/   4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mMatD	optixVolumeViewer/nanovdb/NanoVDB.h	/^    double mMatD[9]; \/\/ 9*8B <- 3x3 matrix$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mMatF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    float  mMatF[9]; \/\/ 9*4B <- 3x3 matrix$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mMaximum	optixVolumeViewer/nanovdb/NanoVDB.h	/^        ValueType mMaximum; \/\/ typically 4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mMinimum	optixVolumeViewer/nanovdb/NanoVDB.h	/^        ValueType mMinimum; \/\/ typically 4B $/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mNext	optixVolumeViewer/nanovdb/util/HDDA.h	/^    Vec3T   mDelta, mNext; \/\/ delta time and next time$/;"	m	class:nanovdb::HDDA
mNext	optixVolumeViewer/nanovdb/util/HDDA.h	/^    Vec3T  mDelta, mNext; \/\/ delta time and next time$/;"	m	class:nanovdb::DDA
mNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^    mutable const NodeT* mNode; \/\/ 8 bytes$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
mNode	optixVolumeViewer/nanovdb/NanoVDB.h	/^    mutable const void* mNode[3]; \/\/ 4*8 = 32 bytes$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
mParent	optixVolumeViewer/nanovdb/NanoVDB.h	/^        const Mask* mParent;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
mPos	optixVolumeViewer/nanovdb/NanoVDB.h	/^        CoordT      mPos;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
mPos	optixVolumeViewer/nanovdb/NanoVDB.h	/^        uint32_t    mPos;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
mRay	optixVolumeViewer/nanovdb/util/HDDA.h	/^    RayT              mRay;$/;"	m	class:nanovdb::TreeMarcher
mRecursive	support/GLFW/deps/tinycthread.h	/^  int mRecursive;             \/* TRUE if the mutex is recursive *\/$/;"	m	struct:__anon32
mRoot	optixVolumeViewer/nanovdb/NanoVDB.h	/^    mutable const RootT* mRoot; \/\/ 8 bytes (mutable to allow for access methods to be const)$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
mRoot	optixVolumeViewer/nanovdb/NanoVDB.h	/^    mutable const RootT* mRoot; \/\/ 8 bytes$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
mRoot	optixVolumeViewer/nanovdb/NanoVDB.h	/^    mutable const RootT* mRoot;$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
mSign	optixVolumeViewer/nanovdb/util/Ray.h	/^    int      mSign[3];$/;"	m	class:nanovdb::Ray
mSize	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    uint64_t mSize; \/\/ total number of bytes for the NanoVDB grid.$/;"	m	class:nanovdb::HostBuffer
mStdDevi	optixVolumeViewer/nanovdb/NanoVDB.h	/^        FloatType mStdDevi; \/\/ typically 4B$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor::NodeInfo
mStep	optixVolumeViewer/nanovdb/util/HDDA.h	/^    CoordT  mVoxel, mStep; \/\/ current voxel location and step to next voxel location$/;"	m	class:nanovdb::HDDA
mStep	optixVolumeViewer/nanovdb/util/HDDA.h	/^    CoordT mVoxel, mStep; \/\/ current voxel location and step to next voxel location$/;"	m	class:nanovdb::DDA
mT0	optixVolumeViewer/nanovdb/util/HDDA.h	/^    RealT   mT0, mT1; \/\/ min and max allowed times$/;"	m	class:nanovdb::HDDA
mT0	optixVolumeViewer/nanovdb/util/HDDA.h	/^    RealT  mT0, mT1; \/\/ min and max allowed times$/;"	m	class:nanovdb::DDA
mT0	optixVolumeViewer/nanovdb/util/HDDA.h	/^    float             mT0;$/;"	m	class:nanovdb::TreeMarcher
mT1	optixVolumeViewer/nanovdb/util/HDDA.h	/^    RealT   mT0, mT1; \/\/ min and max allowed times$/;"	m	class:nanovdb::HDDA
mT1	optixVolumeViewer/nanovdb/util/HDDA.h	/^    RealT  mT0, mT1; \/\/ min and max allowed times$/;"	m	class:nanovdb::DDA
mTaperD	optixVolumeViewer/nanovdb/NanoVDB.h	/^    double mTaperD; \/\/ 8B, placeholder for taper value$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mTaperF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    float  mTaperF; \/\/ 4B, placeholder for taper value$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mTimeSpan	optixVolumeViewer/nanovdb/util/Ray.h	/^    TimeSpan mTimeSpan;$/;"	m	class:nanovdb::Ray
mTmax	optixVolumeViewer/nanovdb/util/HDDA.h	/^    float             mTmax;$/;"	m	class:nanovdb::TreeMarcher
mVec	optixVolumeViewer/nanovdb/NanoVDB.h	/^    T mVec[3];$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
mVec	optixVolumeViewer/nanovdb/NanoVDB.h	/^    T mVec[4];$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
mVec	optixVolumeViewer/nanovdb/NanoVDB.h	/^    int32_t mVec[3]; \/\/ private member data - three signed index coordinates$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
mVecD	optixVolumeViewer/nanovdb/NanoVDB.h	/^    double mVecD[3]; \/\/ 3*8B <- translation$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mVecF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    float  mVecF[3]; \/\/ 3*4B <- translation$/;"	m	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
mVoxel	optixVolumeViewer/nanovdb/util/HDDA.h	/^    CoordT  mVoxel, mStep; \/\/ current voxel location and step to next voxel location$/;"	m	class:nanovdb::HDDA
mVoxel	optixVolumeViewer/nanovdb/util/HDDA.h	/^    CoordT mVoxel, mStep; \/\/ current voxel location and step to next voxel location$/;"	m	class:nanovdb::DDA
mWaitersCount	support/GLFW/deps/tinycthread.h	/^  unsigned int mWaitersCount;         \/* Count of the number of waiters. *\/$/;"	m	struct:__anon33
mWaitersCountLock	support/GLFW/deps/tinycthread.h	/^  CRITICAL_SECTION mWaitersCountLock; \/* Serialize access to mWaitersCount. *\/$/;"	m	struct:__anon33
mWords	optixVolumeViewer/nanovdb/NanoVDB.h	/^    uint64_t                  mWords[WORD_COUNT];$/;"	m	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
m_aabb	optixHair/Hair.h	/^    mutable sutil::Aabb m_aabb;$/;"	m	class:Hair
m_aabb	optixHair/Head.h	/^    sutil::Aabb                    m_aabb;$/;"	m	class:Head
m_adler32	support/tinyexr/tinyexr.h	/^  mz_uint m_adler32, m_lookahead_pos, m_lookahead_size, m_dict_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_allocCount	sutil/CuBuffer.h	/^    size_t m_allocCount = 0;$/;"	m	class:CuBuffer
m_applyFlowMode	optixDenoiser/OptiXDenoiser.h	/^    bool                  m_applyFlowMode;$/;"	m	class:OptiXDenoiser
m_archive_size	support/tinyexr/tinyexr.h	/^  mz_uint64 m_archive_size;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_aspectRatio	sutil/Camera.h	/^    float m_aspectRatio;$/;"	m	class:sutil::Camera
m_avgColor	optixDenoiser/OptiXDenoiser.h	/^    CUdeviceptr           m_avgColor     = 0;$/;"	m	class:OptiXDenoiser
m_binormal	optixBoundValues/optixBoundValues.h	/^    float3 m_binormal;$/;"	m	struct:Onb
m_binormal	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 m_binormal;$/;"	m	struct:Onb
m_bit_buf	support/tinyexr/tinyexr.h	/^  tinfl_bit_buf_t m_bit_buf;$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_bit_buffer	support/tinyexr/tinyexr.h	/^      m_bit_buffer;$/;"	m	struct:tinyexr::miniz::__anon53
m_bit_flag	support/tinyexr/tinyexr.h	/^  mz_uint16 m_bit_flag;$/;"	m	struct:tinyexr::miniz::__anon39
m_bits_in	support/tinyexr/tinyexr.h	/^  mz_uint m_num_flags_left, m_total_lz_bytes, m_lz_code_buf_dict_pos, m_bits_in,$/;"	m	struct:tinyexr::miniz::__anon53
m_block_index	support/tinyexr/tinyexr.h	/^      m_output_flush_ofs, m_output_flush_remaining, m_finished, m_block_index,$/;"	m	struct:tinyexr::miniz::__anon53
m_buffer	optixHair/Head.h	/^    CUdeviceptr                    m_buffer = 0;$/;"	m	class:Head
m_buffers	sutil/Scene.h	/^    std::vector<CUdeviceptr>                 m_buffers;$/;"	m	class:sutil::Scene
m_camera	sutil/Trackball.h	/^    Camera*      m_camera                   = nullptr;$/;"	m	class:sutil::Trackball
m_cameraEyeLookatDistance	sutil/Trackball.h	/^    float        m_cameraEyeLookatDistance  = 0.0f;$/;"	m	class:sutil::Trackball
m_cameras	sutil/Scene.h	/^    std::vector<Camera>                      m_cameras;$/;"	m	class:sutil::Scene
m_capacity	support/tinyexr/tinyexr.h	/^  size_t m_size, m_capacity;$/;"	m	struct:tinyexr::miniz::__anon57
m_capacity	support/tinyexr/tinyexr.h	/^  size_t m_size, m_capacity;$/;"	m	struct:tinyexr::miniz::__anon59
m_catromCurveModule	optixHair/ProgramGroups.h	/^    OptixModule m_catromCurveModule;$/;"	m	class:HairProgramGroups
m_central_dir	support/tinyexr/tinyexr.h	/^  mz_zip_array m_central_dir;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_central_dir_offsets	support/tinyexr/tinyexr.h	/^  mz_zip_array m_central_dir_offsets;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_central_dir_ofs	support/tinyexr/tinyexr.h	/^  mz_uint32 m_central_dir_ofs;$/;"	m	struct:tinyexr::miniz::__anon39
m_central_directory_file_ofs	support/tinyexr/tinyexr.h	/^  mz_uint64 m_central_directory_file_ofs;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_check_adler32	support/tinyexr/tinyexr.h	/^      m_check_adler32, m_dist, m_counter, m_num_extra,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_clock	optixCompileWithTasks/optixCompileWithTasks.cpp	/^    std::chrono::high_resolution_clock             m_clock;$/;"	m	struct:Timer	file:
m_code_size	support/tinyexr/tinyexr.h	/^  mz_uint8 m_code_size[TINFL_MAX_HUFF_SYMBOLS_0];$/;"	m	struct:tinyexr::miniz::__anon45
m_comment	support/tinyexr/tinyexr.h	/^  char m_comment[MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE];$/;"	m	struct:tinyexr::miniz::__anon39
m_comment_size	support/tinyexr/tinyexr.h	/^  mz_uint32 m_comment_size;$/;"	m	struct:tinyexr::miniz::__anon39
m_comp_size	support/tinyexr/tinyexr.h	/^  mz_uint64 m_comp_size;$/;"	m	struct:tinyexr::miniz::__anon39
m_comp_size	support/tinyexr/tinyexr.h	/^  mz_uint64 m_comp_size;$/;"	m	struct:tinyexr::miniz::__anon60
m_condition	lib/CompileWithTasks.h	/^    std::condition_variable  m_condition;$/;"	m	struct:optix::CompileWithTasks::ThreadPool
m_context	optixDenoiser/OptiXDenoiser.h	/^    OptixDeviceContext    m_context      = nullptr;$/;"	m	class:OptiXDenoiser
m_context	optixHair/Hair.h	/^    OptixDeviceContext m_context = 0;$/;"	m	class:Hair
m_context	optixHair/ProgramGroups.h	/^    const OptixDeviceContext    m_context;$/;"	m	class:ProgramGroups
m_context	sutil/Scene.h	/^    OptixDeviceContext                   m_context                  = 0;$/;"	m	class:sutil::Scene
m_count	sutil/CuBuffer.h	/^    size_t m_count      = 0;$/;"	m	class:CuBuffer
m_counter	support/tinyexr/tinyexr.h	/^      m_check_adler32, m_dist, m_counter, m_num_extra,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_crc32	support/tinyexr/tinyexr.h	/^  mz_uint32 m_crc32;$/;"	m	struct:tinyexr::miniz::__anon39
m_cubicCurveModule	optixHair/ProgramGroups.h	/^    OptixModule m_cubicCurveModule;$/;"	m	class:HairProgramGroups
m_cuda_gfx_resource	sutil/CUDAOutputBuffer.h	/^    cudaGraphicsResource*      m_cuda_gfx_resource = nullptr;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_cur_archive_file_ofs	support/tinyexr/tinyexr.h	/^  mz_uint64 m_cur_archive_file_ofs;$/;"	m	struct:tinyexr::miniz::__anon60
m_d_ias_output_buffer	sutil/Scene.h	/^    CUdeviceptr                          m_d_ias_output_buffer      = 0;$/;"	m	class:sutil::Scene
m_data	optixMotionGeometry/motionHelper.hpp	/^    std::unique_ptr<char[]> m_data;$/;"	m	class:__anon4::MotionTransformArrayBase
m_data	sutil/Matrix.h	/^    float m_data[M*N];$/;"	m	class:sutil::Matrix
m_decomp	support/tinyexr/tinyexr.h	/^  tinfl_decompressor m_decomp;$/;"	m	struct:tinyexr::miniz::__anon54
m_denoiser	optixDenoiser/OptiXDenoiser.h	/^    OptixDenoiser         m_denoiser     = nullptr;$/;"	m	class:OptiXDenoiser
m_devPtr	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    CUdeviceptr                  m_devPtr[2];$/;"	m	class:OptixUtilOpticalFlow
m_devPtrOut	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    CUdeviceptr                  m_devPtrOut;$/;"	m	class:OptixUtilOpticalFlow
m_deviceBufferGAS	optixHair/Head.h	/^    mutable CUdeviceptr            m_deviceBufferGAS = 0;$/;"	m	class:Head
m_device_idx	sutil/CUDAOutputBuffer.h	/^    int32_t                    m_device_idx        = 0;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_device_pixels	sutil/CUDAOutputBuffer.h	/^    PIXEL_FORMAT*              m_device_pixels     = nullptr;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_dict	support/tinyexr/tinyexr.h	/^  mz_uint8 m_dict[TDEFL_LZ_DICT_SIZE + TDEFL_MAX_MATCH_LEN - 1];$/;"	m	struct:tinyexr::miniz::__anon53
m_dict	support/tinyexr/tinyexr.h	/^  mz_uint8 m_dict[TINFL_LZ_DICT_SIZE];$/;"	m	struct:tinyexr::miniz::__anon54
m_dict_avail	support/tinyexr/tinyexr.h	/^  mz_uint m_dict_ofs, m_dict_avail, m_first_call, m_has_flushed;$/;"	m	struct:tinyexr::miniz::__anon54
m_dict_ofs	support/tinyexr/tinyexr.h	/^  mz_uint m_dict_ofs, m_dict_avail, m_first_call, m_has_flushed;$/;"	m	struct:tinyexr::miniz::__anon54
m_dict_size	support/tinyexr/tinyexr.h	/^  mz_uint m_adler32, m_lookahead_pos, m_lookahead_size, m_dict_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_dist	support/tinyexr/tinyexr.h	/^      m_check_adler32, m_dist, m_counter, m_num_extra,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_dist_from_out_buf_start	support/tinyexr/tinyexr.h	/^  size_t m_dist_from_out_buf_start;$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_element_size	support/tinyexr/tinyexr.h	/^  mz_uint m_element_size;$/;"	m	struct:tinyexr::miniz::__anon59
m_expandable	support/tinyexr/tinyexr.h	/^  mz_bool m_expandable;$/;"	m	struct:tinyexr::miniz::__anon57
m_external_attr	support/tinyexr/tinyexr.h	/^  mz_uint32 m_external_attr;$/;"	m	struct:tinyexr::miniz::__anon39
m_eye	sutil/Camera.h	/^    float3 m_eye;$/;"	m	class:sutil::Camera
m_file	support/tinygltf/json.hpp	/^        : m_file(f)$/;"	f	class:nlohmann::detail::file_input_adapter
m_file	support/tinygltf/json.hpp	/^    std::FILE* m_file;$/;"	m	class:nlohmann::detail::file_input_adapter
m_file_index	support/tinyexr/tinyexr.h	/^  mz_uint32 m_file_index;$/;"	m	struct:tinyexr::miniz::__anon39
m_file_offset_alignment	support/tinyexr/tinyexr.h	/^  mz_uint m_file_offset_alignment;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_filename	support/tinyexr/tinyexr.h	/^  char m_filename[MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE];$/;"	m	struct:tinyexr::miniz::__anon39
m_final	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_finished	support/tinyexr/tinyexr.h	/^      m_output_flush_ofs, m_output_flush_remaining, m_finished, m_block_index,$/;"	m	struct:tinyexr::miniz::__anon53
m_first_call	support/tinyexr/tinyexr.h	/^  mz_uint m_dict_ofs, m_dict_avail, m_first_call, m_has_flushed;$/;"	m	struct:tinyexr::miniz::__anon54
m_flags	support/tinyexr/tinyexr.h	/^  mz_uint m_flags, m_max_probes[2];$/;"	m	struct:tinyexr::miniz::__anon53
m_flush	support/tinyexr/tinyexr.h	/^  tdefl_flush m_flush;$/;"	m	struct:tinyexr::miniz::__anon53
m_fovY	sutil/Camera.h	/^    float m_fovY;$/;"	m	class:sutil::Camera
m_gimbalLock	sutil/Trackball.h	/^    bool         m_gimbalLock               = false;$/;"	m	class:sutil::Trackball
m_gpuBufferIn	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    NvOFGPUBufferHandle          m_gpuBufferIn[2];$/;"	m	class:OptixUtilOpticalFlow
m_gpuBufferOut	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    NvOFGPUBufferHandle          m_gpuBufferOut;$/;"	m	class:OptixUtilOpticalFlow
m_greedy_parsing	support/tinyexr/tinyexr.h	/^  int m_greedy_parsing;$/;"	m	struct:tinyexr::miniz::__anon53
m_guideLayer	optixDenoiser/OptiXDenoiser.h	/^    OptixDenoiserGuideLayer           m_guideLayer = {};$/;"	m	class:OptiXDenoiser
m_hGAS	optixHair/Head.h	/^    mutable OptixTraversableHandle m_hGAS            = 0;$/;"	m	class:Head
m_hModule	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    HMODULE m_hModule;$/;"	m	class:OptixUtilOpticalFlow
m_hModule	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    void* m_hModule;$/;"	m	class:OptixUtilOpticalFlow
m_has_flushed	support/tinyexr/tinyexr.h	/^  mz_uint m_dict_ofs, m_dict_avail, m_first_call, m_has_flushed;$/;"	m	struct:tinyexr::miniz::__anon54
m_hash	support/tinyexr/tinyexr.h	/^  mz_uint16 m_hash[TDEFL_LZ_HASH_SIZE];$/;"	m	struct:tinyexr::miniz::__anon53
m_header	optixHair/Hair.h	/^    FileHeader          m_header;$/;"	m	class:Hair
m_height	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    unsigned int                 m_height;$/;"	m	class:OptixUtilOpticalFlow
m_height	sutil/CUDAOutputBuffer.h	/^    int32_t                    m_height            = 0u;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_height	sutil/WorkDistribution.h	/^    int32_t m_height   = 0;$/;"	m	class:StaticWorkDistribution
m_host_outputs	optixDenoiser/OptiXDenoiser.h	/^    std::vector< float* >             m_host_outputs;$/;"	m	class:OptiXDenoiser
m_host_pixels	sutil/CUDAOutputBuffer.h	/^    std::vector<PIXEL_FORMAT>  m_host_pixels;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_host_zcopy_pixels	sutil/CUDAOutputBuffer.h	/^    PIXEL_FORMAT*              m_host_zcopy_pixels = nullptr;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_huff_code_sizes	support/tinyexr/tinyexr.h	/^  mz_uint8 m_huff_code_sizes[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];$/;"	m	struct:tinyexr::miniz::__anon53
m_huff_codes	support/tinyexr/tinyexr.h	/^  mz_uint16 m_huff_codes[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];$/;"	m	struct:tinyexr::miniz::__anon53
m_huff_count	support/tinyexr/tinyexr.h	/^  mz_uint16 m_huff_count[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];$/;"	m	struct:tinyexr::miniz::__anon53
m_ias_handle	sutil/Scene.h	/^    OptixTraversableHandle               m_ias_handle               = 0;$/;"	m	class:sutil::Scene
m_image_format	sutil/GLDisplay.h	/^    sutil::BufferImageFormat m_image_format;$/;"	m	class:sutil::GLDisplay
m_images	sutil/Scene.h	/^    std::vector<cudaArray_t>                 m_images;$/;"	m	class:sutil::Scene
m_inStream	optixMotionGeometry/tiny_obj_loader.h	/^  std::istream &m_inStream;$/;"	m	class:tinyobj::MaterialStreamReader
m_inStrideXInBytes	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    unsigned int                 m_inStrideXInBytes;$/;"	m	class:OptixUtilOpticalFlow
m_instances	sutil/Scene.h	/^    std::vector<std::shared_ptr<Instance> >  m_instances;$/;"	m	class:sutil::Scene
m_intensity	optixDenoiser/OptiXDenoiser.h	/^    CUdeviceptr           m_intensity    = 0;$/;"	m	class:OptiXDenoiser
m_internal_attr	support/tinyexr/tinyexr.h	/^  mz_uint16 m_internal_attr;$/;"	m	struct:tinyexr::miniz::__anon39
m_is_ascii	sutil/PPMLoader.h	/^    bool           m_is_ascii;$/;"	m	class:PPMLoader
m_it	support/tinygltf/json.hpp	/^        : m_object(other.m_object), m_it(other.m_it) {}$/;"	f	class:nlohmann::detail::iter_impl
m_it	support/tinygltf/json.hpp	/^    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();$/;"	m	class:nlohmann::detail::primitive_iterator_t
m_it	support/tinygltf/json.hpp	/^    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it;$/;"	m	class:nlohmann::detail::iter_impl
m_key	support/tinyexr/tinyexr.h	/^  mz_uint16 m_key, m_sym_index;$/;"	m	struct:tinyexr::miniz::__anon55
m_killPool	lib/CompileWithTasks.h	/^    bool                     m_killPool = false;$/;"	m	struct:optix::CompileWithTasks::ThreadPool
m_last_status	support/tinyexr/tinyexr.h	/^  tinfl_status m_last_status;$/;"	m	struct:tinyexr::miniz::__anon54
m_latitude	sutil/Trackball.h	/^    float        m_latitude                 = 0.0f;   \/\/ in radians$/;"	m	class:sutil::Trackball
m_layers	optixDenoiser/OptiXDenoiser.h	/^    std::vector< OptixDenoiserLayer > m_layers;$/;"	m	class:OptiXDenoiser
m_len_codes	support/tinyexr/tinyexr.h	/^      m_len_codes[TINFL_MAX_HUFF_SYMBOLS_0 + TINFL_MAX_HUFF_SYMBOLS_1 + 137];$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_lexer	support/tinygltf/json.hpp	/^    lexer_t m_lexer;$/;"	m	class:nlohmann::detail::parser
m_linearCurveModule	optixHair/ProgramGroups.h	/^    OptixModule m_linearCurveModule;$/;"	m	class:HairProgramGroups
m_local_header_ofs	support/tinyexr/tinyexr.h	/^  mz_uint64 m_local_header_ofs;$/;"	m	struct:tinyexr::miniz::__anon39
m_longitude	sutil/Trackball.h	/^    float        m_longitude                = 0.0f;   \/\/ in radians$/;"	m	class:sutil::Trackball
m_look_up	support/tinyexr/tinyexr.h	/^  mz_int16 m_look_up[TINFL_FAST_LOOKUP_SIZE],$/;"	m	struct:tinyexr::miniz::__anon45
m_lookahead_pos	support/tinyexr/tinyexr.h	/^  mz_uint m_adler32, m_lookahead_pos, m_lookahead_size, m_dict_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_lookahead_size	support/tinyexr/tinyexr.h	/^  mz_uint m_adler32, m_lookahead_pos, m_lookahead_size, m_dict_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_lookat	sutil/Camera.h	/^    float3 m_lookat;$/;"	m	class:sutil::Camera
m_lz_code_buf	support/tinyexr/tinyexr.h	/^  mz_uint8 m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE];$/;"	m	struct:tinyexr::miniz::__anon53
m_lz_code_buf_dict_pos	support/tinyexr/tinyexr.h	/^  mz_uint m_num_flags_left, m_total_lz_bytes, m_lz_code_buf_dict_pos, m_bits_in,$/;"	m	struct:tinyexr::miniz::__anon53
m_materials	sutil/Scene.h	/^    std::vector<MaterialData>                m_materials;$/;"	m	class:sutil::Scene
m_max	sutil/Aabb.h	/^    float3 m_max;$/;"	m	class:sutil::Aabb
m_maxNumAdditionalTasks	lib/CompileWithTasks.h	/^    unsigned int m_maxNumAdditionalTasks;$/;"	m	struct:optix::CompileWithTasks::OptixTaskExecutePool
m_max_probes	support/tinyexr/tinyexr.h	/^  mz_uint m_flags, m_max_probes[2];$/;"	m	struct:tinyexr::miniz::__anon53
m_max_val	sutil/PPMLoader.h	/^    unsigned int   m_max_val;$/;"	m	class:PPMLoader
m_mem_capacity	support/tinyexr/tinyexr.h	/^  size_t m_mem_capacity;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_mem_size	support/tinyexr/tinyexr.h	/^  size_t m_mem_size;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_meshes	sutil/Scene.h	/^    std::vector<std::shared_ptr<MeshGroup> > m_meshes;$/;"	m	class:sutil::Scene
m_method	support/tinyexr/tinyexr.h	/^  mz_uint16 m_method;$/;"	m	struct:tinyexr::miniz::__anon39
m_min	sutil/Aabb.h	/^    float3 m_min;$/;"	m	class:sutil::Aabb
m_minimized	optixHair/Renderers.h	/^    bool                   m_minimized     = false;$/;"	m	class:WindowRenderer
m_mouseButton	optixHair/Renderers.h	/^    int32_t                m_mouseButton   = -1;$/;"	m	class:WindowRenderer
m_moveSpeed	sutil/Trackball.h	/^    float        m_moveSpeed                = 1.0f;$/;"	m	class:sutil::Trackball
m_mtlBaseDir	optixMotionGeometry/tiny_obj_loader.h	/^  std::string m_mtlBaseDir;$/;"	m	class:tinyobj::MaterialFileReader
m_nameToIndex	optixHair/ProgramGroups.h	/^    std::map<std::string, unsigned int> m_nameToIndex;$/;"	m	class:ProgramGroups
m_next	support/tinyexr/tinyexr.h	/^  mz_uint16 m_next[TDEFL_LZ_DICT_SIZE];$/;"	m	struct:tinyexr::miniz::__anon53
m_normal	optixBoundValues/optixBoundValues.h	/^    float3 m_normal;$/;"	m	struct:Onb
m_normal	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 m_normal;$/;"	m	struct:Onb
m_numKeys	optixMotionGeometry/motionHelper.hpp	/^    unsigned int            m_numKeys       = 2;$/;"	m	class:__anon4::MotionTransformArrayBase
m_numTransforms	optixMotionGeometry/motionHelper.hpp	/^    size_t                  m_numTransforms = 0;$/;"	m	class:__anon4::MotionTransformArrayBase
m_num_bits	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_num_extra	support/tinyexr/tinyexr.h	/^      m_check_adler32, m_dist, m_counter, m_num_extra,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_num_flags_left	support/tinyexr/tinyexr.h	/^  mz_uint m_num_flags_left, m_total_lz_bytes, m_lz_code_buf_dict_pos, m_bits_in,$/;"	m	struct:tinyexr::miniz::__anon53
m_num_gpus	sutil/WorkDistribution.h	/^    int32_t m_num_gpus = 0;$/;"	m	class:StaticWorkDistribution
m_nx	sutil/PPMLoader.h	/^    unsigned int   m_nx;$/;"	m	class:PPMLoader
m_ny	sutil/PPMLoader.h	/^    unsigned int   m_ny;$/;"	m	class:PPMLoader
m_object	support/tinygltf/json.hpp	/^    explicit iter_impl(pointer object) noexcept : m_object(object)$/;"	f	class:nlohmann::detail::iter_impl
m_object	support/tinygltf/json.hpp	/^    pointer m_object = nullptr;$/;"	m	class:nlohmann::detail::iter_impl
m_occlusion_hit_group	sutil/Scene.h	/^    OptixProgramGroup                    m_occlusion_hit_group      = 0;$/;"	m	class:sutil::Scene
m_occlusion_miss_group	sutil/Scene.h	/^    OptixProgramGroup                    m_occlusion_miss_group     = 0;$/;"	m	class:sutil::Scene
m_ofh	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    NvOFHandle                   m_ofh;$/;"	m	class:OptixUtilOpticalFlow
m_ofl	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    NV_OF_CUDA_API_FUNCTION_LIST m_ofl;$/;"	m	class:OptixUtilOpticalFlow
m_outStrideXInBytes	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    unsigned int                 m_outStrideXInBytes;$/;"	m	class:OptixUtilOpticalFlow
m_out_buf_ofs	support/tinyexr/tinyexr.h	/^  size_t m_src_buf_left, m_out_buf_ofs;$/;"	m	struct:tinyexr::miniz::__anon53
m_output_buf	support/tinyexr/tinyexr.h	/^  mz_uint8 m_output_buf[TDEFL_OUT_BUF_SIZE];$/;"	m	struct:tinyexr::miniz::__anon53
m_output_flush_ofs	support/tinyexr/tinyexr.h	/^      m_output_flush_ofs, m_output_flush_remaining, m_finished, m_block_index,$/;"	m	struct:tinyexr::miniz::__anon53
m_output_flush_remaining	support/tinyexr/tinyexr.h	/^      m_output_flush_ofs, m_output_flush_remaining, m_finished, m_block_index,$/;"	m	struct:tinyexr::miniz::__anon53
m_overlap	optixDenoiser/OptiXDenoiser.h	/^    unsigned int          m_overlap      = 0;$/;"	m	class:OptiXDenoiser
m_p	support/tinyexr/tinyexr.h	/^  void *m_p;$/;"	m	struct:tinyexr::miniz::__anon59
m_pAlloc	support/tinyexr/tinyexr.h	/^  mz_alloc_func m_pAlloc;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pAlloc_opaque	support/tinyexr/tinyexr.h	/^  void *m_pAlloc_opaque;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pBuf	support/tinyexr/tinyexr.h	/^  mz_uint8 *m_pBuf;$/;"	m	struct:tinyexr::miniz::__anon57
m_pFile	support/tinyexr/tinyexr.h	/^  MZ_FILE *m_pFile;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_pFree	support/tinyexr/tinyexr.h	/^  mz_free_func m_pFree;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pIO_opaque	support/tinyexr/tinyexr.h	/^  void *m_pIO_opaque;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pIn_buf	support/tinyexr/tinyexr.h	/^  const void *m_pIn_buf;$/;"	m	struct:tinyexr::miniz::__anon53
m_pIn_buf_size	support/tinyexr/tinyexr.h	/^  size_t *m_pIn_buf_size, *m_pOut_buf_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_pLZ_code_buf	support/tinyexr/tinyexr.h	/^  mz_uint8 *m_pLZ_code_buf, *m_pLZ_flags, *m_pOutput_buf, *m_pOutput_buf_end;$/;"	m	struct:tinyexr::miniz::__anon53
m_pLZ_flags	support/tinyexr/tinyexr.h	/^  mz_uint8 *m_pLZ_code_buf, *m_pLZ_flags, *m_pOutput_buf, *m_pOutput_buf_end;$/;"	m	struct:tinyexr::miniz::__anon53
m_pMem	support/tinyexr/tinyexr.h	/^  void *m_pMem;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_pOut_buf	support/tinyexr/tinyexr.h	/^  void *m_pOut_buf;$/;"	m	struct:tinyexr::miniz::__anon53
m_pOut_buf_size	support/tinyexr/tinyexr.h	/^  size_t *m_pIn_buf_size, *m_pOut_buf_size;$/;"	m	struct:tinyexr::miniz::__anon53
m_pOutput_buf	support/tinyexr/tinyexr.h	/^  mz_uint8 *m_pLZ_code_buf, *m_pLZ_flags, *m_pOutput_buf, *m_pOutput_buf_end;$/;"	m	struct:tinyexr::miniz::__anon53
m_pOutput_buf_end	support/tinyexr/tinyexr.h	/^  mz_uint8 *m_pLZ_code_buf, *m_pLZ_flags, *m_pOutput_buf, *m_pOutput_buf_end;$/;"	m	struct:tinyexr::miniz::__anon53
m_pPut_buf_func	support/tinyexr/tinyexr.h	/^  tdefl_put_buf_func_ptr m_pPut_buf_func;$/;"	m	struct:tinyexr::miniz::__anon53
m_pPut_buf_user	support/tinyexr/tinyexr.h	/^  void *m_pPut_buf_user;$/;"	m	struct:tinyexr::miniz::__anon53
m_pRead	support/tinyexr/tinyexr.h	/^  mz_file_read_func m_pRead;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pRealloc	support/tinyexr/tinyexr.h	/^  mz_realloc_func m_pRealloc;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pSrc	support/tinyexr/tinyexr.h	/^  const mz_uint8 *m_pSrc;$/;"	m	struct:tinyexr::miniz::__anon53
m_pState	optixHair/Renderers.h	/^    HairState* const m_pState;$/;"	m	class:Renderer
m_pState	support/tinyexr/tinyexr.h	/^  mz_zip_internal_state *m_pState;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pWrite	support/tinyexr/tinyexr.h	/^  mz_file_write_func m_pWrite;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_pZip	support/tinyexr/tinyexr.h	/^  mz_zip_archive *m_pZip;$/;"	m	struct:tinyexr::miniz::__anon60
m_params	optixDenoiser/OptiXDenoiser.h	/^    OptixDenoiserParams   m_params       = {};$/;"	m	class:OptiXDenoiser
m_pbo	sutil/CUDAOutputBuffer.h	/^    GLuint                     m_pbo               = 0u;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_performTracking	sutil/Trackball.h	/^    bool         m_performTracking          = false;$/;"	m	class:sutil::Trackball
m_pipeOptions	optixHair/ProgramGroups.h	/^    OptixPipelineCompileOptions m_pipeOptions;$/;"	m	class:ProgramGroups
m_pipeline	sutil/Scene.h	/^    OptixPipeline                        m_pipeline                 = 0;$/;"	m	class:sutil::Scene
m_pipeline_compile_options	sutil/Scene.h	/^    OptixPipelineCompileOptions          m_pipeline_compile_options = {};$/;"	m	class:sutil::Scene
m_points	optixHair/Hair.h	/^    std::vector<float3> m_points;$/;"	m	class:Hair
m_pool	lib/CompileWithTasks.h	/^    std::vector<std::thread> m_pool;$/;"	m	struct:optix::CompileWithTasks::ThreadPool
m_prevPosX	sutil/Trackball.h	/^    int          m_prevPosX                 = 0;$/;"	m	class:sutil::Trackball
m_prevPosY	sutil/Trackball.h	/^    int          m_prevPosY                 = 0;$/;"	m	class:sutil::Trackball
m_prev_return_status	support/tinyexr/tinyexr.h	/^  tdefl_status m_prev_return_status;$/;"	m	struct:tinyexr::miniz::__anon53
m_program	sutil/GLDisplay.h	/^    GLuint   m_program = 0u;$/;"	m	class:sutil::GLDisplay
m_programGroupOptions	optixHair/ProgramGroups.h	/^    OptixProgramGroupOptions    m_programGroupOptions;$/;"	m	class:ProgramGroups
m_programGroups	optixHair/ProgramGroups.h	/^    std::vector<OptixProgramGroup>      m_programGroups;$/;"	m	class:ProgramGroups
m_ptr	sutil/CuBuffer.h	/^    T*     m_ptr        = nullptr;$/;"	m	class:CuBuffer
m_ptx_module	sutil/Scene.h	/^    OptixModule                          m_ptx_module               = 0;$/;"	m	class:sutil::Scene
m_q	optixMotionGeometry/motionHelper.hpp	/^    float4 m_q;$/;"	m	class:__anon4::Quaternion
m_quad_vertex_buffer	sutil/GLDisplay.h	/^    GLuint   m_quad_vertex_buffer = 0;$/;"	m	class:sutil::GLDisplay
m_quadraticCurveModule	optixHair/ProgramGroups.h	/^    OptixModule m_quadraticCurveModule;$/;"	m	class:HairProgramGroups
m_queueMutex	lib/CompileWithTasks.h	/^    std::mutex               m_queueMutex;$/;"	m	struct:optix::CompileWithTasks::ThreadPool
m_radiance_hit_group	sutil/Scene.h	/^    OptixProgramGroup                    m_radiance_hit_group       = 0;$/;"	m	class:sutil::Scene
m_radiance_miss_group	sutil/Scene.h	/^    OptixProgramGroup                    m_radiance_miss_group      = 0;$/;"	m	class:sutil::Scene
m_radiusMode	optixHair/Hair.h	/^    Radius m_radiusMode = CONSTANT_R;$/;"	m	class:Hair
m_raster	sutil/PPMLoader.h	/^    unsigned char* m_raster;$/;"	m	class:PPMLoader
m_raw_header	support/tinyexr/tinyexr.h	/^  mz_uint8 m_raw_header[4],$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_raygen_prog_group	sutil/Scene.h	/^    OptixProgramGroup                    m_raygen_prog_group        = 0;$/;"	m	class:sutil::Scene
m_render_tex	sutil/GLDisplay.h	/^    GLuint   m_render_tex = 0u;$/;"	m	class:sutil::GLDisplay
m_render_tex_uniform_loc	sutil/GLDisplay.h	/^    GLint    m_render_tex_uniform_loc = -1;$/;"	m	class:sutil::GLDisplay
m_rollSpeed	sutil/Trackball.h	/^    float        m_rollSpeed                = 0.5f;$/;"	m	class:sutil::Trackball
m_samplers	sutil/Scene.h	/^    std::vector<cudaTextureObject_t>         m_samplers;$/;"	m	class:sutil::Scene
m_saved_lit	support/tinyexr/tinyexr.h	/^  mz_uint m_saved_match_dist, m_saved_match_len, m_saved_lit,$/;"	m	struct:tinyexr::miniz::__anon53
m_saved_match_dist	support/tinyexr/tinyexr.h	/^  mz_uint m_saved_match_dist, m_saved_match_len, m_saved_lit,$/;"	m	struct:tinyexr::miniz::__anon53
m_saved_match_len	support/tinyexr/tinyexr.h	/^  mz_uint m_saved_match_dist, m_saved_match_len, m_saved_lit,$/;"	m	struct:tinyexr::miniz::__anon53
m_sbt	sutil/Scene.h	/^    OptixShaderBindingTable              m_sbt                      = {};$/;"	m	class:sutil::Scene
m_scene_aabb	sutil/Scene.h	/^    sutil::Aabb                              m_scene_aabb;$/;"	m	class:sutil::Scene
m_scratch	optixDenoiser/OptiXDenoiser.h	/^    CUdeviceptr           m_scratch      = 0;$/;"	m	class:OptiXDenoiser
m_scratch_size	optixDenoiser/OptiXDenoiser.h	/^    uint32_t              m_scratch_size = 0;$/;"	m	class:OptiXDenoiser
m_shadeMode	optixHair/Hair.h	/^    Shade  m_shadeMode  = SEGMENT_U;$/;"	m	class:Hair
m_shadingModule	optixHair/ProgramGroups.h	/^    OptixModule m_shadingModule;$/;"	m	class:HairProgramGroups
m_size	support/tinyexr/tinyexr.h	/^  size_t m_size, m_capacity;$/;"	m	struct:tinyexr::miniz::__anon57
m_size	support/tinyexr/tinyexr.h	/^  size_t m_size, m_capacity;$/;"	m	struct:tinyexr::miniz::__anon59
m_sorted_central_dir_offsets	support/tinyexr/tinyexr.h	/^  mz_zip_array m_sorted_central_dir_offsets;$/;"	m	struct:tinyexr::miniz::mz_zip_internal_state_tag
m_splineMode	optixHair/Hair.h	/^    SplineMode   m_splineMode = CUBIC_BSPLINE;$/;"	m	class:Hair
m_src_buf_left	support/tinyexr/tinyexr.h	/^  size_t m_src_buf_left, m_out_buf_ofs;$/;"	m	struct:tinyexr::miniz::__anon53
m_start	optixCompileWithTasks/optixCompileWithTasks.cpp	/^    std::chrono::high_resolution_clock::time_point m_start;$/;"	m	struct:Timer	file:
m_state	optixDenoiser/OptiXDenoiser.h	/^    CUdeviceptr           m_state        = 0;$/;"	m	class:OptiXDenoiser
m_state	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_state_size	optixDenoiser/OptiXDenoiser.h	/^    uint32_t              m_state_size   = 0;$/;"	m	class:OptiXDenoiser
m_stop	lib/CompileWithTasks.h	/^    bool         m_stop = false;$/;"	m	struct:optix::CompileWithTasks::OptixTaskExecutePool
m_strands	optixHair/Hair.h	/^    std::vector<int>    m_strands;$/;"	m	class:Hair
m_stream	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    CUstream                     m_stream;$/;"	m	class:OptixUtilOpticalFlow
m_stream	sutil/CUDAOutputBuffer.h	/^    CUstream                   m_stream            = 0u;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_sym_index	support/tinyexr/tinyexr.h	/^  mz_uint16 m_key, m_sym_index;$/;"	m	struct:tinyexr::miniz::__anon55
m_table_sizes	support/tinyexr/tinyexr.h	/^      m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_tables	support/tinyexr/tinyexr.h	/^  tinfl_huff_table m_tables[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_tangent	optixBoundValues/optixBoundValues.h	/^    float3 m_tangent;$/;"	m	struct:Onb
m_tangent	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 m_tangent;$/;"	m	struct:Onb
m_temporalMode	optixDenoiser/OptiXDenoiser.h	/^    bool                  m_temporalMode;$/;"	m	class:OptiXDenoiser
m_thickness	optixHair/Hair.h	/^    std::vector<float>  m_thickness;$/;"	m	class:Hair
m_threadPool	lib/CompileWithTasks.h	/^    ThreadPool   m_threadPool;$/;"	m	struct:optix::CompileWithTasks::OptixTaskExecutePool
m_tileHeight	optixDenoiser/OptiXDenoiser.h	/^    unsigned int          m_tileHeight   = 0;$/;"	m	class:OptiXDenoiser
m_tileWidth	optixDenoiser/OptiXDenoiser.h	/^    unsigned int          m_tileWidth    = 0;$/;"	m	class:OptiXDenoiser
m_time	support/tinyexr/tinyexr.h	/^  time_t m_time;$/;"	m	struct:tinyexr::miniz::__anon39
m_total_files	support/tinyexr/tinyexr.h	/^  mz_uint m_total_files;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_total_lz_bytes	support/tinyexr/tinyexr.h	/^  mz_uint m_num_flags_left, m_total_lz_bytes, m_lz_code_buf_dict_pos, m_bits_in,$/;"	m	struct:tinyexr::miniz::__anon53
m_trackball	optixHair/Renderers.h	/^    sutil::Trackball       m_trackball     = {};$/;"	m	class:WindowRenderer
m_tree	support/tinyexr/tinyexr.h	/^      m_tree[TINFL_MAX_HUFF_SYMBOLS_0 * 2];$/;"	m	struct:tinyexr::miniz::__anon45
m_triangleMesh	optixHair/Head.h	/^    GeometryData::TriangleMesh m_triangleMesh;$/;"	m	class:Head
m_triangles	optixHair/Head.h	/^    size_t                         m_triangles     = 0;$/;"	m	class:Head
m_type	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_type	support/tinygltf/json.hpp	/^    value_t m_type = value_t::null;$/;"	m	class:nlohmann::basic_json
m_type	sutil/CUDAOutputBuffer.h	/^    CUDAOutputBufferType       m_type;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_u	sutil/Trackball.h	/^    float3       m_u                        = { 0.0f, 0.0f, 0.0f };$/;"	m	class:sutil::Trackball
m_uncomp_size	support/tinyexr/tinyexr.h	/^  mz_uint64 m_uncomp_size;$/;"	m	struct:tinyexr::miniz::__anon39
m_up	sutil/Camera.h	/^    float3 m_up;$/;"	m	class:sutil::Camera
m_v	sutil/Trackball.h	/^    float3       m_v                        = { 0.0f, 0.0f, 0.0f };$/;"	m	class:sutil::Trackball
m_value	support/tinygltf/json.hpp	/^    json_value m_value = {};$/;"	m	class:nlohmann::basic_json
m_version_made_by	support/tinyexr/tinyexr.h	/^  mz_uint16 m_version_made_by;$/;"	m	struct:tinyexr::miniz::__anon39
m_version_needed	support/tinyexr/tinyexr.h	/^  mz_uint16 m_version_needed;$/;"	m	struct:tinyexr::miniz::__anon39
m_vertices	optixHair/Head.h	/^    size_t                         m_vertices = 0;$/;"	m	class:Head
m_viewMode	sutil/Trackball.h	/^    ViewMode     m_viewMode                 = LookAtFixed;$/;"	m	class:sutil::Trackball
m_w	sutil/Trackball.h	/^    float3       m_w                        = { 0.0f, 0.0f, 0.0f };$/;"	m	class:sutil::Trackball
m_wants_to_finish	support/tinyexr/tinyexr.h	/^      m_wants_to_finish;$/;"	m	struct:tinyexr::miniz::__anon53
m_whittedModule	optixHair/ProgramGroups.h	/^    OptixModule m_whittedModule;$/;"	m	class:HairProgramGroups
m_width	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    unsigned int                 m_width;$/;"	m	class:OptixUtilOpticalFlow
m_width	sutil/CUDAOutputBuffer.h	/^    int32_t                    m_width             = 0u;$/;"	m	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
m_width	sutil/WorkDistribution.h	/^    int32_t m_width    = 0;$/;"	m	class:StaticWorkDistribution
m_window	optixHair/Renderers.h	/^    GLFWwindow*            m_window        = nullptr;$/;"	m	class:WindowRenderer
m_window_bits	support/tinyexr/tinyexr.h	/^  int m_window_bits;$/;"	m	struct:tinyexr::miniz::__anon54
m_z_adler32	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_zhdr0	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_zhdr1	support/tinyexr/tinyexr.h	/^  mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type,$/;"	m	struct:tinyexr::miniz::tinfl_decompressor_tag
m_zip_mode	support/tinyexr/tinyexr.h	/^  mz_zip_mode m_zip_mode;$/;"	m	struct:tinyexr::miniz::mz_zip_archive_tag
m_zoomMultiplier	sutil/Trackball.h	/^    float        m_zoomMultiplier           = 1.1f;$/;"	m	class:sutil::Trackball
ma	support/tinygltf/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon107
magFilter	support/GLFW/deps/vulkan/vulkan.h	/^    VkFilter                magFilter;$/;"	m	struct:VkSamplerCreateInfo
magFilter	support/tinygltf/tiny_gltf.h	/^  int magFilter =$/;"	m	struct:tinygltf::Sampler
magic	optixHair/Hair.h	/^        char magic[4];$/;"	m	struct:Hair::FileHeader
magic	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t magic; \/\/ 8 bytes$/;"	m	struct:nanovdb::io::Codec::Header
main	CMake/testmain.c	/^int main()$/;"	f
main	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/test/compile-test.c	/^int main()$/;"	f
main	nvpath-fmz/path-tracer.cpp	/^int32_t main(int32_t argc, char* argv[]) {$/;"	f
main	optixBoundValues/optixBoundValues.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixCallablePrograms/optixCallablePrograms.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixCompileWithTasks/optixCompileWithTasks.cpp	/^int main( int argc, char** argv )$/;"	f
main	optixConsole/optixConsole.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixCurves/optixCurves.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixCustomPrimitive/optixCustomPrimitive.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixCutouts/optixCutouts.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixDenoiser/optixDenoiser.cpp	/^int32_t main( int32_t argc, char** argv )$/;"	f
main	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixDynamicGeometry/optixDynamicGeometry.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixDynamicMaterials/optixDynamicMaterials.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixHair/optixHair.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixHello/optixHello.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixMeshViewer/optixMeshViewer.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixModuleCreateAbort/optixModuleCreateProcess.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixMotionGeometry/optixMotionGeometry.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixMultiGPU/optixMultiGPU.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixNVLink/optixNVLink.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixOpacityMicromap/optixOpacityMicromap.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixOpticalFlow/optixOpticalFlow.cpp	/^int32_t main( int32_t argc, char** argv )$/;"	f
main	optixPathTracer/optixPathTracer.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixRaycasting/optixRaycasting.cpp	/^int main( int argc, char** argv )$/;"	f
main	optixRibbons/optixRibbons.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixSphere/optixSphere.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixTriangle/optixTriangle.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixVolumeViewer/optixVolumeViewer.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	optixWhitted/optixWhitted.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	support/imgui/imstb_truetype.h	/^int main(int argc, char **argv)$/;"	f
major	optixVolumeViewer/nanovdb/util/IO.h	41;"	d
major	support/GLFW/deps/glad/glad.h	/^    int major;$/;"	m	struct:gladGLversionStruct
major	support/GLFW/src/egl_context.h	/^    EGLint          major, minor;$/;"	m	struct:_GLFWlibraryEGL
major	support/GLFW/src/glx_context.h	/^    int             major, minor;$/;"	m	struct:_GLFWlibraryGLX
major	support/GLFW/src/internal.h	/^    int                 major, minor, revision;$/;"	m	struct:_GLFWcontext
major	support/GLFW/src/internal.h	/^    int           major;$/;"	m	struct:_GLFWctxconfig
major	support/GLFW/src/x11_platform.h	/^        int         major;$/;"	m	struct:_GLFWlibraryX11::__anon20
major	support/GLFW/src/x11_platform.h	/^        int         major;$/;"	m	struct:_GLFWlibraryX11::__anon21
major	support/GLFW/src/x11_platform.h	/^        int         major;$/;"	m	struct:_GLFWlibraryX11::__anon24
major	support/glad/glad.h	/^    int major;$/;"	m	struct:gladGLversionStruct
majorOpcode	support/GLFW/src/x11_platform.h	/^        int         majorOpcode;$/;"	m	struct:_GLFWlibraryX11::__anon21
makeContextCurrentEGL	support/GLFW/src/egl_context.c	/^static void makeContextCurrentEGL(_GLFWwindow* window)$/;"	f	file:
makeContextCurrentGLX	support/GLFW/src/glx_context.c	/^static void makeContextCurrentGLX(_GLFWwindow* window)$/;"	f	file:
makeContextCurrentWGL	support/GLFW/src/wgl_context.c	/^static void makeContextCurrentWGL(_GLFWwindow* window)$/;"	f	file:
makeCurrent	support/GLFW/src/internal.h	/^    _GLFWmakecontextcurrentfun  makeCurrent;$/;"	m	struct:_GLFWcontext
makeCurrent	sutil/CUDAOutputBuffer.h	/^    void makeCurrent() { CUDA_CHECK( cudaSetDevice( m_device_idx ) ); }$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
makeHairGAS	optixHair/optixHair.cpp	/^void makeHairGAS( HairState* pState )$/;"	f
makeInstanceAccelerationStructure	optixHair/optixHair.cpp	/^void makeInstanceAccelerationStructure( HairState* pState )$/;"	f
makePipeline	optixHair/optixHair.cpp	/^void makePipeline( HairState* pState )$/;"	f
makeProgramGroups	optixHair/optixHair.cpp	/^void makeProgramGroups( HairState* pState )$/;"	f
makeSBT	optixHair/optixHair.cpp	/^void makeSBT( HairState* pState )$/;"	f
make_color	cuda/helpers.h	/^__forceinline__ __device__ uchar4 make_color( const float3& c )$/;"	f
make_color	cuda/helpers.h	/^__forceinline__ __device__ uchar4 make_color( const float4& c )$/;"	f
make_float2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 make_float2(const float s)$/;"	f
make_float2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 make_float2(const float3& v0) { return make_float2( v0.x, v0.y ); }$/;"	f
make_float2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 make_float2(const float4& v0) { return make_float2( v0.x, v0.y ); }$/;"	f
make_float2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 make_float2(const int2& a)$/;"	f
make_float2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 make_float2(const uint2& a)$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const float s)$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const float v0, const float2& v1) { return make_float3( v0, v1.x, v1.y ); }$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const float2& a)$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const float2& v0, const float v1) { return make_float3(v0.x, v0.y, v1); }$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const float4& v0) { return make_float3( v0.x, v0.y, v0.z ); }$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const int3& a)$/;"	f
make_float3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 make_float3(const uint3& a)$/;"	f
make_float3_from_double	sutil/Scene.cpp	/^float3 make_float3_from_double( double x, double y, double z )$/;"	f	namespace:sutil::__anon123
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float s)$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float v0, const float v1, const float2& v2) { return make_float4( v0, v1, v2.x, v2.y ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float v0, const float2& v1, const float v2) { return make_float4( v0, v1.x, v1.y, v2 ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float v0, const float3& v1) { return make_float4( v0, v1.x, v1.y, v1.z ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float2& v0, const float v1, const float v2) { return make_float4( v0.x, v0.y, v1, v2 ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float2& v0, const float2& v1) { return make_float4( v0.x, v0.y, v1.x, v1.y ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float3& a)$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const float3& v0, const float v1) { return make_float4( v0.x, v0.y, v0.z, v1 ); }$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const int4& a)$/;"	f
make_float4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 make_float4(const uint4& a)$/;"	f
make_float4_from_double	sutil/Scene.cpp	/^float4 make_float4_from_double( double x, double y, double z, double w )$/;"	f	namespace:sutil::__anon123
make_index_sequence	support/tinygltf/json.hpp	/^struct make_index_sequence$/;"	s	namespace:nlohmann::detail
make_index_sequence	support/tinygltf/json.hpp	/^template<> struct make_index_sequence<0> : index_sequence<> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	support/tinygltf/json.hpp	/^template<> struct make_index_sequence<1> : index_sequence<0> {};$/;"	s	namespace:nlohmann::detail
make_int2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 make_int2(const float2& a)$/;"	f
make_int2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 make_int2(const int s)$/;"	f
make_int2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 make_int2(const int3& v0) { return make_int2( v0.x, v0.y ); }$/;"	f
make_int2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 make_int2(const int4& v0) { return make_int2( v0.x, v0.y ); }$/;"	f
make_int3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 make_int3(const float3& a)$/;"	f
make_int3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 make_int3(const int s)$/;"	f
make_int3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 make_int3(const int v0, const int2& v1) { return make_int3( v0, v1.x, v1.y ); }$/;"	f
make_int3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 make_int3(const int2& v0, const int v1) { return make_int3( v0.x, v0.y, v1 ); }$/;"	f
make_int3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 make_int3(const int4& v0) { return make_int3( v0.x, v0.y, v0.z ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const float4& a)$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int s)$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int v0, const int v1, const int2& v2) { return make_int4( v0, v1, v2.x, v2.y ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int v0, const int2& v1, const int v2) { return make_int4( v0, v1.x, v1.y, v2 ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int v0, const int3& v1) { return make_int4( v0, v1.x, v1.y, v1.z ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int2& v0, const int v1, const int v2) { return make_int4( v0.x, v0.y, v1, v2 ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int2& v0, const int2& v1) { return make_int4( v0.x, v0.y, v1.x, v1.y ); }$/;"	f
make_int4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 make_int4(const int3& v0, const int v1) { return make_int4( v0.x, v0.y, v0.z, v1 ); }$/;"	f
make_longlong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 make_longlong2(const float2& a)$/;"	f
make_longlong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 make_longlong2(const long long s)$/;"	f
make_longlong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 make_longlong2(const longlong3& v0) { return make_longlong2( v0.x, v0.y ); }$/;"	f
make_longlong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 make_longlong2(const longlong4& v0) { return make_longlong2( v0.x, v0.y ); }$/;"	f
make_longlong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 make_longlong3(const float3& a)$/;"	f
make_longlong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 make_longlong3(const long long s)$/;"	f
make_longlong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 make_longlong3(const long long v0, const longlong2& v1) { return make_longlong3(v0, v1.x, v1.y); }$/;"	f
make_longlong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 make_longlong3(const longlong2& v0, const long long v1) { return make_longlong3(v0.x, v0.y, v1); }$/;"	f
make_longlong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 make_longlong3(const longlong4& v0) { return make_longlong3( v0.x, v0.y, v0.z ); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const float4& a)$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const long long s)$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const long long v0, const long long v1, const longlong2& v2) { return make_longlong4(v0, v1, v2.x, v2.y); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const long long v0, const longlong2& v1, const long long v2) { return make_longlong4(v0, v1.x, v1.y, v2); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const long long v0, const longlong3& v1) { return make_longlong4(v0, v1.x, v1.y, v1.z); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const longlong2& v0, const long long v1, const long long v2) { return make_longlong4(v0.x, v0.y, v1, v2); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const longlong2& v0, const longlong2& v1) { return make_longlong4(v0.x, v0.y, v1.x, v1.y); }$/;"	f
make_longlong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 make_longlong4(const longlong3& v0, const long long v1) { return make_longlong4(v0.x, v0.y, v0.z, v1); }$/;"	f
make_matrix3x3	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<3,3> make_matrix3x3(const Matrix<4,4> &matrix)$/;"	f	namespace:sutil
make_uint2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 make_uint2(const float2& a)$/;"	f
make_uint2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 make_uint2(const uint3& v0) { return make_uint2( v0.x, v0.y ); }$/;"	f
make_uint2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 make_uint2(const uint4& v0) { return make_uint2( v0.x, v0.y ); }$/;"	f
make_uint2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 make_uint2(const unsigned int s)$/;"	f
make_uint3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 make_uint3(const float3& a)$/;"	f
make_uint3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 make_uint3(const uint2& v0, const unsigned int v1) { return make_uint3( v0.x, v0.y, v1 ); }$/;"	f
make_uint3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 make_uint3(const uint4& v0) { return make_uint3( v0.x, v0.y, v0.z ); }$/;"	f
make_uint3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 make_uint3(const unsigned int s)$/;"	f
make_uint3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 make_uint3(const unsigned int v0, const uint2& v1) { return make_uint3( v0, v1.x, v1.y ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const float4& a)$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const uint2& v0, const uint2& v1) { return make_uint4( v0.x, v0.y, v1.x, v1.y ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const uint2& v0, const unsigned int v1, const unsigned int v2) { return make_uint4( v0.x, v0.y, v1, v2 ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const uint3& v0, const unsigned int v1) { return make_uint4( v0.x, v0.y, v0.z, v1 ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const unsigned int s)$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const unsigned int v0, const uint2& v1, const unsigned int v2) { return make_uint4( v0, v1.x, v1.y, v2 ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const unsigned int v0, const uint3& v1) { return make_uint4( v0, v1.x, v1.y, v1.z ); }$/;"	f
make_uint4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 make_uint4(const unsigned int v0, const unsigned int v1, const uint2& v2) { return make_uint4( v0, v1, v2.x, v2.y ); }$/;"	f
make_ulonglong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 make_ulonglong2(const float2& a)$/;"	f
make_ulonglong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 make_ulonglong2(const ulonglong3& v0) { return make_ulonglong2( v0.x, v0.y ); }$/;"	f
make_ulonglong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 make_ulonglong2(const ulonglong4& v0) { return make_ulonglong2( v0.x, v0.y ); }$/;"	f
make_ulonglong2	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 make_ulonglong2(const unsigned long long s)$/;"	f
make_ulonglong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 make_ulonglong3(const float3& a)$/;"	f
make_ulonglong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 make_ulonglong3(const ulonglong2& v0, const unsigned long long v1) { return make_ulonglong3(v0.x, v0.y, v1); }$/;"	f
make_ulonglong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 make_ulonglong3(const ulonglong4& v0) { return make_ulonglong3( v0.x, v0.y, v0.z ); }$/;"	f
make_ulonglong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 make_ulonglong3(const unsigned long long s)$/;"	f
make_ulonglong3	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 make_ulonglong3(const unsigned long long v0, const ulonglong2& v1) { return make_ulonglong3(v0, v1.x, v1.y); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const float4& a)$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const ulonglong2& v0, const ulonglong2& v1) { return make_ulonglong4(v0.x, v0.y, v1.x, v1.y); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const ulonglong2& v0, const unsigned long long v1, const unsigned long long v2) { return make_ulonglong4(v0.x, v0.y, v1, v2); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const ulonglong3& v0, const unsigned long long v1) { return make_ulonglong4(v0.x, v0.y, v0.z, v1); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const unsigned long long s)$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const unsigned long long v0, const ulonglong2& v1, const unsigned long long v2) { return make_ulonglong4(v0, v1.x, v1.y, v2); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const unsigned long long v0, const ulonglong3& v1) { return make_ulonglong4(v0, v1.x, v1.y, v1.z); }$/;"	f
make_ulonglong4	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 make_ulonglong4(const unsigned long long v0, const unsigned long long v1, const ulonglong2& v2) { return make_ulonglong4(v0, v1, v2.x, v2.y); }$/;"	f
make_void	support/tinygltf/json.hpp	/^template <typename ...Ts> struct make_void$/;"	s	namespace:nlohmann::detail
map	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Map& map() const { return DataType::mMap; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
map	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Map& map() const { return this->grid().map(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
map	sutil/CUDAOutputBuffer.h	/^PIXEL_FORMAT* CUDAOutputBuffer<PIXEL_FORMAT>::map()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
map	sutil/sutil.cpp	/^    std::map<std::string, std::string*> map;$/;"	m	struct:sutil::SourceCache	file:
mapEntryCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                           mapEntryCount;$/;"	m	struct:VkSpecializationInfo
mapToGridType	optixVolumeViewer/nanovdb/NanoVDB.h	/^__hostdev__ GridType mapToGridType()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
marker	support/tinygltf/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon99
mask	optixRaycasting/optixRaycasting.cpp	/^    sutil::Texture           mask                     = {};$/;"	m	struct:RaycastingState	file:
mat4x4	support/GLFW/deps/linmath.h	/^typedef vec4 mat4x4[4];$/;"	t
mat4x4_add	support/GLFW/deps/linmath.h	/^static inline void mat4x4_add(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f
mat4x4_col	support/GLFW/deps/linmath.h	/^static inline void mat4x4_col(vec4 r, mat4x4 M, int i)$/;"	f
mat4x4_dup	support/GLFW/deps/linmath.h	/^static inline void mat4x4_dup(mat4x4 M, mat4x4 N)$/;"	f
mat4x4_from_quat	support/GLFW/deps/linmath.h	/^static inline void mat4x4_from_quat(mat4x4 M, quat q)$/;"	f
mat4x4_from_vec3_mul_outer	support/GLFW/deps/linmath.h	/^static inline void mat4x4_from_vec3_mul_outer(mat4x4 M, vec3 a, vec3 b)$/;"	f
mat4x4_frustum	support/GLFW/deps/linmath.h	/^static inline void mat4x4_frustum(mat4x4 M, float l, float r, float b, float t, float n, float f)$/;"	f
mat4x4_identity	support/GLFW/deps/linmath.h	/^static inline void mat4x4_identity(mat4x4 M)$/;"	f
mat4x4_invert	support/GLFW/deps/linmath.h	/^static inline void mat4x4_invert(mat4x4 T, mat4x4 M)$/;"	f
mat4x4_look_at	support/GLFW/deps/linmath.h	/^static inline void mat4x4_look_at(mat4x4 m, vec3 eye, vec3 center, vec3 up)$/;"	f
mat4x4_mul	support/GLFW/deps/linmath.h	/^static inline void mat4x4_mul(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f
mat4x4_mul_vec4	support/GLFW/deps/linmath.h	/^static inline void mat4x4_mul_vec4(vec4 r, mat4x4 M, vec4 v)$/;"	f
mat4x4_ortho	support/GLFW/deps/linmath.h	/^static inline void mat4x4_ortho(mat4x4 M, float l, float r, float b, float t, float n, float f)$/;"	f
mat4x4_orthonormalize	support/GLFW/deps/linmath.h	/^static inline void mat4x4_orthonormalize(mat4x4 R, mat4x4 M)$/;"	f
mat4x4_perspective	support/GLFW/deps/linmath.h	/^static inline void mat4x4_perspective(mat4x4 m, float y_fov, float aspect, float n, float f)$/;"	f
mat4x4_rotate	support/GLFW/deps/linmath.h	/^static inline void mat4x4_rotate(mat4x4 R, mat4x4 M, float x, float y, float z, float angle)$/;"	f
mat4x4_rotate_X	support/GLFW/deps/linmath.h	/^static inline void mat4x4_rotate_X(mat4x4 Q, mat4x4 M, float angle)$/;"	f
mat4x4_rotate_Y	support/GLFW/deps/linmath.h	/^static inline void mat4x4_rotate_Y(mat4x4 Q, mat4x4 M, float angle)$/;"	f
mat4x4_rotate_Z	support/GLFW/deps/linmath.h	/^static inline void mat4x4_rotate_Z(mat4x4 Q, mat4x4 M, float angle)$/;"	f
mat4x4_row	support/GLFW/deps/linmath.h	/^static inline void mat4x4_row(vec4 r, mat4x4 M, int i)$/;"	f
mat4x4_scale	support/GLFW/deps/linmath.h	/^static inline void mat4x4_scale(mat4x4 M, mat4x4 a, float k)$/;"	f
mat4x4_scale_aniso	support/GLFW/deps/linmath.h	/^static inline void mat4x4_scale_aniso(mat4x4 M, mat4x4 a, float x, float y, float z)$/;"	f
mat4x4_sub	support/GLFW/deps/linmath.h	/^static inline void mat4x4_sub(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f
mat4x4_translate	support/GLFW/deps/linmath.h	/^static inline void mat4x4_translate(mat4x4 T, float x, float y, float z)$/;"	f
mat4x4_translate_in_place	support/GLFW/deps/linmath.h	/^static inline void mat4x4_translate_in_place(mat4x4 M, float x, float y, float z)$/;"	f
mat4x4_transpose	support/GLFW/deps/linmath.h	/^static inline void mat4x4_transpose(mat4x4 M, mat4x4 N)$/;"	f
mat4x4o_mul_quat	support/GLFW/deps/linmath.h	/^static inline void mat4x4o_mul_quat(mat4x4 R, mat4x4 M, quat q)$/;"	f
matMult	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMult(const double* mat, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMult	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMult(const double* mat, const double* vec, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMult	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMult(const float* mat, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMult	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMult(const float* mat, const float* vec, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMultT	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMultT(const double* mat, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMultT	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMultT(const double* mat, const double* vec, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMultT	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMultT(const float* mat, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
matMultT	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3T matMultT(const float* mat, const float* vec, const Vec3T& xyz)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
material	optixVolumeViewer/optixVolumeViewer.h	/^    MaterialData::Lambert material;$/;"	m	struct:Cube
material	optixVolumeViewer/optixVolumeViewer.h	/^    MaterialData::Lambert material;$/;"	m	struct:Plane
material	support/tinygltf/tiny_gltf.h	/^  int material;  \/\/ The index of the material to apply to this primitive$/;"	m	struct:tinygltf::Primitive
material_data	cuda/whitted.h	/^    MaterialData material_data;$/;"	m	struct:whitted::HitGroupData
material_data	optixVolumeViewer/volume.h	/^    MaterialData material_data;$/;"	m	struct:HitGroupData
material_ids	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> material_ids;  \/\/ per-face material ID$/;"	m	struct:tinyobj::mesh_t
material_idx	sutil/Scene.h	/^        std::vector<int32_t>              material_idx;$/;"	m	struct:sutil::Scene::MeshGroup
material_t	optixMotionGeometry/tiny_obj_loader.h	/^struct material_t {$/;"	s	namespace:tinyobj
materials	support/tinygltf/tiny_gltf.h	/^  std::vector<Material> materials;$/;"	m	class:tinygltf::Model
materials	sutil/Scene.h	/^    SUTILAPI const std::vector<MaterialData>&               materials() const         { return m_materials;  }$/;"	f	class:sutil::Scene
materials_	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<material_t> materials_;$/;"	m	class:tinyobj::ObjReader
matrix	support/tinygltf/tiny_gltf.h	/^  std::vector<double> matrix;       \/\/ length must be 0 or 16$/;"	m	class:tinygltf::Node
matrix_animation	optixMotionGeometry/optixMotionGeometry.cpp	/^    MatrixMotionTransformArray matrix_animation;$/;"	m	struct:DeformSphereAnimation	file:
max	optixConsole/optixConsole.cpp	39;"	d	file:
max	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ValueType max() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
max	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T& max() { return mCoord[1]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
max	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Vec3T& max() const { return mCoord[1]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
max	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static Coord max() { return Coord(int32_t((1u << 31) - 1)); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int max(int a, int b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 max(const int2& a, const int2& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 max(const int3& a, const int3& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 max(const int4& a, const int4& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long max(long long a, long long b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 max(const longlong2& a, const longlong2& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 max(const longlong3& a, const longlong3& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 max(const longlong4& a, const longlong4& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 max(const uint2& a, const uint2& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 max(const uint3& a, const uint3& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 max(const uint4& a, const uint4& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 max(const ulonglong2& a, const ulonglong2& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 max(const ulonglong3& a, const ulonglong3& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 max(const ulonglong4& a, const ulonglong4& b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int max(unsigned int a, unsigned int b)$/;"	f
max	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long max(unsigned long long a, unsigned long long b)$/;"	f
maxAnisotropy	support/GLFW/deps/vulkan/vulkan.h	/^    float                   maxAnisotropy;$/;"	m	struct:VkSamplerCreateInfo
maxArrayLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxArrayLayers;$/;"	m	struct:VkImageFormatProperties
maxBoundDescriptorSets	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxBoundDescriptorSets;$/;"	m	struct:VkPhysicalDeviceLimits
maxClipDistances	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxClipDistances;$/;"	m	struct:VkPhysicalDeviceLimits
maxColorAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxColorAttachments;$/;"	m	struct:VkPhysicalDeviceLimits
maxCombinedClipAndCullDistances	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxCombinedClipAndCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits
maxComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& maxComponent(const Coord& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
maxComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void maxComponent(const Vec3& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
maxComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void maxComponent(const Vec4& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
maxComputeSharedMemorySize	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxComputeSharedMemorySize;$/;"	m	struct:VkPhysicalDeviceLimits
maxComputeWorkGroupCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupCount[3];$/;"	m	struct:VkPhysicalDeviceLimits
maxComputeWorkGroupInvocations	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupInvocations;$/;"	m	struct:VkPhysicalDeviceLimits
maxComputeWorkGroupSize	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupSize[3];$/;"	m	struct:VkPhysicalDeviceLimits
maxCullDistances	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits
maxDepth	support/GLFW/deps/vulkan/vulkan.h	/^    float    maxDepth;$/;"	m	struct:VkViewport
maxDepthBounds	support/GLFW/deps/vulkan/vulkan.h	/^    float                                     maxDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
maxDescriptorSetInputAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetSampledImages	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetSamplers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSamplers;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetStorageBuffers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetStorageBuffersDynamic	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetStorageImages	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetUniformBuffers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits
maxDescriptorSetUniformBuffersDynamic	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits
maxDrawIndexedIndexValue	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDrawIndexedIndexValue;$/;"	m	struct:VkPhysicalDeviceLimits
maxDrawIndirectCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxDrawIndirectCount;$/;"	m	struct:VkPhysicalDeviceLimits
maxDstExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                     maxDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
maxDstPosition	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset2D                     maxDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
maxExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D            maxExtent;$/;"	m	struct:VkImageFormatProperties
maxExtent	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::maxExtent() const$/;"	f	class:sutil::Aabb
maxFragmentCombinedOutputResources	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFragmentCombinedOutputResources;$/;"	m	struct:VkPhysicalDeviceLimits
maxFragmentDualSrcAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFragmentDualSrcAttachments;$/;"	m	struct:VkPhysicalDeviceLimits
maxFragmentInputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFragmentInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxFragmentOutputAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFragmentOutputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits
maxFramebufferHeight	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFramebufferHeight;$/;"	m	struct:VkPhysicalDeviceLimits
maxFramebufferLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFramebufferLayers;$/;"	m	struct:VkPhysicalDeviceLimits
maxFramebufferWidth	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxFramebufferWidth;$/;"	m	struct:VkPhysicalDeviceLimits
maxGeometryInputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxGeometryInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxGeometryOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxGeometryOutputVertices	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputVertices;$/;"	m	struct:VkPhysicalDeviceLimits
maxGeometryShaderInvocations	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxGeometryShaderInvocations;$/;"	m	struct:VkPhysicalDeviceLimits
maxGeometryTotalOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxGeometryTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageArrayLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         maxImageArrayLayers;$/;"	m	struct:VkSurfaceCapabilitiesKHR
maxImageArrayLayers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxImageArrayLayers;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         maxImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR
maxImageDimension1D	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxImageDimension1D;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageDimension2D	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxImageDimension2D;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageDimension3D	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxImageDimension3D;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageDimensionCube	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxImageDimensionCube;$/;"	m	struct:VkPhysicalDeviceLimits
maxImageExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                       maxImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR
maxInterpolationOffset	support/GLFW/deps/vulkan/vulkan.h	/^    float                 maxInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits
maxLod	support/GLFW/deps/vulkan/vulkan.h	/^    float                   maxLod;$/;"	m	struct:VkSamplerCreateInfo
maxMemoryAllocationCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxMemoryAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits
maxMipLevels	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxMipLevels;$/;"	m	struct:VkImageFormatProperties
maxPerStageDescriptorInputAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageDescriptorSampledImages	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageDescriptorSamplers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSamplers;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageDescriptorStorageBuffers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageDescriptorStorageImages	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageDescriptorUniformBuffers	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits
maxPerStageResources	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPerStageResources;$/;"	m	struct:VkPhysicalDeviceLimits
maxPushConstantsSize	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxPushConstantsSize;$/;"	m	struct:VkPhysicalDeviceLimits
maxResourceSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          maxResourceSize;$/;"	m	struct:VkImageFormatProperties
maxSampleMaskWords	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxSampleMaskWords;$/;"	m	struct:VkPhysicalDeviceLimits
maxSamplerAllocationCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxSamplerAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits
maxSamplerAnisotropy	support/GLFW/deps/vulkan/vulkan.h	/^    float                 maxSamplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceLimits
maxSamplerLodBias	support/GLFW/deps/vulkan/vulkan.h	/^    float                 maxSamplerLodBias;$/;"	m	struct:VkPhysicalDeviceLimits
maxSets	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                       maxSets;$/;"	m	struct:VkDescriptorPoolCreateInfo
maxSrcExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                     maxSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
maxSrcPosition	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset2D                     maxSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
maxStorageBufferRange	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxStorageBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationControlPerPatchOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerPatchOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationControlPerVertexInputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationControlPerVertexOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationControlTotalOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationEvaluationInputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationEvaluationOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationGenerationLevel	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationGenerationLevel;$/;"	m	struct:VkPhysicalDeviceLimits
maxTessellationPatchSize	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTessellationPatchSize;$/;"	m	struct:VkPhysicalDeviceLimits
maxTexelBufferElements	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTexelBufferElements;$/;"	m	struct:VkPhysicalDeviceLimits
maxTexelGatherOffset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits
maxTexelOffset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits
maxTime	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType maxTime() const { return mT1; }$/;"	f	class:nanovdb::DDA
maxTime	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType maxTime() const { return mT1; }$/;"	f	class:nanovdb::HDDA
maxUniformBufferRange	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxUniformBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits
maxValues	support/tinygltf/tiny_gltf.h	/^  std::vector<double> maxValues;  \/\/ optional$/;"	m	struct:tinygltf::Accessor
maxVertexInputAttributeOffset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributeOffset;$/;"	m	struct:VkPhysicalDeviceLimits
maxVertexInputAttributes	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributes;$/;"	m	struct:VkPhysicalDeviceLimits
maxVertexInputBindingStride	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindingStride;$/;"	m	struct:VkPhysicalDeviceLimits
maxVertexInputBindings	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindings;$/;"	m	struct:VkPhysicalDeviceLimits
maxVertexOutputComponents	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits
maxViewportDimensions	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxViewportDimensions[2];$/;"	m	struct:VkPhysicalDeviceLimits
maxViewports	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              maxViewports;$/;"	m	struct:VkPhysicalDeviceLimits
max_depth	cuda/whitted.h	/^    int                      max_depth;$/;"	m	struct:whitted::LaunchParams
max_depth	optixVolumeViewer/volume.h	/^    int                      max_depth;$/;"	m	struct:LaunchParams
max_loaded_major	support/glad/glad.c	/^static int max_loaded_major;$/;"	v	file:
max_loaded_minor	support/glad/glad.c	/^static int max_loaded_minor;$/;"	v	file:
max_trace	optixConsole/optixConsole.cpp	/^const int max_trace = 12;$/;"	v
max_trace	optixWhitted/optixWhitted.cpp	/^const int         max_trace = 12;$/;"	v
max_x	support/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon78
max_x	support/tinygltf/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon110
max_y	support/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon78
max_y	support/tinygltf/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon110
maxcode	support/tinygltf/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon102
maxcode	support/tinygltf/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon98
maxheight	support/GLFW/src/internal.h	/^    int                 maxwidth, maxheight;$/;"	m	struct:_GLFWwindow
maximized	support/GLFW/src/internal.h	/^    GLFWbool      maximized;$/;"	m	struct:_GLFWwndconfig
maximized	support/GLFW/src/wl_platform.h	/^    GLFWbool                    maximized;$/;"	m	struct:_GLFWwindowWayland
maxwidth	support/GLFW/src/internal.h	/^    int                 maxwidth, maxheight;$/;"	m	struct:_GLFWwindow
mb	support/tinygltf/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon107
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static size_t memUsage() { return sizeof(Coord); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static size_t memUsage() { return sizeof(DataType); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static size_t memUsage() { return sizeof(Mask); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint64_t memUsage() { return sizeof(DataType); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint64_t memUsage() { return sizeof(GridData); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint64_t memUsage() { return sizeof(LeafNodeType); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint64_t memUsage(uint32_t _tileCount) { return sizeof(RootNode) + _tileCount * sizeof(Tile); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
memUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t memUsage() const { return sizeof(RootNode) + DataType::mTileCount * sizeof(Tile); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
memUsage	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t memUsage() const { return 160 + nameSize; }$/;"	f	struct:nanovdb::io::Codec::GridMetaData
memUsage	optixVolumeViewer/nanovdb/util/IO.h	/^inline uint64_t Segment::memUsage() const$/;"	f	class:nanovdb::io::Codec::Segment
memory	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseImageMemoryBind
memory	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseMemoryBind
memory	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceMemory     memory;$/;"	m	struct:VkMappedMemoryRange
memoryHeapCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        memoryHeapCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties
memoryHeaps	support/GLFW/deps/vulkan/vulkan.h	/^    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryProperties
memoryOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseImageMemoryBind
memoryOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseMemoryBind
memoryTypeBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        memoryTypeBits;$/;"	m	struct:VkMemoryRequirements
memoryTypeCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        memoryTypeCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties
memoryTypeIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           memoryTypeIndex;$/;"	m	struct:VkMemoryAllocateInfo
memoryTypes	support/GLFW/deps/vulkan/vulkan.h	/^    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VkPhysicalDeviceMemoryProperties
memset	sutil/CuBuffer.h	/^    void memset( char data )$/;"	f	class:CuBuffer
merge_and_renumber	support/tinygltf/json.hpp	/^struct merge_and_renumber<index_sequence<I1...>, index_sequence<I2...>>$/;"	s	namespace:nlohmann::detail
merge_patch	support/tinygltf/json.hpp	/^    void merge_patch(const basic_json& apply_patch)$/;"	f	class:nlohmann::basic_json
mesh	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    MeshData mesh;$/;"	m	struct:DisplacedMicromeshState	file:
mesh	optixMotionGeometry/tiny_obj_loader.h	/^  mesh_t mesh;$/;"	m	struct:tinyobj::shape_t
mesh	support/tinygltf/tiny_gltf.h	/^  int mesh;$/;"	m	class:tinygltf::Node
mesh_idx	sutil/Scene.h	/^        int                               mesh_idx;$/;"	m	struct:sutil::Scene::Instance
mesh_occlusion	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup mesh_occlusion   = 0;$/;"	m	struct:ProgramGroups
mesh_radiance	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup mesh_radiance    = 0;$/;"	m	struct:ProgramGroups
mesh_t	optixMotionGeometry/tiny_obj_loader.h	/^struct mesh_t {$/;"	s	namespace:tinyobj
meshes	support/tinygltf/tiny_gltf.h	/^  std::vector<Mesh> meshes;$/;"	m	class:tinygltf::Model
meshes	sutil/Scene.h	/^    SUTILAPI const std::vector<std::shared_ptr<MeshGroup>>& meshes() const            { return m_meshes;     }$/;"	f	class:sutil::Scene
meta	optixVolumeViewer/nanovdb/util/IO.h	/^    std::vector<GridMetaData> meta;$/;"	m	struct:nanovdb::io::Codec::Segment
meta	support/tinygltf/json.hpp	/^    static basic_json meta()$/;"	f	class:nlohmann::basic_json
metal	cuda/MaterialData.h	/^        Phong        metal;$/;"	m	union:MaterialData::__anon1
metallic	cuda/MaterialData.h	/^        float                metallic;$/;"	m	struct:MaterialData::Pbr
metallic	optixMotionGeometry/tiny_obj_loader.h	/^  real_t metallic;             \/\/ [0, 1] default 0$/;"	m	struct:tinyobj::material_t
metallicFactor	support/tinygltf/tiny_gltf.h	/^  double metallicFactor;   \/\/ default 1$/;"	m	struct:tinygltf::PbrMetallicRoughness
metallicRoughnessTexture	support/tinygltf/tiny_gltf.h	/^  TextureInfo metallicRoughnessTexture;$/;"	m	struct:tinygltf::PbrMetallicRoughness
metallic_roughness_tex	cuda/MaterialData.h	/^        Texture              metallic_roughness_tex;$/;"	m	struct:MaterialData::Pbr
metallic_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string metallic_texname;   \/\/ map_Pm$/;"	m	struct:tinyobj::material_t
metallic_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t metallic_texopt;$/;"	m	struct:tinyobj::material_t
mg	support/tinygltf/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon107
mid	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ RealT mid() const { return 0.5 * (t0 + t1); }$/;"	f	struct:nanovdb::Ray::TimeSpan
mid	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Vec3T mid() const { return (*this)(mTimeSpan.mid()); }$/;"	f	class:nanovdb::Ray
mimeType	support/tinygltf/tiny_gltf.h	/^  std::string mimeType;  \/\/ (required if no uri) ["image\/jpeg", "image\/png",$/;"	m	struct:tinygltf::Image
min	optixConsole/optixConsole.cpp	36;"	d	file:
min	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ValueType min() const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
min	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T& min() { return mCoord[0]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
min	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Vec3T& min() const { return mCoord[0]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
min	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static Coord min() { return Coord(-int32_t((1u << 31) - 1) - 1); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
min	support/GLFW/src/wl_init.c	/^static inline int min(int n1, int n2)$/;"	f	file:
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int min(int a, int b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 min(const int2& a, const int2& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 min(const int3& a, const int3& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 min(const int4& a, const int4& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE long long min(long long a, long long b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 min(const longlong2& a, const longlong2& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 min(const longlong3& a, const longlong3& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 min(const longlong4& a, const longlong4& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 min(const uint2& a, const uint2& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 min(const uint3& a, const uint3& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 min(const uint4& a, const uint4& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 min(const ulonglong2& a, const ulonglong2& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 min(const ulonglong3& a, const ulonglong3& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 min(const ulonglong4& a, const ulonglong4& b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned int min(unsigned int a, unsigned int b)$/;"	f
min	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE unsigned long long min(unsigned long long a, unsigned long long b)$/;"	f
minComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& minComponent(const Coord& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
minComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void minComponent(const Vec3& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
minComponent	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void minComponent(const Vec4& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
minDepth	support/GLFW/deps/vulkan/vulkan.h	/^    float    minDepth;$/;"	m	struct:VkViewport
minDepthBounds	support/GLFW/deps/vulkan/vulkan.h	/^    float                                     minDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
minDstExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                     minDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
minDstPosition	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset2D                     minDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
minFilter	support/GLFW/deps/vulkan/vulkan.h	/^    VkFilter                minFilter;$/;"	m	struct:VkSamplerCreateInfo
minFilter	support/tinygltf/tiny_gltf.h	/^  int minFilter =$/;"	m	struct:tinygltf::Sampler
minImageCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR
minImageCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSwapchainCreateInfoKHR
minImageExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                       minImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR
minImageTransferGranularity	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent3D      minImageTransferGranularity;$/;"	m	struct:VkQueueFamilyProperties
minInterpolationOffset	support/GLFW/deps/vulkan/vulkan.h	/^    float                 minInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits
minLod	support/GLFW/deps/vulkan/vulkan.h	/^    float                   minLod;$/;"	m	struct:VkSamplerCreateInfo
minMemoryMapAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    size_t                minMemoryMapAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
minSampleShading	support/GLFW/deps/vulkan/vulkan.h	/^    float                                    minSampleShading;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
minSrcExtent	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                     minSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
minSrcPosition	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset2D                     minSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
minStorageBufferOffsetAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          minStorageBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
minTexelBufferOffsetAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          minTexelBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
minTexelGatherOffset	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t               minTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits
minTexelOffset	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t               minTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits
minUniformBufferOffsetAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          minUniformBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
minValues	support/tinygltf/tiny_gltf.h	/^  std::vector<double> minValues;  \/\/ optional$/;"	m	struct:tinygltf::Accessor
minVersion	support/tinygltf/tiny_gltf.h	/^  std::string minVersion;$/;"	m	struct:tinygltf::Asset
min_x	support/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon78
min_y	support/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon78
minheight	support/GLFW/src/internal.h	/^    int                 minwidth, minheight;$/;"	m	struct:_GLFWwindow
minimized	optixBoundValues/optixBoundValues.cpp	/^bool minimized    = false;$/;"	v
minimized	optixCallablePrograms/optixCallablePrograms.cpp	/^bool minimized    = false;$/;"	v
minimized	optixCutouts/optixCutouts.cpp	/^bool             minimized    = false;$/;"	v
minimized	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^bool minimized    = false;$/;"	v
minimized	optixDynamicGeometry/optixDynamicGeometry.cpp	/^bool minimized    = false;$/;"	v
minimized	optixMeshViewer/optixMeshViewer.cpp	/^bool              minimized     = false;$/;"	v
minimized	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^bool minimized    = false;$/;"	v
minimized	optixMotionGeometry/optixMotionGeometry.cpp	/^bool minimized    = false;$/;"	v
minimized	optixMultiGPU/optixMultiGPU.cpp	/^bool              minimized     = true;$/;"	v
minimized	optixNVLink/optixNVLink.cpp	/^bool              minimized     = false;$/;"	v
minimized	optixPathTracer/optixPathTracer.cpp	/^bool minimized    = false;$/;"	v
minimized	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^bool              minimized     = false;$/;"	v
minimized	optixVolumeViewer/optixVolumeViewer.cpp	/^bool minimized    = false;$/;"	v
minimized	optixWhitted/optixWhitted.cpp	/^bool              minimized     = false;$/;"	v
miniz	support/tinyexr/tinyexr.h	/^namespace miniz {$/;"	n	namespace:tinyexr
minor	optixVolumeViewer/nanovdb/util/IO.h	42;"	d
minor	support/GLFW/deps/glad/glad.h	/^    int minor;$/;"	m	struct:gladGLversionStruct
minor	support/GLFW/src/egl_context.h	/^    EGLint          major, minor;$/;"	m	struct:_GLFWlibraryEGL
minor	support/GLFW/src/glx_context.h	/^    int             major, minor;$/;"	m	struct:_GLFWlibraryGLX
minor	support/GLFW/src/internal.h	/^    int                 major, minor, revision;$/;"	m	struct:_GLFWcontext
minor	support/GLFW/src/internal.h	/^    int           minor;$/;"	m	struct:_GLFWctxconfig
minor	support/GLFW/src/x11_platform.h	/^        int         minor;$/;"	m	struct:_GLFWlibraryX11::__anon20
minor	support/GLFW/src/x11_platform.h	/^        int         minor;$/;"	m	struct:_GLFWlibraryX11::__anon21
minor	support/GLFW/src/x11_platform.h	/^        int         minor;$/;"	m	struct:_GLFWlibraryX11::__anon24
minor	support/glad/glad.h	/^    int minor;$/;"	m	struct:gladGLversionStruct
minus	support/tinygltf/json.hpp	/^    diyfp minus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries
minwidth	support/GLFW/src/internal.h	/^    int                 minwidth, minheight;$/;"	m	struct:_GLFWwindow
mipLevel	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresource
mipLevel	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresourceLayers
mipLevels	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 mipLevels;$/;"	m	struct:VkImageCreateInfo
mipLodBias	support/GLFW/deps/vulkan/vulkan.h	/^    float                   mipLodBias;$/;"	m	struct:VkSamplerCreateInfo
mipmapMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkSamplerMipmapMode     mipmapMode;$/;"	m	struct:VkSamplerCreateInfo
mipmapPrecisionBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              mipmapPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits
mirModToGLFWMod	support/GLFW/src/mir_window.c	/^static int mirModToGLFWMod(uint32_t mods)$/;"	f	file:
mirSurface	support/GLFW/deps/vulkan/vulkan.h	/^    MirSurface*                   mirSurface;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
mirSurface	support/GLFW/src/mir_platform.h	/^    MirSurface*                 mirSurface;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
miss_color	cuda/whitted.h	/^    float3                   miss_color;$/;"	m	struct:whitted::LaunchParams
miss_color	optixVolumeViewer/volume.h	/^    float3                   miss_color;$/;"	m	struct:LaunchParams
miss_group	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixProgramGroup miss_group             = 0;$/;"	m	struct:DisplacedMicromeshState	file:
miss_group	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixProgramGroup              miss_group = 0;$/;"	m	struct:DynamicGeometryState	file:
miss_group	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixProgramGroup              miss_group = 0;$/;"	m	struct:MotionGeometryState	file:
miss_group	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixProgramGroup            miss_group                     = 0;$/;"	m	struct:SimpleMotionBlurState	file:
miss_group_occlusion	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixProgramGroup miss_group_occlusion   = 0;$/;"	m	struct:DisplacedMicromeshState	file:
miss_group_occlusion	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixProgramGroup              miss_group_occlusion = 0;$/;"	m	struct:MotionGeometryState	file:
miss_occlusion	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup miss_occlusion   = 0;$/;"	m	struct:ProgramGroups
miss_prog_group	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixProgramGroup           miss_prog_group          = 0;$/;"	m	struct:CallableProgramsState	file:
miss_prog_group	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixProgramGroup              miss_prog_group          = nullptr;$/;"	m	struct:SampleState	file:
miss_prog_group	optixRaycasting/optixRaycasting.cpp	/^    OptixProgramGroup           miss_prog_group          = 0;$/;"	m	struct:RaycastingState	file:
miss_radiance	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup miss_radiance    = 0;$/;"	m	struct:ProgramGroups
mode	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_MODE                      mode;                             \/**< [in]: Operating mode for NVOF. Set to a value defined by enum ::NV_OF_MODE. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
mode	support/GLFW/src/wl_monitor.c	/^static void mode(void* data,$/;"	f	file:
mode	support/tinygltf/tiny_gltf.h	/^  int mode;      \/\/ one of TINYGLTF_MODE_***$/;"	m	struct:tinygltf::Primitive
modeChanged	support/GLFW/src/win32_platform.h	/^    GLFWbool            modeChanged;$/;"	m	struct:_GLFWmonitorWin32
modeCount	support/GLFW/src/internal.h	/^    int             modeCount;$/;"	m	struct:_GLFWmonitor
modeIsGood	support/GLFW/src/x11_monitor.c	/^static GLFWbool modeIsGood(const XRRModeInfo* mi)$/;"	f	file:
modes	support/GLFW/src/internal.h	/^    GLFWvidmode*    modes;$/;"	m	struct:_GLFWmonitor
modes	support/GLFW/src/wl_platform.h	/^    _GLFWvidmodeWayland*        modes;$/;"	m	struct:_GLFWmonitorWayland
modesCount	support/GLFW/src/wl_platform.h	/^    int                         modesCount;$/;"	m	struct:_GLFWmonitorWayland
modesPruned	support/GLFW/src/win32_platform.h	/^    GLFWbool            modesPruned;$/;"	m	struct:_GLFWmonitorWin32
modesSize	support/GLFW/src/wl_platform.h	/^    int                         modesSize;$/;"	m	struct:_GLFWmonitorWayland
modifiers	support/GLFW/src/wl_platform.h	/^        unsigned int            modifiers;$/;"	m	struct:_GLFWlibraryWayland::__anon19
module	optixCutouts/optixCutouts.cpp	/^    OptixModule module        = 0;$/;"	m	struct:CutoutsState	file:
module	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixModule                    module = 0;$/;"	m	struct:DisplacedMicromeshState	file:
module	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixModule                    module                   = nullptr;$/;"	m	struct:SampleState	file:
module	optixVolumeViewer/optixVolumeViewer.cpp	/^OptixModule module                     = 0;$/;"	v
module	support/GLFW/deps/vulkan/vulkan.h	/^    VkShaderModule                      module;$/;"	m	struct:VkPipelineShaderStageCreateInfo
module_compile_options	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixModuleCompileOptions module_compile_options;$/;"	m	struct:CompileOperation	file:
monitor	support/GLFW/src/internal.h	/^        GLFWmonitorfun  monitor;$/;"	m	struct:_GLFWlibrary::__anon11
monitor	support/GLFW/src/internal.h	/^    _GLFWmonitor*       monitor;$/;"	m	struct:_GLFWwindow
monitorBroken	support/GLFW/src/x11_platform.h	/^        GLFWbool    monitorBroken;$/;"	m	struct:_GLFWlibraryX11::__anon20
monitorCount	support/GLFW/src/internal.h	/^    int                 monitorCount;$/;"	m	struct:_GLFWlibrary
monitors	support/GLFW/src/internal.h	/^    _GLFWmonitor**      monitors;$/;"	m	struct:_GLFWlibrary
monitors	support/GLFW/src/wl_platform.h	/^    _GLFWmonitor**              monitors;$/;"	m	struct:_GLFWlibraryWayland
monitors	support/GLFW/src/wl_platform.h	/^    _GLFWmonitor**              monitors;$/;"	m	struct:_GLFWwindowWayland
monitorsCount	support/GLFW/src/wl_platform.h	/^    int                         monitorsCount;$/;"	m	struct:_GLFWlibraryWayland
monitorsCount	support/GLFW/src/wl_platform.h	/^    int                         monitorsCount;$/;"	m	struct:_GLFWwindowWayland
monitorsSize	support/GLFW/src/wl_platform.h	/^    int                         monitorsSize;$/;"	m	struct:_GLFWlibraryWayland
monitorsSize	support/GLFW/src/wl_platform.h	/^    int                         monitorsSize;$/;"	m	struct:_GLFWwindowWayland
monotonic	support/GLFW/src/posix_time.h	/^    GLFWbool    monotonic;$/;"	m	struct:_GLFWtimePOSIX
motionData	optixMotionGeometry/motionHelper.hpp	/^    OptixSRTData& motionData( size_t transformIdx, unsigned int key ) { return transform( transformIdx ).srtData[key]; }$/;"	f	class:__anon4::SRTMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    OptixSRTData*       motionData( size_t transformIdx ) { return transform( transformIdx ).srtData; }$/;"	f	class:__anon4::SRTMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    const OptixSRTData& motionData( size_t transformIdx, unsigned int key ) const$/;"	f	class:__anon4::SRTMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    const OptixSRTData* motionData( size_t transformIdx ) const { return transform( transformIdx ).srtData; }$/;"	f	class:__anon4::SRTMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    const float* motionData( size_t transformIdx ) const { return &transform( transformIdx ).transform[0][0]; }$/;"	f	class:__anon4::MatrixMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    const float* motionData( size_t transformIdx, unsigned int key ) const$/;"	f	class:__anon4::MatrixMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    const float* motionData( unsigned int key ) const { return Base::motionData( 0, key ); }$/;"	f	class:__anon4::MatrixMotionTransform
motionData	optixMotionGeometry/motionHelper.hpp	/^    float*       motionData( size_t transformIdx ) { return &transform( transformIdx ).transform[0][0]; }$/;"	f	class:__anon4::MatrixMotionTransformArray
motionData	optixMotionGeometry/motionHelper.hpp	/^    float*       motionData( unsigned int key ) { return Base::motionData( 0, key ); }$/;"	f	class:__anon4::MatrixMotionTransform
motionData	optixMotionGeometry/motionHelper.hpp	/^    float* motionData( size_t transformIdx, unsigned int key ) { return &transform( transformIdx ).transform[key][0]; }$/;"	f	class:__anon4::MatrixMotionTransformArray
mouseButton	support/GLFW/src/internal.h	/^        GLFWmousebuttonfun      mouseButton;$/;"	m	struct:_GLFWwindow::__anon8
mouseButtonCallback	optixBoundValues/optixBoundValues.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixCutouts/optixCutouts.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixHair/Renderers.cpp	/^void WindowRenderer::mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	class:WindowRenderer
mouseButtonCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixMultiGPU/optixMultiGPU.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixNVLink/optixNVLink.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixPathTracer/optixPathTracer.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtonCallback	optixWhitted/optixWhitted.cpp	/^static void mouseButtonCallback( GLFWwindow* window, int button, int action, int mods )$/;"	f	file:
mouseButtons	support/GLFW/src/internal.h	/^    char                mouseButtons[GLFW_MOUSE_BUTTON_LAST + 1];$/;"	m	struct:_GLFWwindow
mouse_button	optixBoundValues/optixBoundValues.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixCallablePrograms/optixCallablePrograms.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixCutouts/optixCutouts.cpp	/^int32_t          mouse_button = -1;$/;"	v
mouse_button	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixDynamicGeometry/optixDynamicGeometry.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixMeshViewer/optixMeshViewer.cpp	/^int32_t           mouse_button = -1;$/;"	v
mouse_button	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixMotionGeometry/optixMotionGeometry.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixMultiGPU/optixMultiGPU.cpp	/^int32_t           mouse_button = -1;$/;"	v
mouse_button	optixNVLink/optixNVLink.cpp	/^int32_t           mouse_button = -1;$/;"	v
mouse_button	optixPathTracer/optixPathTracer.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^int32_t           mouse_button = -1;$/;"	v
mouse_button	optixVolumeViewer/optixVolumeViewer.cpp	/^int32_t mouse_button = -1;$/;"	v
mouse_button	optixWhitted/optixWhitted.cpp	/^int32_t           mouse_button = -1;$/;"	v
mouse_prev_pos	optixCutouts/optixCutouts.cpp	/^int2             mouse_prev_pos;$/;"	v
mouse_prev_pos	optixMultiGPU/optixMultiGPU.cpp	/^int2              mouse_prev_pos;$/;"	v
mouse_prev_pos	optixNVLink/optixNVLink.cpp	/^int2              mouse_prev_pos;$/;"	v
mouse_prev_pos	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^int2              mouse_prev_pos;$/;"	v
move	support/tinygltf/json.hpp	/^          m_value(std::move(other.m_value))$/;"	f	class:nlohmann::basic_json
move	support/tinygltf/tiny_gltf.h	/^                                        object_value_(std::move(o)) {}$/;"	f	class:tinygltf::Value
move	support/tinygltf/tiny_gltf.h	/^                                       array_value_(std::move(a)) {}$/;"	f	class:tinygltf::Value
move	support/tinygltf/tiny_gltf.h	/^        binary_value_(std::move(v)) {}$/;"	f	class:tinygltf::Value
moveBackward	sutil/Trackball.cpp	/^void Trackball::moveBackward(float speed)$/;"	f	class:sutil::Trackball
moveDown	sutil/Trackball.cpp	/^void Trackball::moveDown(float speed)$/;"	f	class:sutil::Trackball
moveForward	sutil/Trackball.cpp	/^void Trackball::moveForward(float speed)$/;"	f	class:sutil::Trackball
moveLeft	sutil/Trackball.cpp	/^void Trackball::moveLeft(float speed)$/;"	f	class:sutil::Trackball
moveRight	sutil/Trackball.cpp	/^void Trackball::moveRight(float speed)$/;"	f	class:sutil::Trackball
moveSpeed	sutil/Trackball.h	/^    SUTILAPI float moveSpeed() const { return m_moveSpeed; }$/;"	f	class:sutil::Trackball
moveUp	sutil/Trackball.cpp	/^void Trackball::moveUp(float speed)$/;"	f	class:sutil::Trackball
moved_or_copied	support/tinygltf/json.hpp	/^    value_type moved_or_copied() const$/;"	f	class:nlohmann::detail::json_ref
mr	support/tinygltf/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon107
msg	support/tinyexr/tinyexr.h	/^  char *msg;                        \/\/ error msg (unused)$/;"	m	struct:tinyexr::miniz::mz_stream_s
msgpack	support/tinygltf/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	m	class:nlohmann::detail::input_format_t
mtl_search_path	optixMotionGeometry/tiny_obj_loader.h	/^  std::string mtl_search_path;$/;"	m	struct:tinyobj::ObjReaderConfig
mtllib_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*mtllib_cb)(void *user_data, const material_t *materials,$/;"	m	struct:tinyobj::callback_t
mtx_destroy	support/GLFW/deps/tinycthread.c	/^void mtx_destroy(mtx_t *mtx)$/;"	f
mtx_init	support/GLFW/deps/tinycthread.c	/^int mtx_init(mtx_t *mtx, int type)$/;"	f
mtx_lock	support/GLFW/deps/tinycthread.c	/^int mtx_lock(mtx_t *mtx)$/;"	f
mtx_plain	support/GLFW/deps/tinycthread.h	176;"	d
mtx_recursive	support/GLFW/deps/tinycthread.h	179;"	d
mtx_t	support/GLFW/deps/tinycthread.h	/^typedef pthread_mutex_t mtx_t;$/;"	t
mtx_t	support/GLFW/deps/tinycthread.h	/^} mtx_t;$/;"	t	typeref:struct:__anon32
mtx_timed	support/GLFW/deps/tinycthread.h	177;"	d
mtx_timedlock	support/GLFW/deps/tinycthread.c	/^int mtx_timedlock(mtx_t *mtx, const struct timespec *ts)$/;"	f
mtx_try	support/GLFW/deps/tinycthread.h	178;"	d
mtx_trylock	support/GLFW/deps/tinycthread.c	/^int mtx_trylock(mtx_t *mtx)$/;"	f
mtx_unlock	support/GLFW/deps/tinycthread.c	/^int mtx_unlock(mtx_t *mtx)$/;"	f
multiDrawIndirect	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    multiDrawIndirect;$/;"	m	struct:VkPhysicalDeviceFeatures
multiViewport	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    multiViewport;$/;"	m	struct:VkPhysicalDeviceFeatures
multipart	support/tinyexr/tinyexr.h	/^  int multipart;  \/\/ multi-part(EXR 2.0)$/;"	m	struct:_EXRVersion
multipart	support/tinyexr/tinyexr.h	/^  int multipart;$/;"	m	struct:_EXRHeader
my_stbtt_initfont	support/imgui/imstb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	support/imgui/imstb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
mz_adler32	support/tinyexr/tinyexr.h	/^mz_ulong mz_adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len) {$/;"	f
mz_alloc_func	support/tinyexr/tinyexr.h	/^typedef void *(*mz_alloc_func)(void *opaque, size_t items, size_t size);$/;"	t
mz_bitmasks	support/tinyexr/tinyexr.h	/^static const mz_uint mz_bitmasks[17] = {$/;"	v
mz_bool	support/tinyexr/tinyexr.h	/^typedef int mz_bool;$/;"	t
mz_compress	support/tinyexr/tinyexr.h	/^int mz_compress(unsigned char *pDest, mz_ulong *pDest_len,$/;"	f
mz_compress2	support/tinyexr/tinyexr.h	/^int mz_compress2(unsigned char *pDest, mz_ulong *pDest_len,$/;"	f
mz_compressBound	support/tinyexr/tinyexr.h	/^mz_ulong mz_compressBound(mz_ulong source_len) {$/;"	f
mz_crc32	support/tinyexr/tinyexr.h	/^mz_ulong mz_crc32(mz_ulong crc, const mz_uint8 *ptr, size_t buf_len) {$/;"	f
mz_deflate	support/tinyexr/tinyexr.h	/^int mz_deflate(mz_streamp pStream, int flush) {$/;"	f
mz_deflateBound	support/tinyexr/tinyexr.h	/^mz_ulong mz_deflateBound(mz_streamp pStream, mz_ulong source_len) {$/;"	f
mz_deflateEnd	support/tinyexr/tinyexr.h	/^int mz_deflateEnd(mz_streamp pStream) {$/;"	f
mz_deflateInit	support/tinyexr/tinyexr.h	/^int mz_deflateInit(mz_streamp pStream, int level) {$/;"	f
mz_deflateInit2	support/tinyexr/tinyexr.h	/^int mz_deflateInit2(mz_streamp pStream, int level, int method, int window_bits,$/;"	f
mz_deflateReset	support/tinyexr/tinyexr.h	/^int mz_deflateReset(mz_streamp pStream) {$/;"	f
mz_error	support/tinyexr/tinyexr.h	/^const char *mz_error(int err) {$/;"	f
mz_file_read_func	support/tinyexr/tinyexr.h	/^typedef size_t (*mz_file_read_func)(void *pOpaque, mz_uint64 file_ofs,$/;"	t
mz_file_write_func	support/tinyexr/tinyexr.h	/^typedef size_t (*mz_file_write_func)(void *pOpaque, mz_uint64 file_ofs,$/;"	t
mz_fopen	support/tinyexr/tinyexr.h	/^static FILE *mz_fopen(const char *pFilename, const char *pMode) {$/;"	f
mz_free	support/tinyexr/tinyexr.h	/^void mz_free(void *p) { MZ_FREE(p); }$/;"	f
mz_free_func	support/tinyexr/tinyexr.h	/^typedef void (*mz_free_func)(void *opaque, void *address);$/;"	t
mz_freopen	support/tinyexr/tinyexr.h	/^static FILE *mz_freopen(const char *pPath, const char *pMode, FILE *pStream) {$/;"	f
mz_inflate	support/tinyexr/tinyexr.h	/^int mz_inflate(mz_streamp pStream, int flush) {$/;"	f
mz_inflateEnd	support/tinyexr/tinyexr.h	/^int mz_inflateEnd(mz_streamp pStream) {$/;"	f
mz_inflateInit	support/tinyexr/tinyexr.h	/^int mz_inflateInit(mz_streamp pStream) {$/;"	f
mz_inflateInit2	support/tinyexr/tinyexr.h	/^int mz_inflateInit2(mz_streamp pStream, int window_bits) {$/;"	f
mz_int16	support/tinyexr/tinyexr.h	/^typedef signed short mz_int16;$/;"	t
mz_int64	support/tinyexr/tinyexr.h	/^typedef long long mz_int64;$/;"	t
mz_realloc_func	support/tinyexr/tinyexr.h	/^typedef void *(*mz_realloc_func)(void *opaque, void *address, size_t items,$/;"	t
mz_stream	support/tinyexr/tinyexr.h	/^} mz_stream;$/;"	t	typeref:struct:tinyexr::miniz::mz_stream_s
mz_stream_s	support/tinyexr/tinyexr.h	/^typedef struct mz_stream_s {$/;"	s
mz_streamp	support/tinyexr/tinyexr.h	/^typedef mz_stream *mz_streamp;$/;"	t
mz_uint	support/tinyexr/tinyexr.h	/^typedef unsigned int mz_uint;$/;"	t
mz_uint16	support/tinyexr/tinyexr.h	/^typedef unsigned short mz_uint16;$/;"	t
mz_uint32	support/tinyexr/tinyexr.h	/^typedef unsigned int mz_uint32;$/;"	t
mz_uint64	support/tinyexr/tinyexr.h	/^typedef unsigned long long mz_uint64;$/;"	t
mz_uint8	support/tinyexr/tinyexr.h	/^typedef unsigned char mz_uint8;$/;"	t
mz_ulong	support/tinyexr/tinyexr.h	/^typedef unsigned long mz_ulong;$/;"	t
mz_uncompress	support/tinyexr/tinyexr.h	/^int mz_uncompress(unsigned char *pDest, mz_ulong *pDest_len,$/;"	f
mz_validate_uint16	support/tinyexr/tinyexr.h	/^typedef unsigned char mz_validate_uint16[sizeof(mz_uint16) == 2 ? 1 : -1];$/;"	t	namespace:tinyexr::miniz
mz_validate_uint32	support/tinyexr/tinyexr.h	/^typedef unsigned char mz_validate_uint32[sizeof(mz_uint32) == 4 ? 1 : -1];$/;"	t	namespace:tinyexr::miniz
mz_validate_uint64	support/tinyexr/tinyexr.h	/^typedef unsigned char mz_validate_uint64[sizeof(mz_uint64) == 8 ? 1 : -1];$/;"	t	namespace:tinyexr::miniz
mz_version	support/tinyexr/tinyexr.h	/^const char *mz_version(void) { return MZ_VERSION; }$/;"	f
mz_write_le16	support/tinyexr/tinyexr.h	/^static void mz_write_le16(mz_uint8 *p, mz_uint16 v) {$/;"	f
mz_write_le32	support/tinyexr/tinyexr.h	/^static void mz_write_le32(mz_uint8 *p, mz_uint32 v) {$/;"	f
mz_zip_add_mem_to_archive_file_in_place	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_add_mem_to_archive_file_in_place($/;"	f
mz_zip_archive	support/tinyexr/tinyexr.h	/^} mz_zip_archive;$/;"	t	typeref:struct:tinyexr::miniz::mz_zip_archive_tag
mz_zip_archive_file_stat	support/tinyexr/tinyexr.h	/^} mz_zip_archive_file_stat;$/;"	t	typeref:struct:tinyexr::miniz::__anon39
mz_zip_archive_tag	support/tinyexr/tinyexr.h	/^typedef struct mz_zip_archive_tag {$/;"	s
mz_zip_array	support/tinyexr/tinyexr.h	/^} mz_zip_array;$/;"	t	typeref:struct:tinyexr::miniz::__anon59
mz_zip_array_clear	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE void mz_zip_array_clear(mz_zip_archive *pZip,$/;"	f
mz_zip_array_ensure_capacity	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_array_ensure_capacity(mz_zip_archive *pZip,$/;"	f
mz_zip_array_ensure_room	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE mz_bool mz_zip_array_ensure_room(mz_zip_archive *pZip,$/;"	f
mz_zip_array_push_back	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE mz_bool mz_zip_array_push_back(mz_zip_archive *pZip,$/;"	f
mz_zip_array_reserve	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE mz_bool mz_zip_array_reserve(mz_zip_archive *pZip,$/;"	f
mz_zip_array_resize	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE mz_bool mz_zip_array_resize(mz_zip_archive *pZip,$/;"	f
mz_zip_dos_to_time_t	support/tinyexr/tinyexr.h	/^static time_t mz_zip_dos_to_time_t(int dos_time, int dos_date) {$/;"	f
mz_zip_extract_archive_file_to_heap	support/tinyexr/tinyexr.h	/^void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename,$/;"	f
mz_zip_file_read_func	support/tinyexr/tinyexr.h	/^static size_t mz_zip_file_read_func(void *pOpaque, mz_uint64 file_ofs,$/;"	f
mz_zip_file_write_callback	support/tinyexr/tinyexr.h	/^static size_t mz_zip_file_write_callback(void *pOpaque, mz_uint64 ofs,$/;"	f
mz_zip_file_write_func	support/tinyexr/tinyexr.h	/^static size_t mz_zip_file_write_func(void *pOpaque, mz_uint64 file_ofs,$/;"	f
mz_zip_flags	support/tinyexr/tinyexr.h	/^} mz_zip_flags;$/;"	t	typeref:enum:tinyexr::miniz::__anon41
mz_zip_get_file_modified_time	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_get_file_modified_time(const char *pFilename,$/;"	f
mz_zip_heap_write_func	support/tinyexr/tinyexr.h	/^static size_t mz_zip_heap_write_func(void *pOpaque, mz_uint64 file_ofs,$/;"	f
mz_zip_internal_state	support/tinyexr/tinyexr.h	/^typedef struct mz_zip_internal_state_tag mz_zip_internal_state;$/;"	t	typeref:struct:tinyexr::miniz::mz_zip_internal_state_tag
mz_zip_internal_state_tag	support/tinyexr/tinyexr.h	/^struct mz_zip_internal_state_tag {$/;"	s
mz_zip_mem_read_func	support/tinyexr/tinyexr.h	/^static size_t mz_zip_mem_read_func(void *pOpaque, mz_uint64 file_ofs,$/;"	f
mz_zip_mode	support/tinyexr/tinyexr.h	/^} mz_zip_mode;$/;"	t	typeref:enum:tinyexr::miniz::__anon40
mz_zip_reader_end	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_end(mz_zip_archive *pZip) {$/;"	f
mz_zip_reader_extract_file_to_callback	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_extract_file_to_file	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_file_to_file(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_extract_file_to_heap	support/tinyexr/tinyexr.h	/^void *mz_zip_reader_extract_file_to_heap(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_extract_file_to_mem	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_file_to_mem(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_extract_file_to_mem_no_alloc	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_file_to_mem_no_alloc($/;"	f
mz_zip_reader_extract_to_callback	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_extract_to_file	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_to_file(mz_zip_archive *pZip, mz_uint file_index,$/;"	f
mz_zip_reader_extract_to_heap	support/tinyexr/tinyexr.h	/^void *mz_zip_reader_extract_to_heap(mz_zip_archive *pZip, mz_uint file_index,$/;"	f
mz_zip_reader_extract_to_mem	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_to_mem(mz_zip_archive *pZip, mz_uint file_index,$/;"	f
mz_zip_reader_extract_to_mem_no_alloc	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_extract_to_mem_no_alloc(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_file_stat	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_file_stat(mz_zip_archive *pZip, mz_uint file_index,$/;"	f
mz_zip_reader_filename_compare	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE int mz_zip_reader_filename_compare($/;"	f
mz_zip_reader_filename_less	support/tinyexr/tinyexr.h	/^mz_zip_reader_filename_less(const mz_zip_array *pCentral_dir_array,$/;"	f
mz_zip_reader_get_cdh	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE const mz_uint8 *mz_zip_reader_get_cdh($/;"	f
mz_zip_reader_get_filename	support/tinyexr/tinyexr.h	/^mz_uint mz_zip_reader_get_filename(mz_zip_archive *pZip, mz_uint file_index,$/;"	f
mz_zip_reader_get_num_files	support/tinyexr/tinyexr.h	/^mz_uint mz_zip_reader_get_num_files(mz_zip_archive *pZip) {$/;"	f
mz_zip_reader_init	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_init(mz_zip_archive *pZip, mz_uint64 size,$/;"	f
mz_zip_reader_init_file	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_init_file(mz_zip_archive *pZip, const char *pFilename,$/;"	f
mz_zip_reader_init_internal	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_reader_init_internal(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_init_mem	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_init_mem(mz_zip_archive *pZip, const void *pMem,$/;"	f
mz_zip_reader_is_file_a_directory	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_is_file_encrypted	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_locate_file	support/tinyexr/tinyexr.h	/^int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName,$/;"	f
mz_zip_reader_locate_file_binary_search	support/tinyexr/tinyexr.h	/^static int mz_zip_reader_locate_file_binary_search(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_read_central_dir	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip,$/;"	f
mz_zip_reader_sort_central_dir_offsets_by_filename	support/tinyexr/tinyexr.h	/^static void mz_zip_reader_sort_central_dir_offsets_by_filename($/;"	f
mz_zip_reader_string_equal	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE mz_bool mz_zip_reader_string_equal(const char *pA,$/;"	f
mz_zip_set_file_times	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_set_file_times(const char *pFilename, time_t access_time,$/;"	f
mz_zip_time_to_dos_time	support/tinyexr/tinyexr.h	/^static void mz_zip_time_to_dos_time(time_t time, mz_uint16 *pDOS_time,$/;"	f
mz_zip_writer_add_file	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_add_file(mz_zip_archive *pZip, const char *pArchive_name,$/;"	f
mz_zip_writer_add_from_zip_reader	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip,$/;"	f
mz_zip_writer_add_mem	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_add_mem(mz_zip_archive *pZip, const char *pArchive_name,$/;"	f
mz_zip_writer_add_mem_ex	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_add_mem_ex(mz_zip_archive *pZip,$/;"	f
mz_zip_writer_add_put_buf_callback	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_add_put_buf_callback(const void *pBuf, int len,$/;"	f
mz_zip_writer_add_state	support/tinyexr/tinyexr.h	/^} mz_zip_writer_add_state;$/;"	t	typeref:struct:tinyexr::miniz::__anon60
mz_zip_writer_add_to_central_dir	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_add_to_central_dir($/;"	f
mz_zip_writer_compute_padding_needed_for_file_alignment	support/tinyexr/tinyexr.h	/^static mz_uint mz_zip_writer_compute_padding_needed_for_file_alignment($/;"	f
mz_zip_writer_create_central_dir_header	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_create_central_dir_header($/;"	f
mz_zip_writer_create_local_dir_header	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_create_local_dir_header($/;"	f
mz_zip_writer_end	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_end(mz_zip_archive *pZip) {$/;"	f
mz_zip_writer_finalize_archive	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_finalize_archive(mz_zip_archive *pZip) {$/;"	f
mz_zip_writer_finalize_heap_archive	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_finalize_heap_archive(mz_zip_archive *pZip, void **pBuf,$/;"	f
mz_zip_writer_init	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_init(mz_zip_archive *pZip, mz_uint64 existing_size) {$/;"	f
mz_zip_writer_init_file	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_init_file(mz_zip_archive *pZip, const char *pFilename,$/;"	f
mz_zip_writer_init_from_reader	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_init_from_reader(mz_zip_archive *pZip,$/;"	f
mz_zip_writer_init_heap	support/tinyexr/tinyexr.h	/^mz_bool mz_zip_writer_init_heap(mz_zip_archive *pZip,$/;"	f
mz_zip_writer_validate_archive_name	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_validate_archive_name(const char *pArchive_name) {$/;"	f
mz_zip_writer_write_zeros	support/tinyexr/tinyexr.h	/^static mz_bool mz_zip_writer_write_zeros(mz_zip_archive *pZip,$/;"	f
name	optixMotionGeometry/tiny_obj_loader.h	/^  std::string name;$/;"	m	struct:tinyobj::material_t
name	optixMotionGeometry/tiny_obj_loader.h	/^  std::string name;$/;"	m	struct:tinyobj::shape_t
name	optixMotionGeometry/tiny_obj_loader.h	/^  std::string name;$/;"	m	struct:tinyobj::tag_t
name	support/GLFW/deps/getopt.h	/^  const char* name;$/;"	m	struct:option
name	support/GLFW/src/cocoa_joystick.h	/^    char            name[256];$/;"	m	struct:_GLFWjoystickNS
name	support/GLFW/src/internal.h	/^    char*           name;$/;"	m	struct:_GLFWmonitor
name	support/GLFW/src/linux_joystick.h	/^    char*           name;$/;"	m	struct:_GLFWjoystickLinux
name	support/GLFW/src/win32_joystick.h	/^    char*                   name;$/;"	m	struct:_GLFWjoystickWin32
name	support/tinyexr/tinyexr.h	/^  char name[256];  \/\/ less than 255 bytes long$/;"	m	struct:_EXRChannelInfo
name	support/tinyexr/tinyexr.h	/^  char name[256];  \/\/ name and type are up to 255 chars long.$/;"	m	struct:_EXRAttribute
name	support/tinyexr/tinyexr.h	/^  std::string name;  \/\/ less than 255 bytes long$/;"	m	struct:tinyexr::__anon63
name	support/tinygltf/json.hpp	/^    static std::string name(const std::string& ename, int id_)$/;"	f	class:nlohmann::detail::exception
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	class:tinygltf::Node
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Accessor
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Animation
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Buffer
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::BufferView
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Camera
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Image
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Light
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Material
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Mesh
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Sampler
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Scene
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Skin
name	support/tinygltf/tiny_gltf.h	/^  std::string name;$/;"	m	struct:tinygltf::Texture
name	sutil/Scene.h	/^        std::string                       name;$/;"	m	struct:sutil::Scene::MeshGroup
nameKey	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t    gridSize, fileSize, nameKey, voxelCount; \/\/ 4 * 8 = 32B.$/;"	m	struct:nanovdb::io::Codec::MetaData
nameSize	optixVolumeViewer/nanovdb/util/IO.h	/^    uint32_t    nameSize; \/\/ 4B.$/;"	m	struct:nanovdb::io::Codec::MetaData
name_separator	support/tinygltf/json.hpp	/^        name_separator,   \/\/\/< the name separator `:`$/;"	m	class:nlohmann::detail::lexer::token_type
nanovdb	optixVolumeViewer/nanovdb/NanoVDB.h	/^namespace nanovdb {$/;"	n
nanovdb	optixVolumeViewer/nanovdb/util/GridHandle.h	/^namespace nanovdb {$/;"	n
nanovdb	optixVolumeViewer/nanovdb/util/HDDA.h	/^namespace nanovdb {$/;"	n
nanovdb	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^namespace nanovdb {$/;"	n
nanovdb	optixVolumeViewer/nanovdb/util/IO.h	/^namespace nanovdb {$/;"	n
nanovdb	optixVolumeViewer/nanovdb/util/Ray.h	/^namespace nanovdb {$/;"	n
native	support/GLFW/src/wl_platform.h	/^    struct wl_egl_window*       native;$/;"	m	struct:_GLFWwindowWayland	typeref:struct:_GLFWwindowWayland::wl_egl_window
nativeKeys	support/GLFW/src/cocoa_platform.h	/^    short int           nativeKeys[GLFW_KEY_LAST + 1];$/;"	m	struct:_GLFWlibraryNS
nativeKeys	support/GLFW/src/win32_platform.h	/^    short int           nativeKeys[GLFW_KEY_LAST + 1];$/;"	m	struct:_GLFWlibraryWin32
nativeKeys	support/GLFW/src/x11_platform.h	/^    short int       nativeKeys[GLFW_KEY_LAST + 1];$/;"	m	struct:_GLFWlibraryX11
newEventNode	support/GLFW/src/mir_window.c	/^static EventNode* newEventNode(const MirEvent* event, _GLFWwindow* context)$/;"	f	file:
newLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout              newLayout;$/;"	m	struct:VkImageMemoryBarrier
next	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType next() const$/;"	f	class:nanovdb::DDA
next	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType next() const$/;"	f	class:nanovdb::HDDA
next	support/GLFW/src/internal.h	/^    _GLFWcursor*    next;$/;"	m	struct:_GLFWcursor
next	support/GLFW/src/internal.h	/^    struct _GLFWwindow* next;$/;"	m	struct:_GLFWwindow	typeref:struct:_GLFWwindow::_GLFWwindow
next	support/imgui/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node
next	support/imgui/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	support/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
nextAxis	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ int nextAxis() const$/;"	f	class:nanovdb::DDA
nextVal	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    void         nextVal()$/;"	f	struct:MaterialIndex
next_byte_in_range	support/tinygltf/json.hpp	/^    bool next_byte_in_range(std::initializer_list<int> ranges)$/;"	f	class:nlohmann::detail::lexer
next_in	support/tinyexr/tinyexr.h	/^  const unsigned char *next_in;  \/\/ pointer to next byte to read$/;"	m	struct:tinyexr::miniz::mz_stream_s
next_out	support/tinyexr/tinyexr.h	/^  unsigned char *next_out;  \/\/ pointer to next byte to write$/;"	m	struct:tinyexr::miniz::mz_stream_s
next_unget	support/tinygltf/json.hpp	/^    bool next_unget = false;$/;"	m	class:nlohmann::detail::lexer
nlerp	optixMotionGeometry/motionHelper.hpp	/^static inline Quaternion nlerp( const Quaternion& quat0, const Quaternion& quat1, float t )$/;"	f	namespace:__anon4
nlohmann	support/tinygltf/json.hpp	/^namespace nlohmann$/;"	n
no_argument	support/GLFW/deps/getopt.c	/^const int no_argument = 0;$/;"	v
no_init_all	optixOpticalFlow/optix_denoiser_opticalflow.h	39;"	d
nodeCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t                 nodeCount(uint32_t level) const { return this->grid().tree().nodeCount(level); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
nodeCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t nodeCount() const { return DataType::mCount[NodeT::LEVEL]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
nodeCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint32_t nodeCount(int level) const { return DataType::mCount[level]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
nodeCount	optixVolumeViewer/nanovdb/util/IO.h	/^    uint32_t    nodeCount[4]; \/\/4 x 4 = 16B$/;"	m	struct:nanovdb::io::Codec::MetaData
nodes	support/imgui/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context
nodes	support/tinygltf/tiny_gltf.h	/^  std::vector<Node> nodes;$/;"	m	class:tinygltf::Model
nodes	support/tinygltf/tiny_gltf.h	/^  std::vector<int> nodes;$/;"	m	struct:tinygltf::Scene
noerror	support/GLFW/src/internal.h	/^    GLFWbool            forward, debug, noerror;$/;"	m	struct:_GLFWcontext
noerror	support/GLFW/src/internal.h	/^    GLFWbool      noerror;$/;"	m	struct:_GLFWctxconfig
noexcept	support/tinygltf/json.hpp	/^    ValueType & get_to(ValueType& v) const noexcept(noexcept($/;"	f	class:nlohmann::basic_json
noexcept	support/tinygltf/json.hpp	/^    ValueType get() const noexcept(noexcept($/;"	f	class:nlohmann::basic_json
noexcept	support/tinygltf/json.hpp	/^    basic_json& operator=(basic_json other) noexcept ($/;"	f	class:nlohmann::basic_json
noexcept	support/tinygltf/json.hpp	/^    basic_json(CompatibleType && val) noexcept(noexcept($/;"	f	class:nlohmann::basic_json
noexcept	support/tinygltf/json.hpp	/^    constexpr diyfp(uint64_t f_, int e_) noexcept : f(f_), e(e_) {}$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp
noexcept	support/tinygltf/json.hpp	/^    void swap(reference other) noexcept ($/;"	f	class:nlohmann::basic_json
noexcept	support/tinygltf/json.hpp	/^inline void swap<nlohmann::json>(nlohmann::json& j1, nlohmann::json& j2) noexcept($/;"	f	namespace:std
nomore	support/tinygltf/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon99
nonCoherentAtomSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          nonCoherentAtomSize;$/;"	m	struct:VkPhysicalDeviceLimits
non_image	support/tinyexr/tinyexr.h	/^  int non_image;  \/\/ deep image(EXR 2.0)$/;"	m	struct:_EXRVersion
non_image	support/tinyexr/tinyexr.h	/^  int non_image;$/;"	m	struct:_EXRHeader
nonesuch	support/tinygltf/json.hpp	/^struct nonesuch$/;"	s	namespace:nlohmann::detail
norm	sutil/Quaternion.h	/^    float norm() const$/;"	f	class:sutil::Quaternion
normal	optixBoundValues/optixBoundValues.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixCutouts/optixCutouts.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixDenoiser/OptiXDenoiser.h	/^        float*    normal    = nullptr;$/;"	m	struct:OptiXDenoiser::Data
normal	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixMultiGPU/optixMultiGPU.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixNVLink/optixNVLink.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixPathTracer/optixPathTracer.h	/^    float3 normal;$/;"	m	struct:ParallelogramLight
normal	optixVolumeViewer/volume.h	/^        float3 normal;$/;"	m	struct:GeometryData::Plane
normalTexture	support/tinygltf/tiny_gltf.h	/^  NormalTextureInfo normalTexture;$/;"	m	struct:tinygltf::Material
normal_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*normal_cb)(void *user_data, real_t x, real_t y, real_t z);$/;"	m	struct:tinyobj::callback_t
normal_index	optixMotionGeometry/tiny_obj_loader.h	/^  int normal_index;$/;"	m	struct:tinyobj::index_t
normal_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> normal_indices;$/;"	m	struct:tinyobj::mesh_t
normal_tex	cuda/MaterialData.h	/^    Texture              normal_tex      = { 0 , 0 };$/;"	m	struct:MaterialData
normal_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string normal_texname;     \/\/ norm. For normal mapping.$/;"	m	struct:tinyobj::material_t
normal_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t normal_texopt;$/;"	m	struct:tinyobj::material_t
normalize	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& normalize() { return (*this) \/= this->length(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
normalize	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& normalize() { return (*this) \/= this->length(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
normalize	sutil/Quaternion.h	/^inline float Quaternion::normalize()$/;"	f	class:sutil::Quaternion
normalize	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 normalize(const float2& v)$/;"	f
normalize	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 normalize(const float3& v)$/;"	f
normalize	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 normalize(const float4& v)$/;"	f
normalized	support/tinygltf/tiny_gltf.h	/^  bool normalized;    \/\/ optional.$/;"	m	struct:tinygltf::Accessor
normals	cuda/GeometryData.h	/^        BufferView<float3> normals;$/;"	m	struct:GeometryData::TriangleMesh
normals	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> normals;         \/\/ 'vn'$/;"	m	struct:tinyobj::attrib_t
normals	sutil/Scene.h	/^        std::vector<BufferView<float3> >  normals;$/;"	m	struct:sutil::Scene::MeshGroup
null	support/tinygltf/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_acceptor
null	support/tinygltf/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
null	support/tinygltf/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_dom_parser
null	support/tinygltf/json.hpp	/^    null,             \/\/\/< null value$/;"	m	class:nlohmann::detail::value_t
numGlyphs	support/imgui/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
numKeys	optixMotionGeometry/motionHelper.hpp	/^    unsigned int numKeys() const { return m_numKeys; }$/;"	f	class:__anon4::MotionTransformArrayBase
numPlanes	optixOpticalFlow/nvOpticalFlowCuda.h	/^    uint32_t            numPlanes;                     \/**< Number of planes. *\/$/;"	m	struct:_NV_OF_CUDA_BUFFER_STRIDE_INFO
numPoints	optixHair/Hair.h	/^        uint32_t numPoints;$/;"	m	struct:Hair::FileHeader
numRois	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        numRois;                         \/**< [in]: Number of ROIs. *\/$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
numSamples	sutil/WorkDistribution.h	/^    SUTIL_INLINE SUTIL_HOSTDEVICE int32_t numSamples( int32_t gpu_idx )$/;"	f	class:StaticWorkDistribution
numStrands	optixHair/Hair.h	/^        uint32_t numStrands;$/;"	m	struct:Hair::FileHeader
numTransforms	optixMotionGeometry/motionHelper.hpp	/^    size_t numTransforms() const { return m_numTransforms; }$/;"	f	class:__anon4::MotionTransformArrayBase
numTriangles	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    unsigned int        numTriangles;$/;"	m	struct:MeshData	file:
num_bits	support/tinygltf/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon103
num_channels	support/tinyexr/tinyexr.h	/^  int num_channels;$/;"	m	struct:_DeepImage
num_channels	support/tinyexr/tinyexr.h	/^  int num_channels;$/;"	m	struct:_EXRHeader
num_channels	support/tinyexr/tinyexr.h	/^  int num_channels;$/;"	m	struct:_EXRImage
num_channels	support/tinygltf/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon96
num_chars	support/imgui/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon85
num_chars	support/imgui/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon68
num_custom_attributes	support/tinyexr/tinyexr.h	/^  int num_custom_attributes;$/;"	m	struct:_EXRHeader
num_exts_i	support/glad/glad.c	/^static int num_exts_i = 0;$/;"	v	file:
num_face_vertices	optixMotionGeometry/tiny_obj_loader.h	/^      num_face_vertices;          \/\/ The number of vertices per$/;"	m	struct:tinyobj::mesh_t
num_headers	support/tinyexr/tinyexr.h	/^  int num_headers;$/;"	m	struct:_EXRMultiPartHeader
num_images	support/tinyexr/tinyexr.h	/^  int num_images;$/;"	m	struct:_EXRMultiPartImage
num_indices	optixRibbons/optixRibbons.h	/^const unsigned int num_indices  = 410;$/;"	v
num_indices	optixVolumeViewer/optixVolumeViewer.h	/^    static const unsigned int num_indices          = 6 * 2 * 3;$/;"	m	struct:Cube
num_indices	optixVolumeViewer/optixVolumeViewer.h	/^    static const unsigned int num_indices          = 6;$/;"	m	struct:Plane
num_ints	optixMotionGeometry/tiny_obj_loader.h	/^  int num_ints;$/;"	m	struct:tinyobj::tag_sizes
num_line_vertices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> num_line_vertices;  \/\/ The number of vertices per line.$/;"	m	struct:tinyobj::lines_t
num_nodes	support/imgui/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context
num_positions	optixVolumeViewer/optixVolumeViewer.h	/^	static const unsigned int num_positions            = 8;$/;"	m	struct:Cube
num_positions	optixVolumeViewer/optixVolumeViewer.h	/^    static const unsigned int num_positions            = 4;$/;"	m	struct:Plane
num_reals	optixMotionGeometry/tiny_obj_loader.h	/^  int num_reals;$/;"	m	struct:tinyobj::tag_sizes
num_remaining_in_head_chunk	support/imgui/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
num_samples	optixMultiGPU/optixMultiGPU.cpp	/^    int32_t                      num_samples              = 0;$/;"	m	struct:PathTracerState	file:
num_samples	optixNVLink/optixNVLink.cpp	/^    int32_t                      num_samples              = 0;$/;"	m	struct:PerDeviceSampleState	file:
num_strings	optixMotionGeometry/tiny_obj_loader.h	/^  int num_strings;$/;"	m	struct:tinyobj::tag_sizes
num_texcoords	cuda/GeometryData.h	/^    static const unsigned int num_texcoords = 2;$/;"	m	struct:GeometryData
num_tiles	support/tinyexr/tinyexr.h	/^  int num_tiles;$/;"	m	struct:_EXRImage
num_vertices	optixRibbons/optixRibbons.h	/^const unsigned int num_vertices = 470;$/;"	v
num_vertices	support/imgui/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon78
numberOfPoints	optixHair/Hair.cpp	/^uint32_t Hair::numberOfPoints() const$/;"	f	class:Hair
numberOfSegments	optixHair/Hair.cpp	/^int Hair::numberOfSegments() const$/;"	f	class:Hair
numberOfStrands	optixHair/Hair.cpp	/^uint32_t Hair::numberOfStrands() const$/;"	f	class:Hair
numberOfTriangles	optixHair/Head.h	/^    size_t numberOfTriangles() const { return m_triangles; }$/;"	f	class:Head
numberOfVertices	optixHair/Head.h	/^    size_t numberOfVertices() const { return m_vertices; }$/;"	f	class:Head
number_array	support/tinygltf/tiny_gltf.h	/^  std::vector<double> number_array;$/;"	m	struct:tinygltf::Parameter
number_float	support/tinygltf/json.hpp	/^        json_value(number_float_t v) noexcept : number_float(v) {}$/;"	f	union:nlohmann::basic_json::json_value
number_float	support/tinygltf/json.hpp	/^        number_float_t number_float;$/;"	m	union:nlohmann::basic_json::json_value
number_float	support/tinygltf/json.hpp	/^    bool number_float(number_float_t \/*unused*\/, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
number_float	support/tinygltf/json.hpp	/^    bool number_float(number_float_t val, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
number_float	support/tinygltf/json.hpp	/^    bool number_float(number_float_t val, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
number_float	support/tinygltf/json.hpp	/^    number_float,     \/\/\/< number value (floating-point)$/;"	m	class:nlohmann::detail::value_t
number_integer	support/tinygltf/json.hpp	/^        json_value(number_integer_t v) noexcept : number_integer(v) {}$/;"	f	union:nlohmann::basic_json::json_value
number_integer	support/tinygltf/json.hpp	/^        number_integer_t number_integer;$/;"	m	union:nlohmann::basic_json::json_value
number_integer	support/tinygltf/json.hpp	/^    bool number_integer(number_integer_t \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
number_integer	support/tinygltf/json.hpp	/^    bool number_integer(number_integer_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
number_integer	support/tinygltf/json.hpp	/^    bool number_integer(number_integer_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
number_integer	support/tinygltf/json.hpp	/^    number_integer,   \/\/\/< number value (signed integer)$/;"	m	class:nlohmann::detail::value_t
number_unsigned	support/tinygltf/json.hpp	/^        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}$/;"	f	union:nlohmann::basic_json::json_value
number_unsigned	support/tinygltf/json.hpp	/^        number_unsigned_t number_unsigned;$/;"	m	union:nlohmann::basic_json::json_value
number_unsigned	support/tinygltf/json.hpp	/^    bool number_unsigned(number_unsigned_t \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
number_unsigned	support/tinygltf/json.hpp	/^    bool number_unsigned(number_unsigned_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
number_unsigned	support/tinygltf/json.hpp	/^    bool number_unsigned(number_unsigned_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
number_unsigned	support/tinygltf/json.hpp	/^    number_unsigned,  \/\/\/< number value (unsigned integer)$/;"	m	class:nlohmann::detail::value_t
number_value	support/tinygltf/tiny_gltf.h	/^  double number_value = 0.0;$/;"	m	struct:tinygltf::Parameter
numer	support/GLFW/src/internal.h	/^    int                 numer, denom;$/;"	m	struct:_GLFWwindow
nvCreateOpticalFlowCuda	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVCREATEOPTICALFLOWCUDA                                 nvCreateOpticalFlowCuda;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFCreateGPUBufferCuda	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFCREATEGPUBUFFERCUDA                                 nvOFCreateGPUBufferCuda;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFDestroy	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFDESTROY                                             nvOFDestroy;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFDestroyGPUBufferCuda	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFDESTROYGPUBUFFERCUDA                                nvOFDestroyGPUBufferCuda;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFExecute	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFEXECUTE                                             nvOFExecute;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFGPUBufferGetCUarray	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFGPUBUFFERGETCUARRAY                                 nvOFGPUBufferGetCUarray;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFGPUBufferGetCUdeviceptr	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFGPUBUFFERGETCUDEVICEPTR                             nvOFGPUBufferGetCUdeviceptr;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFGPUBufferGetStrideInfo	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNVOFGPUBUFFERGETSTRIDEINFO                               nvOFGPUBufferGetStrideInfo;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFGetCaps	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFGETCAPS                                             nvOFGetCaps;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFGetLastError	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFGETLASTERROR                                        nvOFGetLastError;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFInit	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFINIT                                                nvOFInit;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvOFSetIOCudaStreams	optixOpticalFlow/nvOpticalFlowCuda.h	/^    PFNNVOFSETIOCUDASTREAMS                                    nvOFSetIOCudaStreams;$/;"	m	struct:_NV_OF_CUDA_API_FUNCTION_LIST
nvmlDeviceGetHandleByIndex_p	optixNVLink/optixNVLink.cpp	/^NVML_DEVICE_GET_HANDLE_BY_INDEX_TYPE nvmlDeviceGetHandleByIndex_p;$/;"	v
nvmlDeviceGetNvLinkCapability_p	optixNVLink/optixNVLink.cpp	/^NVML_DEVICE_GET_NVLINK_CAPABILITY_TYPE nvmlDeviceGetNvLinkCapability_p;$/;"	v
nvmlDeviceGetNvLinkRemotePciInfo_p	optixNVLink/optixNVLink.cpp	/^NVML_DEVICE_GET_NVLINK_REMOTE_PCI_INFO_TYPE nvmlDeviceGetNvLinkRemotePciInfo_p;$/;"	v
nvmlDeviceGetNvLinkState_p	optixNVLink/optixNVLink.cpp	/^NVML_DEVICE_GET_NVLINK_STATE_TYPE nvmlDeviceGetNvLinkState_p;$/;"	v
nvmlDeviceGetPciInfo_p	optixNVLink/optixNVLink.cpp	/^NVML_DEVICE_GET_PCI_INFO_TYPE nvmlDeviceGetPciInfo_p;$/;"	v
nvmlInit_p	optixNVLink/optixNVLink.cpp	/^NVML_INIT_TYPE nvmlInit_p;$/;"	v
nvmlSystemGetDriverVersion_p	optixNVLink/optixNVLink.cpp	/^NVML_SYSTEM_GET_DRIVER_VERSION_TYPE nvmlSystemGetDriverVersion_p;$/;"	v
nx	support/tinyexr/tinyexr.h	/^  int nx;$/;"	m	struct:tinyexr::PIZChannelData
ny	support/tinyexr/tinyexr.h	/^  int ny;$/;"	m	struct:tinyexr::PIZChannelData
o	support/tinygltf/json.hpp	/^    output_adapter_t<char> o = nullptr;$/;"	m	class:nlohmann::detail::serializer
oa	support/tinygltf/json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::binary_writer
oa	support/tinygltf/json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::output_adapter
obj_shape	optixMotionGeometry/tiny_obj_loader.h	/^struct obj_shape {$/;"	s	namespace:tinyobj
object	support/GLFW/src/cocoa_platform.h	/^    id              object;$/;"	m	struct:_GLFWcursorNS
object	support/GLFW/src/cocoa_platform.h	/^    id              object;$/;"	m	struct:_GLFWwindowNS
object	support/GLFW/src/nsgl_context.h	/^    id	         object;$/;"	m	struct:_GLFWcontextNSGL
object	support/tinygltf/json.hpp	/^        object_t* object;$/;"	m	union:nlohmann::basic_json::json_value
object	support/tinygltf/json.hpp	/^    object,           \/\/\/< object (unordered set of name\/value pairs)$/;"	m	class:nlohmann::detail::value_t
object	support/tinygltf/json.hpp	/^    static basic_json object(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json
objectCount	support/GLFW/src/win32_joystick.c	/^    int                     objectCount;$/;"	m	struct:_GLFWobjenumWin32	file:
objectCount	support/GLFW/src/win32_joystick.h	/^    int                     objectCount;$/;"	m	struct:_GLFWjoystickWin32
object_aabb	sutil/Scene.h	/^        Aabb                              object_aabb;$/;"	m	struct:sutil::Scene::MeshGroup
object_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*object_cb)(void *user_data, const char *name);$/;"	m	struct:tinyobj::callback_t
object_element	support/tinygltf/json.hpp	/^    BasicJsonType* object_element = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
object_element	support/tinygltf/json.hpp	/^    BasicJsonType* object_element = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_parser
object_end	support/tinygltf/json.hpp	/^        object_end,$/;"	m	class:nlohmann::detail::parser::parse_event_t
object_start	support/tinygltf/json.hpp	/^        object_start,$/;"	m	class:nlohmann::detail::parser::parse_event_t
object_value_	support/tinygltf/tiny_gltf.h	/^  Object object_value_;$/;"	m	class:tinygltf::Value
objects	support/GLFW/src/win32_joystick.c	/^    _GLFWjoyobjectWin32*    objects;$/;"	m	struct:_GLFWobjenumWin32	file:
objects	support/GLFW/src/win32_joystick.h	/^    _GLFWjoyobjectWin32*    objects;$/;"	m	struct:_GLFWjoystickWin32
occlusionQueryEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                         occlusionQueryEnable;$/;"	m	struct:VkCommandBufferInheritanceInfo
occlusionQueryPrecise	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    occlusionQueryPrecise;$/;"	m	struct:VkPhysicalDeviceFeatures
occlusionTexture	support/tinygltf/tiny_gltf.h	/^  OcclusionTextureInfo occlusionTexture;$/;"	m	struct:tinygltf::Material
occlusion_floor_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup occlusion_floor_prog_group        = 0;$/;"	m	struct:OptixConsoleState	file:
occlusion_floor_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           occlusion_floor_prog_group        = 0;$/;"	m	struct:WhittedState	file:
occlusion_glass_sphere_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup occlusion_glass_sphere_prog_group = 0;$/;"	m	struct:OptixConsoleState	file:
occlusion_glass_sphere_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           occlusion_glass_sphere_prog_group = 0;$/;"	m	struct:WhittedState	file:
occlusion_hit_group	optixBoundValues/optixBoundValues.cpp	/^    OptixProgramGroup              occlusion_hit_group      = 0;$/;"	m	struct:PathTracerState	file:
occlusion_hit_group	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixProgramGroup              occlusion_hit_group      = 0;$/;"	m	struct:PathTracerState	file:
occlusion_hit_group	optixMultiGPU/optixMultiGPU.cpp	/^    OptixProgramGroup            occlusion_hit_group      = 0;$/;"	m	struct:PathTracerState	file:
occlusion_hit_group	optixNVLink/optixNVLink.cpp	/^    OptixProgramGroup            occlusion_hit_group      = 0;$/;"	m	struct:PerDeviceSampleState	file:
occlusion_metal_sphere_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup occlusion_metal_sphere_prog_group = 0;$/;"	m	struct:OptixConsoleState	file:
occlusion_metal_sphere_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           occlusion_metal_sphere_prog_group = 0;$/;"	m	struct:WhittedState	file:
occlusion_miss_group	optixBoundValues/optixBoundValues.cpp	/^    OptixProgramGroup              occlusion_miss_group     = 0;$/;"	m	struct:PathTracerState	file:
occlusion_miss_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup occlusion_miss_group            = 0;$/;"	m	struct:CutoutsState	file:
occlusion_miss_group	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixProgramGroup              occlusion_miss_group     = 0;$/;"	m	struct:PathTracerState	file:
occlusion_miss_group	optixMultiGPU/optixMultiGPU.cpp	/^    OptixProgramGroup            occlusion_miss_group     = 0;$/;"	m	struct:PathTracerState	file:
occlusion_miss_group	optixNVLink/optixNVLink.cpp	/^    OptixProgramGroup            occlusion_miss_group     = 0;$/;"	m	struct:PerDeviceSampleState	file:
occlusion_miss_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup occlusion_miss_prog_group         = 0;$/;"	m	struct:OptixConsoleState	file:
occlusion_miss_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           occlusion_miss_prog_group = 0;$/;"	m	struct:WhittedState	file:
octant	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint8_t octant() const { return (uint8_t(bool(mVec[0] & (1u << 31)))) |$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               offset;$/;"	m	struct:VkBufferViewCreateInfo
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkBufferMemoryBarrier
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkMappedMemoryRange
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkDescriptorBufferInfo
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkSubresourceLayout
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset2D    offset;$/;"	m	struct:VkRect2D
offset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                 offset;$/;"	m	struct:VkSparseImageMemoryBind
offset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              offset;$/;"	m	struct:VkPushConstantRange
offset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkSpecializationMapEntry
offset	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkVertexInputAttributeDescription
offset	support/GLFW/src/win32_joystick.h	/^    int                     offset;$/;"	m	struct:_GLFWjoyobjectWin32
offset	support/tinygltf/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon107
offsetEye	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& offsetEye(RealT offset)$/;"	f	class:nanovdb::Ray
offsetToGlobalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord offsetToGlobalCoord(uint32_t n) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
offsetToGlobalCoord	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ CoordT offsetToGlobalCoord(uint32_t n) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
offset_table	support/tinyexr/tinyexr.h	/^  int **offset_table;  \/\/ offset_table[scanline][offsets]$/;"	m	struct:_DeepImage
offset_x	support/tinyexr/tinyexr.h	/^  int offset_x;$/;"	m	struct:_EXRTile
offset_y	support/tinyexr/tinyexr.h	/^  int offset_y;$/;"	m	struct:_EXRTile
oldLayout	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageLayout              oldLayout;$/;"	m	struct:VkImageMemoryBarrier
oldMode	support/GLFW/src/x11_platform.h	/^    RRMode          oldMode;$/;"	m	struct:_GLFWmonitorX11
oldSwapchain	support/GLFW/deps/vulkan/vulkan.h	/^    VkSwapchainKHR                   oldSwapchain;$/;"	m	struct:VkSwapchainCreateInfoKHR
opacity	optixVolumeViewer/volume.h	/^        float  opacity; \/\/ effectively a scale factor for volume density$/;"	m	struct:MaterialData::Volume
opaque	support/tinyexr/tinyexr.h	/^  void *opaque;        \/\/ heap alloc function user pointer$/;"	m	struct:tinyexr::miniz::mz_stream_s
openJoystickDevice	support/GLFW/src/linux_joystick.c	/^static GLFWbool openJoystickDevice(const char* path)$/;"	f	file:
openXinputDevice	support/GLFW/src/win32_joystick.c	/^static GLFWbool openXinputDevice(DWORD index)$/;"	f	file:
open_gl	support/glad/glad.c	/^int open_gl(void) {$/;"	f	file:
operator !=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool  operator!=(const BaseBBox& rhs) const { return mCoord[0] != rhs.mCoord[0] || mCoord[1] != rhs.mCoord[1]; };$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
operator !=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator!=(const Coord& rhs) const { return mVec[0] != rhs[0] || mVec[1] != rhs[1] || mVec[2] != rhs[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator !=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator!=(const Vec3& rhs) const { return mVec[0] != rhs[0] || mVec[1] != rhs[1] || mVec[2] != rhs[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator !=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator!=(const Vec4& rhs) const { return mVec[0] != rhs[0] || mVec[1] != rhs[1] || mVec[2] != rhs[2] != mVec[3] != rhs[3]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator !=	support/tinygltf/json.hpp	/^    bool operator!=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator !=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE bool operator!=(const Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator !=	sutil/Quaternion.h	/^inline bool operator!=(const Quaternion& l, const Quaternion& r)$/;"	f	namespace:sutil
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const int2& a, const int2& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const int3& a, const int3& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const int4& a, const int4& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const longlong2& a, const longlong2& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const longlong3& a, const longlong3& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const longlong4& a, const longlong4& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const uint2& a, const uint2& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const uint3& a, const uint3& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const uint4& a, const uint4& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const ulonglong2& a, const ulonglong2& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator !=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator!=(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator &	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord operator&(IndexType n) const { return Coord(mVec[0] & n, mVec[1] & n, mVec[2] & n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator &=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& operator&=(int n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator ()	optixMotionGeometry/tiny_obj_loader.h	/^bool MaterialFileReader::operator()(const std::string &matId,$/;"	f	class:tinyobj::MaterialFileReader
operator ()	optixMotionGeometry/tiny_obj_loader.h	/^bool MaterialStreamReader::operator()(const std::string &matId,$/;"	f	class:tinyobj::MaterialStreamReader
operator ()	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Vec3T operator()(RealT time) const$/;"	f	class:nanovdb::Ray
operator ()	support/tinyexr/tinyexr.h	/^  bool operator()(long long *a, long long *b) { return *a > *b; }$/;"	f	struct:tinyexr::FHeapCompare
operator ()	support/tinygltf/json.hpp	/^    std::size_t operator()(const nlohmann::json& j) const$/;"	f	struct:std::hash
operator *	optixMotionGeometry/motionHelper.hpp	/^    Matrix3x4 operator*( const Matrix3x4& b ) const$/;"	f	struct:__anon4::Matrix3x4
operator *	optixMotionGeometry/motionHelper.hpp	/^    float3 operator*( const float3& v ) const$/;"	f	struct:__anon4::Matrix3x4
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ const CoordT& operator*() const { return mPos; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ uint32_t operator*() const { return mPos; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator*(const T& s) const { return Vec3(s * mVec[0], s * mVec[1], s * mVec[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator*(const Vec3& v) const { return Vec3(mVec[0] * v[0], mVec[1] * v[1], mVec[2] * v[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator*(const T& s) const { return Vec4(s * mVec[0], s * mVec[1], s * mVec[2], s * mVec[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator*(const Vec4& v) const { return Vec4(mVec[0] * v[0], mVec[1] * v[1], mVec[2] * v[2], mVec[3] * v[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3<T2> operator*(T1 scalar, const Vec3<T2>& vec)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
operator *	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec4<T2> operator*(T1 scalar, const Vec4<T2>& vec)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
operator *	support/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x*rhs.x, lhs.y*rhs.y); }$/;"	f
operator *	support/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x*rhs, lhs.y*rhs); }$/;"	f
operator *	support/imgui/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x*rhs.x, lhs.y*rhs.y, lhs.z*rhs.z, lhs.w*rhs.w); }$/;"	f
operator *	support/tinygltf/json.hpp	/^    iteration_proxy_value& operator*()$/;"	f	class:nlohmann::detail::iteration_proxy_value
operator *	support/tinygltf/json.hpp	/^    reference operator*() const$/;"	f	class:nlohmann::detail::iter_impl
operator *	support/tinygltf/json.hpp	/^    value_type const& operator*() const$/;"	f	class:nlohmann::detail::json_ref
operator *	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N>  operator*(float f, const Matrix<M,N>& m)$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N> operator*(const Matrix<M,N>& m, float f)$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,R> operator*( const Matrix<M,N>& m1, const Matrix<N,R>& m2)$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE typename Matrix<M,N>::floatM operator*(const Matrix<M,N>& m, const typename Matrix<M,N>::floatN& vec )$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE typename Matrix<M,N>::floatN operator*(const typename Matrix<M,N>::floatM& vec, const Matrix<M,N>& m)$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator*(const Matrix<2,N>& m, const typename Matrix<2,N>::floatN& vec )$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator*(const Matrix<3,4>& m, const float4& vec )$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator*(const Matrix<3,N>& m, const typename Matrix<3,N>::floatN& vec )$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator*(const Matrix<4,4>& m, const float4& vec )$/;"	f	namespace:sutil
operator *	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator*(const Matrix<4,N>& m, const typename Matrix<4,N>::floatN& vec )$/;"	f	namespace:sutil
operator *	sutil/Quaternion.h	/^inline Quaternion operator*(const Quaternion &r, const float a)$/;"	f	namespace:sutil
operator *	sutil/Quaternion.h	/^inline Quaternion operator*(const Quaternion& l, const Quaternion& r)$/;"	f	namespace:sutil
operator *	sutil/Quaternion.h	/^inline Quaternion operator*(const float a, const Quaternion &r)$/;"	f	namespace:sutil
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator*(const float s, const float2& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator*(const float2& a, const float s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator*(const float2& a, const float2& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator*(const float s, const float3& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator*(const float3& a, const float s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator*(const float3& a, const float3& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator*(const float s, const float4& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator*(const float4& a, const float s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator*(const float4& a, const float4& s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator*(const int s, const int2& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator*(const int2& a, const int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator*(const int2& a, const int2& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator*(const int s, const int3& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator*(const int3& a, const int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator*(const int3& a, const int3& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator*(const int s, const int4& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator*(const int4& a, const int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator*(const int4& a, const int4& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator*(const long long s, const longlong2& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator*(const longlong2& a, const long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator*(const longlong2& a, const longlong2& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator*(const long long s, const longlong3& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator*(const longlong3& a, const long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator*(const longlong3& a, const longlong3& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator*(const long long s, const longlong4& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator*(const longlong4& a, const long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator*(const longlong4& a, const longlong4& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator*(const uint2& a, const uint2& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator*(const uint2& a, const unsigned int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator*(const unsigned int s, const uint2& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator*(const uint3& a, const uint3& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator*(const uint3& a, const unsigned int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator*(const unsigned int s, const uint3& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator*(const uint4& a, const uint4& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator*(const uint4& a, const unsigned int s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator*(const unsigned int s, const uint4& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator*(const ulonglong2& a, const ulonglong2& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator*(const ulonglong2& a, const unsigned long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator*(const unsigned long long s, const ulonglong2& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator*(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator*(const ulonglong3& a, const unsigned long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator*(const unsigned long long s, const ulonglong3& a)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator*(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator*(const ulonglong4& a, const unsigned long long s)$/;"	f
operator *	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator*(const unsigned long long s, const ulonglong4& a)$/;"	f
operator *=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& operator*=(const T& s)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator *=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& operator*=(const T& s)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator *=	support/imgui/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; lhs.y *= rhs; return lhs; }$/;"	f
operator *=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,M>& operator*=(Matrix<M,M>& m1, const Matrix<M,M>& m2)$/;"	f	namespace:sutil
operator *=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N>& operator*=(Matrix<M,N>& m, float f)$/;"	f	namespace:sutil
operator *=	sutil/Quaternion.h	/^inline Quaternion& Quaternion::operator*=(const Quaternion& r)$/;"	f	class:sutil::Quaternion
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float2& a, const float s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float2& a, const float2& s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float3& a, const float s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float3& a, const float3& s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float4& a, const float s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(float4& a, const float4& s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(int2& a, const int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(int3& a, const int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(int4& a, const int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(longlong2& a, const long long s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(longlong3& a, const long long s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(longlong4& a, const long long s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(uint2& a, const unsigned int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(uint3& a, const unsigned int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(uint4& a, const unsigned int s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(ulonglong2& a, const unsigned long long s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(ulonglong3& a, const unsigned long long s)$/;"	f
operator *=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator*=(ulonglong4& a, const unsigned long long s)$/;"	f
operator +	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord operator+(const Coord& rhs) const { return Coord(mVec[0] + rhs[0], mVec[1] + rhs[1], mVec[2] + rhs[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator +	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator+(const Vec3& v) const { return Vec3(mVec[0] + v[0], mVec[1] + v[1], mVec[2] + v[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator +	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator+(const Vec4& v) const { return Vec4(mVec[0] + v[0], mVec[1] + v[1], mVec[2] + v[2], mVec[3] + v[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator +	support/imgui/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x+rhs.x, lhs.y+rhs.y); }$/;"	f
operator +	support/imgui/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x+rhs.x, lhs.y+rhs.y, lhs.z+rhs.z, lhs.w+rhs.w); }$/;"	f
operator +	support/tinygltf/json.hpp	/^    friend iter_impl operator+(difference_type i, const iter_impl& it)$/;"	f	class:nlohmann::detail::iter_impl
operator +	support/tinygltf/json.hpp	/^    iter_impl operator+(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl
operator +	support/tinygltf/json.hpp	/^    json_reverse_iterator operator+(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator +	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N> operator+(const Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator +	sutil/Quaternion.h	/^inline Quaternion operator+(const Quaternion& l, const Quaternion& r)$/;"	f	namespace:sutil
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator+(const float a, const float2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator+(const float2& a, const float b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator+(const float2& a, const float2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator+(const float a, const float3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator+(const float3& a, const float b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator+(const float3& a, const float3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator+(const float a, const float4& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator+(const float4& a, const float b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator+(const float4& a, const float4& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator+(const int2& a, const int2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator+(const int3& a, const int3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator+(const int4& a, const int4& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator+(const longlong2& a, const longlong2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator+(const longlong3& a, const longlong3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator+(const longlong4& a, const longlong4& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator+(const uint2& a, const uint2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator+(const uint3& a, const uint3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator+(const uint4& a, const uint4& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator+(const ulonglong2& a, const ulonglong2& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator+(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator +	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator+(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator ++	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator operator++(int)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
operator ++	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator& operator++()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
operator ++	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__ Iterator& operator++()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
operator ++	support/tinygltf/json.hpp	/^    iter_impl const operator++(int)$/;"	f	class:nlohmann::detail::iter_impl
operator ++	support/tinygltf/json.hpp	/^    iter_impl& operator++()$/;"	f	class:nlohmann::detail::iter_impl
operator ++	support/tinygltf/json.hpp	/^    iteration_proxy_value& operator++()$/;"	f	class:nlohmann::detail::iteration_proxy_value
operator ++	support/tinygltf/json.hpp	/^    json_reverse_iterator const operator++(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator ++	support/tinygltf/json.hpp	/^    json_reverse_iterator& operator++()$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator +=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& operator+=(const Coord& rhs)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator +=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& operator+=(int n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator +=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& operator+=(const Vec3& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator +=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& operator+=(const Vec4& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator +=	support/imgui/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }$/;"	f
operator +=	support/tinygltf/json.hpp	/^    iter_impl& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl
operator +=	support/tinygltf/json.hpp	/^    json_reverse_iterator& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator +=	support/tinygltf/json.hpp	/^    reference operator+=(basic_json&& val)$/;"	f	class:nlohmann::basic_json
operator +=	support/tinygltf/json.hpp	/^    reference operator+=(const basic_json& val)$/;"	f	class:nlohmann::basic_json
operator +=	support/tinygltf/json.hpp	/^    reference operator+=(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json
operator +=	support/tinygltf/json.hpp	/^    reference operator+=(initializer_list_t init)$/;"	f	class:nlohmann::basic_json
operator +=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N>& operator+=(Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator +=	sutil/Quaternion.h	/^    Quaternion& operator+=(const Quaternion& r)$/;"	f	class:sutil::Quaternion
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(float2& a, const float2& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(float3& a, const float3& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(float4& a, const float4& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(int2& a, const int2& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(int3& a, const int3& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(int4& a, const int4& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(longlong2& a, const longlong2& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(longlong3& a, const longlong3& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(longlong4& a, const longlong4& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(uint2& a, const uint2& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(uint3& a, const uint3& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(uint4& a, const uint4& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(ulonglong2& a, const ulonglong2& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(ulonglong3& a, const ulonglong3& b)$/;"	f
operator +=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator+=(ulonglong4& a, const ulonglong4& b)$/;"	f
operator -	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord operator-(const Coord& rhs) const { return Coord(mVec[0] - rhs[0], mVec[1] - rhs[1], mVec[2] - rhs[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator -	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator-() const { return Vec3(-mVec[0], -mVec[1], -mVec[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator -	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator-(const Vec3& v) const { return Vec3(mVec[0] - v[0], mVec[1] - v[1], mVec[2] - v[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator -	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator-() const { return Vec4(-mVec[0], -mVec[1], -mVec[2], -mVec[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator -	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator-(const Vec4& v) const { return Vec4(mVec[0] - v[0], mVec[1] - v[1], mVec[2] - v[2], mVec[3] - v[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator -	support/imgui/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x-rhs.x, lhs.y-rhs.y); }$/;"	f
operator -	support/imgui/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x-rhs.x, lhs.y-rhs.y, lhs.z-rhs.z, lhs.w-rhs.w); }$/;"	f
operator -	support/tinygltf/json.hpp	/^    difference_type operator-(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator -	support/tinygltf/json.hpp	/^    difference_type operator-(const json_reverse_iterator& other) const$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator -	support/tinygltf/json.hpp	/^    iter_impl operator-(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl
operator -	support/tinygltf/json.hpp	/^    json_reverse_iterator operator-(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator -	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N> operator-(const Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator -	sutil/Quaternion.h	/^inline Quaternion operator-(const Quaternion& l, const Quaternion& r)$/;"	f	namespace:sutil
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator-(const float a, const float2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator-(const float2& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator-(const float2& a, const float b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator-(const float2& a, const float2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator-(const float a, const float3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator-(const float3& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator-(const float3& a, const float b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator-(const float3& a, const float3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator-(const float a, const float4& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator-(const float4& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator-(const float4& a, const float b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator-(const float4& a, const float4& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator-(const int2& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator-(const int2& a, const int b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int2 operator-(const int2& a, const int2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator-(const int3& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator-(const int3& a, const int3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator-(const int4& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator-(const int4& a, const int4& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator-(const longlong2& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator-(const longlong2& a, const long long b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong2 operator-(const longlong2& a, const longlong2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator-(const longlong3& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator-(const longlong3& a, const longlong3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator-(const longlong4& a)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator-(const longlong4& a, const longlong4& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator-(const uint2& a, const uint2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint2 operator-(const uint2& a, const unsigned int b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator-(const uint3& a, const uint3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator-(const uint4& a, const uint4& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator-(const ulonglong2& a, const ulonglong2& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong2 operator-(const ulonglong2& a, const unsigned long long b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator-(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator -	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator-(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator --	support/tinygltf/json.hpp	/^    iter_impl const operator--(int)$/;"	f	class:nlohmann::detail::iter_impl
operator --	support/tinygltf/json.hpp	/^    iter_impl& operator--()$/;"	f	class:nlohmann::detail::iter_impl
operator --	support/tinygltf/json.hpp	/^    json_reverse_iterator const operator--(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator --	support/tinygltf/json.hpp	/^    json_reverse_iterator& operator--()$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator -=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& operator-=(const Coord& rhs)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator -=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& operator-=(const Vec3& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator -=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& operator-=(const Vec4& v)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator -=	support/imgui/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }$/;"	f
operator -=	support/tinygltf/json.hpp	/^    iter_impl& operator-=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl
operator -=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N>& operator-=(Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator -=	sutil/Quaternion.h	/^    Quaternion& operator-=(const Quaternion& r)$/;"	f	class:sutil::Quaternion
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(float2& a, const float2& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(float3& a, const float3& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(float4& a, const float4& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(int2& a, const int2& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(int3& a, const int3& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(int4& a, const int4& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(longlong2& a, const longlong2& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(longlong3& a, const longlong3& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(longlong4& a, const longlong4& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(uint2& a, const uint2& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(uint3& a, const uint3& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(uint4& a, const uint4& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(ulonglong2& a, const ulonglong2& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(ulonglong3& a, const ulonglong3& b)$/;"	f
operator -=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator-=(ulonglong4& a, const ulonglong4& b)$/;"	f
operator ->	support/tinygltf/json.hpp	/^    pointer operator->() const$/;"	f	class:nlohmann::detail::iter_impl
operator ->	support/tinygltf/json.hpp	/^    value_type const* operator->() const$/;"	f	class:nlohmann::detail::json_ref
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator\/(const T& s) const { return (T(1) \/ s) * (*this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3 operator\/(const Vec3& v) const { return Vec3(mVec[0] \/ v[0], mVec[1] \/ v[1], mVec[2] \/ v[2]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator\/(const T& s) const { return (T(1) \/ s) * (*this); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4 operator\/(const Vec4& v) const { return Vec4(mVec[0] \/ v[0], mVec[1] \/ v[1], mVec[2] \/ v[2], mVec[3] \/ v[3]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec3<T2> operator\/(T1 scalar, const Vec3<T2>& vec)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
operator /	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline __hostdev__ Vec4<T2> operator\/(T1 scalar, const Vec3<T2>& vec)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic
operator /	support/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x\/rhs.x, lhs.y\/rhs.y); }$/;"	f
operator /	support/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x\/rhs, lhs.y\/rhs); }$/;"	f
operator /	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N> operator\/(const Matrix<M,N>& m, float f)$/;"	f	namespace:sutil
operator /	sutil/Quaternion.h	/^inline Quaternion operator\/(const Quaternion &r, const float a)$/;"	f	namespace:sutil
operator /	sutil/Quaternion.h	/^inline Quaternion operator\/(const float a, const Quaternion &r)$/;"	f	namespace:sutil
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator\/(const float s, const float2& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator\/(const float2& a, const float s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 operator\/(const float2& a, const float2& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator\/(const float s, const float3& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator\/(const float3& a, const float s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 operator\/(const float3& a, const float3& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator\/(const float s, const float4& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator\/(const float4& a, const float s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 operator\/(const float4& a, const float4& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator\/(const int s, const int3& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator\/(const int3& a, const int s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int3 operator\/(const int3& a, const int3& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator\/(const int s, const int4& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator\/(const int4& a, const int s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE int4 operator\/(const int4& a, const int4& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator\/(const long long s, const longlong3& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator\/(const longlong3& a, const long long s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong3 operator\/(const longlong3& a, const longlong3& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator\/(const long long s, const longlong4& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator\/(const longlong4& a, const long long s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE longlong4 operator\/(const longlong4& a, const longlong4& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator\/(const uint3& a, const uint3& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator\/(const uint3& a, const unsigned int s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint3 operator\/(const unsigned int s, const uint3& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator\/(const uint4& a, const uint4& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator\/(const uint4& a, const unsigned int s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE uint4 operator\/(const unsigned int s, const uint4& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator\/(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator\/(const ulonglong3& a, const unsigned long long s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong3 operator\/(const unsigned long long s, const ulonglong3& a)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator\/(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator\/(const ulonglong4& a, const unsigned long long s)$/;"	f
operator /	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE ulonglong4 operator\/(const unsigned long long s, const ulonglong4& a)$/;"	f
operator /=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& operator\/=(const T& s) { return (*this) *= T(1) \/ s; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator /=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& operator\/=(const T& s) { return (*this) *= T(1) \/ s; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator /=	support/imgui/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs; lhs.y \/= rhs; return lhs; }$/;"	f
operator /=	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE Matrix<M,N>& operator\/=(Matrix<M,N>& m, float f)$/;"	f	namespace:sutil
operator /=	sutil/Quaternion.h	/^inline Quaternion& Quaternion::operator\/=(const float a)$/;"	f	class:sutil::Quaternion
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(float2& a, const float s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(float3& a, const float s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(float4& a, const float s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(int3& a, const int s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(int4& a, const int s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(longlong3& a, const long long s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(longlong4& a, const long long s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(uint3& a, const unsigned int s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(uint4& a, const unsigned int s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(ulonglong3& a, const unsigned long long s)$/;"	f
operator /=	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void operator\/=(ulonglong4& a, const unsigned long long s)$/;"	f
operator <	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator< (const Version &rhs) const {return mData <  rhs.mData;}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
operator <	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator<(const Coord& rhs) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator <	support/tinygltf/json.hpp	/^    bool operator<(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator <	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Matrix<M,N>::operator<( const Matrix<M, N>& rhs ) const$/;"	f	class:sutil::Matrix
operator <<	optixCompileWithTasks/optixCompileWithTasks.cpp	/^    friend std::ostream& operator<<( std::ostream& out, const Timer& timer ) { return out << timer.elapsed(); }$/;"	f	struct:Timer
operator <<	optixHair/Hair.cpp	/^std::ostream& operator<<( std::ostream& o, Hair::SplineMode splineMode )$/;"	f
operator <<	optixHair/Hair.cpp	/^std::ostream& operator<<( std::ostream& o, const Hair& hair )$/;"	f
operator <<	optixHair/Head.cpp	/^std::ostream& operator<<( std::ostream& o, const Head& head )$/;"	f
operator <<	optixHair/Util.h	/^inline std::ostream& operator<<( std::ostream& o, float3 v )$/;"	f
operator <<	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord operator<<(IndexType n) const { return Coord(mVec[0] << n, mVec[1] << n, mVec[2] << n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator <<	support/tinygltf/json.hpp	/^    friend std::istream& operator<<(basic_json& j, std::istream& i)$/;"	f	class:nlohmann::basic_json
operator <<	support/tinygltf/json.hpp	/^    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)$/;"	f	class:nlohmann::basic_json
operator <<=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord& operator<<=(uint32_t n)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator <=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator<=(const Version &rhs) const {return mData <= rhs.mData;}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
operator <=	support/tinygltf/json.hpp	/^    bool operator<=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator =	optixMotionGeometry/motionHelper.hpp	/^    MotionTransformArrayBase& operator=( MotionTransformArrayBase other )$/;"	f	class:__anon4::MotionTransformArrayBase
operator =	optixMotionGeometry/motionHelper.hpp	/^    MotionTransformArrayBase& operator=( MotionTransformArrayBase&& other )$/;"	f	class:__anon4::MotionTransformArrayBase
operator =	optixMotionGeometry/optixMotionGeometry.cpp	/^    ExhaustFume& operator=(ExhaustFume&& other)$/;"	f	class:ExhaustFume
operator =	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Mask& operator=(const Mask& other)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
operator =	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3& operator=(const Vec3T& rhs)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator =	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec4& operator=(const Vec4T& rhs)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator =	support/imgui/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }$/;"	f	struct:ImVector
operator =	sutil/CuBuffer.h	/^    CuBuffer& operator=(CuBuffer&& other)$/;"	f	class:CuBuffer
operator =	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<M,N>&  Matrix<M,N>::operator=( const Matrix& b )$/;"	f	class:sutil::Matrix
operator ==	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool  operator==(const BaseBBox& rhs) const { return mCoord[0] == rhs.mCoord[0] && mCoord[1] == rhs.mCoord[1]; };$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
operator ==	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator==(const Coord& rhs) const { return mVec[0] == rhs[0] && mVec[1] == rhs[1] && mVec[2] == rhs[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator ==	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator==(const Vec3& rhs) const { return mVec[0] == rhs[0] && mVec[1] == rhs[1] && mVec[2] == rhs[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator ==	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator==(const Vec4& rhs) const { return mVec[0] == rhs[0] && mVec[1] == rhs[1] && mVec[2] == rhs[2] && mVec[3] == rhs[3]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator ==	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator==(const Version &rhs) const {return mData == rhs.mData;}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
operator ==	support/tinygltf/json.hpp	/^    bool operator==(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator ==	support/tinygltf/tiny_gltf.h	/^bool Accessor::operator==(const Accessor &other) const {$/;"	f	class:tinygltf::Accessor
operator ==	support/tinygltf/tiny_gltf.h	/^bool Animation::operator==(const Animation &other) const {$/;"	f	class:tinygltf::Animation
operator ==	support/tinygltf/tiny_gltf.h	/^bool AnimationChannel::operator==(const AnimationChannel &other) const {$/;"	f	class:tinygltf::AnimationChannel
operator ==	support/tinygltf/tiny_gltf.h	/^bool AnimationSampler::operator==(const AnimationSampler &other) const {$/;"	f	class:tinygltf::AnimationSampler
operator ==	support/tinygltf/tiny_gltf.h	/^bool Asset::operator==(const Asset &other) const {$/;"	f	class:tinygltf::Asset
operator ==	support/tinygltf/tiny_gltf.h	/^bool Buffer::operator==(const Buffer &other) const {$/;"	f	class:tinygltf::Buffer
operator ==	support/tinygltf/tiny_gltf.h	/^bool BufferView::operator==(const BufferView &other) const {$/;"	f	class:tinygltf::BufferView
operator ==	support/tinygltf/tiny_gltf.h	/^bool Camera::operator==(const Camera &other) const {$/;"	f	class:tinygltf::Camera
operator ==	support/tinygltf/tiny_gltf.h	/^bool Image::operator==(const Image &other) const {$/;"	f	class:tinygltf::Image
operator ==	support/tinygltf/tiny_gltf.h	/^bool Light::operator==(const Light &other) const {$/;"	f	class:tinygltf::Light
operator ==	support/tinygltf/tiny_gltf.h	/^bool Material::operator==(const Material &other) const {$/;"	f	class:tinygltf::Material
operator ==	support/tinygltf/tiny_gltf.h	/^bool Mesh::operator==(const Mesh &other) const {$/;"	f	class:tinygltf::Mesh
operator ==	support/tinygltf/tiny_gltf.h	/^bool Model::operator==(const Model &other) const {$/;"	f	class:tinygltf::Model
operator ==	support/tinygltf/tiny_gltf.h	/^bool Node::operator==(const Node &other) const {$/;"	f	class:tinygltf::Node
operator ==	support/tinygltf/tiny_gltf.h	/^bool NormalTextureInfo::operator==(const NormalTextureInfo &other) const {$/;"	f	class:tinygltf::NormalTextureInfo
operator ==	support/tinygltf/tiny_gltf.h	/^bool OcclusionTextureInfo::operator==(const OcclusionTextureInfo &other) const {$/;"	f	class:tinygltf::OcclusionTextureInfo
operator ==	support/tinygltf/tiny_gltf.h	/^bool OrthographicCamera::operator==(const OrthographicCamera &other) const {$/;"	f	class:tinygltf::OrthographicCamera
operator ==	support/tinygltf/tiny_gltf.h	/^bool Parameter::operator==(const Parameter &other) const {$/;"	f	class:tinygltf::Parameter
operator ==	support/tinygltf/tiny_gltf.h	/^bool PbrMetallicRoughness::operator==(const PbrMetallicRoughness &other) const {$/;"	f	class:tinygltf::PbrMetallicRoughness
operator ==	support/tinygltf/tiny_gltf.h	/^bool PerspectiveCamera::operator==(const PerspectiveCamera &other) const {$/;"	f	class:tinygltf::PerspectiveCamera
operator ==	support/tinygltf/tiny_gltf.h	/^bool Primitive::operator==(const Primitive &other) const {$/;"	f	class:tinygltf::Primitive
operator ==	support/tinygltf/tiny_gltf.h	/^bool Sampler::operator==(const Sampler &other) const {$/;"	f	class:tinygltf::Sampler
operator ==	support/tinygltf/tiny_gltf.h	/^bool Scene::operator==(const Scene &other) const {$/;"	f	class:tinygltf::Scene
operator ==	support/tinygltf/tiny_gltf.h	/^bool Skin::operator==(const Skin &other) const {$/;"	f	class:tinygltf::Skin
operator ==	support/tinygltf/tiny_gltf.h	/^bool SpotLight::operator==(const SpotLight &other) const {$/;"	f	class:tinygltf::SpotLight
operator ==	support/tinygltf/tiny_gltf.h	/^bool Texture::operator==(const Texture &other) const {$/;"	f	class:tinygltf::Texture
operator ==	support/tinygltf/tiny_gltf.h	/^bool TextureInfo::operator==(const TextureInfo &other) const {$/;"	f	class:tinygltf::TextureInfo
operator ==	support/tinygltf/tiny_gltf.h	/^bool Value::operator==(const Value &other) const {$/;"	f	class:tinygltf::Value
operator ==	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::operator==( const Aabb& other ) const$/;"	f	class:sutil::Aabb
operator ==	sutil/Matrix.h	/^  SUTIL_HOSTDEVICE bool operator==(const Matrix<M,N>& m1, const Matrix<M,N>& m2)$/;"	f	namespace:sutil
operator ==	sutil/Quaternion.h	/^inline bool operator==(const Quaternion& l, const Quaternion& r)$/;"	f	namespace:sutil
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const int2& a, const int2& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const int3& a, const int3& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const int4& a, const int4& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const longlong2& a, const longlong2& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const longlong3& a, const longlong3& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const longlong4& a, const longlong4& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const uint2& a, const uint2& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const uint3& a, const uint3& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const uint4& a, const uint4& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const ulonglong2& a, const ulonglong2& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const ulonglong3& a, const ulonglong3& b)$/;"	f
operator ==	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE bool operator==(const ulonglong4& a, const ulonglong4& b)$/;"	f
operator >	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator> (const Version &rhs) const {return mData >  rhs.mData;}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
operator >	support/tinygltf/json.hpp	/^    bool operator>(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator >=	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool operator>=(const Version &rhs) const {return mData >= rhs.mData;}$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Version
operator >=	support/tinygltf/json.hpp	/^    bool operator>=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl
operator >>	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord operator>>(IndexType n) const { return Coord(mVec[0] >> n, mVec[1] >> n, mVec[2] >> n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator >>	support/tinygltf/json.hpp	/^    friend std::istream& operator>>(std::istream& i, basic_json& j)$/;"	f	class:nlohmann::basic_json
operator >>	support/tinygltf/json.hpp	/^    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)$/;"	f	class:nlohmann::basic_json
operator ImU32	support/imgui/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }$/;"	f	struct:ImColor
operator ImVec4	support/imgui/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator ValueType	support/tinygltf/json.hpp	/^    operator ValueType() const$/;"	f	class:nlohmann::basic_json
operator []	cuda/BufferView.h	/^    SUTIL_HOSTDEVICE const T& operator[]( unsigned int idx ) const$/;"	f	struct:BufferView
operator []	optixHair/ProgramGroups.cpp	/^const OptixProgramGroup& ProgramGroups::operator[]( const std::string& name ) const$/;"	f	class:ProgramGroups
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T& operator[](int i) { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ T& operator[](int i) { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ ValueType& operator[](IndexType i) { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T& operator[](int i) { return mCoord[i]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const T& operator[](int i) const { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const T& operator[](int i) const { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec4
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& operator[](IndexType i) const { return mVec[i]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
operator []	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Vec3T& operator[](int i) const { return mCoord[i]; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
operator []	support/imgui/imgui.h	/^    float  operator[] (size_t idx) const { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We very rarely use this [] operator, the assert overhead is fine.$/;"	f	struct:ImVec2
operator []	support/imgui/imgui.h	/^    float& operator[] (size_t idx)       { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We very rarely use this [] operator, the assert overhead is fine.$/;"	f	struct:ImVec2
operator []	support/imgui/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }$/;"	f	struct:ImVector
operator []	support/imgui/imgui.h	/^    inline char         operator[](int i)       { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }$/;"	f	struct:ImGuiTextBuffer
operator []	support/imgui/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i < Size); return Data[i]; }$/;"	f	struct:ImVector
operator []	support/tinygltf/json.hpp	/^    const_reference operator[](T* key) const$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    const_reference operator[](const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    const_reference operator[](const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    const_reference operator[](size_type idx) const$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    reference operator[](T* key)$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    reference operator[](const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    reference operator[](const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json
operator []	support/tinygltf/json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::iter_impl
operator []	support/tinygltf/json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::json_reverse_iterator
operator []	support/tinygltf/json.hpp	/^    reference operator[](size_type idx)$/;"	f	class:nlohmann::basic_json
operator []	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE const float3& Aabb::operator[]( int i ) const$/;"	f	class:sutil::Aabb
operator []	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float3& Aabb::operator[]( int i )$/;"	f	class:sutil::Aabb
operator []	sutil/Matrix.h	/^    SUTIL_HOSTDEVICE float        operator[]( unsigned int i )const { return m_data[i]; }$/;"	f	class:sutil::Matrix
operator []	sutil/Matrix.h	/^    SUTIL_HOSTDEVICE float&       operator[]( unsigned int i )      { return m_data[i]; }$/;"	f	class:sutil::Matrix
operator []	sutil/Quaternion.h	/^    float operator[](int i)const  { return q[i]; }$/;"	f	class:sutil::Quaternion
operator []	sutil/Quaternion.h	/^    float& operator[](int i)      { return q[i]; }$/;"	f	class:sutil::Quaternion
operator bool	cuda/BufferView.h	/^    SUTIL_HOSTDEVICE operator bool() const$/;"	f	struct:BufferView
operator bool	cuda/MaterialData.h	/^        __device__ __forceinline__ operator bool() const$/;"	f	struct:MaterialData::Texture
operator bool	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__          operator bool() const { return mPos != Mask::SIZE; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask::Iterator
operator bool	optixVolumeViewer/nanovdb/NanoVDB.h	/^        __hostdev__       operator bool() const { return mPos[0] <= mBBox[1][0]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BBox::Iterator
operator bool	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    operator bool() const { return !empty(); }$/;"	f	class:nanovdb::GridHandleBase
operator bool	support/imgui/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }$/;"	f	struct:ImGuiOnceUponAFrame
operator delete	support/imgui/imgui.h	/^inline void  operator delete(void*, ImNewDummy, void*)   {} \/\/ This is only required so we can use the symmetrical new()$/;"	f
operator float2	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE operator float2() const { return { x, y }; }$/;"	f	struct:Vec2f
operator float4	cuda/GeometryData.h	/^    SUTIL_HOSTDEVICE operator float4() const { return { x, y, z, w }; }$/;"	f	struct:Vec4f
operator input_adapter_t	support/tinygltf/json.hpp	/^    operator input_adapter_t()$/;"	f	class:nlohmann::detail::input_adapter
operator new	support/imgui/imgui.h	/^inline void* operator new(size_t, ImNewDummy, void* ptr) { return ptr; }$/;"	f
operator output_adapter_t<CharType>	support/tinygltf/json.hpp	/^    operator output_adapter_t<CharType>()$/;"	f	class:nlohmann::detail::output_adapter
operator size_t	support/tinygltf/json.hpp	/^    constexpr operator size_t() const$/;"	f	struct:nlohmann::detail::position_t
operator std::string	support/tinygltf/json.hpp	/^    operator std::string() const$/;"	f	class:nlohmann::json_pointer
optarg	support/GLFW/deps/getopt.c	/^char* optarg;$/;"	v
optcursor	support/GLFW/deps/getopt.c	/^static char* optcursor = NULL;$/;"	v	file:
opterr	support/GLFW/deps/getopt.c	/^int opterr;$/;"	v
optimalBufferCopyOffsetAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
optimalBufferCopyRowPitchAlignment	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyRowPitchAlignment;$/;"	m	struct:VkPhysicalDeviceLimits
optimalTilingFeatures	support/GLFW/deps/vulkan/vulkan.h	/^    VkFormatFeatureFlags    optimalTilingFeatures;$/;"	m	struct:VkFormatProperties
optind	support/GLFW/deps/getopt.c	/^int optind = 1;$/;"	v
option	support/GLFW/deps/getopt.h	/^struct option {$/;"	s
optional_argument	support/GLFW/deps/getopt.c	/^const int optional_argument = 2;$/;"	v
optix	lib/CompileWithTasks.h	/^namespace optix {$/;"	n
optixCheck	sutil/Exception.h	/^inline void optixCheck( OptixResult res, const char* call, const char* file, unsigned int line )$/;"	f	namespace:sutil
optixCheckLog	sutil/Exception.h	/^inline void optixCheckLog( OptixResult  res,$/;"	f	namespace:sutil
optix_denoiser_opticalflow_h	optixOpticalFlow/optix_denoiser_opticalflow.h	34;"	d
optopt	support/GLFW/deps/getopt.c	/^int optopt;$/;"	v
order	support/tinygltf/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon99
origin	optixBoundValues/optixBoundValues.h	/^    float3       origin;$/;"	m	struct:RadiancePRD
origin	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       origin;$/;"	m	struct:RadiancePRD
origin	optixPathTracer/optixPathTracer.h	/^    float3       origin;$/;"	m	struct:RadiancePRD
origin	optixRaycasting/optixRaycastingKernels.h	/^    float3 origin;$/;"	m	struct:Ray
origin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ CoordT origin() const { return DataType::mBBoxMin & ~MASK; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
origin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ CoordType origin() const { return DataType::mBBox.min() & ~MASK; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
origin_offset	optixMotionGeometry/tiny_obj_loader.h	/^  real_t origin_offset[3];  \/\/ -o u [v [w]] (default 0 0 0)$/;"	m	struct:tinyobj::texture_option_t
origin_x	optixCustomPrimitive/optixCustomPrimitive.h	/^    int                    origin_x;$/;"	m	struct:Params
origin_x	optixSphere/optixSphere.h	/^    int                    origin_x;$/;"	m	struct:Params
origin_y	optixCustomPrimitive/optixCustomPrimitive.h	/^    int                    origin_y;$/;"	m	struct:Params
origin_y	optixSphere/optixSphere.h	/^    int                    origin_y;$/;"	m	struct:Params
originalRamp	support/GLFW/src/internal.h	/^    GLFWgammaramp   originalRamp;$/;"	m	struct:_GLFWmonitor
orthographic	support/tinygltf/tiny_gltf.h	/^  OrthographicCamera orthographic;$/;"	m	struct:tinygltf::Camera
other_error	support/tinygltf/json.hpp	/^    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::other_error
other_error	support/tinygltf/json.hpp	/^class other_error : public exception$/;"	c	namespace:nlohmann::detail
out	support/tinygltf/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon105
out	support/tinygltf/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon110
outGridSize	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_OUTPUT_VECTOR_GRID_SIZE   outGridSize;                      \/**< [in]: Specifies flow vector grid size for ::NV_OF_EXECUTE_PARAMS::outputBuffer buffer.*\/$/;"	m	struct:_NV_OF_INIT_PARAMS
out_of_range	support/tinygltf/json.hpp	/^    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::out_of_range
out_of_range	support/tinygltf/json.hpp	/^class out_of_range : public exception$/;"	c	namespace:nlohmann::detail
outerConeAngle	support/tinygltf/tiny_gltf.h	/^  double outerConeAngle;$/;"	m	struct:tinygltf::SpotLight
output	support/GLFW/src/wl_platform.h	/^    struct wl_output*           output;$/;"	m	struct:_GLFWmonitorWayland	typeref:struct:_GLFWmonitorWayland::wl_output
output	support/GLFW/src/x11_platform.h	/^    RROutput        output;$/;"	m	struct:_GLFWmonitorX11
output	support/tinygltf/tiny_gltf.h	/^  int output;                 \/\/ required$/;"	m	struct:tinygltf::AnimationSampler
outputBits	support/tinyexr/tinyexr.h	/^inline void outputBits(int nBits, long long bits, long long &c, int &lc,$/;"	f	namespace:tinyexr
outputBuffer	optixHair/optixHair.h	/^    sutil::CUDAOutputBuffer<uchar4> outputBuffer = sutil::CUDAOutputBuffer<uchar4>(sutil::CUDAOutputBufferType::CUDA_DEVICE, 1, 1);$/;"	m	struct:HairState
outputBuffer	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFGPUBufferHandle            outputBuffer;                     \/**< [in]: Specifies the pointer to optical flow or stereo disparity buffer handle.$/;"	m	struct:_NV_OF_EXECUTE_OUTPUT_PARAMS
outputCode	support/tinyexr/tinyexr.h	/^inline void outputCode(long long code, long long &c, int &lc, char *&out) {$/;"	f	namespace:tinyexr
outputCostBuffer	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFGPUBufferHandle            outputCostBuffer;                 \/**< [in]: Specifies the pointer to output cost calculation buffer handle. *\/$/;"	m	struct:_NV_OF_EXECUTE_OUTPUT_PARAMS
output_adapter	support/tinygltf/json.hpp	/^    output_adapter(StringType& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	support/tinygltf/json.hpp	/^    output_adapter(std::basic_ostream<CharType>& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	support/tinygltf/json.hpp	/^    output_adapter(std::vector<CharType>& vec)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	support/tinygltf/json.hpp	/^class output_adapter$/;"	c	namespace:nlohmann::detail
output_adapter_protocol	support/tinygltf/json.hpp	/^template<typename CharType> struct output_adapter_protocol$/;"	s	namespace:nlohmann::detail
output_id	support/GLFW/src/mir_platform.h	/^    int output_id;$/;"	m	struct:_GLFWmonitorMir
output_listener	support/GLFW/src/wl_monitor.c	/^static const struct wl_output_listener output_listener = {$/;"	v	typeref:struct:wl_output_listener	file:
output_stream_adapter	support/tinygltf/json.hpp	/^class output_stream_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_string_adapter	support/tinygltf/json.hpp	/^class output_string_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_vector_adapter	support/tinygltf/json.hpp	/^class output_vector_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
outputs	optixDenoiser/OptiXDenoiser.h	/^        std::vector< float* > outputs;  \/\/ denoised beauty, followed by denoised AOVs$/;"	m	struct:OptiXDenoiser::Data
override	support/tinygltf/json.hpp	/^    ~input_buffer_adapter() override = default;$/;"	m	class:nlohmann::detail::input_buffer_adapter
overrideRedirect	support/GLFW/src/x11_platform.h	/^    GLFWbool        overrideRedirect;$/;"	m	struct:_GLFWwindowX11
owned_value	support/tinygltf/json.hpp	/^    mutable value_type owned_value = nullptr;$/;"	m	class:nlohmann::detail::json_ref
p	cuda/curve.h	/^    float4 p[2];$/;"	m	struct:LinearInterpolator
p	cuda/curve.h	/^    float4 p[3];$/;"	m	struct:QuadraticInterpolator
p	cuda/curve.h	/^    float4 p[4];$/;"	m	struct:CubicInterpolator
p	support/tinyexr/tinyexr.h	/^  int *p;        \/\/ 0      lits$/;"	m	struct:tinyexr::HufDec
pApplicationInfo	support/GLFW/deps/vulkan/vulkan.h	/^    const VkApplicationInfo*    pApplicationInfo;$/;"	m	struct:VkInstanceCreateInfo
pApplicationName	support/GLFW/deps/vulkan/vulkan.h	/^    const char*        pApplicationName;$/;"	m	struct:VkApplicationInfo
pAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkAttachmentDescription*    pAttachments;$/;"	m	struct:VkRenderPassCreateInfo
pAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkImageView*          pAttachments;$/;"	m	struct:VkFramebufferCreateInfo
pAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineColorBlendAttachmentState*    pAttachments;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
pBindings	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorSetLayoutBinding*    pBindings;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo
pBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseImageMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageMemoryBindInfo
pBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseBufferMemoryBindInfo
pBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo
pBufferBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseBufferMemoryBindInfo*         pBufferBinds;$/;"	m	struct:VkBindSparseInfo
pBufferInfo	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorBufferInfo*    pBufferInfo;$/;"	m	struct:VkWriteDescriptorSet
pClearValues	support/GLFW/deps/vulkan/vulkan.h	/^    const VkClearValue*    pClearValues;$/;"	m	struct:VkRenderPassBeginInfo
pCode	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*              pCode;$/;"	m	struct:VkShaderModuleCreateInfo
pColorAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkAttachmentReference*    pColorAttachments;$/;"	m	struct:VkSubpassDescription
pColorBlendState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pCommandBuffers	support/GLFW/deps/vulkan/vulkan.h	/^    const VkCommandBuffer*         pCommandBuffers;$/;"	m	struct:VkSubmitInfo
pData	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                        pData;$/;"	m	struct:VkSpecializationInfo
pDependencies	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSubpassDependency*        pDependencies;$/;"	m	struct:VkRenderPassCreateInfo
pDepthStencilAttachment	support/GLFW/deps/vulkan/vulkan.h	/^    const VkAttachmentReference*    pDepthStencilAttachment;$/;"	m	struct:VkSubpassDescription
pDepthStencilState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pDynamicState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineDynamicStateCreateInfo*          pDynamicState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pDynamicStates	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDynamicState*                pDynamicStates;$/;"	m	struct:VkPipelineDynamicStateCreateInfo
pEnabledFeatures	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPhysicalDeviceFeatures*    pEnabledFeatures;$/;"	m	struct:VkDeviceCreateInfo
pEngineName	support/GLFW/deps/vulkan/vulkan.h	/^    const char*        pEngineName;$/;"	m	struct:VkApplicationInfo
pHair	optixHair/optixHair.h	/^    Hair*         pHair;$/;"	m	struct:HairState
pHead	optixHair/optixHair.h	/^    const Head*   pHead;$/;"	m	struct:HairState
pImageBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseImageMemoryBindInfo*          pImageBinds;$/;"	m	struct:VkBindSparseInfo
pImageIndices	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*          pImageIndices;$/;"	m	struct:VkPresentInfoKHR
pImageInfo	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorImageInfo*     pImageInfo;$/;"	m	struct:VkWriteDescriptorSet
pImageOpaqueBinds	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;$/;"	m	struct:VkBindSparseInfo
pImmutableSamplers	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSampler*      pImmutableSamplers;$/;"	m	struct:VkDescriptorSetLayoutBinding
pInheritanceInfo	support/GLFW/deps/vulkan/vulkan.h	/^    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;$/;"	m	struct:VkCommandBufferBeginInfo
pInitialData	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                   pInitialData;$/;"	m	struct:VkPipelineCacheCreateInfo
pInputAssemblyState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pInputAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkAttachmentReference*    pInputAttachments;$/;"	m	struct:VkSubpassDescription
pMapEntries	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSpecializationMapEntry*    pMapEntries;$/;"	m	struct:VkSpecializationInfo
pMultisampleState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pName	support/GLFW/deps/vulkan/vulkan.h	/^    const char*                         pName;$/;"	m	struct:VkPipelineShaderStageCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                      pNext;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                   pNext;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkBindSparseInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineTessellationStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkCommandBufferBeginInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                            pNext;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                           pNext;$/;"	m	struct:VkPipelineViewportStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                          pNext;$/;"	m	struct:VkPipelineDynamicStateCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                         pNext;$/;"	m	struct:VkPipelineShaderStageCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkComputePipelineCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkDeviceCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkRenderPassCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkCommandBufferInheritanceInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkQueryPoolCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkSwapchainCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkWriteDescriptorSet
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDescriptorSetAllocateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkPipelineLayoutCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDescriptorPoolCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDisplayModeCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkSubmitInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkPipelineCacheCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                  pNext;$/;"	m	struct:VkShaderModuleCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkCommandPoolCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkDeviceQueueCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkFramebufferCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkInstanceCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkBufferViewCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageMemoryBarrier
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageViewCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*               pNext;$/;"	m	struct:VkSemaphoreCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkImageCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkPresentInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkCommandBufferAllocateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkSamplerCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkBufferCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkRenderPassBeginInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkEventCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkFenceCreateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkApplicationInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkBufferMemoryBarrier
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkCopyDescriptorSet
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDisplayPresentInfoKHR
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMappedMemoryRange
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryAllocateInfo
pNext	support/GLFW/deps/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryBarrier
pNext	support/GLFW/src/mir_platform.h	/^    const void*                 pNext;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
pNext	support/GLFW/src/win32_platform.h	/^    const void*                     pNext;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
pNext	support/GLFW/src/wl_platform.h	/^    const void*                     pNext;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
pNext	support/GLFW/src/x11_platform.h	/^    const void*                 pNext;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
pNext	support/GLFW/src/x11_platform.h	/^    const void*                 pNext;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
pPoolSizes	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorPoolSize*    pPoolSizes;$/;"	m	struct:VkDescriptorPoolCreateInfo
pPreserveAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*                 pPreserveAttachments;$/;"	m	struct:VkSubpassDescription
pProgramGroups	optixHair/optixHair.h	/^    HairProgramGroups*  pProgramGroups = nullptr;$/;"	m	struct:HairState
pPushConstantRanges	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPushConstantRange*      pPushConstantRanges;$/;"	m	struct:VkPipelineLayoutCreateInfo
pQueueCreateInfos	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;$/;"	m	struct:VkDeviceCreateInfo
pQueueFamilyIndices	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*                  pQueueFamilyIndices;$/;"	m	struct:VkSwapchainCreateInfoKHR
pQueueFamilyIndices	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*          pQueueFamilyIndices;$/;"	m	struct:VkImageCreateInfo
pQueueFamilyIndices	support/GLFW/deps/vulkan/vulkan.h	/^    const uint32_t*        pQueueFamilyIndices;$/;"	m	struct:VkBufferCreateInfo
pQueuePriorities	support/GLFW/deps/vulkan/vulkan.h	/^    const float*                pQueuePriorities;$/;"	m	struct:VkDeviceQueueCreateInfo
pRasterizationState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pResolveAttachments	support/GLFW/deps/vulkan/vulkan.h	/^    const VkAttachmentReference*    pResolveAttachments;$/;"	m	struct:VkSubpassDescription
pResults	support/GLFW/deps/vulkan/vulkan.h	/^    VkResult*                pResults;$/;"	m	struct:VkPresentInfoKHR
pSampleMask	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSampleMask*                      pSampleMask;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
pScissors	support/GLFW/deps/vulkan/vulkan.h	/^    const VkRect2D*                       pScissors;$/;"	m	struct:VkPipelineViewportStateCreateInfo
pSetLayouts	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkDescriptorSetAllocateInfo
pSetLayouts	support/GLFW/deps/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkPipelineLayoutCreateInfo
pSignalSemaphores	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSemaphore*                          pSignalSemaphores;$/;"	m	struct:VkBindSparseInfo
pSignalSemaphores	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSemaphore*             pSignalSemaphores;$/;"	m	struct:VkSubmitInfo
pSpecializationInfo	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSpecializationInfo*         pSpecializationInfo;$/;"	m	struct:VkPipelineShaderStageCreateInfo
pStages	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineShaderStageCreateInfo*           pStages;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pSubpasses	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSubpassDescription*       pSubpasses;$/;"	m	struct:VkRenderPassCreateInfo
pSwapchains	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSwapchainKHR*    pSwapchains;$/;"	m	struct:VkPresentInfoKHR
pTessellationState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineTessellationStateCreateInfo*     pTessellationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pTexelBufferView	support/GLFW/deps/vulkan/vulkan.h	/^    const VkBufferView*              pTexelBufferView;$/;"	m	struct:VkWriteDescriptorSet
pUserData	support/GLFW/deps/vulkan/vulkan.h	/^    void*                                   pUserData;$/;"	m	struct:VkAllocationCallbacks
pUserData	support/GLFW/deps/vulkan/vulkan.h	/^    void*                           pUserData;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT
pVertexAttributeDescriptions	support/GLFW/deps/vulkan/vulkan.h	/^    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
pVertexBindingDescriptions	support/GLFW/deps/vulkan/vulkan.h	/^    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
pVertexInputState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pViewportState	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineViewportStateCreateInfo*         pViewportState;$/;"	m	struct:VkGraphicsPipelineCreateInfo
pViewports	support/GLFW/deps/vulkan/vulkan.h	/^    const VkViewport*                     pViewports;$/;"	m	struct:VkPipelineViewportStateCreateInfo
pWaitDstStageMask	support/GLFW/deps/vulkan/vulkan.h	/^    const VkPipelineStageFlags*    pWaitDstStageMask;$/;"	m	struct:VkSubmitInfo
pWaitSemaphores	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSemaphore*                          pWaitSemaphores;$/;"	m	struct:VkBindSparseInfo
pWaitSemaphores	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSemaphore*             pWaitSemaphores;$/;"	m	struct:VkSubmitInfo
pWaitSemaphores	support/GLFW/deps/vulkan/vulkan.h	/^    const VkSemaphore*       pWaitSemaphores;$/;"	m	struct:VkPresentInfoKHR
p_linear	support/tinyexr/tinyexr.h	/^  unsigned char p_linear;$/;"	m	struct:_EXRChannelInfo
p_linear	support/tinyexr/tinyexr.h	/^  unsigned char p_linear;$/;"	m	struct:tinyexr::__anon63
packPointer	optixBoundValues/optixBoundValues.h	/^static __forceinline__ __device__ void  packPointer( void* ptr, unsigned int& i0, unsigned int& i1 )$/;"	f
packPointer	optixModuleCreateAbort/optixModuleCreateAbort.h	/^static __forceinline__ __device__ void  packPointer( void* ptr, unsigned int& i0, unsigned int& i1 )$/;"	f
pack_info	support/imgui/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context
pad	optixBoundValues/optixBoundValues.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixBoundValues/optixBoundValues.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixBoundValues/optixBoundValues.h	/^    int          pad;$/;"	m	struct:RadiancePRD
pad	optixCutouts/optixCutouts.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    int          pad;$/;"	m	struct:RadiancePRD
pad	optixMultiGPU/optixMultiGPU.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixMultiGPU/optixMultiGPU.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixNVLink/optixNVLink.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixNVLink/optixNVLink.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixPathTracer/optixPathTracer.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixPathTracer/optixPathTracer.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
pad	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
pad	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    unsigned int pad;$/;"	m	struct:HitGroupData
pad	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    unsigned int pad;$/;"	m	struct:MissData
pad	support/tinyexr/tinyexr.h	/^  unsigned char pad[3];$/;"	m	struct:_EXRChannelInfo
pad	support/tinyexr/tinyexr.h	/^  unsigned char pad[3];$/;"	m	struct:tinyexr::__anon63
pad0	optixMotionGeometry/tiny_obj_loader.h	/^  real_t pad0;$/;"	m	struct:tinyobj::material_t
pad0	support/tinyexr/tinyexr.h	/^  int pad0;$/;"	m	struct:_DeepImage
pad0	support/tinyexr/tinyexr.h	/^  int pad0;$/;"	m	struct:_EXRAttribute
pad2	optixMotionGeometry/tiny_obj_loader.h	/^  int pad2;$/;"	m	struct:tinyobj::material_t
pad_	optixMotionGeometry/tiny_obj_loader.h	/^  int pad_;$/;"	m	struct:tinyobj::face_t
padding	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        padding;                         \/**< [in]: Padding.  Must be set to 0. *\/$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
padding	support/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon70
padding	support/imgui/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context
padding1	support/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon84
padding2	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        padding2;                        \/**< [in]: Padding.  Must be set to 0. *\/$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
padding2	support/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon84
padding3	support/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon84
pal	support/tinygltf/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon110
parallelogram	cuda/GeometryData.h	/^        Parallelogram parallelogram;$/;"	m	union:GeometryData::__anon3
parallelogram_bound	optixConsole/optixConsole.cpp	/^inline OptixAabb parallelogram_bound( float3 v1, float3 v2, float3 anchor )$/;"	f
parallelogram_bound	optixWhitted/optixWhitted.cpp	/^inline OptixAabb parallelogram_bound( float3 v1, float3 v2, float3 anchor )$/;"	f
parameters	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR     parameters;$/;"	m	struct:VkDisplayModeCreateInfoKHR
parameters	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR    parameters;$/;"	m	struct:VkDisplayModePropertiesKHR
params	cuda/whitted_cuda.h	/^__constant__ whitted::LaunchParams params;$/;"	v
params	optixBoundValues/optixBoundValues.cpp	/^    Params                         params;$/;"	m	struct:PathTracerState	file:
params	optixCallablePrograms/optixCallablePrograms.cpp	/^    whitted::LaunchParams       params                   = {};$/;"	m	struct:CallableProgramsState	file:
params	optixConsole/optixConsole.cpp	/^    whitted::LaunchParams  params;$/;"	m	struct:OptixConsoleState	file:
params	optixCutouts/optixCutouts.cpp	/^    Params   params   = {};$/;"	m	struct:CutoutsState	file:
params	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    Globals                        params;$/;"	m	struct:DisplacedMicromeshState	file:
params	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    Params                         params;$/;"	m	struct:DynamicGeometryState	file:
params	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    Params      params;$/;"	m	struct:SampleState	file:
params	optixHair/optixHair.h	/^    whitted::LaunchParams  params       = {};$/;"	m	struct:HairState
params	optixMeshViewer/optixMeshViewer.cpp	/^whitted::LaunchParams   params   = {};$/;"	v
params	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    Params                         params;$/;"	m	struct:PathTracerState	file:
params	optixMotionGeometry/optixMotionGeometry.cpp	/^    Params                         params;$/;"	m	struct:MotionGeometryState	file:
params	optixMultiGPU/optixMultiGPU.cpp	/^    Params                       params;$/;"	m	struct:PathTracerState	file:
params	optixNVLink/optixNVLink.cpp	/^    Params                       params;$/;"	m	struct:PerDeviceSampleState	file:
params	optixPathTracer/optixPathTracer.cpp	/^    Params                         params;$/;"	m	struct:PathTracerState	file:
params	optixRaycasting/optixRaycasting.cpp	/^    Params                      params                   = {};$/;"	m	struct:RaycastingState	file:
params	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    Params                       params;$/;"	m	struct:SimpleMotionBlurState	file:
params	optixVolumeViewer/optixVolumeViewer.h	/^    LaunchParams  params   = {};$/;"	m	struct:Params
params	optixWhitted/optixWhitted.cpp	/^    whitted::LaunchParams       params;$/;"	m	struct:WhittedState	file:
params_translated	optixRaycasting/optixRaycasting.cpp	/^    Params                      params_translated        = {};$/;"	m	struct:RaycastingState	file:
parse	support/tinygltf/json.hpp	/^    static basic_json parse(IteratorType first, IteratorType last,$/;"	f	class:nlohmann::basic_json
parse	support/tinygltf/json.hpp	/^    static basic_json parse(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json
parse	support/tinygltf/json.hpp	/^    void parse(const bool strict, BasicJsonType& result)$/;"	f	class:nlohmann::detail::parser
parse	support/tinygltf/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon110
parseCommandLine	optixNVLink/optixNVLink.cpp	/^void parseCommandLine( int argc, char* argv[] )$/;"	f
parseDimensions	sutil/sutil.cpp	/^void parseDimensions( const char* arg, int& width, int& height )$/;"	f	namespace:sutil
parseInt	optixMotionGeometry/tiny_obj_loader.h	/^static inline int parseInt(const char **token) {$/;"	f	namespace:tinyobj
parseOnOff	optixMotionGeometry/tiny_obj_loader.h	/^static inline bool parseOnOff(const char **token, bool default_value = true) {$/;"	f	namespace:tinyobj
parseRawTriple	optixMotionGeometry/tiny_obj_loader.h	/^static vertex_index_t parseRawTriple(const char **token) {$/;"	f	namespace:tinyobj
parseReal	optixMotionGeometry/tiny_obj_loader.h	/^static inline bool parseReal(const char **token, real_t *out) {$/;"	f	namespace:tinyobj
parseReal	optixMotionGeometry/tiny_obj_loader.h	/^static inline real_t parseReal(const char **token, double default_value = 0.0) {$/;"	f	namespace:tinyobj
parseReal2	optixMotionGeometry/tiny_obj_loader.h	/^static inline void parseReal2(real_t *x, real_t *y, const char **token,$/;"	f	namespace:tinyobj
parseReal3	optixMotionGeometry/tiny_obj_loader.h	/^static inline void parseReal3(real_t *x, real_t *y, real_t *z,$/;"	f	namespace:tinyobj
parseString	optixMotionGeometry/tiny_obj_loader.h	/^static inline std::string parseString(const char **token) {$/;"	f	namespace:tinyobj
parseTagTriple	optixMotionGeometry/tiny_obj_loader.h	/^static tag_sizes parseTagTriple(const char **token) {$/;"	f	namespace:tinyobj
parseTextureInfo	sutil/Scene.cpp	/^void parseTextureInfo( const Scene& scene, const TextureInfo &inTex, MaterialData::Texture &outTex )$/;"	f	namespace:sutil
parseTextureType	optixMotionGeometry/tiny_obj_loader.h	/^static inline texture_type_t parseTextureType($/;"	f	namespace:tinyobj
parseTriple	optixMotionGeometry/tiny_obj_loader.h	/^static bool parseTriple(const char **token, int vsize, int vnsize, int vtsize,$/;"	f	namespace:tinyobj
parseUriList	support/GLFW/src/x11_window.c	/^static char** parseUriList(char* text, int* count)$/;"	f	file:
parseV	optixMotionGeometry/tiny_obj_loader.h	/^static inline void parseV(real_t *x, real_t *y, real_t *z, real_t *w,$/;"	f	namespace:tinyobj
parseVertexWithColor	optixMotionGeometry/tiny_obj_loader.h	/^static inline bool parseVertexWithColor(real_t *x, real_t *y, real_t *z,$/;"	f	namespace:tinyobj
parse_bson_array	support/tinygltf/json.hpp	/^    bool parse_bson_array()$/;"	f	class:nlohmann::detail::binary_reader
parse_bson_element_internal	support/tinygltf/json.hpp	/^    bool parse_bson_element_internal(const int element_type,$/;"	f	class:nlohmann::detail::binary_reader
parse_bson_element_list	support/tinygltf/json.hpp	/^    bool parse_bson_element_list(const bool is_array)$/;"	f	class:nlohmann::detail::binary_reader
parse_bson_internal	support/tinygltf/json.hpp	/^    bool parse_bson_internal()$/;"	f	class:nlohmann::detail::binary_reader
parse_cbor_internal	support/tinygltf/json.hpp	/^    bool parse_cbor_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader
parse_error	support/tinygltf/json.hpp	/^        parse_error,      \/\/\/< indicating a parse error$/;"	m	class:nlohmann::detail::lexer::token_type
parse_error	support/tinygltf/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/, const detail::exception& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
parse_error	support/tinygltf/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/,$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
parse_error	support/tinygltf/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/,$/;"	f	class:nlohmann::detail::json_sax_dom_parser
parse_error	support/tinygltf/json.hpp	/^    parse_error(int id_, std::size_t byte_, const char* what_arg)$/;"	f	class:nlohmann::detail::parse_error
parse_error	support/tinygltf/json.hpp	/^class parse_error : public exception$/;"	c	namespace:nlohmann::detail
parse_event_t	support/tinygltf/json.hpp	/^    enum class parse_event_t : uint8_t$/;"	c	class:nlohmann::detail::parser
parse_msgpack_internal	support/tinygltf/json.hpp	/^    bool parse_msgpack_internal()$/;"	f	class:nlohmann::detail::binary_reader
parse_ubjson_internal	support/tinygltf/json.hpp	/^    bool parse_ubjson_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader
parser	support/tinygltf/json.hpp	/^    explicit parser(detail::input_adapter_t&& adapter,$/;"	f	class:nlohmann::detail::parser
parser	support/tinygltf/json.hpp	/^class parser$/;"	c	namespace:nlohmann::detail
passOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkStencilOp    passOp;$/;"	m	struct:VkStencilOpState
patch	support/tinygltf/json.hpp	/^    basic_json patch(const basic_json& json_patch) const$/;"	f	class:nlohmann::basic_json
patchControlPoints	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                  patchControlPoints;$/;"	m	struct:VkPipelineTessellationStateCreateInfo
path	support/GLFW/src/linux_joystick.h	/^    char*           path;$/;"	m	struct:_GLFWjoystickLinux
pbr	cuda/MaterialData.h	/^        Pbr          pbr;$/;"	m	union:MaterialData::__anon1
pbrMetallicRoughness	support/tinygltf/tiny_gltf.h	/^  PbrMetallicRoughness pbrMetallicRoughness;$/;"	m	struct:tinygltf::Material
peek	optixVolumeViewer/optixVolumeViewer.cpp	/^float peek( CUdeviceptr location )$/;"	f
peers	optixNVLink/optixNVLink.cpp	/^    uint32_t                     peers                    = 0;$/;"	m	struct:PerDeviceSampleState	file:
perfLevel	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_PERF_LEVEL                perfLevel;                        \/**< [in]: Specifies perf level. *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
persistent	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32           persistent;$/;"	m	struct:VkDisplayPresentInfoKHR
persistentContent	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                      persistentContent;$/;"	m	struct:VkDisplayPropertiesKHR
perspective	support/tinygltf/tiny_gltf.h	/^  PerspectiveCamera perspective;$/;"	m	struct:tinygltf::Camera
pfnAllocation	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkAllocationFunction                pfnAllocation;$/;"	m	struct:VkAllocationCallbacks
pfnCallback	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkDebugReportCallbackEXT    pfnCallback;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT
pfnFree	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkFreeFunction                      pfnFree;$/;"	m	struct:VkAllocationCallbacks
pfnInternalAllocation	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkInternalAllocationNotification    pfnInternalAllocation;$/;"	m	struct:VkAllocationCallbacks
pfnInternalFree	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkInternalFreeNotification          pfnInternalFree;$/;"	m	struct:VkAllocationCallbacks
pfnReallocation	support/GLFW/deps/vulkan/vulkan.h	/^    PFN_vkReallocationFunction              pfnReallocation;$/;"	m	struct:VkAllocationCallbacks
pguid	support/GLFW/deps/mingw/dinput.h	/^    const GUID *pguid;$/;"	m	struct:_DIOBJECTDATAFORMAT
phong_exp	cuda/MaterialData.h	/^        float  phong_exp;$/;"	m	struct:MaterialData::Phong
phong_exp1	cuda/MaterialData.h	/^        float  phong_exp1, phong_exp2;$/;"	m	struct:MaterialData::CheckerPhong
phong_exp2	cuda/MaterialData.h	/^        float  phong_exp1, phong_exp2;$/;"	m	struct:MaterialData::CheckerPhong
physicalDimensions	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                    physicalDimensions;$/;"	m	struct:VkDisplayPropertiesKHR
physicalResolution	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D                    physicalResolution;$/;"	m	struct:VkDisplayPropertiesKHR
pipeline	optixBoundValues/optixBoundValues.cpp	/^    OptixPipeline                  pipeline                 = 0;$/;"	m	struct:PathTracerState	file:
pipeline	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixPipeline               pipeline                 = 0;$/;"	m	struct:CallableProgramsState	file:
pipeline	optixConsole/optixConsole.cpp	/^    OptixPipeline               pipeline                 = 0;$/;"	m	struct:OptixConsoleState	file:
pipeline	optixCutouts/optixCutouts.cpp	/^    OptixPipeline               pipeline                 = 0;$/;"	m	struct:CutoutsState	file:
pipeline	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixPipeline                  pipeline = 0;$/;"	m	struct:DisplacedMicromeshState	file:
pipeline	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixPipeline                  pipeline = 0;$/;"	m	struct:DynamicGeometryState	file:
pipeline	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixPipeline                  pipeline                 = nullptr;$/;"	m	struct:SampleState	file:
pipeline	optixHair/optixHair.h	/^    OptixPipeline       pipeline       = 0;$/;"	m	struct:HairState
pipeline	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixPipeline                  pipeline                 = 0;$/;"	m	struct:PathTracerState	file:
pipeline	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixPipeline                  pipeline = 0;$/;"	m	struct:MotionGeometryState	file:
pipeline	optixMultiGPU/optixMultiGPU.cpp	/^    OptixPipeline                pipeline                 = 0;$/;"	m	struct:PathTracerState	file:
pipeline	optixNVLink/optixNVLink.cpp	/^    OptixPipeline                pipeline                 = 0;$/;"	m	struct:PerDeviceSampleState	file:
pipeline	optixPathTracer/optixPathTracer.cpp	/^    OptixPipeline                  pipeline                 = 0;$/;"	m	struct:PathTracerState	file:
pipeline	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixPipeline                pipeline                       = 0;$/;"	m	struct:SimpleMotionBlurState	file:
pipeline	optixVolumeViewer/optixVolumeViewer.cpp	/^OptixPipeline           pipeline       = 0;$/;"	v
pipeline	optixWhitted/optixWhitted.cpp	/^    OptixPipeline               pipeline                  = 0;$/;"	m	struct:WhittedState	file:
pipeline	sutil/Scene.h	/^    SUTILAPI OptixPipeline                                  pipeline()const           { return m_pipeline;   }$/;"	f	class:sutil::Scene
pipelineBindPoint	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineBindPoint             pipelineBindPoint;$/;"	m	struct:VkSubpassDescription
pipelineCacheUUID	support/GLFW/deps/vulkan/vulkan.h	/^    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties
pipelineStatistics	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkCommandBufferInheritanceInfo
pipelineStatistics	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkQueryPoolCreateInfo
pipelineStatisticsQuery	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    pipelineStatisticsQuery;$/;"	m	struct:VkPhysicalDeviceFeatures
pipeline_1	optixRaycasting/optixRaycasting.cpp	/^    OptixPipeline               pipeline_1               = 0;$/;"	m	struct:RaycastingState	file:
pipeline_2	optixRaycasting/optixRaycasting.cpp	/^    OptixPipeline               pipeline_2               = 0;$/;"	m	struct:RaycastingState	file:
pipeline_compile_options	optixBoundValues/optixBoundValues.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:PathTracerState	file:
pipeline_compile_options	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options = {};$/;"	m	struct:CallableProgramsState	file:
pipeline_compile_options	optixConsole/optixConsole.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options = {};$/;"	m	struct:OptixConsoleState	file:
pipeline_compile_options	optixCutouts/optixCutouts.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options = {};$/;"	m	struct:CutoutsState	file:
pipeline_compile_options	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:DisplacedMicromeshState	file:
pipeline_compile_options	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:DynamicGeometryState	file:
pipeline_compile_options	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:SampleState	file:
pipeline_compile_options	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:PathTracerState	file:
pipeline_compile_options	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options;$/;"	m	struct:CompileOperation	file:
pipeline_compile_options	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:MotionGeometryState	file:
pipeline_compile_options	optixMultiGPU/optixMultiGPU.cpp	/^    OptixPipelineCompileOptions  pipeline_compile_options = {};$/;"	m	struct:PathTracerState	file:
pipeline_compile_options	optixNVLink/optixNVLink.cpp	/^    OptixPipelineCompileOptions  pipeline_compile_options = {};$/;"	m	struct:PerDeviceSampleState	file:
pipeline_compile_options	optixPathTracer/optixPathTracer.cpp	/^    OptixPipelineCompileOptions    pipeline_compile_options = {};$/;"	m	struct:PathTracerState	file:
pipeline_compile_options	optixRaycasting/optixRaycasting.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options = {};$/;"	m	struct:RaycastingState	file:
pipeline_compile_options	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixPipelineCompileOptions  pipeline_compile_options       = {};$/;"	m	struct:SimpleMotionBlurState	file:
pipeline_compile_options	optixWhitted/optixWhitted.cpp	/^    OptixPipelineCompileOptions pipeline_compile_options  = {};$/;"	m	struct:WhittedState	file:
pixelFormat	support/GLFW/src/nsgl_context.h	/^    id           pixelFormat;$/;"	m	struct:_GLFWcontextNSGL
pixelFormatSize	sutil/sutil.cpp	/^size_t pixelFormatSize( BufferImageFormat format )$/;"	f	namespace:sutil
pixel_aspect_ratio	support/tinyexr/tinyexr.h	/^  float pixel_aspect_ratio;$/;"	m	struct:_EXRHeader
pixel_aspect_ratio	support/tinyexr/tinyexr.h	/^  float pixel_aspect_ratio;$/;"	m	struct:tinyexr::HeaderInfo
pixel_format	sutil/sutil.h	/^    BufferImageFormat pixel_format;$/;"	m	struct:sutil::ImageBuffer
pixel_type	support/tinyexr/tinyexr.h	/^  int pixel_type;$/;"	m	struct:_EXRChannelInfo
pixel_type	support/tinyexr/tinyexr.h	/^  int pixel_type;$/;"	m	struct:tinyexr::__anon63
pixel_type	support/tinygltf/tiny_gltf.h	/^  int pixel_type;  \/\/ pixel type(TINYGLTF_COMPONENT_TYPE_***). usually$/;"	m	struct:tinygltf::Image
pixel_types	support/tinyexr/tinyexr.h	/^  int *pixel_types;  \/\/ Loaded pixel type(TINYEXR_PIXELTYPE_*) of `images` for$/;"	m	struct:_EXRHeader
pixels	support/GLFW/include/GLFW/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage
pixels	support/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon71
pixels	support/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
plane	cuda/GeometryData.h	/^        float4 plane;$/;"	m	struct:GeometryData::Parallelogram
plane	optixMotionGeometry/optixMotionGeometry.cpp	/^} plane;$/;"	v	typeref:struct:PlaneAnimation
plane	optixVolumeViewer/volume.h	/^        Plane  plane;$/;"	m	union:GeometryData::__anon7
planeAabb	optixMotionGeometry/optixMotionGeometry.cpp	/^    sutil::Aabb                    planeAabb;$/;"	m	struct:MotionGeometryState	file:
planeIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          planeIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
planePropeller_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         planePropeller_gas_handle;$/;"	m	struct:MotionGeometryState	file:
planeReorderPossible	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                      planeReorderPossible;$/;"	m	struct:VkDisplayPropertiesKHR
planeSpeed	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   planeSpeed = 0.4f;$/;"	m	struct:PlaneAnimation	file:
planeStackIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          planeStackIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
plane_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         plane_gas_handle;$/;"	m	struct:MotionGeometryState	file:
plane_scale_factor	optixVolumeViewer/optixVolumeViewer.cpp	/^const float plane_scale_factor = 2.5f;$/;"	v
plus	support/tinygltf/json.hpp	/^    diyfp plus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries
pnpoly	optixMotionGeometry/tiny_obj_loader.h	/^static int pnpoly(int nvert, T *vertx, T *verty, T testx, T testy) {$/;"	f	namespace:tinyobj
point	cuda/Light.h	/^        Point   point;$/;"	m	union:Light::Type::__anon2
pointSizeGranularity	support/GLFW/deps/vulkan/vulkan.h	/^    float                 pointSizeGranularity;$/;"	m	struct:VkPhysicalDeviceLimits
pointSizeRange	support/GLFW/deps/vulkan/vulkan.h	/^    float                 pointSizeRange[2];$/;"	m	struct:VkPhysicalDeviceLimits
pointer	support/GLFW/src/wl_platform.h	/^    struct wl_pointer*          pointer;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_pointer
pointerConstraints	support/GLFW/src/wl_platform.h	/^    struct zwp_pointer_constraints_v1*      pointerConstraints;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::zwp_pointer_constraints_v1
pointerFocus	support/GLFW/src/wl_platform.h	/^    _GLFWwindow*                pointerFocus;$/;"	m	struct:_GLFWlibraryWayland
pointerHandleAxis	support/GLFW/src/wl_init.c	/^static void pointerHandleAxis(void* data,$/;"	f	file:
pointerHandleButton	support/GLFW/src/wl_init.c	/^static void pointerHandleButton(void* data,$/;"	f	file:
pointerHandleEnter	support/GLFW/src/wl_init.c	/^static void pointerHandleEnter(void* data,$/;"	f	file:
pointerHandleLeave	support/GLFW/src/wl_init.c	/^static void pointerHandleLeave(void* data,$/;"	f	file:
pointerHandleMotion	support/GLFW/src/wl_init.c	/^static void pointerHandleMotion(void* data,$/;"	f	file:
pointerListener	support/GLFW/src/wl_init.c	/^static const struct wl_pointer_listener pointerListener = {$/;"	v	typeref:struct:wl_pointer_listener	file:
pointerLock	support/GLFW/src/wl_platform.h	/^    } pointerLock;$/;"	m	struct:_GLFWwindowWayland	typeref:struct:_GLFWwindowWayland::__anon18
pointerSerial	support/GLFW/src/wl_platform.h	/^    uint32_t                    pointerSerial;$/;"	m	struct:_GLFWlibraryWayland
points	optixHair/Hair.cpp	/^std::vector<float3> Hair::points() const$/;"	f	class:Hair
points	optixMotionGeometry/tiny_obj_loader.h	/^  points_t points;$/;"	m	struct:tinyobj::shape_t
pointsGroup	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<__points_t> pointsGroup;$/;"	m	struct:tinyobj::PrimGroup
points_t	optixMotionGeometry/tiny_obj_loader.h	/^struct points_t {$/;"	s	namespace:tinyobj
poke	optixVolumeViewer/optixVolumeViewer.cpp	/^void poke( CUdeviceptr location, float value )$/;"	f
pollJoystickEvents	support/GLFW/src/linux_joystick.c	/^static GLFWbool pollJoystickEvents(_GLFWjoystickLinux* js)$/;"	f	file:
pollJoystickState	support/GLFW/src/win32_joystick.c	/^static GLFWbool pollJoystickState(_GLFWjoystickWin32* js, int mode)$/;"	f	file:
polygonMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkPolygonMode                              polygonMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
pool	sutil/CuBuffer.h	/^    static size_t pool( size_t sizeA, size_t sizeB, size_t alignmentB, size_t& offsetB )$/;"	f	class:CuBuffer
pool	sutil/CuBuffer.h	/^    static size_t pool( size_t sizeA, size_t sizeB, size_t alignmentB, size_t& offsetB, size_t sizeC, size_t alignmentC, size_t& offsetC )$/;"	f	class:CuBuffer
poolSizeCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                       poolSizeCount;$/;"	m	struct:VkDescriptorPoolCreateInfo
pop_back	support/imgui/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector
pop_back	support/tinygltf/json.hpp	/^    std::string pop_back()$/;"	f	class:nlohmann::json_pointer
pos	support/GLFW/src/internal.h	/^        GLFWwindowposfun        pos;$/;"	m	struct:_GLFWwindow::__anon8
pos	support/imgui/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert
position	support/tinygltf/json.hpp	/^    position_t position;$/;"	m	class:nlohmann::detail::lexer
position3	cuda/curve.h	/^    __device__ __forceinline__ float3 position3( float u ) const$/;"	f	struct:CubicInterpolator
position3	cuda/curve.h	/^    __device__ __forceinline__ float3 position3( float u ) const$/;"	f	struct:LinearInterpolator
position3	cuda/curve.h	/^    __device__ __forceinline__ float3 position3( float u ) const$/;"	f	struct:QuadraticInterpolator
position4	cuda/curve.h	/^    __device__ __forceinline__ float4 position4( float u ) const$/;"	f	struct:CubicInterpolator
position4	cuda/curve.h	/^    __device__ __forceinline__ float4 position4( float u ) const$/;"	f	struct:LinearInterpolator
position4	cuda/curve.h	/^    __device__ __forceinline__ float4 position4( float u ) const$/;"	f	struct:QuadraticInterpolator
position_string	support/tinygltf/json.hpp	/^    static std::string position_string(const position_t& pos)$/;"	f	class:nlohmann::detail::parse_error
position_t	support/tinygltf/json.hpp	/^struct position_t$/;"	s	namespace:nlohmann::detail
positions	cuda/GeometryData.h	/^        BufferView<float3> positions;$/;"	m	struct:GeometryData::TriangleMesh
positions	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    std::vector<float3> positions;$/;"	m	struct:MeshData	file:
positions	optixVolumeViewer/optixVolumeViewer.h	/^    float3                    positions[num_positions] = {};$/;"	m	struct:Cube
positions	optixVolumeViewer/optixVolumeViewer.h	/^    float3                    positions[num_positions] = {};$/;"	m	struct:Plane
positions	sutil/Scene.h	/^        std::vector<BufferView<float3> >  positions;$/;"	m	struct:sutil::Scene::MeshGroup
povCount	support/GLFW/src/win32_joystick.c	/^    int                     povCount;$/;"	m	struct:_GLFWobjenumWin32	file:
ppEnabledExtensionNames	support/GLFW/deps/vulkan/vulkan.h	/^    const char* const*                 ppEnabledExtensionNames;$/;"	m	struct:VkDeviceCreateInfo
ppEnabledExtensionNames	support/GLFW/deps/vulkan/vulkan.h	/^    const char* const*          ppEnabledExtensionNames;$/;"	m	struct:VkInstanceCreateInfo
ppEnabledLayerNames	support/GLFW/deps/vulkan/vulkan.h	/^    const char* const*                 ppEnabledLayerNames;$/;"	m	struct:VkDeviceCreateInfo
ppEnabledLayerNames	support/GLFW/deps/vulkan/vulkan.h	/^    const char* const*          ppEnabledLayerNames;$/;"	m	struct:VkInstanceCreateInfo
preTransform	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    preTransform;$/;"	m	struct:VkSwapchainCreateInfoKHR
precision	support/tinyexr/tinyexr.h	/^  int precision;$/;"	m	struct:tinyexr::ZFPCompressionParam
preferred_x	support/imgui/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon84
prefix	support/GLFW/src/egl_context.h	/^    GLFWbool        prefix;$/;"	m	struct:_GLFWlibraryEGL
prefix	support/tinygltf/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon109
present	support/GLFW/src/cocoa_joystick.h	/^    GLFWbool        present;$/;"	m	struct:_GLFWjoystickNS
present	support/GLFW/src/linux_joystick.h	/^    GLFWbool        present;$/;"	m	struct:_GLFWjoystickLinux
present	support/GLFW/src/win32_joystick.h	/^    GLFWbool                present;$/;"	m	struct:_GLFWjoystickWin32
presentMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkPresentModeKHR                 presentMode;$/;"	m	struct:VkSwapchainCreateInfoKHR
preserveAttachmentCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        preserveAttachmentCount;$/;"	m	struct:VkSubpassDescription
preserve_image_channels_	support/tinygltf/tiny_gltf.h	/^  bool preserve_image_channels_ = false; \/\/\/ Default false(expand channels to RGBA) for backward compatibility.$/;"	m	class:tinygltf::TinyGLTF
prev_first	support/imgui/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon86
prev_link	support/imgui/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon90
previousMode	support/GLFW/src/cocoa_platform.h	/^    CGDisplayModeRef    previousMode;$/;"	m	struct:_GLFWmonitorNS
primitiveRestartEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                   primitiveRestartEnable;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo
primitive_iterator_t	support/tinygltf/json.hpp	/^class primitive_iterator_t$/;"	c	namespace:nlohmann::detail
primitives	support/tinygltf/tiny_gltf.h	/^  std::vector<Primitive> primitives;$/;"	m	struct:tinygltf::Mesh
printBuffer	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void printBuffer( sutil::CUDAOutputBuffer<uchar4>& output_buffer, const std::string& outfile )$/;"	f
printIsland	optixNVLink/optixNVLink.cpp	/^void printIsland( int island )$/;"	f
printKeyboardCommands	optixHair/optixHair.cpp	/^void printKeyboardCommands()$/;"	f
printLogMessage	optixHair/optixHair.cpp	/^void printLogMessage( unsigned int level, const char* tag, const char* message, void* \/* cbdata *\/ )$/;"	f
printShortcuts	optixVolumeViewer/optixVolumeViewer.cpp	/^void printShortcuts()$/;"	f
printUsageAndExit	nvpath-fmz/path-tracer.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixBoundValues/optixBoundValues.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixCallablePrograms/optixCallablePrograms.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixCompileWithTasks/optixCompileWithTasks.cpp	/^void printUsageAndExit( const std::string& argv0, bool doExit = true )$/;"	f
printUsageAndExit	optixConsole/optixConsole.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixCurves/optixCurves.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixCustomPrimitive/optixCustomPrimitive.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixCutouts/optixCutouts.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixDenoiser/optixDenoiser.cpp	/^void printUsageAndExit( const std::string& argv0 )$/;"	f
printUsageAndExit	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixHair/optixHair.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixHello/optixHello.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixMeshViewer/optixMeshViewer.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixMotionGeometry/optixMotionGeometry.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixMultiGPU/optixMultiGPU.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixNVLink/optixNVLink.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixOpacityMicromap/optixOpacityMicromap.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixOpticalFlow/optixOpticalFlow.cpp	/^void printUsageAndExit( const std::string& argv0 )$/;"	f
printUsageAndExit	optixPathTracer/optixPathTracer.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixRaycasting/optixRaycasting.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixRibbons/optixRibbons.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixSphere/optixSphere.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixTriangle/optixTriangle.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixVolumeViewer/optixVolumeViewer.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
printUsageAndExit	optixWhitted/optixWhitted.cpp	/^void printUsageAndExit( const char* argv0 )$/;"	f
print_pixel	cuda/util.h	38;"	d
priority_tag	support/tinygltf/json.hpp	/^template<> struct priority_tag<0> {};$/;"	s	namespace:nlohmann::detail
priority_tag	support/tinygltf/json.hpp	/^template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};$/;"	s	namespace:nlohmann::detail
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafNode* probeLeaf(const CoordT&) const { return this; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafNodeType* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafNodeType* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafT* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafT* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafT* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
probeLeaf	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const NanoLeaf<ValueT>* probeLeaf(const CoordType& ijk) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
probeLeafAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafNode* probeLeafAndCache(const CoordT&, const AccT&) const { return this; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
probeLeafAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const LeafNodeType* probeLeafAndCache(const CoordType& ijk, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordT& ijk, ValueType& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordType& ijk, ValueType& v) const { return this->root().probeValue(ijk, v); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordType& ijk, ValueType& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordType& ijk, ValueType& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordType& ijk, ValueType& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
probeValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValue(const CoordType& ijk, ValueType& v) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
probeValueAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValueAndCache(const CoordT& ijk, ValueType& v, const AccT&) const { return this->probeValue(ijk, v); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
probeValueAndCache	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ bool probeValueAndCache(const CoordType& ijk, ValueType& v, const AccT& acc) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
processEvent	support/GLFW/src/x11_window.c	/^static void processEvent(XEvent *event)$/;"	f	file:
processGLTFNode	sutil/Scene.cpp	/^void processGLTFNode($/;"	f	namespace:sutil::__anon123
process_handle	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    HANDLE process_handle;$/;"	m	struct:CompileOperation	file:
process_id	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    pid_t process_id;$/;"	m	struct:CompileOperation	file:
profile	support/GLFW/src/internal.h	/^    int                 profile;$/;"	m	struct:_GLFWcontext
profile	support/GLFW/src/internal.h	/^    int           profile;$/;"	m	struct:_GLFWctxconfig
proggy_clean_ttf_compressed_data_base85	support/imgui/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v	file:
programName	optixHair/Hair.cpp	/^std::string Hair::programName() const$/;"	f	class:Hair
programSuffix	optixHair/Hair.cpp	/^std::string Hair::programSuffix() const$/;"	f	class:Hair
program_groups	optixVolumeViewer/optixVolumeViewer.cpp	/^ProgramGroups           program_groups = {};$/;"	v
progressive	support/tinygltf/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon99
propertyFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkMemoryPropertyFlags    propertyFlags;$/;"	m	struct:VkMemoryType
ptrAssert	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    static inline void ptrAssert(void* ptr, const char* msg, const char* file, int line, bool abort = true)$/;"	f	class:nanovdb::HostBuffer
ptrAssert	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    static inline void ptrAssert(void*, const char*, const char*, int, bool = true)$/;"	f	class:nanovdb::HostBuffer
ptx	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    std::string ptx;$/;"	m	struct:CompileOperation	file:
ptx_module	optixBoundValues/optixBoundValues.cpp	/^    OptixModule                    ptx_module               = 0;$/;"	m	struct:PathTracerState	file:
ptx_module	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixModule                    ptx_module = 0;$/;"	m	struct:DynamicGeometryState	file:
ptx_module	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixModule                    ptx_module               = 0;$/;"	m	struct:PathTracerState	file:
ptx_module	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixModule                    ptx_module = 0;$/;"	m	struct:MotionGeometryState	file:
ptx_module	optixMultiGPU/optixMultiGPU.cpp	/^    OptixModule                  ptx_module               = 0;$/;"	m	struct:PathTracerState	file:
ptx_module	optixNVLink/optixNVLink.cpp	/^    OptixModule                  ptx_module               = 0;$/;"	m	struct:PerDeviceSampleState	file:
ptx_module	optixPathTracer/optixPathTracer.cpp	/^    OptixModule                    ptx_module               = 0;$/;"	m	struct:PathTracerState	file:
ptx_module	optixRaycasting/optixRaycasting.cpp	/^    OptixModule                 ptx_module               = 0;$/;"	m	struct:RaycastingState	file:
ptx_module	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixModule                  ptx_module                     = 0;$/;"	m	struct:SimpleMotionBlurState	file:
ptx_module_radiance	optixBoundValues/optixBoundValues.cpp	/^    OptixModule                    ptx_module_radiance      = 0;$/;"	m	struct:PathTracerState	file:
ptx_module_radiance	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixModule                    ptx_module_radiance      = 0;$/;"	m	struct:PathTracerState	file:
publicAdapterName	support/GLFW/src/win32_platform.h	/^    char                publicAdapterName[64];$/;"	m	struct:_GLFWmonitorWin32
publicDisplayName	support/GLFW/src/win32_platform.h	/^    char                publicDisplayName[64];$/;"	m	struct:_GLFWmonitorWin32
publicKeys	support/GLFW/src/cocoa_platform.h	/^    short int           publicKeys[256];$/;"	m	struct:_GLFWlibraryNS
publicKeys	support/GLFW/src/mir_platform.h	/^    short int       publicKeys[256];$/;"	m	struct:_GLFWlibraryMir
publicKeys	support/GLFW/src/win32_platform.h	/^    short int           publicKeys[512];$/;"	m	struct:_GLFWlibraryWin32
publicKeys	support/GLFW/src/wl_platform.h	/^    short int                   publicKeys[256];$/;"	m	struct:_GLFWlibraryWayland
publicKeys	support/GLFW/src/x11_platform.h	/^    short int       publicKeys[256];$/;"	m	struct:_GLFWlibraryX11
pushConstantRangeCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        pushConstantRangeCount;$/;"	m	struct:VkPipelineLayoutCreateInfo
pushSelectionToManager	support/GLFW/src/x11_window.c	/^static void pushSelectionToManager(_GLFWwindow* window)$/;"	f	file:
push_back	support/imgui/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }$/;"	f	struct:ImVector
push_back	support/tinygltf/json.hpp	/^    void push_back(basic_json&& val)$/;"	f	class:nlohmann::basic_json
push_back	support/tinygltf/json.hpp	/^    void push_back(const basic_json& val)$/;"	f	class:nlohmann::basic_json
push_back	support/tinygltf/json.hpp	/^    void push_back(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json
push_back	support/tinygltf/json.hpp	/^    void push_back(initializer_list_t init)$/;"	f	class:nlohmann::basic_json
push_front	support/imgui/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else insert(Data, v); }$/;"	f	struct:ImVector
pvertices	support/imgui/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon78
q	sutil/Quaternion.h	/^    float q[4];$/;"	m	class:sutil::Quaternion
qnxnto	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quantizeUnsigned8Bits	cuda/helpers.h	/^__forceinline__ __device__ unsigned char quantizeUnsigned8Bits( float x )$/;"	f
quat	support/GLFW/deps/linmath.h	/^typedef float quat[4];$/;"	t
quat_add	support/GLFW/deps/linmath.h	/^static inline void quat_add(quat r, quat a, quat b)$/;"	f
quat_conj	support/GLFW/deps/linmath.h	/^static inline void quat_conj(quat r, quat q)$/;"	f
quat_from_mat4x4	support/GLFW/deps/linmath.h	/^static inline void quat_from_mat4x4(quat q, mat4x4 M)$/;"	f
quat_identity	support/GLFW/deps/linmath.h	/^static inline void quat_identity(quat q)$/;"	f
quat_inner_product	support/GLFW/deps/linmath.h	/^static inline float quat_inner_product(quat a, quat b)$/;"	f
quat_mul	support/GLFW/deps/linmath.h	/^static inline void quat_mul(quat r, quat p, quat q)$/;"	f
quat_mul_vec3	support/GLFW/deps/linmath.h	/^static inline void quat_mul_vec3(vec3 r, quat q, vec3 v)$/;"	f
quat_norm	support/GLFW/deps/linmath.h	483;"	d
quat_rotate	support/GLFW/deps/linmath.h	/^static inline void quat_rotate(quat r, float angle, vec3 axis) {$/;"	f
quat_scale	support/GLFW/deps/linmath.h	/^static inline void quat_scale(quat r, quat v, float s)$/;"	f
quat_sub	support/GLFW/deps/linmath.h	/^static inline void quat_sub(quat r, quat a, quat b)$/;"	f
queryCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         queryCount;$/;"	m	struct:VkQueryPoolCreateInfo
queryFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueryControlFlags              queryFlags;$/;"	m	struct:VkCommandBufferInheritanceInfo
queryType	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueryType                      queryType;$/;"	m	struct:VkQueryPoolCreateInfo
queueCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    queueCount;$/;"	m	struct:VkDeviceQueueCreateInfo
queueCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        queueCount;$/;"	m	struct:VkQueueFamilyProperties
queueCreateInfoCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                           queueCreateInfoCount;$/;"	m	struct:VkDeviceCreateInfo
queueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkCommandPoolCreateInfo
queueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkDeviceQueueCreateInfo
queueFamilyIndexCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         queueFamilyIndexCount;$/;"	m	struct:VkSwapchainCreateInfoKHR
queueFamilyIndexCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 queueFamilyIndexCount;$/;"	m	struct:VkImageCreateInfo
queueFamilyIndexCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t               queueFamilyIndexCount;$/;"	m	struct:VkBufferCreateInfo
queueFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkQueueFlags    queueFlags;$/;"	m	struct:VkQueueFamilyProperties
r	optixCustomPrimitive/optixCustomPrimitive.h	/^    float r, g, b;$/;"	m	struct:MissData
r	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:MissData
r	optixCutouts/optixCutouts.h	/^    float r, g, b;$/;"	m	struct:RayGenData
r	optixHello/optixHello.h	/^    float r,g,b;$/;"	m	struct:RayGenData
r	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:MissData
r	optixMultiGPU/optixMultiGPU.h	/^    float r, g, b;$/;"	m	struct:RayGenData
r	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:MissData
r	optixNVLink/optixNVLink.h	/^    float r, g, b;$/;"	m	struct:RayGenData
r	optixSphere/optixSphere.h	/^    float r, g, b;$/;"	m	struct:MissData
r	support/GLFW/deps/vulkan/vulkan.h	/^    VkComponentSwizzle    r;$/;"	m	struct:VkComponentMapping
radiance	optixBoundValues/optixBoundValues.h	/^    float3       radiance;$/;"	m	struct:RadiancePRD
radiance	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3       radiance;$/;"	m	struct:RadiancePRD
radiance	optixPathTracer/optixPathTracer.h	/^    float3       radiance;$/;"	m	struct:RadiancePRD
radiancePayloadSemantics	optixPathTracer/optixPathTracer.h	/^const unsigned int radiancePayloadSemantics[18] =$/;"	v
radiance_floor_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup radiance_floor_prog_group         = 0;$/;"	m	struct:OptixConsoleState	file:
radiance_floor_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           radiance_floor_prog_group         = 0;$/;"	m	struct:WhittedState	file:
radiance_glass_sphere_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup radiance_glass_sphere_prog_group  = 0;$/;"	m	struct:OptixConsoleState	file:
radiance_glass_sphere_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           radiance_glass_sphere_prog_group  = 0;$/;"	m	struct:WhittedState	file:
radiance_hit_group	optixBoundValues/optixBoundValues.cpp	/^    OptixProgramGroup              radiance_hit_group       = 0;$/;"	m	struct:PathTracerState	file:
radiance_hit_group	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixProgramGroup              radiance_hit_group       = 0;$/;"	m	struct:PathTracerState	file:
radiance_hit_group	optixMultiGPU/optixMultiGPU.cpp	/^    OptixProgramGroup            radiance_hit_group       = 0;$/;"	m	struct:PathTracerState	file:
radiance_hit_group	optixNVLink/optixNVLink.cpp	/^    OptixProgramGroup            radiance_hit_group       = 0;$/;"	m	struct:PerDeviceSampleState	file:
radiance_hit_group	optixPathTracer/optixPathTracer.cpp	/^    OptixProgramGroup              radiance_hit_group       = 0;$/;"	m	struct:PathTracerState	file:
radiance_metal_sphere_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup radiance_metal_sphere_prog_group  = 0;$/;"	m	struct:OptixConsoleState	file:
radiance_metal_sphere_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           radiance_metal_sphere_prog_group  = 0;$/;"	m	struct:WhittedState	file:
radiance_miss_group	optixBoundValues/optixBoundValues.cpp	/^    OptixProgramGroup              radiance_miss_group      = 0;$/;"	m	struct:PathTracerState	file:
radiance_miss_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup radiance_miss_group             = 0;$/;"	m	struct:CutoutsState	file:
radiance_miss_group	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixProgramGroup              radiance_miss_group      = 0;$/;"	m	struct:PathTracerState	file:
radiance_miss_group	optixMultiGPU/optixMultiGPU.cpp	/^    OptixProgramGroup            radiance_miss_group      = 0;$/;"	m	struct:PathTracerState	file:
radiance_miss_group	optixNVLink/optixNVLink.cpp	/^    OptixProgramGroup            radiance_miss_group      = 0;$/;"	m	struct:PerDeviceSampleState	file:
radiance_miss_group	optixPathTracer/optixPathTracer.cpp	/^    OptixProgramGroup              radiance_miss_group      = 0;$/;"	m	struct:PathTracerState	file:
radiance_miss_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup radiance_miss_prog_group          = 0;$/;"	m	struct:OptixConsoleState	file:
radiance_miss_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           radiance_miss_prog_group  = 0;$/;"	m	struct:WhittedState	file:
radians	sutil/Trackball.cpp	/^float radians(float degrees)$/;"	f	namespace:sutil::__anon122
radius	cuda/GeometryData.h	/^        float  radius;$/;"	m	struct:GeometryData::Sphere
radius	cuda/curve.h	/^    __device__ __forceinline__ float radius( const float& u ) const$/;"	f	struct:LinearInterpolator
radius	cuda/curve.h	/^    __device__ __forceinline__ float radius( float u ) const$/;"	f	struct:CubicInterpolator
radius	cuda/curve.h	/^    __device__ __forceinline__ float radius( float u ) const$/;"	f	struct:QuadraticInterpolator
radius	optixDynamicMaterials/optixDynamicMaterials.h	/^    float                  radius;$/;"	m	struct:Params
radius	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float      radius;$/;"	m	struct:HitGroupData
radius	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    float  radius;$/;"	m	struct:SphereData
radius1	cuda/GeometryData.h	/^        float  radius1;$/;"	m	struct:GeometryData::SphereShell
radius2	cuda/GeometryData.h	/^        float  radius2;$/;"	m	struct:GeometryData::SphereShell
radiusMode	optixHair/Hair.h	/^    Radius radiusMode() const { return m_radiusMode; };$/;"	f	class:Hair
raisePlane	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void raisePlane() $/;"	f
randf	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^float randf()$/;"	f
randf	optixMotionGeometry/optixMotionGeometry.cpp	/^float randf()$/;"	f
randr	support/GLFW/src/x11_platform.h	/^    } randr;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon20
range	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               range;$/;"	m	struct:VkBufferViewCreateInfo
range	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    range;$/;"	m	struct:VkDescriptorBufferInfo
raster	sutil/PPMLoader.cpp	/^unsigned char* PPMLoader::raster() const$/;"	f	class:PPMLoader
rasterizationSamples	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlagBits                    rasterizationSamples;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
rasterizerDiscardEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                   rasterizerDiscardEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
rate	support/tinyexr/tinyexr.h	/^  double rate;$/;"	m	struct:tinyexr::ZFPCompressionParam
ratio	support/tinygltf/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon110
raw_coeff	support/tinygltf/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon99::__anon100
raw_data	support/tinygltf/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon99::__anon100
ray	optixVolumeViewer/nanovdb/util/HDDA.h	/^    inline __hostdev__ RayT& ray() { return mRay; }$/;"	f	class:nanovdb::TreeMarcher
ray	optixVolumeViewer/nanovdb/util/HDDA.h	/^    inline __hostdev__ const RayT& ray() const { return mRay; }$/;"	f	class:nanovdb::TreeMarcher
raygen	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup raygen           = 0;$/;"	m	struct:ProgramGroups
raygen_prog_group	optixBoundValues/optixBoundValues.cpp	/^    OptixProgramGroup              raygen_prog_group        = 0;$/;"	m	struct:PathTracerState	file:
raygen_prog_group	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixProgramGroup           raygen_prog_group        = 0;$/;"	m	struct:CallableProgramsState	file:
raygen_prog_group	optixConsole/optixConsole.cpp	/^    OptixProgramGroup raygen_prog_group                 = 0;$/;"	m	struct:OptixConsoleState	file:
raygen_prog_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup raygen_prog_group               = 0;$/;"	m	struct:CutoutsState	file:
raygen_prog_group	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixProgramGroup raygen_prog_group      = 0;$/;"	m	struct:DisplacedMicromeshState	file:
raygen_prog_group	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixProgramGroup              raygen_prog_group;$/;"	m	struct:DynamicGeometryState	file:
raygen_prog_group	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixProgramGroup              raygen_prog_group        = nullptr;$/;"	m	struct:SampleState	file:
raygen_prog_group	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixProgramGroup              raygen_prog_group        = 0;$/;"	m	struct:PathTracerState	file:
raygen_prog_group	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixProgramGroup              raygen_prog_group = 0;$/;"	m	struct:MotionGeometryState	file:
raygen_prog_group	optixMultiGPU/optixMultiGPU.cpp	/^    OptixProgramGroup            raygen_prog_group        = 0;$/;"	m	struct:PathTracerState	file:
raygen_prog_group	optixNVLink/optixNVLink.cpp	/^    OptixProgramGroup            raygen_prog_group        = 0;$/;"	m	struct:PerDeviceSampleState	file:
raygen_prog_group	optixPathTracer/optixPathTracer.cpp	/^    OptixProgramGroup              raygen_prog_group        = 0;$/;"	m	struct:PathTracerState	file:
raygen_prog_group	optixRaycasting/optixRaycasting.cpp	/^    OptixProgramGroup           raygen_prog_group        = 0;$/;"	m	struct:RaycastingState	file:
raygen_prog_group	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixProgramGroup            raygen_prog_group              = 0;$/;"	m	struct:SimpleMotionBlurState	file:
raygen_prog_group	optixWhitted/optixWhitted.cpp	/^    OptixProgramGroup           raygen_prog_group         = 0;$/;"	m	struct:WhittedState	file:
rays	optixRaycasting/optixRaycasting.h	/^    Ray*                   rays;$/;"	m	struct:Params
rcCalloutRect	support/GLFW/deps/mingw/dinput.h	/^	RECT	rcCalloutRect;$/;"	m	struct:_DIDEVICEIMAGEINFOA
rcCalloutRect	support/GLFW/deps/mingw/dinput.h	/^	RECT	rcCalloutRect;$/;"	m	struct:_DIDEVICEIMAGEINFOW
rcOverlay	support/GLFW/deps/mingw/dinput.h	/^	RECT	rcOverlay;$/;"	m	struct:_DIDEVICEIMAGEINFOA
rcOverlay	support/GLFW/deps/mingw/dinput.h	/^	RECT	rcOverlay;$/;"	m	struct:_DIDEVICEIMAGEINFOW
read	optixVolumeViewer/nanovdb/util/IO.h	/^inline bool Segment::read(std::istream& is)$/;"	f	class:nanovdb::io::Codec::Segment
read	optixVolumeViewer/nanovdb/util/IO.h	/^inline void GridMetaData::read(std::istream& is)$/;"	f	class:nanovdb::io::Codec::GridMetaData
read	optixVolumeViewer/nanovdb/util/IO.h	/^void Internal::read(std::istream& is, GridHandle<BufferT>& handle, Codec codec)$/;"	f	class:nanovdb::io::Codec::Internal
read	support/tinygltf/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon93
readFile	optixConsole/optixConsole.cpp	/^std::string readFile( const std::string& filename )$/;"	f
readGrid	optixVolumeViewer/nanovdb/util/IO.h	/^GridHandle<BufferT> readGrid(const std::string& fileName, const std::string& gridName, int verbose, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readGrid	optixVolumeViewer/nanovdb/util/IO.h	/^GridHandle<BufferT> readGrid(const std::string& fileName, uint64_t n, int verbose, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readGrid	optixVolumeViewer/nanovdb/util/IO.h	/^GridHandle<BufferT> readGrid(std::istream& is, const std::string& gridName, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readGrid	optixVolumeViewer/nanovdb/util/IO.h	/^GridHandle<BufferT> readGrid(std::istream& is, uint64_t n, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readGridMetaData	optixVolumeViewer/nanovdb/util/IO.h	/^inline std::vector<GridMetaData> readGridMetaData(const std::string& fileName)$/;"	f	class:nanovdb::io::Codec
readGridMetaData	optixVolumeViewer/nanovdb/util/IO.h	/^inline std::vector<GridMetaData> readGridMetaData(std::istream& is)$/;"	f	class:nanovdb::io::Codec
readGrids	optixVolumeViewer/nanovdb/util/IO.h	/^VecT<GridHandle<BufferT>> readGrids(const std::string& fileName, int verbose, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readGrids	optixVolumeViewer/nanovdb/util/IO.h	/^VecT<GridHandle<BufferT>> readGrids(std::istream& is, const BufferT& buffer)$/;"	f	class:nanovdb::io::Codec
readInputFile	optixCompileWithTasks/optixCompileWithTasks.cpp	/^std::string readInputFile( const std::string& filename )$/;"	f
readSourceFile	sutil/sutil.cpp	/^static bool readSourceFile( std::string& str, const std::string& filename )$/;"	f	namespace:sutil
readUInt	support/tinyexr/tinyexr.h	/^static unsigned int readUInt(const char buf[4]) {$/;"	f	namespace:tinyexr
read_from_callbacks	support/tinygltf/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon94
real_t	optixMotionGeometry/tiny_obj_loader.h	/^typedef double real_t;$/;"	t	namespace:tinyobj
real_value_	support/tinygltf/tiny_gltf.h	/^  double real_value_ = 0.0;$/;"	m	class:tinygltf::Value
rect	support/GLFW/deps/vulkan/vulkan.h	/^    VkRect2D    rect;$/;"	m	struct:VkClearRect
rect_height_compare	support/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f
rect_original_order	support/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f
red	support/GLFW/include/GLFW/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp
redBits	support/GLFW/include/GLFW/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode
redBits	support/GLFW/src/internal.h	/^    int         redBits;$/;"	m	struct:_GLFWfbconfig
redo_char_point	support/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon83
redo_point	support/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon83
ref_stack	support/tinygltf/json.hpp	/^    std::vector<BasicJsonType*> ref_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
ref_stack	support/tinygltf/json.hpp	/^    std::vector<BasicJsonType*> ref_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_parser
reference	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t       reference;$/;"	m	struct:VkStencilOpState
referenceFrame	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NvOFGPUBufferHandle             referenceFrame;                  \/**< [in]: If ::NV_OF_INIT_PARAMS::mode is ::NV_OF_MODE_OPTICALFLOW, this specifies the handle to the buffer containing the reference frame.$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
reference_tokens	support/tinygltf/json.hpp	/^    std::vector<std::string> reference_tokens;$/;"	m	class:nlohmann::json_pointer
reflect	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float2 reflect(const float2& i, const float2& n)$/;"	f
reflect	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float3 reflect(const float3& i, const float3& n)$/;"	f
reflect	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE float4 reflect(const float4& i, const float4& n)$/;"	f
reflection_color	cuda/MaterialData.h	/^        float3 reflection_color;$/;"	m	struct:MaterialData::Glass
reflection_maxdepth	cuda/MaterialData.h	/^        int    reflection_maxdepth;$/;"	m	struct:MaterialData::Glass
reflection_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string reflection_texname;          \/\/ refl$/;"	m	struct:tinyobj::material_t
reflection_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t reflection_texopt;$/;"	m	struct:tinyobj::material_t
refract	cuda/helpers.h	/^__forceinline__ __device__ bool refract( float3& r, const float3& i, const float3& n, const float ior )$/;"	f
refraction_color	cuda/MaterialData.h	/^        float3 refraction_color;$/;"	m	struct:MaterialData::Glass
refraction_index	cuda/MaterialData.h	/^        float  refraction_index;$/;"	m	struct:MaterialData::Glass
refraction_maxdepth	cuda/MaterialData.h	/^        int    refraction_maxdepth;$/;"	m	struct:MaterialData::Glass
refresh	support/GLFW/src/internal.h	/^        GLFWwindowrefreshfun    refresh;$/;"	m	struct:_GLFWwindow::__anon8
refreshRate	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t      refreshRate;$/;"	m	struct:VkDisplayModeParametersKHR
refreshRate	support/GLFW/include/GLFW/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode
refreshRate	support/GLFW/src/internal.h	/^        int             refreshRate;$/;"	m	struct:_GLFWlibrary::__anon9
refreshVideoModes	support/GLFW/src/monitor.c	/^static GLFWbool refreshVideoModes(_GLFWmonitor* monitor)$/;"	f	file:
regex	support/GLFW/src/linux_joystick.h	/^    regex_t         regex;$/;"	m	struct:_GLFWjoylistLinux
registry	support/GLFW/src/wl_platform.h	/^    struct wl_registry*         registry;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_registry
registryHandleGlobal	support/GLFW/src/wl_init.c	/^static void registryHandleGlobal(void* data,$/;"	f	file:
registryHandleGlobalRemove	support/GLFW/src/wl_init.c	/^static void registryHandleGlobalRemove(void *data,$/;"	f	file:
registryListener	support/GLFW/src/wl_init.c	/^static const struct wl_registry_listener registryListener = {$/;"	v	typeref:struct:wl_registry_listener	file:
reinitOrientationFromCamera	sutil/Trackball.cpp	/^void Trackball::reinitOrientationFromCamera()$/;"	f	class:sutil::Trackball
reinterpret_bits	support/tinygltf/json.hpp	/^Target reinterpret_bits(const Source source)$/;"	f	namespace:nlohmann::detail::dtoa_impl
relativeEjectionSpeed	optixMotionGeometry/optixMotionGeometry.cpp	/^    float  relativeEjectionSpeed = 1;  \/\/ relative ejection speed to give the different fumes some variation$/;"	m	class:ExhaustFume	file:
relativePointer	support/GLFW/src/wl_platform.h	/^        struct zwp_relative_pointer_v1*    relativePointer;$/;"	m	struct:_GLFWwindowWayland::__anon18	typeref:struct:_GLFWwindowWayland::__anon18::zwp_relative_pointer_v1
relativePointerListener	support/GLFW/src/wl_window.c	/^static const struct zwp_relative_pointer_v1_listener relativePointerListener = {$/;"	v	typeref:struct:zwp_relative_pointer_v1_listener	file:
relativePointerManager	support/GLFW/src/wl_platform.h	/^    struct zwp_relative_pointer_manager_v1* relativePointerManager;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::zwp_relative_pointer_manager_v1
release	support/GLFW/src/internal.h	/^    int                 release;$/;"	m	struct:_GLFWcontext
release	support/GLFW/src/internal.h	/^    int           release;$/;"	m	struct:_GLFWctxconfig
release	sutil/CuBuffer.h	/^    CUdeviceptr release()$/;"	f	class:CuBuffer
releaseMonitor	support/GLFW/src/win32_window.c	/^static void releaseMonitor(_GLFWwindow* window)$/;"	f	file:
releaseMonitor	support/GLFW/src/x11_window.c	/^static void releaseMonitor(_GLFWwindow* window)$/;"	f	file:
remove	optixMotionGeometry/optixMotionGeometry.cpp	/^    bool   remove                = false;$/;"	m	class:ExhaustFume	file:
render	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    bool render = true;$/;"	m	struct:DisplacedMicromeshState	file:
render	optixHair/Renderers.cpp	/^void Renderer::render() const$/;"	f	class:Renderer
renderAO	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    bool renderAO = true;$/;"	m	struct:DisplacedMicromeshState	file:
renderAO	optixMotionGeometry/optixMotionGeometry.cpp	/^    bool renderAO = true;$/;"	m	struct:MotionGeometryState	file:
renderArea	support/GLFW/deps/vulkan/vulkan.h	/^    VkRect2D               renderArea;$/;"	m	struct:VkRenderPassBeginInfo
renderFile	optixHair/Renderers.cpp	/^void FileRenderer::renderFile( const std::string& fileName ) const$/;"	f	class:FileRenderer
renderFrame	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void renderFrame( sutil::CUDAOutputBuffer<uchar4>& output_buffer, DisplacedMicromeshState& state )$/;"	f
renderFrame	optixHair/optixHair.cpp	/^void renderFrame( HairState* pState )$/;"	f
renderPass	support/GLFW/deps/vulkan/vulkan.h	/^    VkRenderPass                                     renderPass;$/;"	m	struct:VkGraphicsPipelineCreateInfo
renderPass	support/GLFW/deps/vulkan/vulkan.h	/^    VkRenderPass                     renderPass;$/;"	m	struct:VkCommandBufferInheritanceInfo
renderPass	support/GLFW/deps/vulkan/vulkan.h	/^    VkRenderPass                renderPass;$/;"	m	struct:VkFramebufferCreateInfo
renderPass	support/GLFW/deps/vulkan/vulkan.h	/^    VkRenderPass           renderPass;$/;"	m	struct:VkRenderPassBeginInfo
replace	support/tinygltf/json.hpp	/^    replace, \/\/\/< replace invalid UTF-8 sequences with U+FFFD$/;"	m	class:nlohmann::detail::error_handler_t
replace_substring	support/tinygltf/json.hpp	/^    static void replace_substring(std::string& s, const std::string& f,$/;"	f	class:nlohmann::json_pointer
reportErrorMessage	sutil/sutil.cpp	/^void reportErrorMessage( const char* message )$/;"	f	namespace:sutil
requested_pixel_types	support/tinyexr/tinyexr.h	/^  int *requested_pixel_types;  \/\/ Filled initially by$/;"	m	struct:_EXRHeader
required_argument	support/GLFW/deps/getopt.c	/^const int required_argument = 1;$/;"	v
resample	support/tinygltf/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon101
resample_row_1	support/tinygltf/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	support/tinygltf/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	support/tinygltf/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon99
reserve	support/imgui/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); ImGui::MemFree(Data); } Data = new_data; Capacity = new_capacity; }$/;"	f	struct:ImVector
reserve	support/imgui/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer
reserved	support/tinyexr/tinyexr.h	/^  mz_ulong reserved;  \/\/ not used$/;"	m	struct:tinyexr::miniz::mz_stream_s
reset	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    void reset() { mBuffer.clear(); }$/;"	f	class:nanovdb::GridHandle
reset	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& reset($/;"	f	class:nanovdb::Ray
residencyAlignedMipSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    residencyAlignedMipSize;$/;"	m	struct:VkPhysicalDeviceSparseProperties
residencyNonResidentStrict	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    residencyNonResidentStrict;$/;"	m	struct:VkPhysicalDeviceSparseProperties
residencyStandard2DBlockShape	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties
residencyStandard2DMultisampleBlockShape	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DMultisampleBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties
residencyStandard3DBlockShape	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    residencyStandard3DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties
resizable	support/GLFW/src/internal.h	/^    GLFWbool            resizable;$/;"	m	struct:_GLFWwindow
resizable	support/GLFW/src/internal.h	/^    GLFWbool      resizable;$/;"	m	struct:_GLFWwndconfig
resize	support/imgui/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }$/;"	f	struct:ImVector
resize	support/imgui/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }$/;"	f	struct:ImVector
resize	sutil/CUDAOutputBuffer.h	/^void CUDAOutputBuffer<PIXEL_FORMAT>::resize( int32_t width, int32_t height )$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
resize_dirty	optixBoundValues/optixBoundValues.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixCallablePrograms/optixCallablePrograms.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixCutouts/optixCutouts.cpp	/^bool             resize_dirty = false;$/;"	v
resize_dirty	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixDynamicGeometry/optixDynamicGeometry.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixMeshViewer/optixMeshViewer.cpp	/^bool              resize_dirty  = false;$/;"	v
resize_dirty	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixMotionGeometry/optixMotionGeometry.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixMultiGPU/optixMultiGPU.cpp	/^bool              resize_dirty  = false;$/;"	v
resize_dirty	optixNVLink/optixNVLink.cpp	/^bool              resize_dirty  = false;$/;"	v
resize_dirty	optixPathTracer/optixPathTracer.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^bool              resize_dirty  = false;$/;"	v
resize_dirty	optixVolumeViewer/optixVolumeViewer.cpp	/^bool resize_dirty = false;$/;"	v
resize_dirty	optixWhitted/optixWhitted.cpp	/^bool              resize_dirty  = false;$/;"	v
resize_grip_def	support/imgui/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	file:
resourceOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               resourceOffset;$/;"	m	struct:VkSparseMemoryBind
restart_interval	support/tinygltf/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon99
restoreCursorPosX	support/GLFW/src/cocoa_platform.h	/^    double              restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryNS
restoreCursorPosX	support/GLFW/src/win32_platform.h	/^    double              restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryWin32
restoreCursorPosX	support/GLFW/src/x11_platform.h	/^    double          restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryX11
restoreCursorPosY	support/GLFW/src/cocoa_platform.h	/^    double              restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryNS
restoreCursorPosY	support/GLFW/src/win32_platform.h	/^    double              restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryWin32
restoreCursorPosY	support/GLFW/src/x11_platform.h	/^    double          restoreCursorPosX, restoreCursorPosY;$/;"	m	struct:_GLFWlibraryX11
result	cuda/whitted.h	/^    float3 result;$/;"	m	struct:whitted::PayloadOcclusion
result	cuda/whitted.h	/^    float3 result;$/;"	m	struct:whitted::PayloadRadiance
result	optixVolumeViewer/volume.h	/^    float3 result;$/;"	m	struct:PayloadRadiance
result_buffer	optixMultiGPU/optixMultiGPU.h	/^    uchar4*      result_buffer;$/;"	m	struct:Params
result_buffer	optixNVLink/optixNVLink.h	/^    uchar4*      result_buffer;$/;"	m	struct:Params
reverseEndianness	optixVolumeViewer/nanovdb/util/IO.h	/^inline uint64_t reverseEndianness(uint64_t val)$/;"	f	class:nanovdb::io::Codec
reverseLutFromBitmap	support/tinyexr/tinyexr.h	/^static unsigned short reverseLutFromBitmap($/;"	f	namespace:tinyexr
revision	support/GLFW/src/internal.h	/^    int                 major, minor, revision;$/;"	m	struct:_GLFWcontext
rgb	support/tinygltf/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon99
rgbButtons	support/GLFW/deps/mingw/dinput.h	/^	BYTE	rgbButtons[128];$/;"	m	struct:DIJOYSTATE2
rgbButtons	support/GLFW/deps/mingw/dinput.h	/^	BYTE	rgbButtons[32];$/;"	m	struct:DIJOYSTATE
rgbButtons	support/GLFW/deps/mingw/dinput.h	/^  BYTE rgbButtons[4];$/;"	m	struct:DIMOUSESTATE
rgbButtons	support/GLFW/deps/mingw/dinput.h	/^  BYTE rgbButtons[8];$/;"	m	struct:DIMOUSESTATE2
rgdwAxes	support/GLFW/deps/mingw/dinput.h	/^	LPDWORD			rgdwAxes;$/;"	m	struct:DIEFFECT
rgdwAxes	support/GLFW/deps/mingw/dinput.h	/^	LPDWORD			rgdwAxes;$/;"	m	struct:DIEFFECT_DX5
rgdwPOV	support/GLFW/deps/mingw/dinput.h	/^	DWORD	rgdwPOV[4];$/;"	m	struct:DIJOYSTATE
rgdwPOV	support/GLFW/deps/mingw/dinput.h	/^	DWORD	rgdwPOV[4];$/;"	m	struct:DIJOYSTATE2
rglASlider	support/GLFW/deps/mingw/dinput.h	/^	LONG	rglASlider[2];$/;"	m	struct:DIJOYSTATE2
rglDirection	support/GLFW/deps/mingw/dinput.h	/^	LPLONG			rglDirection;$/;"	m	struct:DIEFFECT
rglDirection	support/GLFW/deps/mingw/dinput.h	/^	LPLONG			rglDirection;$/;"	m	struct:DIEFFECT_DX5
rglFSlider	support/GLFW/deps/mingw/dinput.h	/^	LONG	rglFSlider[2];$/;"	m	struct:DIJOYSTATE2
rglForceData	support/GLFW/deps/mingw/dinput.h	/^	LPLONG			rglForceData;$/;"	m	struct:DICUSTOMFORCE
rglSlider	support/GLFW/deps/mingw/dinput.h	/^	LONG	rglSlider[2];$/;"	m	struct:DIJOYSTATE
rglSlider	support/GLFW/deps/mingw/dinput.h	/^	LONG	rglSlider[2];$/;"	m	struct:DIJOYSTATE2
rglVSlider	support/GLFW/deps/mingw/dinput.h	/^	LONG	rglVSlider[2];$/;"	m	struct:DIJOYSTATE2
rgoAction	support/GLFW/deps/mingw/dinput.h	/^	LPDIACTIONA	rgoAction;$/;"	m	struct:_DIACTIONFORMATA
rgoAction	support/GLFW/deps/mingw/dinput.h	/^	LPDIACTIONW	rgoAction;$/;"	m	struct:_DIACTIONFORMATW
rgodf	support/GLFW/deps/mingw/dinput.h	/^    LPDIOBJECTDATAFORMAT	rgodf;$/;"	m	struct:_DIDATAFORMAT
rgptCalloutLine	support/GLFW/deps/mingw/dinput.h	/^	POINT	rgptCalloutLine[5];$/;"	m	struct:_DIDEVICEIMAGEINFOA
rgptCalloutLine	support/GLFW/deps/mingw/dinput.h	/^	POINT	rgptCalloutLine[5];$/;"	m	struct:_DIDEVICEIMAGEINFOW
rleCompress	support/tinyexr/tinyexr.h	/^static int rleCompress(int inLength, const char in[], signed char out[]) {$/;"	f	namespace:tinyexr
rleUncompress	support/tinyexr/tinyexr.h	/^static int rleUncompress(int inLength, int maxLength, const signed char in[],$/;"	f	namespace:tinyexr
rnd	cuda/random.h	/^static __host__ __device__ __inline__ float rnd(unsigned int &prev)$/;"	f
robustBufferAccess	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    robustBufferAccess;$/;"	m	struct:VkPhysicalDeviceFeatures
robustness	support/GLFW/src/internal.h	/^    int                 robustness;$/;"	m	struct:_GLFWcontext
robustness	support/GLFW/src/internal.h	/^    int           robustness;$/;"	m	struct:_GLFWctxconfig
roiData	optixOpticalFlow/nvOpticalFlowCommon.h	/^    NV_OF_ROI_RECT*                 roiData;                         \/**< [in]: Pointer to the NV_OF_ROI_RECTs data.  Size of this buffer should be atleast numROIs * sizeof(NV_OF_ROI_RECT). *\/$/;"	m	struct:_NV_OF_EXECUTE_INPUT_PARAMS
rollLeft	sutil/Trackball.cpp	/^void Trackball::rollLeft(float speed)$/;"	f	class:sutil::Trackball
rollRight	sutil/Trackball.cpp	/^void Trackball::rollRight(float speed)$/;"	f	class:sutil::Trackball
root	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ RootT& root() { return *reinterpret_cast<RootT*>(reinterpret_cast<uint8_t*>(this) + DataType::mBytes[RootT::LEVEL]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
root	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const RootT& root() const { return *mRoot; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::ReadAccessor
root	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const RootT& root() const { return *mRoot; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::ReadAccessor
root	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const RootT& root() const { return *reinterpret_cast<const RootT*>(reinterpret_cast<const uint8_t*>(this) + DataType::mBytes[RootT::LEVEL]); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tree
root	support/GLFW/src/x11_platform.h	/^    Window          root;$/;"	m	struct:_GLFWlibraryX11
root	support/tinygltf/json.hpp	/^    BasicJsonType& root;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser
root	support/tinygltf/json.hpp	/^    BasicJsonType& root;$/;"	m	class:nlohmann::detail::json_sax_dom_parser
rot_seed	cuda/random.h	/^static __host__ __device__ __inline__ unsigned int rot_seed( unsigned int seed, unsigned int frame )$/;"	f
rotate	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<4,4> Matrix<4,4>::rotate(const float radians, const float3& axis)$/;"	f	class:sutil::Matrix
rotation	support/tinygltf/tiny_gltf.h	/^  std::vector<double> rotation;     \/\/ length must be 0 or 4$/;"	m	class:tinygltf::Node
rotation	sutil/Quaternion.h	/^inline void Quaternion::rotation( float& angle, float3& axis ) const$/;"	f	class:sutil::Quaternion
rotation	sutil/Quaternion.h	/^inline void Quaternion::rotation($/;"	f	class:sutil::Quaternion
rotationMatrix	sutil/Quaternion.h	/^inline Matrix4x4 Quaternion::rotationMatrix() const$/;"	f	class:sutil::Quaternion
rotationSpeed	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                      rotationSpeed = 0.1f;$/;"	m	struct:DeformSphereAnimation	file:
rotationSpeed	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   rotationSpeed = 0.f;  \/\/ rotation speed of plane at time of ejection$/;"	m	class:ExhaustFume	file:
roughness	cuda/MaterialData.h	/^        float                roughness;$/;"	m	struct:MaterialData::Pbr
roughness	optixMotionGeometry/tiny_obj_loader.h	/^  real_t roughness;            \/\/ [0, 1] default 0$/;"	m	struct:tinyobj::material_t
roughnessFactor	support/tinygltf/tiny_gltf.h	/^  double roughnessFactor;  \/\/ default 1$/;"	m	struct:tinygltf::PbrMetallicRoughness
roughness_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string roughness_texname;  \/\/ map_Pr$/;"	m	struct:tinyobj::material_t
roughness_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t roughness_texopt;$/;"	m	struct:tinyobj::material_t
round	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Coord round() const { return Coord(Floor(mVec[0] + 0.5), Floor(mVec[1] + 0.5), Floor(mVec[2] + 0.5)); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Vec3
roundUp	sutil/CuBuffer.h	/^    static size_t roundUp( size_t i, size_t alignment )$/;"	f	class:CuBuffer
roundUp	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE IntegerType roundUp(IntegerType x, IntegerType y)$/;"	f
roundUp64	optixMotionGeometry/motionHelper.hpp	/^    static size_t roundUp64( size_t i ) { return ( ( i + 64 - 1 ) \/ 64 ) * 64; }$/;"	f	class:__anon4::MotionTransformArrayBase
rowPitch	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    rowPitch;$/;"	m	struct:VkSubresourceLayout
run	optixHair/Renderers.cpp	/^void WindowRenderer::run() const$/;"	f	class:WindowRenderer
s	optixNVLink/optixNVLink.cpp	/^    float s, t;$/;"	m	struct:TexCoord	file:
s	support/tinyexr/tinyexr.h	/^  } s;$/;"	m	union:tinyexr::FP16	typeref:struct:tinyexr::FP16::__anon62
s	support/tinyexr/tinyexr.h	/^  } s;$/;"	m	union:tinyexr::FP32	typeref:struct:tinyexr::FP32::__anon61
s	support/tinygltf/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon105
s	support/tinygltf/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon99
s0	support/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon66
s1	support/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon66
sRGB	support/GLFW/src/internal.h	/^    GLFWbool    sRGB;$/;"	m	struct:_GLFWfbconfig
sThumbLX	support/GLFW/deps/mingw/xinput.h	/^    SHORT sThumbLX;$/;"	m	struct:_XINPUT_GAMEPAD
sThumbLY	support/GLFW/deps/mingw/xinput.h	/^    SHORT sThumbLY;$/;"	m	struct:_XINPUT_GAMEPAD
sThumbRX	support/GLFW/deps/mingw/xinput.h	/^    SHORT sThumbRX;$/;"	m	struct:_XINPUT_GAMEPAD
sThumbRY	support/GLFW/deps/mingw/xinput.h	/^    SHORT sThumbRY;$/;"	m	struct:_XINPUT_GAMEPAD
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                                  sType;$/;"	m	struct:VkGraphicsPipelineCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                               sType;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkBindSparseInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineTessellationStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkCommandBufferBeginInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                        sType;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                       sType;$/;"	m	struct:VkPipelineViewportStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                      sType;$/;"	m	struct:VkPipelineDynamicStateCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                     sType;$/;"	m	struct:VkPipelineShaderStageCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkComputePipelineCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkDeviceCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkRenderPassCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkCommandBufferInheritanceInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkQueryPoolCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkSwapchainCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkWriteDescriptorSet
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDescriptorSetAllocateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkPipelineLayoutCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDescriptorPoolCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDisplayModeCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkSubmitInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkPipelineCacheCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType              sType;$/;"	m	struct:VkShaderModuleCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkCommandPoolCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkDeviceQueueCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkFramebufferCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkInstanceCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkBufferViewCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageMemoryBarrier
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageViewCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType           sType;$/;"	m	struct:VkSemaphoreCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkImageCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkPresentInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkCommandBufferAllocateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkSamplerCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkBufferCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkRenderPassBeginInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkEventCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkFenceCreateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkApplicationInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkBufferMemoryBarrier
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkCopyDescriptorSet
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDisplayPresentInfoKHR
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMappedMemoryRange
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryAllocateInfo
sType	support/GLFW/deps/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryBarrier
sType	support/GLFW/src/mir_platform.h	/^    VkStructureType             sType;$/;"	m	struct:VkMirSurfaceCreateInfoKHR
sType	support/GLFW/src/win32_platform.h	/^    VkStructureType                 sType;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR
sType	support/GLFW/src/wl_platform.h	/^    VkStructureType                 sType;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR
sType	support/GLFW/src/x11_platform.h	/^    VkStructureType             sType;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
sType	support/GLFW/src/x11_platform.h	/^    VkStructureType             sType;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
s_context	optixCompileWithTasks/optixCompileWithTasks.cpp	/^OptixDeviceContext          s_context                = 0;$/;"	v
s_defaultLogLevel	optixCompileWithTasks/optixCompileWithTasks.cpp	/^unsigned int                s_defaultLogLevel        = 4;$/;"	v
s_frag_source	sutil/GLDisplay.cpp	/^const std::string GLDisplay::s_frag_source = R"($/;"	m	class:sutil::GLDisplay	file:
s_frag_source	sutil/GLDisplay.h	/^    static const std::string s_frag_source;$/;"	m	class:sutil::GLDisplay
s_moduleCompileOptions	optixCompileWithTasks/optixCompileWithTasks.cpp	/^OptixModuleCompileOptions   s_moduleCompileOptions   = {};$/;"	v
s_options	optixCompileWithTasks/optixCompileWithTasks.cpp	/^OptixDeviceContextOptions   s_options                = {};$/;"	v
s_pipelineCompileOptions	optixCompileWithTasks/optixCompileWithTasks.cpp	/^OptixPipelineCompileOptions s_pipelineCompileOptions = {};$/;"	v
s_tdefl_large_dist_extra	support/tinyexr/tinyexr.h	/^static const mz_uint8 s_tdefl_large_dist_extra[128] = {$/;"	v
s_tdefl_large_dist_sym	support/tinyexr/tinyexr.h	/^static const mz_uint8 s_tdefl_large_dist_sym[128] = {$/;"	v
s_tdefl_len_extra	support/tinyexr/tinyexr.h	/^static const mz_uint8 s_tdefl_len_extra[256] = {$/;"	v
s_tdefl_len_sym	support/tinyexr/tinyexr.h	/^static const mz_uint16 s_tdefl_len_sym[256] = {$/;"	v
s_tdefl_num_probes	support/tinyexr/tinyexr.h	/^static const mz_uint s_tdefl_num_probes[11] = {0,   1,   6,   32,  16,  32,$/;"	v
s_tdefl_packed_code_size_syms_swizzle	support/tinyexr/tinyexr.h	/^static mz_uint8 s_tdefl_packed_code_size_syms_swizzle[] = {$/;"	v
s_tdefl_small_dist_extra	support/tinyexr/tinyexr.h	/^static const mz_uint8 s_tdefl_small_dist_extra[512] = {$/;"	v
s_tdefl_small_dist_sym	support/tinyexr/tinyexr.h	/^static const mz_uint8 s_tdefl_small_dist_sym[512] = {$/;"	v
s_vert_source	sutil/GLDisplay.cpp	/^const std::string GLDisplay::s_vert_source = R"($/;"	m	class:sutil::GLDisplay	file:
s_vert_source	sutil/GLDisplay.h	/^    static const std::string s_vert_source;$/;"	m	class:sutil::GLDisplay
safeGetline	optixMotionGeometry/tiny_obj_loader.h	/^static std::istream &safeGetline(std::istream &is, std::string &t) {$/;"	f	namespace:tinyobj
sampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    sampleCounts;$/;"	m	struct:VkImageFormatProperties
sampleDataFilePath	sutil/sutil.cpp	/^const char* sampleDataFilePath( const char* relativePath )$/;"	f	namespace:sutil
sampleFilePath	sutil/sutil.cpp	/^const char* sampleFilePath( const char* relativeSubDir, const char* relativePath )$/;"	f	namespace:sutil
sampleInputFilePath	sutil/sutil.cpp	/^static std::string sampleInputFilePath( const char* sampleName, const char* fileName )$/;"	f	namespace:sutil
sampleRateShading	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sampleRateShading;$/;"	m	struct:VkPhysicalDeviceFeatures
sampleShadingEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                 sampleShadingEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo
sampleTexture	cuda/LocalShading.h	/^__device__ __forceinline__ T sampleTexture( MaterialData::Texture tex, const LocalGeometry &geom )$/;"	f
sample_accum_buffer	optixMultiGPU/optixMultiGPU.h	/^    float4*      sample_accum_buffer;$/;"	m	struct:Params
sample_accum_buffer	optixNVLink/optixNVLink.h	/^    float4*      sample_accum_buffer;$/;"	m	struct:Params
sample_index_buffer	optixMultiGPU/optixMultiGPU.h	/^    int2*        sample_index_buffer;$/;"	m	struct:Params
sample_index_buffer	optixNVLink/optixNVLink.h	/^    int2*        sample_index_buffer;$/;"	m	struct:Params
sampledImageColorSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
sampledImageDepthSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
sampledImageIntegerSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageIntegerSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
sampledImageStencilSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
sampler	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampler        sampler;$/;"	m	struct:VkDescriptorImageInfo
sampler	support/tinygltf/tiny_gltf.h	/^  int sampler;              \/\/ required$/;"	m	struct:tinygltf::AnimationChannel
sampler	support/tinygltf/tiny_gltf.h	/^  int sampler;$/;"	m	struct:tinygltf::Texture
samplerAnisotropy	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    samplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceFeatures
samplers	support/tinygltf/tiny_gltf.h	/^  std::vector<AnimationSampler> samplers;$/;"	m	struct:tinygltf::Animation
samplers	support/tinygltf/tiny_gltf.h	/^  std::vector<Sampler> samplers;$/;"	m	class:tinygltf::Model
samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlagBits           samples;$/;"	m	struct:VkAttachmentDescription
samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlagBits    samples;$/;"	m	struct:VkImageCreateInfo
samples	support/GLFW/src/internal.h	/^    int         samples;$/;"	m	struct:_GLFWfbconfig
samples_per_launch	optixBoundValues/optixBoundValues.cpp	/^int32_t samples_per_launch = 16;$/;"	v
samples_per_launch	optixBoundValues/optixBoundValues.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixCutouts/optixCutouts.cpp	/^int32_t          samples_per_launch = 16;$/;"	v
samples_per_launch	optixCutouts/optixCutouts.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixMeshViewer/optixMeshViewer.cpp	/^int32_t           samples_per_launch = 16;$/;"	v
samples_per_launch	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^int32_t samples_per_launch = 16;$/;"	v
samples_per_launch	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixMultiGPU/optixMultiGPU.cpp	/^int32_t           samples_per_launch = 16;$/;"	v
samples_per_launch	optixMultiGPU/optixMultiGPU.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixNVLink/optixNVLink.cpp	/^int32_t           samples_per_launch = 8;$/;"	v
samples_per_launch	optixNVLink/optixNVLink.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixPathTracer/optixPathTracer.cpp	/^int32_t samples_per_launch = 16;$/;"	v
samples_per_launch	optixPathTracer/optixPathTracer.h	/^    unsigned int samples_per_launch;$/;"	m	struct:Params
samples_per_launch	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^int32_t           samples_per_launch = 16;$/;"	v
saveImage	sutil/sutil.cpp	/^void saveImage( const char* fname, const ImageBuffer& image, bool disable_srgb_conversion )$/;"	f	namespace:sutil
savePPM	sutil/sutil.cpp	/^static void savePPM( const unsigned char* Pix, const char* fname, int wid, int hgt, int chan )$/;"	f	namespace:sutil
saver	support/GLFW/src/x11_platform.h	/^    } saver;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon22
sax	support/tinygltf/json.hpp	/^    json_sax_t* sax = nullptr;$/;"	m	class:nlohmann::detail::binary_reader
sax_parse	support/tinygltf/json.hpp	/^    bool sax_parse(SAX* sax, const bool strict = true)$/;"	f	class:nlohmann::detail::parser
sax_parse	support/tinygltf/json.hpp	/^    bool sax_parse(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader
sax_parse	support/tinygltf/json.hpp	/^    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax)$/;"	f	class:nlohmann::basic_json
sax_parse	support/tinygltf/json.hpp	/^    static bool sax_parse(detail::input_adapter&& i, SAX* sax,$/;"	f	class:nlohmann::basic_json
sax_parse_internal	support/tinygltf/json.hpp	/^    bool sax_parse_internal(SAX* sax)$/;"	f	class:nlohmann::detail::parser
sb	support/tinygltf/json.hpp	/^    std::streambuf& sb;$/;"	m	class:nlohmann::detail::input_stream_adapter
sbt	optixBoundValues/optixBoundValues.cpp	/^    OptixShaderBindingTable        sbt                      = {};$/;"	m	struct:PathTracerState	file:
sbt	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixShaderBindingTable     sbt                      = {};$/;"	m	struct:CallableProgramsState	file:
sbt	optixConsole/optixConsole.cpp	/^    OptixShaderBindingTable sbt = {};$/;"	m	struct:OptixConsoleState	file:
sbt	optixCutouts/optixCutouts.cpp	/^    OptixShaderBindingTable sbt = {};$/;"	m	struct:CutoutsState	file:
sbt	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    OptixShaderBindingTable  sbt = {};$/;"	m	struct:DisplacedMicromeshState	file:
sbt	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixShaderBindingTable        sbt = {};$/;"	m	struct:DynamicGeometryState	file:
sbt	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    OptixShaderBindingTable        sbt                      = {};$/;"	m	struct:SampleState	file:
sbt	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixShaderBindingTable        sbt                      = {};$/;"	m	struct:PathTracerState	file:
sbt	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixShaderBindingTable        sbt = {};$/;"	m	struct:MotionGeometryState	file:
sbt	optixMultiGPU/optixMultiGPU.cpp	/^    OptixShaderBindingTable      sbt                      = {};$/;"	m	struct:PathTracerState	file:
sbt	optixNVLink/optixNVLink.cpp	/^    OptixShaderBindingTable      sbt                      = {};$/;"	m	struct:PerDeviceSampleState	file:
sbt	optixPathTracer/optixPathTracer.cpp	/^    OptixShaderBindingTable        sbt                      = {};$/;"	m	struct:PathTracerState	file:
sbt	optixRaycasting/optixRaycasting.cpp	/^    OptixShaderBindingTable     sbt                      = {};$/;"	m	struct:RaycastingState	file:
sbt	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixShaderBindingTable      sbt                            = {};$/;"	m	struct:SimpleMotionBlurState	file:
sbt	optixVolumeViewer/optixVolumeViewer.cpp	/^OptixShaderBindingTable sbt            = {};$/;"	v
sbt	optixWhitted/optixWhitted.cpp	/^    OptixShaderBindingTable     sbt                       = {};$/;"	m	struct:WhittedState	file:
sbt	sutil/Scene.h	/^    SUTILAPI const OptixShaderBindingTable*                 sbt()const                { return &m_sbt;       }$/;"	f	class:sutil::Scene
sbtHitRecords	optixHair/Head.cpp	/^std::vector<HitRecord> Head::sbtHitRecords( const ProgramGroups& programs, size_t rayTypes ) const$/;"	f	class:Head
sbtOffsets	optixDynamicMaterials/optixDynamicMaterials.cpp	/^unsigned int sbtOffsets[] = { 0, 1, 3 };$/;"	v
scalar	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static ElementType scalar(const T& v) { return v.length(); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
scalar	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static T scalar(const T& s) { return s; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::TensorTraits
scale	optixMotionGeometry/tiny_obj_loader.h	/^  real_t scale[3];          \/\/ -s u [v [w]] (default 1 1 1)$/;"	m	struct:tinyobj::texture_option_t
scale	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ void scale(RealT s)$/;"	f	struct:nanovdb::Ray::TimeSpan
scale	support/GLFW/src/wl_monitor.c	/^static void scale(void* data,$/;"	f	file:
scale	support/GLFW/src/wl_platform.h	/^    int                         scale;$/;"	m	struct:_GLFWmonitorWayland
scale	support/GLFW/src/wl_platform.h	/^    int                         scale;$/;"	m	struct:_GLFWwindowWayland
scale	support/tinygltf/tiny_gltf.h	/^  double scale;    \/\/ scaledNormal = normalize((<sampled normal texture value>$/;"	m	struct:tinygltf::NormalTextureInfo
scale	support/tinygltf/tiny_gltf.h	/^  std::vector<double> scale;        \/\/ length must be 0 or 3$/;"	m	class:tinygltf::Node
scale	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<4,4> Matrix<4,4>::scale(const float3& vec)$/;"	f	class:sutil::Matrix
scaleTimes	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& scaleTimes(RealT scale)$/;"	f	class:nanovdb::Ray
scan	support/tinygltf/json.hpp	/^    token_type scan()$/;"	f	class:nlohmann::detail::lexer
scan_literal	support/tinygltf/json.hpp	/^    token_type scan_literal(const char* literal_text, const std::size_t length,$/;"	f	class:nlohmann::detail::lexer
scan_n	support/tinygltf/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon99
scan_number	support/tinygltf/json.hpp	/^    token_type scan_number()  \/\/ lgtm [cpp\/use-of-goto]$/;"	f	class:nlohmann::detail::lexer
scan_string	support/tinygltf/json.hpp	/^    token_type scan_string()$/;"	f	class:nlohmann::detail::lexer
scene	optixRaycasting/optixRaycasting.cpp	/^    sutil::Scene                scene                    = {};$/;"	m	struct:RaycastingState	file:
scene_epsilon	cuda/whitted.h	/^    float                    scene_epsilon;$/;"	m	struct:whitted::LaunchParams
scenes	support/tinygltf/tiny_gltf.h	/^  std::vector<Scene> scenes;$/;"	m	class:tinygltf::Model
schlick	cuda/whitted_cuda.h	/^__device__ __forceinline__ float3 schlick( const float3 spec_color, const float V_dot_H )$/;"	f	namespace:whitted
scissorCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                              scissorCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo
screen	support/GLFW/src/x11_platform.h	/^    int             screen;$/;"	m	struct:_GLFWlibraryX11
screen_window_center	support/tinyexr/tinyexr.h	/^  float screen_window_center[2];$/;"	m	struct:_EXRHeader
screen_window_center	support/tinyexr/tinyexr.h	/^  float screen_window_center[2];$/;"	m	struct:tinyexr::HeaderInfo
screen_window_width	support/tinyexr/tinyexr.h	/^  float screen_window_width;$/;"	m	struct:_EXRHeader
screen_window_width	support/tinyexr/tinyexr.h	/^  float screen_window_width;$/;"	m	struct:tinyexr::HeaderInfo
scroll	support/GLFW/src/internal.h	/^        GLFWscrollfun           scroll;$/;"	m	struct:_GLFWwindow::__anon8
scrollCallback	optixBoundValues/optixBoundValues.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixCutouts/optixCutouts.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixHair/Renderers.cpp	/^void WindowRenderer::scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	class:WindowRenderer
scrollCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixPathTracer/optixPathTracer.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
scrollCallback	optixWhitted/optixWhitted.cpp	/^static void scrollCallback( GLFWwindow* window, double xscroll, double yscroll )$/;"	f	file:
seat	support/GLFW/src/wl_platform.h	/^    struct wl_seat*             seat;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_seat
seatHandleCapabilities	support/GLFW/src/wl_init.c	/^static void seatHandleCapabilities(void* data,$/;"	f	file:
seatListener	support/GLFW/src/wl_init.c	/^static const struct wl_seat_listener seatListener = {$/;"	v	typeref:struct:wl_seat_listener	file:
seed	optixBoundValues/optixBoundValues.h	/^    unsigned int seed;$/;"	m	struct:RadiancePRD
seed	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int seed;$/;"	m	struct:RadiancePRD
seed	optixPathTracer/optixPathTracer.h	/^    unsigned int seed;$/;"	m	struct:RadiancePRD
segments	optixHair/Hair.cpp	/^std::vector<int> Hair::segments() const$/;"	f	class:Hair
select_end	support/imgui/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon84
select_start	support/imgui/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon84
sendCode	support/tinyexr/tinyexr.h	/^inline void sendCode(long long sCode, int runCount, long long runCode,$/;"	f	namespace:tinyexr
sendEventToWM	support/GLFW/src/x11_window.c	/^static void sendEventToWM(_GLFWwindow* window, Atom type,$/;"	f	file:
serialize_default_values_	support/tinygltf/tiny_gltf.h	/^  bool serialize_default_values_ = false;  \/\/\/< Serialize default values?$/;"	m	class:tinygltf::TinyGLTF
serializer	support/tinygltf/json.hpp	/^    serializer(output_adapter_t<char> s, const char ichar,$/;"	f	class:nlohmann::detail::serializer
serializer	support/tinygltf/json.hpp	/^class serializer$/;"	c	namespace:nlohmann::detail
set	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void set(bool on)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
set	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void set(uint32_t n, bool On) { On ? this->setOn(n) : this->setOff(n); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
set	optixVolumeViewer/nanovdb/NanoVDB.h	/^void Map::set(const Mat4T& mat, const Mat4T& invMat, double taper)$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Map
set	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ void set(RealT _t0, RealT _t1)$/;"	f	struct:nanovdb::Ray::TimeSpan
set	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::set( const float3& min, const float3& max )$/;"	f	class:sutil::Aabb
set	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::set( const float3& v0, const float3& v1, const float3& v2 )$/;"	f	class:sutil::Aabb
setAspectRatio	sutil/Camera.h	/^    SUTILAPI void setAspectRatio(const float& val) { m_aspectRatio = val; }$/;"	f	class:sutil::Camera
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(float2& v, int i, float x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(float3& v, int i, float x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(float4& v, int i, float x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(int1& v, int i, int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(int2& v, int i, int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(int3& v, int i, int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(int4& v, int i, int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(longlong1& v, int i, long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(longlong2& v, int i, long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(longlong3& v, int i, int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(longlong4& v, int i, long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(uint1& v, int i, unsigned int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(uint2& v, int i, unsigned int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(uint3& v, int i, unsigned int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(uint4& v, int i, unsigned int x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(ulonglong1& v, int i, unsigned long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(ulonglong2& v, int i, unsigned long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(ulonglong3& v, int i, unsigned long long x)$/;"	f
setByIndex	sutil/vec_math.h	/^SUTIL_INLINE SUTIL_HOSTDEVICE void setByIndex(ulonglong4& v, int i, unsigned long long x)$/;"	f
setCamera	sutil/Trackball.h	/^    SUTILAPI inline void setCamera(Camera* camera) { m_camera = camera; reinitOrientationFromCamera(); }$/;"	f	class:sutil::Trackball
setCatromCurveArray	cuda/GeometryData.h	/^    void setCatromCurveArray( const Curves& c )$/;"	f	struct:GeometryData
setCol	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Matrix<M,N>::setCol( unsigned int n, const typename Matrix<M,N>::floatM &c )$/;"	f	class:sutil::Matrix
setCubicCurveArray	cuda/GeometryData.h	/^    void setCubicCurveArray( const Curves& c )$/;"	f	struct:GeometryData
setDevice	sutil/CUDAOutputBuffer.h	/^    void setDevice( int32_t device_idx ) { m_device_idx = device_idx; }$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
setDir	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& setDir(const Vec3Type& dir)$/;"	f	class:nanovdb::Ray
setDirection	sutil/Camera.h	/^    SUTILAPI void setDirection(const float3& dir) { m_lookat = m_eye + length(m_lookat - m_eye) * dir; }$/;"	f	class:sutil::Camera
setDisplacement	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    inline void setDisplacement( unsigned vertexIdx, uint16_t displacement )$/;"	f	struct:DisplacementBlock64MicroTris64B
setEGLattrib	support/GLFW/src/egl_context.c	423;"	d	file:
setEGLattrib	support/GLFW/src/egl_context.c	664;"	d	file:
setEye	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& setEye(const Vec3Type& eye)$/;"	f	class:nanovdb::Ray
setEye	sutil/Camera.h	/^    SUTILAPI void setEye(const float3& val) { m_eye = val; }$/;"	f	class:sutil::Camera
setFovY	sutil/Camera.h	/^    SUTILAPI void setFovY(const float& val) { m_fovY = val; }$/;"	f	class:sutil::Camera
setGLXattrib	support/GLFW/src/glx_context.c	420;"	d	file:
setGLXattrib	support/GLFW/src/glx_context.c	612;"	d	file:
setGimbalLock	sutil/Trackball.h	/^    SUTILAPI void setGimbalLock(bool val) { m_gimbalLock = val; }$/;"	f	class:sutil::Trackball
setLayoutCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                        setLayoutCount;$/;"	m	struct:VkPipelineLayoutCreateInfo
setLinearCurveArray	cuda/GeometryData.h	/^    void setLinearCurveArray( const Curves& c )$/;"	f	struct:GeometryData
setLookat	sutil/Camera.h	/^    SUTILAPI void setLookat(const float3& val) { m_lookat = val; }$/;"	f	class:sutil::Camera
setMaxTime	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& setMaxTime(RealT t1)$/;"	f	class:nanovdb::Ray
setMinTime	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& setMinTime(RealT t0)$/;"	f	class:nanovdb::Ray
setMoveSpeed	sutil/Trackball.h	/^    SUTILAPI void setMoveSpeed(const float& val) { m_moveSpeed = val; }$/;"	f	class:sutil::Trackball
setNumGPUs	sutil/WorkDistribution.h	/^    SUTIL_INLINE SUTIL_HOSTDEVICE void setNumGPUs( int32_t num_gpus )$/;"	f	class:StaticWorkDistribution
setOff	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void setOff()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
setOff	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void setOff(uint32_t n) { mWords[n >> 6] &= ~(uint64_t(1) << (n & 63)); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
setOn	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void setOn(uint32_t n) { mWords[n >> 6] |= uint64_t(1) << (n & 63); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
setOpaqueRegion	support/GLFW/src/wl_window.c	/^static void setOpaqueRegion(_GLFWwindow* window)$/;"	f	file:
setParallelogram	cuda/GeometryData.h	/^    void setParallelogram( const Parallelogram& p )$/;"	f	struct:GeometryData
setPayloadOcclusion	cuda/whitted_cuda.h	/^__forceinline__ __device__ void setPayloadOcclusion( float attenuation )$/;"	f	namespace:whitted
setPayloadOcclusionCommit	cuda/whitted_cuda.h	/^__forceinline__ __device__ void setPayloadOcclusionCommit()$/;"	f	namespace:whitted
setPayloadResult	cuda/whitted_cuda.h	/^__forceinline__ __device__ void setPayloadResult( float3 p )$/;"	f	namespace:whitted
setQuadraticCurveArray	cuda/GeometryData.h	/^    void setQuadraticCurveArray( const Curves& c )$/;"	f	struct:GeometryData
setRadiusMode	optixHair/Hair.cpp	/^void Hair::setRadiusMode( Radius radiusMode )$/;"	f	class:Hair
setRasterSize	sutil/WorkDistribution.h	/^    SUTIL_INLINE SUTIL_HOSTDEVICE void setRasterSize( int width, int height )$/;"	f	class:StaticWorkDistribution
setReferenceFrame	sutil/Trackball.cpp	/^void Trackball::setReferenceFrame(const float3& u, const float3& v, const float3& w)$/;"	f	class:sutil::Trackball
setRow	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Matrix<M,N>::setRow( unsigned int m, const typename Matrix<M,N>::floatN &r )$/;"	f	class:sutil::Matrix
setShadeMode	optixHair/Hair.h	/^    void  setShadeMode( Shade shadeMode ) { m_shadeMode = shadeMode; };$/;"	f	class:Hair
setSphere	cuda/GeometryData.h	/^    void setSphere( const Sphere& s )$/;"	f	struct:GeometryData
setSphereShell	cuda/GeometryData.h	/^    void setSphereShell( const SphereShell& s )$/;"	f	struct:GeometryData
setSplineMode	optixHair/Hair.h	/^    void       setSplineMode( SplineMode splineMode ) { m_splineMode = splineMode; };$/;"	f	class:Hair
setStream	sutil/CUDAOutputBuffer.h	/^    void setStream( CUstream stream    ) { m_stream     = stream;     }$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
setTimes	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray& setTimes($/;"	f	class:nanovdb::Ray
setTriangleMesh	cuda/GeometryData.h	/^    void setTriangleMesh( const TriangleMesh& t )$/;"	f	struct:GeometryData
setUp	sutil/Camera.h	/^    SUTILAPI void setUp(const float3& val) { m_up = val; }$/;"	f	class:sutil::Camera
setValue	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void setValue(const CoordT& ijk, const ValueType& v) { DataType::setValue(CoordToOffset(ijk), v); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
setValueOnly	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void setValueOnly(const CoordT& ijk, const ValueType& v) { DataType::setValueOnly(CoordToOffset(ijk), v); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
setViewMode	sutil/Trackball.h	/^    SUTILAPI void setViewMode(ViewMode val) { m_viewMode = val; }$/;"	f	class:sutil::Trackball
setW	sutil/Quaternion.h	/^    void setW(float _w)       { q[0] = _w; }$/;"	f	class:sutil::Quaternion
setWGLattrib	support/GLFW/src/wgl_context.c	461;"	d	file:
setWGLattrib	support/GLFW/src/wgl_context.c	698;"	d	file:
setX	sutil/Quaternion.h	/^    void setX(float _x)       { q[1] = _x; }$/;"	f	class:sutil::Quaternion
setY	sutil/Quaternion.h	/^    void setY(float _y)       { q[2] = _y; }$/;"	f	class:sutil::Quaternion
setZ	sutil/Quaternion.h	/^    void setZ(float _z)       { q[3] = _z; }$/;"	f	class:sutil::Quaternion
shadeHits	optixRaycasting/optixRaycasting.cpp	/^void shadeHits( RaycastingState& state, const std::string& outfile )$/;"	f
shadeMode	optixHair/Hair.h	/^    Shade shadeMode() const { return m_shadeMode; };$/;"	f	class:Hair
shaderClipDistance	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderClipDistance;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderCullDistance	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderCullDistance;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderFloat64	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderFloat64;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderImageGatherExtended	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderImageGatherExtended;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderInt16	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderInt16;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderInt64	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderInt64;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderResourceMinLod	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderResourceMinLod;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderResourceResidency	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderResourceResidency;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderSampledImageArrayDynamicIndexing	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderSampledImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageBufferArrayDynamicIndexing	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageImageArrayDynamicIndexing	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageImageExtendedFormats	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageExtendedFormats;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageImageMultisample	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageMultisample;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageImageReadWithoutFormat	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageReadWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderStorageImageWriteWithoutFormat	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageWriteWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderTessellationAndGeometryPointSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderTessellationAndGeometryPointSize;$/;"	m	struct:VkPhysicalDeviceFeatures
shaderUniformBufferArrayDynamicIndexing	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    shaderUniformBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures
shading_changed	optixCallablePrograms/optixCallablePrograms.cpp	/^bool         shading_changed = false;$/;"	v
shading_module	optixCallablePrograms/optixCallablePrograms.cpp	/^    OptixModule                 shading_module           = 0;$/;"	m	struct:CallableProgramsState	file:
shading_module	optixConsole/optixConsole.cpp	/^    OptixModule shading_module  = 0;$/;"	m	struct:OptixConsoleState	file:
shading_module	optixWhitted/optixWhitted.cpp	/^    OptixModule                 shading_module            = 0;$/;"	m	struct:WhittedState	file:
shadow_attenuation	cuda/MaterialData.h	/^        float3 shadow_attenuation;$/;"	m	struct:MaterialData::Glass
shape_t	optixMotionGeometry/tiny_obj_loader.h	/^struct shape_t {$/;"	s	namespace:tinyobj
shapes_	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<shape_t> shapes_;$/;"	m	class:tinyobj::ObjReader
share	support/GLFW/src/internal.h	/^    _GLFWwindow*  share;$/;"	m	struct:_GLFWctxconfig
sharingMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkSharingMode            sharingMode;$/;"	m	struct:VkImageCreateInfo
sharingMode	support/GLFW/deps/vulkan/vulkan.h	/^    VkSharingMode          sharingMode;$/;"	m	struct:VkBufferCreateInfo
sharpness	optixMotionGeometry/tiny_obj_loader.h	/^  real_t sharpness;         \/\/ -boost (default 1.0?)$/;"	m	struct:tinyobj::texture_option_t
shcore	support/GLFW/src/win32_platform.h	/^    } shcore;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon17
sheen	optixMotionGeometry/tiny_obj_loader.h	/^  real_t sheen;                \/\/ [0, 1] default 0$/;"	m	struct:tinyobj::material_t
sheen_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string sheen_texname;      \/\/ map_Ps$/;"	m	struct:tinyobj::material_t
sheen_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t sheen_texopt;$/;"	m	struct:tinyobj::material_t
shell	support/GLFW/src/wl_platform.h	/^    struct wl_shell*            shell;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_shell
shellSurfaceListener	support/GLFW/src/wl_window.c	/^static const struct wl_shell_surface_listener shellSurfaceListener = {$/;"	v	typeref:struct:wl_shell_surface_listener	file:
shell_surface	support/GLFW/src/wl_platform.h	/^    struct wl_shell_surface*    shell_surface;$/;"	m	struct:_GLFWwindowWayland	typeref:struct:_GLFWwindowWayland::wl_shell_surface
shift_mask	support/GLFW/src/wl_platform.h	/^        xkb_mod_mask_t          shift_mask;$/;"	m	struct:_GLFWlibraryWayland::__anon19
shininess	optixMotionGeometry/tiny_obj_loader.h	/^  real_t shininess;$/;"	m	struct:tinyobj::material_t
shm	support/GLFW/src/wl_platform.h	/^    struct wl_shm*              shm;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::wl_shm
shutdownPeerAccess	optixNVLink/optixNVLink.cpp	/^void shutdownPeerAccess( std::vector<PerDeviceSampleState>& pd_states )$/;"	f
sign	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ int sign(int i) const { return mSign[i]; }$/;"	f	class:nanovdb::Ray
signalSemaphoreCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    signalSemaphoreCount;$/;"	m	struct:VkBindSparseInfo
signalSemaphoreCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                       signalSemaphoreCount;$/;"	m	struct:VkSubmitInfo
signedDistance	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::signedDistance( const float3& x ) const$/;"	f	class:sutil::Aabb
single_line	support/imgui/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon84
size	optixHair/ProgramGroups.cpp	/^unsigned int ProgramGroups::size() const$/;"	f	class:ProgramGroups
size	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    uint64_t size() const { return mSize; }$/;"	f	class:nanovdb::HostBuffer
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize               size;$/;"	m	struct:VkSparseMemoryBind
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize           size;$/;"	m	struct:VkBufferCreateInfo
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize         size;$/;"	m	struct:VkMemoryHeap
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkBufferMemoryBarrier
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkMappedMemoryRange
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkBufferCopy
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkMemoryRequirements
size	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkSubresourceLayout
size	support/GLFW/deps/vulkan/vulkan.h	/^    size_t      size;$/;"	m	struct:VkSpecializationMapEntry
size	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              size;$/;"	m	struct:VkPushConstantRange
size	support/GLFW/include/GLFW/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp
size	support/GLFW/src/internal.h	/^        GLFWwindowsizefun       size;$/;"	m	struct:_GLFWwindow::__anon8
size	support/imgui/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector
size	support/imgui/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer
size	support/imgui/imstb_truetype.h	/^   int size;$/;"	m	struct:__anon64
size	support/tinyexr/tinyexr.h	/^  int size;$/;"	m	struct:_EXRAttribute
size	support/tinyexr/tinyexr.h	/^  int size;$/;"	m	struct:tinyexr::PIZChannelData
size	support/tinygltf/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon98
size	support/tinygltf/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon102
size	support/tinygltf/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon108
size	sutil/CuBuffer.h	/^    size_t size() const { return m_count; }$/;"	f	class:CuBuffer
size_in_bytes	support/imgui/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector
skeleton	support/tinygltf/tiny_gltf.h	/^  int skeleton;             \/\/ The index of the node used as a skeleton root$/;"	m	struct:tinygltf::Skin
skin	support/tinygltf/tiny_gltf.h	/^  int skin;$/;"	m	class:tinygltf::Node
skins	support/tinygltf/tiny_gltf.h	/^  std::vector<Skin> skins;$/;"	m	class:tinygltf::Model
skip	support/tinygltf/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon93
skip_bom	support/tinygltf/json.hpp	/^    bool skip_bom()$/;"	f	class:nlohmann::detail::lexer
skip_missing	support/imgui/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context
sliderCount	support/GLFW/src/win32_joystick.c	/^    int                     sliderCount;$/;"	m	struct:_GLFWobjenumWin32	file:
smallIcon	support/GLFW/src/win32_platform.h	/^    HICON               smallIcon;$/;"	m	struct:_GLFWwindowWin32
smoothing_group_id	optixMotionGeometry/tiny_obj_loader.h	/^      smoothing_group_id;  \/\/ smoothing group id. 0 = smoothing groupd is off.$/;"	m	struct:tinyobj::face_t
smoothing_group_ids	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<unsigned int> smoothing_group_ids;  \/\/ per-face smoothing group$/;"	m	struct:tinyobj::mesh_t
snprintf	support/imgui/imgui_demo.cpp	95;"	d	file:
solid_objects	optixVolumeViewer/volume.h	/^    unsigned int solid_objects;$/;"	m	struct:LaunchParams
source	support/GLFW/src/internal.h	/^    int                 source;$/;"	m	struct:_GLFWcontext
source	support/GLFW/src/internal.h	/^    int           source;$/;"	m	struct:_GLFWctxconfig
source	support/GLFW/src/x11_platform.h	/^        Window      source;$/;"	m	struct:_GLFWlibraryX11::__anon23
source	support/tinygltf/tiny_gltf.h	/^  int source;$/;"	m	struct:tinygltf::Texture
sparse	support/tinygltf/tiny_gltf.h	/^  } sparse;$/;"	m	struct:tinygltf::Accessor	typeref:struct:tinygltf::Accessor::__anon115
sparseAddressSpaceSize	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize          sparseAddressSpaceSize;$/;"	m	struct:VkPhysicalDeviceLimits
sparseBinding	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseBinding;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseProperties	support/GLFW/deps/vulkan/vulkan.h	/^    VkPhysicalDeviceSparseProperties    sparseProperties;$/;"	m	struct:VkPhysicalDeviceProperties
sparseResidency16Samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidency16Samples;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidency2Samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidency2Samples;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidency4Samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidency4Samples;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidency8Samples	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidency8Samples;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidencyAliased	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidencyAliased;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidencyBuffer	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidencyBuffer;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidencyImage2D	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage2D;$/;"	m	struct:VkPhysicalDeviceFeatures
sparseResidencyImage3D	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage3D;$/;"	m	struct:VkPhysicalDeviceFeatures
specVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkExtensionProperties
specVersion	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkLayerProperties
specVersion	support/GLFW/src/internal.h	/^    uint32_t        specVersion;$/;"	m	struct:VkExtensionProperties
spec_end	support/tinygltf/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon99
spec_start	support/tinygltf/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon99
specialize	optixBoundValues/optixBoundValues.cpp	/^bool         specialize    = true;$/;"	v
specialize	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^bool         specialize    = true;$/;"	v
specular	optixMotionGeometry/tiny_obj_loader.h	/^  real_t specular[3];$/;"	m	struct:tinyobj::material_t
specular_highlight_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string specular_highlight_texname;  \/\/ map_Ns$/;"	m	struct:tinyobj::material_t
specular_highlight_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t specular_highlight_texopt;$/;"	m	struct:tinyobj::material_t
specular_texname	optixMotionGeometry/tiny_obj_loader.h	/^  std::string specular_texname;            \/\/ map_Ks$/;"	m	struct:tinyobj::material_t
specular_texopt	optixMotionGeometry/tiny_obj_loader.h	/^  texture_option_t specular_texopt;$/;"	m	struct:tinyobj::material_t
sphere	cuda/GeometryData.h	/^        Sphere        sphere;$/;"	m	union:GeometryData::__anon3
sphere_bound	optixCallablePrograms/optixCallablePrograms.cpp	/^inline OptixAabb sphere_bound( float3 center, float radius )$/;"	f
sphere_bound	optixConsole/optixConsole.cpp	/^inline OptixAabb sphere_bound( float3 center, float radius )$/;"	f
sphere_bound	optixWhitted/optixWhitted.cpp	/^inline OptixAabb sphere_bound( float3 center, float radius )$/;"	f
sphere_checkerboard_hit_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup sphere_checkerboard_hit_group   = 0;$/;"	m	struct:CutoutsState	file:
sphere_gas_handle	optixCutouts/optixCutouts.cpp	/^    OptixTraversableHandle sphere_gas_handle          = 0;  \/\/ Traversable handle for sphere AS$/;"	m	struct:CutoutsState	file:
sphere_gas_handle	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixTraversableHandle       sphere_gas_handle              = 0;   \/\/ Traversable handle for sphere$/;"	m	struct:SimpleMotionBlurState	file:
sphere_hit_group	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixProgramGroup            sphere_hit_group               = 0;$/;"	m	struct:SimpleMotionBlurState	file:
sphere_module	optixConsole/optixConsole.cpp	/^    OptixModule sphere_module   = 0;$/;"	m	struct:OptixConsoleState	file:
sphere_module	optixCutouts/optixCutouts.cpp	/^    OptixModule sphere_module = 0;$/;"	m	struct:CutoutsState	file:
sphere_module	optixWhitted/optixWhitted.cpp	/^    OptixModule                 sphere_module             = 0;$/;"	m	struct:WhittedState	file:
sphere_motion_transform_handle	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixTraversableHandle       sphere_motion_transform_handle = 0;$/;"	m	struct:SimpleMotionBlurState	file:
sphere_shell	cuda/GeometryData.h	/^        SphereShell   sphere_shell;$/;"	m	union:GeometryData::__anon3
splineMode	optixHair/Hair.h	/^    SplineMode splineMode() const { return m_splineMode; };$/;"	f	class:Hair
split	support/imgui/imgui.cpp	/^void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>* out) const$/;"	f	class:ImGuiTextFilter::TextRange
split	support/tinygltf/json.hpp	/^    static std::vector<std::string> split(const std::string& reference_string)$/;"	f	class:nlohmann::json_pointer
spot	support/tinygltf/tiny_gltf.h	/^  SpotLight spot;$/;"	m	struct:tinygltf::Light
spp	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    unsigned int           spp;$/;"	m	struct:Globals
spp	optixMotionGeometry/optixMotionGeometry.h	/^    unsigned int           spp;$/;"	m	struct:Params
srcAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags              srcAccessMask;$/;"	m	struct:VkImageMemoryBarrier
srcAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags           srcAccessMask;$/;"	m	struct:VkSubpassDependency
srcAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkBufferMemoryBarrier
srcAccessMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkMemoryBarrier
srcAlphaBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendFactor            srcAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState
srcArrayElement	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           srcArrayElement;$/;"	m	struct:VkCopyDescriptorSet
srcBinding	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           srcBinding;$/;"	m	struct:VkCopyDescriptorSet
srcColorBlendFactor	support/GLFW/deps/vulkan/vulkan.h	/^    VkBlendFactor            srcColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState
srcOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkDeviceSize    srcOffset;$/;"	m	struct:VkBufferCopy
srcOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageCopy
srcOffset	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageResolve
srcOffsets	support/GLFW/deps/vulkan/vulkan.h	/^    VkOffset3D                  srcOffsets[2];$/;"	m	struct:VkImageBlit
srcQueueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                   srcQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier
srcQueueFamilyIndex	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t           srcQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier
srcRect	support/GLFW/deps/vulkan/vulkan.h	/^    VkRect2D           srcRect;$/;"	m	struct:VkDisplayPresentInfoKHR
srcSet	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorSet    srcSet;$/;"	m	struct:VkCopyDescriptorSet
srcStageMask	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineStageFlags    srcStageMask;$/;"	m	struct:VkSubpassDependency
srcSubpass	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                srcSubpass;$/;"	m	struct:VkSubpassDependency
srcSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageBlit
srcSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageCopy
srcSubresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageResolve
srtToMatrix	optixMotionGeometry/motionHelper.hpp	/^void srtToMatrix( const OptixSRTData& srt, float* m )$/;"	f	namespace:__anon4
srt_animation	optixMotionGeometry/optixMotionGeometry.cpp	/^    SRTMotionTransformArray srt_animation;$/;"	m	class:ExhaustFume	file:
srt_animation	optixMotionGeometry/optixMotionGeometry.cpp	/^    SRTMotionTransformArray srt_animation;$/;"	m	struct:PlaneAnimation	file:
srt_animationPropeller	optixMotionGeometry/optixMotionGeometry.cpp	/^    SRTMotionTransformArray srt_animationPropeller;$/;"	m	struct:PlaneAnimation	file:
stage	support/GLFW/deps/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateInfo    stage;$/;"	m	struct:VkComputePipelineCreateInfo
stage	support/GLFW/deps/vulkan/vulkan.h	/^    VkShaderStageFlagBits               stage;$/;"	m	struct:VkPipelineShaderStageCreateInfo
stageCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                         stageCount;$/;"	m	struct:VkGraphicsPipelineCreateInfo
stageFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkDescriptorSetLayoutBinding
stageFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkPushConstantRange
standardSampleLocations	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32              standardSampleLocations;$/;"	m	struct:VkPhysicalDeviceLimits
start	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Vec3T start() const { return (*this)(mTimeSpan.t0); }$/;"	f	class:nanovdb::Ray
start	support/tinyexr/tinyexr.h	/^  unsigned short *start;$/;"	m	struct:tinyexr::PIZChannelData
startPool	lib/CompileWithTasks.h	/^    void startPool( int numThreads )$/;"	f	struct:optix::CompileWithTasks::ThreadPool
startTracking	sutil/Trackball.cpp	/^void Trackball::startTracking(int x, int y)$/;"	f	class:sutil::Trackball
start_array	support/tinygltf/json.hpp	/^    bool start_array(std::size_t  \/*unused*\/ = std::size_t(-1))$/;"	f	class:nlohmann::detail::json_sax_acceptor
start_array	support/tinygltf/json.hpp	/^    bool start_array(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
start_array	support/tinygltf/json.hpp	/^    bool start_array(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
start_object	support/tinygltf/json.hpp	/^    bool start_object(std::size_t  \/*unused*\/ = std::size_t(-1))$/;"	f	class:nlohmann::detail::json_sax_acceptor
start_object	support/tinygltf/json.hpp	/^    bool start_object(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
start_object	support/tinygltf/json.hpp	/^    bool start_object(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
start_x	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        start_x;                         \/**< [in]: ROI start position in x-direction. *\/$/;"	m	struct:NV_OF_ROI_RECT
start_x	support/tinygltf/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon110
start_y	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        start_y;                         \/**< [in]: ROI start position in y-direction. *\/$/;"	m	struct:NV_OF_ROI_RECT
start_y	support/tinygltf/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon110
started	support/imgui/imstb_truetype.h	/^   int started;$/;"	m	struct:__anon78
state	support/GLFW/src/wl_platform.h	/^        struct xkb_state*       state;$/;"	m	struct:_GLFWlibraryWayland::__anon19	typeref:struct:_GLFWlibraryWayland::__anon19::xkb_state
state	support/tinyexr/tinyexr.h	/^  struct mz_internal_state *state;  \/\/ internal state, allocated by zalloc\/zfree$/;"	m	struct:tinyexr::miniz::mz_stream_s	typeref:struct:tinyexr::miniz::mz_stream_s::mz_internal_state
static_const	support/tinygltf/json.hpp	/^struct static_const$/;"	s	namespace:nlohmann::detail
static_gas_handle	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixTraversableHandle         static_gas_handle;$/;"	m	struct:DynamicGeometryState	file:
static_gas_handle	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixTraversableHandle         static_gas_handle;$/;"	m	struct:MotionGeometryState	file:
static_gas_output_buffer_size	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    size_t                         static_gas_output_buffer_size = 0;$/;"	m	struct:DynamicGeometryState	file:
static_gas_output_buffer_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         static_gas_output_buffer_size = 0;$/;"	m	struct:MotionGeometryState	file:
stb__barrier_in_b	support/imgui/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	file:
stb__barrier_out_b	support/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	file:
stb__barrier_out_e	support/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	file:
stb__dout	support/imgui/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	file:
stb__in2	support/imgui/imgui_draw.cpp	3117;"	d	file:
stb__in3	support/imgui/imgui_draw.cpp	3118;"	d	file:
stb__in4	support/imgui/imgui_draw.cpp	3119;"	d	file:
stb__lit	support/imgui/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	file:
stb__match	support/imgui/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	file:
stb_adler32	support/imgui/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen)$/;"	f	file:
stb_decompress	support/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \/*length*\/)$/;"	f	file:
stb_decompress_length	support/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	file:
stb_decompress_token	support/imgui/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	file:
stb_image_write_test	support/tinygltf/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stb_text_create_undo_record	support/imgui/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f
stb_text_createundo	support/imgui/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, int delete_len)$/;"	f
stb_text_locate_coord	support/imgui/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f
stb_text_makeundo_delete	support/imgui/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int length)$/;"	f
stb_text_makeundo_insert	support/imgui/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f
stb_text_makeundo_replace	support/imgui/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int old_length, int new_length)$/;"	f
stb_text_redo	support/imgui/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_text_undo	support/imgui/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_clamp	support/imgui/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_clear_state	support/imgui/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f
stb_textedit_click	support/imgui/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float y)$/;"	f
stb_textedit_cut	support/imgui/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_delete	support/imgui/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int len)$/;"	f
stb_textedit_delete_selection	support/imgui/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_discard_redo	support/imgui/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f
stb_textedit_discard_undo	support/imgui/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f
stb_textedit_drag	support/imgui/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float y)$/;"	f
stb_textedit_find_charpos	support/imgui/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int single_line)$/;"	f
stb_textedit_flush_redo	support/imgui/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f
stb_textedit_initialize_state	support/imgui/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f
stb_textedit_key	support/imgui/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KEYTYPE key)$/;"	f
stb_textedit_move_to_first	support/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f
stb_textedit_move_to_last	support/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_move_to_word_next	support/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f
stb_textedit_move_to_word_previous	support/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f
stb_textedit_paste	support/imgui/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_CHARTYPE const *ctext, int len)$/;"	f
stb_textedit_paste_internal	support/imgui/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_CHARTYPE *text, int len)$/;"	f
stb_textedit_prep_selection_at_cursor	support/imgui/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f
stb_textedit_sortselection	support/imgui/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f
stbi__DNL	support/tinygltf/stb_image.h	3147;"	d
stbi__EOI	support/tinygltf/stb_image.h	3149;"	d
stbi__SOF	support/tinygltf/stb_image.h	3150;"	d
stbi__SOF_progressive	support/tinygltf/stb_image.h	3153;"	d
stbi__SOI	support/tinygltf/stb_image.h	3148;"	d
stbi__SOS	support/tinygltf/stb_image.h	3151;"	d
stbi__YCbCr_to_RGB_row	support/tinygltf/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	support/tinygltf/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	support/tinygltf/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	support/tinygltf/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	support/tinygltf/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	support/tinygltf/stb_image.h	/^static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	support/tinygltf/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon107
stbi__bmp_info	support/tinygltf/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	support/tinygltf/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	support/tinygltf/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	support/tinygltf/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	support/tinygltf/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	support/tinygltf/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	support/tinygltf/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	support/tinygltf/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	support/tinygltf/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	support/tinygltf/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	support/tinygltf/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	support/tinygltf/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	support/tinygltf/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	support/tinygltf/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	support/tinygltf/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	support/tinygltf/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon94
stbi__convert_16_to_8	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	support/tinygltf/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	support/tinygltf/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	support/tinygltf/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	support/tinygltf/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	support/tinygltf/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	support/tinygltf/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	support/tinygltf/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	support/tinygltf/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	support/tinygltf/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	support/tinygltf/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	support/tinygltf/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	support/tinygltf/stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	support/tinygltf/stb_image.h	3274;"	d
stbi__div4	support/tinygltf/stb_image.h	3225;"	d
stbi__do_png	support/tinygltf/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	support/tinygltf/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	support/tinygltf/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	support/tinygltf/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	support/tinygltf/stb_image.h	971;"	d
stbi__err	support/tinygltf/stb_image.h	973;"	d
stbi__err	support/tinygltf/stb_image.h	975;"	d
stbi__errpf	support/tinygltf/stb_image.h	978;"	d
stbi__errpuc	support/tinygltf/stb_image.h	979;"	d
stbi__expand_png_palette	support/tinygltf/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	support/tinygltf/stb_image.h	2226;"	d
stbi__fill_bits	support/tinygltf/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__flip_vertically_on_write	support/tinygltf/stb_image_write.h	/^int stbi__flip_vertically_on_write=0;$/;"	v
stbi__flip_vertically_on_write	support/tinygltf/stb_image_write.h	/^static int stbi__flip_vertically_on_write=0;$/;"	v
stbi__float2fixed	support/tinygltf/stb_image.h	3430;"	d
stbi__float2int	support/tinygltf/stb_image.h	1697;"	d
stbi__float_postprocess	support/tinygltf/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	support/tinygltf/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	support/tinygltf/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	support/tinygltf/stb_image.h	2227;"	d
stbi__g_failure_reason	support/tinygltf/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	support/tinygltf/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	support/tinygltf/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	support/tinygltf/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	support/tinygltf/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	support/tinygltf/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	support/tinygltf/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	support/tinygltf/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	support/tinygltf/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	support/tinygltf/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon110
stbi__gif_header	support/tinygltf/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	support/tinygltf/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	support/tinygltf/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	support/tinygltf/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)$/;"	f
stbi__gif_lzw	support/tinygltf/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon109
stbi__gif_parse_colortable	support/tinygltf/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	support/tinygltf/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	support/tinygltf/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	support/tinygltf/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	support/tinygltf/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	support/tinygltf/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	support/tinygltf/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	support/tinygltf/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	support/tinygltf/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	support/tinygltf/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	support/tinygltf/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	support/tinygltf/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	support/tinygltf/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	support/tinygltf/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon98
stbi__idct_block	support/tinygltf/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	support/tinygltf/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	support/tinygltf/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	support/tinygltf/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	support/tinygltf/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	support/tinygltf/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	support/tinygltf/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__is_16_main	support/tinygltf/stb_image.h	/^static int stbi__is_16_main(stbi__context *s)$/;"	f
stbi__jbias	support/tinygltf/stb_image.h	/^static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	support/tinygltf/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon99
stbi__jpeg_decode_block	support/tinygltf/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	support/tinygltf/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	support/tinygltf/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	support/tinygltf/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	support/tinygltf/stb_image.h	/^static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	support/tinygltf/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	support/tinygltf/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	support/tinygltf/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	support/tinygltf/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	support/tinygltf/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	support/tinygltf/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	support/tinygltf/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	support/tinygltf/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	support/tinygltf/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	support/tinygltf/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	support/tinygltf/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_gif_main	support/tinygltf/stb_image.h	/^static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi__load_main	support/tinygltf/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	support/tinygltf/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	support/tinygltf/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	support/tinygltf/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	support/tinygltf/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	support/tinygltf/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	support/tinygltf/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	support/tinygltf/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	support/tinygltf/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	support/tinygltf/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	support/tinygltf/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	support/tinygltf/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	support/tinygltf/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	support/tinygltf/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	support/tinygltf/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	support/tinygltf/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	support/tinygltf/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	support/tinygltf/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	support/tinygltf/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	support/tinygltf/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	support/tinygltf/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	support/tinygltf/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon108
stbi__pic_test	support/tinygltf/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	support/tinygltf/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	support/tinygltf/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon105
stbi__png_info	support/tinygltf/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	support/tinygltf/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_is16	support/tinygltf/stb_image.h	/^static int stbi__png_is16(stbi__context *s)$/;"	f
stbi__png_load	support/tinygltf/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	support/tinygltf/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	support/tinygltf/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon104
stbi__pnm_getinteger	support/tinygltf/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	support/tinygltf/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	support/tinygltf/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	support/tinygltf/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	support/tinygltf/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	support/tinygltf/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	support/tinygltf/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	support/tinygltf/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	support/tinygltf/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	support/tinygltf/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	support/tinygltf/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	support/tinygltf/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_is16	support/tinygltf/stb_image.h	/^static int stbi__psd_is16(stbi__context *s)$/;"	f
stbi__psd_load	support/tinygltf/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	support/tinygltf/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	support/tinygltf/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	support/tinygltf/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon101
stbi__resample_row_generic	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	support/tinygltf/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	support/tinygltf/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	support/tinygltf/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	support/tinygltf/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon96
stbi__rewind	support/tinygltf/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	support/tinygltf/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	support/tinygltf/stb_image.h	/^static int stbi__shiftsigned(unsigned int v, int shift, int bits)$/;"	f
stbi__skip	support/tinygltf/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	support/tinygltf/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	support/tinygltf/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	support/tinygltf/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	support/tinygltf/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	support/tinygltf/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	support/tinygltf/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	support/tinygltf/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	support/tinygltf/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	support/tinygltf/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	support/tinygltf/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	support/tinygltf/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	support/tinygltf/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	support/tinygltf/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	support/tinygltf/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	support/tinygltf/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	support/tinygltf/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	support/tinygltf/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	support/tinygltf/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	support/tinygltf/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	support/tinygltf/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	support/tinygltf/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	support/tinygltf/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertical_flip_slices	support/tinygltf/stb_image.h	/^static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	support/tinygltf/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	support/tinygltf/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon111
stbi__zbuf	support/tinygltf/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon103
stbi__zbuild_huffman	support/tinygltf/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	support/tinygltf/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	support/tinygltf/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	support/tinygltf/stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	support/tinygltf/stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	support/tinygltf/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	support/tinygltf/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	support/tinygltf/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon102
stbi__zhuffman_decode	support/tinygltf/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	support/tinygltf/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	support/tinygltf/stb_image.h	/^static const int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	support/tinygltf/stb_image.h	/^static const int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	support/tinygltf/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	support/tinygltf/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_convert_wchar_to_utf8	support/tinygltf/stb_image.h	/^STBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)$/;"	f
stbi_failure_reason	support/tinygltf/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_flip_vertically_on_write	support/tinygltf/stb_image_write.h	/^STBIWDEF void stbi_flip_vertically_on_write(int flag)$/;"	f
stbi_hdr_to_ldr_gamma	support/tinygltf/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	support/tinygltf/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	support/tinygltf/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	support/tinygltf/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	support/tinygltf/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	support/tinygltf/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	support/tinygltf/stb_image.h	554;"	d
stbi_inline	support/tinygltf/stb_image.h	556;"	d
stbi_inline	support/tinygltf/stb_image.h	559;"	d
stbi_io_callbacks	support/tinygltf/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon93
stbi_is_16_bit	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f
stbi_is_16_bit_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f
stbi_is_16_bit_from_file	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f
stbi_is_16_bit_from_memory	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_is_hdr	support/tinygltf/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	support/tinygltf/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	support/tinygltf/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	support/tinygltf/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	support/tinygltf/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	support/tinygltf/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	support/tinygltf/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	support/tinygltf/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	support/tinygltf/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	support/tinygltf/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_gif_from_memory	support/tinygltf/stb_image.h	/^STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi_loadf	support/tinygltf/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	support/tinygltf/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	support/tinygltf/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	support/tinygltf/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	support/tinygltf/stb_image.h	590;"	d
stbi_lrot	support/tinygltf/stb_image.h	592;"	d
stbi_set_flip_vertically_on_load	support/tinygltf/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	support/tinygltf/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	support/tinygltf/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	support/tinygltf/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	support/tinygltf/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_force_png_filter	support/tinygltf/stb_image_write.h	/^int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_force_png_filter	support/tinygltf/stb_image_write.h	/^static int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_func	support/tinygltf/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	support/tinygltf/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	support/tinygltf/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_compression_level	support/tinygltf/stb_image_write.h	/^int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_compression_level	support/tinygltf/stb_image_write.h	/^static int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_to_func	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	support/tinygltf/stb_image_write.h	/^STBIWDEF unsigned char *stbi_write_png_to_mem(const unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	support/tinygltf/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	support/tinygltf/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	support/tinygltf/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	support/tinygltf/stb_image_write.h	/^STBIWDEF unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	support/tinygltf/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	support/tinygltf/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	support/tinygltf/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	support/tinygltf/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	support/tinygltf/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	support/tinygltf/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	support/tinygltf/stb_image_write.h	858;"	d
stbiw__crc32	support/tinygltf/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__encode_png_line	support/tinygltf/stb_image_write.h	/^static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer)$/;"	f
stbiw__fopen	support/tinygltf/stb_image_write.h	/^static FILE *stbiw__fopen(char const *filename, char const *mode)$/;"	f
stbiw__jpg_DCT	support/tinygltf/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	support/tinygltf/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	support/tinygltf/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	support/tinygltf/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	support/tinygltf/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	support/tinygltf/stb_image_write.h	/^static void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	support/tinygltf/stb_image_write.h	603;"	d
stbiw__outfile	support/tinygltf/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	support/tinygltf/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	support/tinygltf/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	support/tinygltf/stb_image_write.h	790;"	d
stbiw__sbfree	support/tinygltf/stb_image_write.h	791;"	d
stbiw__sbgrow	support/tinygltf/stb_image_write.h	787;"	d
stbiw__sbgrowf	support/tinygltf/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	support/tinygltf/stb_image_write.h	782;"	d
stbiw__sbmaybegrow	support/tinygltf/stb_image_write.h	786;"	d
stbiw__sbn	support/tinygltf/stb_image_write.h	783;"	d
stbiw__sbneedgrow	support/tinygltf/stb_image_write.h	785;"	d
stbiw__sbpush	support/tinygltf/stb_image_write.h	789;"	d
stbiw__sbraw	support/tinygltf/stb_image_write.h	781;"	d
stbiw__wp32	support/tinygltf/stb_image_write.h	1024;"	d
stbiw__wpcrc	support/tinygltf/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	support/tinygltf/stb_image_write.h	1023;"	d
stbiw__wptag	support/tinygltf/stb_image_write.h	1025;"	d
stbiw__write3	support/tinygltf/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	support/tinygltf/stb_image_write.h	/^static void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	support/tinygltf/stb_image_write.h	/^static void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	support/tinygltf/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	support/tinygltf/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	support/tinygltf/stb_image_write.h	/^static void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	support/tinygltf/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	support/tinygltf/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	support/tinygltf/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	support/tinygltf/stb_image_write.h	847;"	d
stbiw__zlib_bitrev	support/tinygltf/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	support/tinygltf/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	support/tinygltf/stb_image_write.h	846;"	d
stbiw__zlib_flushf	support/tinygltf/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	support/tinygltf/stb_image_write.h	855;"	d
stbiw__zlib_huff1	support/tinygltf/stb_image_write.h	851;"	d
stbiw__zlib_huff2	support/tinygltf/stb_image_write.h	852;"	d
stbiw__zlib_huff3	support/tinygltf/stb_image_write.h	853;"	d
stbiw__zlib_huff4	support/tinygltf/stb_image_write.h	854;"	d
stbiw__zlib_huffa	support/tinygltf/stb_image_write.h	849;"	d
stbiw__zlib_huffb	support/tinygltf/stb_image_write.h	856;"	d
stbiw_convert_wchar_to_utf8	support/tinygltf/stb_image_write.h	/^STBIWDEF int stbiw_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)$/;"	f
stbiw_uint32	support/tinygltf/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
stbrp__findresult	support/imgui/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon90
stbrp__skyline_find_best_pos	support/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f
stbrp__skyline_find_min_y	support/imgui/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int *pwaste)$/;"	f
stbrp__skyline_pack_rectangle	support/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int height)$/;"	f
stbrp_context	support/imgui/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	support/imgui/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	support/imgui/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon80
stbrp_coord	support/imgui/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t
stbrp_coord	support/imgui/imstb_rectpack.h	/^typedef unsigned short stbrp_coord;$/;"	t
stbrp_coord	support/imgui/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	support/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_init_target	support/imgui/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	support/imgui/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	support/imgui/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	support/imgui/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon81
stbrp_pack_rects	support/imgui/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_pack_rects	support/imgui/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	support/imgui/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	support/imgui/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	support/imgui/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	support/imgui/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	support/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f
stbrp_setup_heuristic	support/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f
stbtt_BakeFontBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f
stbtt_BakeFontBitmap_internal	support/imgui/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian_internal	support/imgui/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2) $/;"	f
stbtt_FindGlyphIndex	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f
stbtt_FindMatchingFont_internal	support/imgui/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FlattenCurves	support/imgui/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeSDF	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	support/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointSDF	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointShape	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	support/imgui/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f
stbtt_GetFontOffsetForIndex_internal	support/imgui/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetFontVMetricsOS2	support/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap)$/;"	f
stbtt_GetGlyphBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBox	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	support/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f
stbtt_GetGlyphSDF	support/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphShape	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetNumberOfFonts	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f
stbtt_GetNumberOfFonts_internal	support/imgui/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f
stbtt_GetPackedQuad	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_GetScaledFontVMetrics	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size, float *ascent, float *descent, float *lineGap)$/;"	f
stbtt_InitFont	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f
stbtt_InitFont_internal	support/imgui/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixelPrefilter	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixelPrefilter	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)$/;"	f
stbtt_PackBegin	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	support/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_PackSetSkipMissingCodepoints	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f
stbtt_Rasterize	support/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	support/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	support/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	support/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1, stbtt_uint8 *s2, stbtt_int32 len2) $/;"	f
stbtt__GetCoverageIndex	support/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f
stbtt__GetGlyfOffset	support/imgui/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__GetGlyphClass	support/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f
stbtt__GetGlyphGPOSInfoAdvance	support/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphInfoT2	support/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt__GetGlyphKernInfoAdvance	support/imgui/imstb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphShapeT2	support/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__GetGlyphShapeTT	support/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__active_edge	support/imgui/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	support/imgui/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	support/imgui/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	support/imgui/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon71
stbtt__buf	support/imgui/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon64
stbtt__buf_get	support/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f
stbtt__buf_get16	support/imgui/imstb_truetype.h	1161;"	d
stbtt__buf_get32	support/imgui/imstb_truetype.h	1162;"	d
stbtt__buf_get8	support/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f
stbtt__buf_peek8	support/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f
stbtt__buf_range	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f
stbtt__buf_seek	support/imgui/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f
stbtt__buf_skip	support/imgui/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f
stbtt__cff_get_index	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f
stbtt__cff_index_count	support/imgui/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f
stbtt__cff_index_get	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f
stbtt__cff_int	support/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f
stbtt__cff_skip_operand	support/imgui/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f
stbtt__check_size16	support/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	support/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__cid_get_glyph_subrs	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__close_shape	support/imgui/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__compute_crossings_x	support/imgui/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f
stbtt__csctx	support/imgui/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon78
stbtt__csctx_close_shape	support/imgui/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f
stbtt__csctx_rccurve_to	support/imgui/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)$/;"	f
stbtt__csctx_rline_to	support/imgui/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_rmove_to	support/imgui/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_v	support/imgui/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy, stbtt_int32 cx1, stbtt_int32 cy1)$/;"	f
stbtt__cuberoot	support/imgui/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f
stbtt__dict_get	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f
stbtt__dict_get_ints	support/imgui/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f
stbtt__edge	support/imgui/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	support/imgui/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	support/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	support/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	support/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__get_subr	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f
stbtt__get_subrs	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f
stbtt__h_prefilter	support/imgui/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	support/imgui/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	support/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	support/imgui/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	support/imgui/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	support/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	support/imgui/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	support/imgui/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	support/imgui/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	support/imgui/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f
stbtt__matches	support/imgui/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	support/imgui/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	support/imgui/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__new_buf	support/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f
stbtt__oversample_shift	support/imgui/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	support/imgui/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon79
stbtt__rasterize	support/imgui/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	support/imgui/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__ray_intersect_bezier	support/imgui/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], float q2[2], float hits[2][2])$/;"	f
stbtt__run_charstring	support/imgui/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f
stbtt__solve_cubic	support/imgui/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f
stbtt__sort_edges	support/imgui/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	support/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	support/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_cubic	support/imgui/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float objspace_flatness_squared, int n)$/;"	f
stbtt__tesselate_curve	support/imgui/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	support/imgui/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__track_vertex	support/imgui/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f
stbtt__v_prefilter	support/imgui/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	support/imgui/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon66
stbtt_bakedchar	support/imgui/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon65
stbtt_fontinfo	support/imgui/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	support/imgui/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	support/imgui/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	support/imgui/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	support/imgui/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_pack_context	support/imgui/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	support/imgui/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	support/imgui/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon68
stbtt_packedchar	support/imgui/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon67
stbtt_setvertex	support/imgui/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	support/imgui/imstb_truetype.h	1275;"	d
stbtt_tag4	support/imgui/imstb_truetype.h	1274;"	d
stbtt_uint16	support/imgui/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	support/imgui/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	support/imgui/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	support/imgui/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon70
stbtt_vertex_type	support/imgui/imstb_truetype.h	823;"	d
std	support/tinygltf/json.hpp	/^namespace std$/;"	n
stdDeviation	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& stdDeviation() const { return DataType::mStdDevi; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
stdDeviation	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& stdDeviation() const { return DataType::mStdDevi; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
stdDeviation	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const FloatType& stdDeviation() const { return DataType::stdDeviation(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
stencil	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    stencil;$/;"	m	struct:VkClearDepthStencilValue
stencilBits	support/GLFW/src/internal.h	/^    int         stencilBits;$/;"	m	struct:_GLFWfbconfig
stencilLoadOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkAttachmentLoadOp              stencilLoadOp;$/;"	m	struct:VkAttachmentDescription
stencilStoreOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkAttachmentStoreOp             stencilStoreOp;$/;"	m	struct:VkAttachmentDescription
stencilTestEnable	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                                  stencilTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo
step	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ bool step()$/;"	f	class:nanovdb::DDA
step	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ bool step()$/;"	f	class:nanovdb::HDDA
step	optixVolumeViewer/nanovdb/util/HDDA.h	/^    inline __hostdev__ bool step(const NodeT** node, float& t0, float& t1)$/;"	f	class:nanovdb::TreeMarcher
step	support/tinygltf/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon110
stereo	support/GLFW/src/internal.h	/^    GLFWbool    stereo;$/;"	m	struct:_GLFWfbconfig
stickyKeys	support/GLFW/src/internal.h	/^    GLFWbool            stickyKeys;$/;"	m	struct:_GLFWwindow
stickyMouseButtons	support/GLFW/src/internal.h	/^    GLFWbool            stickyMouseButtons;$/;"	m	struct:_GLFWwindow
storageImageSampleCounts	support/GLFW/deps/vulkan/vulkan.h	/^    VkSampleCountFlags    storageImageSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits
storeOp	support/GLFW/deps/vulkan/vulkan.h	/^    VkAttachmentStoreOp             storeOp;$/;"	m	struct:VkAttachmentDescription
store_original_json_for_extras_and_extensions_	support/tinygltf/tiny_gltf.h	/^  bool store_original_json_for_extras_and_extensions_ = false;$/;"	m	class:tinygltf::TinyGLTF
str	support/tinygltf/json.hpp	/^        : str(s)$/;"	f	class:nlohmann::detail::output_string_adapter
str	support/tinygltf/json.hpp	/^        : str(w)$/;"	f	class:nlohmann::detail::wide_string_input_adapter
str	support/tinygltf/json.hpp	/^    StringType& str;$/;"	m	class:nlohmann::detail::output_string_adapter
str	support/tinygltf/json.hpp	/^    const WideStringType& str;$/;"	m	class:nlohmann::detail::wide_string_input_adapter
strandIndices	optixHair/Hair.cpp	/^std::vector<int> Hair::strandIndices() const$/;"	f	class:Hair
strandInfo	optixHair/Hair.cpp	/^std::vector<uint2> Hair::strandInfo() const$/;"	f	class:Hair
strandU	optixHair/Hair.cpp	/^std::vector<float2> Hair::strandU() const$/;"	f	class:Hair
strand_i	cuda/GeometryData.h	/^        GenericBufferView  strand_i;     \/\/ strand index per segment$/;"	m	struct:GeometryData::Curves
strand_info	cuda/GeometryData.h	/^        BufferView<uint2>  strand_info;  \/\/ info.x = segment base$/;"	m	struct:GeometryData::Curves
strand_u	cuda/GeometryData.h	/^        BufferView<float2> strand_u;     \/\/ strand_u at segment start per segment$/;"	m	struct:GeometryData::Curves
strdup	support/GLFW/src/win32_platform.h	76;"	d
stream	optixBoundValues/optixBoundValues.cpp	/^    CUstream                       stream                   = 0;$/;"	m	struct:PathTracerState	file:
stream	optixCallablePrograms/optixCallablePrograms.cpp	/^    CUstream                    stream                   = 0;$/;"	m	struct:CallableProgramsState	file:
stream	optixConsole/optixConsole.cpp	/^    CUstream               stream = 0;$/;"	m	struct:OptixConsoleState	file:
stream	optixCutouts/optixCutouts.cpp	/^    CUstream stream   = 0;$/;"	m	struct:CutoutsState	file:
stream	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    CUstream                       stream = 0;$/;"	m	struct:DisplacedMicromeshState	file:
stream	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    CUstream                       stream = 0;$/;"	m	struct:DynamicGeometryState	file:
stream	optixDynamicMaterials/optixDynamicMaterials.cpp	/^    CUstream                       stream                   = 0;$/;"	m	struct:SampleState	file:
stream	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    CUstream                       stream                   = 0;$/;"	m	struct:PathTracerState	file:
stream	optixMotionGeometry/optixMotionGeometry.cpp	/^    CUstream                       stream = 0;$/;"	m	struct:MotionGeometryState	file:
stream	optixMultiGPU/optixMultiGPU.cpp	/^    CUstream                     stream                   = 0;$/;"	m	struct:PathTracerState	file:
stream	optixNVLink/optixNVLink.cpp	/^    CUstream                     stream                   = 0;$/;"	m	struct:PerDeviceSampleState	file:
stream	optixPathTracer/optixPathTracer.cpp	/^    CUstream                       stream                   = 0;$/;"	m	struct:PathTracerState	file:
stream	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    CUstream                     stream                         = 0;$/;"	m	struct:SimpleMotionBlurState	file:
stream	optixWhitted/optixWhitted.cpp	/^    CUstream                    stream                    = 0;$/;"	m	struct:WhittedState	file:
stream	support/tinygltf/json.hpp	/^        : stream(s)$/;"	f	class:nlohmann::detail::output_stream_adapter
stream	support/tinygltf/json.hpp	/^    std::basic_ostream<CharType>& stream;$/;"	m	class:nlohmann::detail::output_stream_adapter
strength	support/tinygltf/tiny_gltf.h	/^  double strength;  \/\/ occludedColor = lerp(color, color * <sampled occlusion$/;"	m	struct:tinygltf::OcclusionTextureInfo
strict	support/tinygltf/json.hpp	/^    strict,  \/\/\/< throw a type_error exception in case of invalid UTF-8$/;"	m	class:nlohmann::detail::error_handler_t
strictLines	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32              strictLines;$/;"	m	struct:VkPhysicalDeviceLimits
stride	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t             stride;$/;"	m	struct:VkVertexInputBindingDescription
stride	support/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon71
stride	sutil/CuBuffer.h	/^    static unsigned int stride() { return sizeof( T ); }$/;"	f	class:CuBuffer
strideInfo	optixOpticalFlow/nvOpticalFlowCuda.h	/^    NV_OF_BUFFER_STRIDE strideInfo[MAX_NUM_PLANES];    \/**< Stride information of each plane.*\/$/;"	m	struct:_NV_OF_CUDA_BUFFER_STRIDE_INFO
strideXInBytes	optixOpticalFlow/nvOpticalFlowCuda.h	/^    uint32_t strideXInBytes;               \/**< Horizontal stride. *\/$/;"	m	struct:_NV_OF_BUFFER_STRIDE
strideYInBytes	optixOpticalFlow/nvOpticalFlowCuda.h	/^    uint32_t strideYInBytes;               \/**< Vertical stride. *\/$/;"	m	struct:_NV_OF_BUFFER_STRIDE
stride_in_bytes	support/imgui/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
string	support/tinygltf/json.hpp	/^        string_t* string;$/;"	m	union:nlohmann::basic_json::json_value
string	support/tinygltf/json.hpp	/^    bool string(string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor
string	support/tinygltf/json.hpp	/^    bool string(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
string	support/tinygltf/json.hpp	/^    bool string(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
string	support/tinygltf/json.hpp	/^    string,           \/\/\/< string value$/;"	m	class:nlohmann::detail::value_t
stringHash	optixVolumeViewer/nanovdb/util/IO.h	/^inline uint64_t stringHash(const char* cstr)$/;"	f	class:nanovdb::io::Codec
stringHash	optixVolumeViewer/nanovdb/util/IO.h	/^inline uint64_t stringHash(const std::string& str)$/;"	f	class:nanovdb::io::Codec
stringValues	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<std::string> stringValues;$/;"	m	struct:tinyobj::tag_t
string_value	support/tinygltf/tiny_gltf.h	/^  std::string string_value;$/;"	m	struct:tinygltf::Parameter
string_value_	support/tinygltf/tiny_gltf.h	/^  std::string string_value_;$/;"	m	class:tinygltf::Value
subPixelInterpolationOffsetBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              subPixelInterpolationOffsetBits;$/;"	m	struct:VkPhysicalDeviceLimits
subPixelPrecisionBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              subPixelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits
subTexelPrecisionBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              subTexelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits
subframe_index	cuda/whitted.h	/^    unsigned int             subframe_index;$/;"	m	struct:whitted::LaunchParams
subframe_index	optixBoundValues/optixBoundValues.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixCutouts/optixCutouts.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    int                    subframe_index;$/;"	m	struct:Globals
subframe_index	optixDynamicGeometry/optixDynamicGeometry.h	/^    int                    subframe_index;$/;"	m	struct:Params
subframe_index	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixMotionGeometry/optixMotionGeometry.h	/^    int                    subframe_index;$/;"	m	struct:Params
subframe_index	optixMultiGPU/optixMultiGPU.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixNVLink/optixNVLink.h	/^    unsigned int subframe_index; $/;"	m	struct:Params
subframe_index	optixPathTracer/optixPathTracer.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    unsigned int subframe_index;$/;"	m	struct:Params
subframe_index	optixVolumeViewer/volume.h	/^    unsigned int             subframe_index;$/;"	m	struct:LaunchParams
subpass	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                         subpass;$/;"	m	struct:VkGraphicsPipelineCreateInfo
subpass	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                         subpass;$/;"	m	struct:VkCommandBufferInheritanceInfo
subpassCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                          subpassCount;$/;"	m	struct:VkRenderPassCreateInfo
subresource	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresource         subresource;$/;"	m	struct:VkSparseImageMemoryBind
subresourceRange	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageMemoryBarrier
subresourceRange	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageViewCreateInfo
subrs	support/imgui/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo
succ_high	support/tinygltf/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon99
succ_low	support/tinygltf/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon99
suffix	support/tinygltf/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon109
super_mask	support/GLFW/src/wl_platform.h	/^        xkb_mod_mask_t          super_mask;$/;"	m	struct:_GLFWlibraryWayland::__anon19
supportedAlpha	support/GLFW/deps/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagsKHR    supportedAlpha;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR
supportedCompositeAlpha	support/GLFW/deps/vulkan/vulkan.h	/^    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;$/;"	m	struct:VkSurfaceCapabilitiesKHR
supportedTransforms	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR       supportedTransforms;$/;"	m	struct:VkSurfaceCapabilitiesKHR
supportedTransforms	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR    supportedTransforms;$/;"	m	struct:VkDisplayPropertiesKHR
supportedUsageFlags	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageUsageFlags                supportedUsageFlags;$/;"	m	struct:VkSurfaceCapabilitiesKHR
supportsXInput	support/GLFW/src/win32_joystick.c	/^static GLFWbool supportsXInput(const GUID* guid)$/;"	f	file:
surface	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceKHR                     surface;$/;"	m	struct:VkSwapchainCreateInfoKHR
surface	support/GLFW/deps/vulkan/vulkan.h	/^    struct wl_surface*                surface;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_surface
surface	support/GLFW/src/egl_context.h	/^   EGLSurface       surface;$/;"	m	struct:_GLFWcontextEGL
surface	support/GLFW/src/mir_platform.h	/^    MirSurface*             surface;$/;"	m	struct:_GLFWwindowMir
surface	support/GLFW/src/wl_platform.h	/^    struct wl_surface*              surface;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_surface
surface	support/GLFW/src/wl_platform.h	/^    struct wl_surface*          surface;$/;"	m	struct:_GLFWwindowWayland	typeref:struct:_GLFWwindowWayland::wl_surface
surfaceListener	support/GLFW/src/wl_window.c	/^static const struct wl_surface_listener surfaceListener = {$/;"	v	typeref:struct:wl_surface_listener	file:
surfaceNormal	cuda/curve.h	/^__device__ __forceinline__ float3 surfaceNormal( const CurveType& bc, float u, float3& ps )$/;"	f
surfaceNormal	cuda/curve.h	/^__device__ __forceinline__ float3 surfaceNormal( const LinearInterpolator& bc, float u, float3& ps )$/;"	f
sutil	sutil/Aabb.h	/^namespace sutil$/;"	n
sutil	sutil/CUDAOutputBuffer.h	/^namespace sutil$/;"	n
sutil	sutil/Camera.cpp	/^namespace sutil {$/;"	n	file:
sutil	sutil/Camera.h	/^namespace sutil {$/;"	n
sutil	sutil/Exception.h	/^namespace sutil {$/;"	n
sutil	sutil/GLDisplay.cpp	/^namespace sutil$/;"	n	file:
sutil	sutil/GLDisplay.h	/^namespace sutil$/;"	n
sutil	sutil/Matrix.h	/^namespace sutil$/;"	n
sutil	sutil/Quaternion.h	/^namespace sutil$/;"	n
sutil	sutil/Record.h	/^namespace sutil$/;"	n
sutil	sutil/Scene.cpp	/^namespace sutil$/;"	n	file:
sutil	sutil/Scene.h	/^namespace sutil$/;"	n
sutil	sutil/Trackball.cpp	/^namespace sutil$/;"	n	file:
sutil	sutil/Trackball.h	/^namespace sutil$/;"	n
sutil	sutil/sutil.cpp	/^namespace sutil$/;"	n	file:
sutil	sutil/sutil.h	/^namespace sutil$/;"	n
swap	optixMotionGeometry/motionHelper.hpp	/^    friend void swap( MotionTransformArrayBase& a, MotionTransformArrayBase& b )$/;"	f	class:__anon4::MotionTransformArrayBase
swap	optixMotionGeometry/optixMotionGeometry.cpp	/^    void swap( ExhaustFume& other )  \/\/ nothrow$/;"	f	class:ExhaustFume
swap	support/imgui/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; T* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }$/;"	f	struct:ImVector
swap	support/tinygltf/json.hpp	/^    void swap(array_t& other)$/;"	f	class:nlohmann::basic_json
swap	support/tinygltf/json.hpp	/^    void swap(object_t& other)$/;"	f	class:nlohmann::basic_json
swap	support/tinygltf/json.hpp	/^    void swap(string_t& other)$/;"	f	class:nlohmann::basic_json
swap	sutil/CuBuffer.h	/^    void swap( CuBuffer& other )  \/\/ nothrow$/;"	f	class:CuBuffer
swap2	support/tinyexr/tinyexr.h	/^static void swap2(unsigned short *val) {$/;"	f	namespace:tinyexr
swap4	support/tinyexr/tinyexr.h	/^static void swap4(unsigned int *val) {$/;"	f	namespace:tinyexr
swap4	support/tinygltf/tiny_gltf.h	/^static void swap4(unsigned int *val) {$/;"	f	namespace:tinygltf
swap8	support/tinyexr/tinyexr.h	/^static void swap8(tinyexr::tinyexr_uint64 *val) {$/;"	f	namespace:tinyexr
swapBuffers	support/GLFW/src/internal.h	/^    _GLFWswapbuffersfun         swapBuffers;$/;"	m	struct:_GLFWcontext
swapBuffersEGL	support/GLFW/src/egl_context.c	/^static void swapBuffersEGL(_GLFWwindow* window)$/;"	f	file:
swapBuffersGLX	support/GLFW/src/glx_context.c	/^static void swapBuffersGLX(_GLFWwindow* window)$/;"	f	file:
swapBuffersWGL	support/GLFW/src/wgl_context.c	/^static void swapBuffersWGL(_GLFWwindow* window)$/;"	f	file:
swapInterval	support/GLFW/src/internal.h	/^    _GLFWswapintervalfun        swapInterval;$/;"	m	struct:_GLFWcontext
swapIntervalEGL	support/GLFW/src/egl_context.c	/^static void swapIntervalEGL(int interval)$/;"	f	file:
swapIntervalGLX	support/GLFW/src/glx_context.c	/^static void swapIntervalGLX(int interval)$/;"	f	file:
swapIntervalWGL	support/GLFW/src/wgl_context.c	/^static void swapIntervalWGL(int interval)$/;"	f	file:
swapchainCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 swapchainCount;$/;"	m	struct:VkPresentInfoKHR
sy	support/imgui/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge
syncDCShaderIndexToSbt	optixCallablePrograms/optixCallablePrograms.cpp	/^void syncDCShaderIndexToSbt( CallableProgramsState& state )$/;"	f
szFriendlyName	support/GLFW/deps/mingw/dinput.h	/^  CHAR        szFriendlyName[MAX_PATH];$/;"	m	struct:DIFILEEFFECT
t	optixNVLink/optixNVLink.cpp	/^    float s, t;$/;"	m	struct:TexCoord	file:
t	optixRaycasting/optixRaycastingKernels.h	/^    float  t;$/;"	m	struct:Hit
t0	optixVolumeViewer/nanovdb/util/Ray.h	/^        RealT t0, t1;$/;"	m	struct:nanovdb::Ray::TimeSpan
t0	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ RealT t0() const { return mTimeSpan.t0; }$/;"	f	class:nanovdb::Ray
t0	support/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon66
t1	optixVolumeViewer/nanovdb/util/Ray.h	/^        RealT t0, t1;$/;"	m	struct:nanovdb::Ray::TimeSpan
t1	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ RealT t1() const { return mTimeSpan.t1; }$/;"	f	class:nanovdb::Ray
t1	support/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon66
tagCHANGEFILTERSTRUCT	support/GLFW/src/win32_platform.h	/^typedef struct tagCHANGEFILTERSTRUCT$/;"	s
tag_sizes	optixMotionGeometry/tiny_obj_loader.h	/^  tag_sizes() : num_ints(0), num_reals(0), num_strings(0) {}$/;"	f	struct:tinyobj::tag_sizes
tag_sizes	optixMotionGeometry/tiny_obj_loader.h	/^struct tag_sizes {$/;"	s	namespace:tinyobj
tag_t	optixMotionGeometry/tiny_obj_loader.h	/^struct tag_t {$/;"	s	namespace:tinyobj
tags	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<tag_t> tags;                        \/\/ SubD tag$/;"	m	struct:tinyobj::mesh_t
targetFrameTime	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                          targetFrameTime = 0.0333f;$/;"	m	struct:MotionGeometryState	file:
target_extensions	support/tinygltf/tiny_gltf.h	/^  ExtensionMap target_extensions;$/;"	m	struct:tinygltf::AnimationChannel
target_extensions_json_string	support/tinygltf/tiny_gltf.h	/^  std::string target_extensions_json_string;$/;"	m	struct:tinygltf::AnimationChannel
target_module	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    OptixModule* target_module;$/;"	m	struct:CompileOperation	file:
target_node	support/tinygltf/tiny_gltf.h	/^  int target_node;          \/\/ required (index of the node to target)$/;"	m	struct:tinygltf::AnimationChannel
target_path	support/tinygltf/tiny_gltf.h	/^  std::string target_path;  \/\/ required in ["translation", "rotation", "scale",$/;"	m	struct:tinygltf::AnimationChannel
targets	support/tinygltf/tiny_gltf.h	/^  std::vector<std::map<std::string, int> > targets;  \/\/ array of morph targets,$/;"	m	struct:tinygltf::Primitive
tdefl_calculate_minimum_redundancy	support/tinyexr/tinyexr.h	/^static void tdefl_calculate_minimum_redundancy(tdefl_sym_freq *A, int n) {$/;"	f
tdefl_compress	support/tinyexr/tinyexr.h	/^tdefl_status tdefl_compress(tdefl_compressor *d, const void *pIn_buf,$/;"	f
tdefl_compress_block	support/tinyexr/tinyexr.h	/^static mz_bool tdefl_compress_block(tdefl_compressor *d, mz_bool static_block) {$/;"	f
tdefl_compress_buffer	support/tinyexr/tinyexr.h	/^tdefl_status tdefl_compress_buffer(tdefl_compressor *d, const void *pIn_buf,$/;"	f
tdefl_compress_fast	support/tinyexr/tinyexr.h	/^static mz_bool tdefl_compress_fast(tdefl_compressor *d) {$/;"	f
tdefl_compress_lz_codes	support/tinyexr/tinyexr.h	/^static mz_bool tdefl_compress_lz_codes(tdefl_compressor *d) {$/;"	f
tdefl_compress_mem_to_heap	support/tinyexr/tinyexr.h	/^void *tdefl_compress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len,$/;"	f
tdefl_compress_mem_to_mem	support/tinyexr/tinyexr.h	/^size_t tdefl_compress_mem_to_mem(void *pOut_buf, size_t out_buf_len,$/;"	f
tdefl_compress_mem_to_output	support/tinyexr/tinyexr.h	/^mz_bool tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len,$/;"	f
tdefl_compress_normal	support/tinyexr/tinyexr.h	/^static mz_bool tdefl_compress_normal(tdefl_compressor *d) {$/;"	f
tdefl_compressor	support/tinyexr/tinyexr.h	/^} tdefl_compressor;$/;"	t	typeref:struct:tinyexr::miniz::__anon53
tdefl_create_comp_flags_from_zip_params	support/tinyexr/tinyexr.h	/^mz_uint tdefl_create_comp_flags_from_zip_params(int level, int window_bits,$/;"	f
tdefl_find_match	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE void tdefl_find_match($/;"	f
tdefl_flush	support/tinyexr/tinyexr.h	/^} tdefl_flush;$/;"	t	typeref:enum:tinyexr::miniz::__anon52
tdefl_flush_block	support/tinyexr/tinyexr.h	/^static int tdefl_flush_block(tdefl_compressor *d, int flush) {$/;"	f
tdefl_flush_output_buffer	support/tinyexr/tinyexr.h	/^static tdefl_status tdefl_flush_output_buffer(tdefl_compressor *d) {$/;"	f
tdefl_get_adler32	support/tinyexr/tinyexr.h	/^mz_uint32 tdefl_get_adler32(tdefl_compressor *d) { return d->m_adler32; }$/;"	f
tdefl_get_prev_return_status	support/tinyexr/tinyexr.h	/^tdefl_status tdefl_get_prev_return_status(tdefl_compressor *d) {$/;"	f
tdefl_huffman_enforce_max_code_size	support/tinyexr/tinyexr.h	/^static void tdefl_huffman_enforce_max_code_size(int *pNum_codes,$/;"	f
tdefl_init	support/tinyexr/tinyexr.h	/^tdefl_status tdefl_init(tdefl_compressor *d,$/;"	f
tdefl_optimize_huffman_table	support/tinyexr/tinyexr.h	/^static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num,$/;"	f
tdefl_output_buffer	support/tinyexr/tinyexr.h	/^} tdefl_output_buffer;$/;"	t	typeref:struct:tinyexr::miniz::__anon57
tdefl_output_buffer_putter	support/tinyexr/tinyexr.h	/^static mz_bool tdefl_output_buffer_putter(const void *pBuf, int len,$/;"	f
tdefl_put_buf_func_ptr	support/tinyexr/tinyexr.h	/^typedef mz_bool (*tdefl_put_buf_func_ptr)(const void *pBuf, int len,$/;"	t
tdefl_radix_sort_syms	support/tinyexr/tinyexr.h	/^static tdefl_sym_freq *tdefl_radix_sort_syms(mz_uint num_syms,$/;"	f
tdefl_record_literal	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE void tdefl_record_literal(tdefl_compressor *d,$/;"	f
tdefl_record_match	support/tinyexr/tinyexr.h	/^static MZ_FORCEINLINE void tdefl_record_match(tdefl_compressor *d,$/;"	f
tdefl_start_dynamic_block	support/tinyexr/tinyexr.h	/^static void tdefl_start_dynamic_block(tdefl_compressor *d) {$/;"	f
tdefl_start_static_block	support/tinyexr/tinyexr.h	/^static void tdefl_start_static_block(tdefl_compressor *d) {$/;"	f
tdefl_status	support/tinyexr/tinyexr.h	/^} tdefl_status;$/;"	t	typeref:enum:tinyexr::miniz::__anon51
tdefl_sym_freq	support/tinyexr/tinyexr.h	/^} tdefl_sym_freq;$/;"	t	typeref:struct:tinyexr::miniz::__anon55
tdefl_write_image_to_png_file_in_memory	support/tinyexr/tinyexr.h	/^void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h,$/;"	f
tdefl_write_image_to_png_file_in_memory_ex	support/tinyexr/tinyexr.h	/^void *tdefl_write_image_to_png_file_in_memory_ex(const void *pImage, int w,$/;"	f
tea	cuda/random.h	/^static __host__ __device__ __inline__ unsigned int tea( unsigned int val0, unsigned int val1 )$/;"	f
temp_bitmap	support/imgui/imstb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
temp_buffer_size	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    size_t                         temp_buffer_size = 0;$/;"	m	struct:DynamicGeometryState	file:
temp_buffer_size	optixMotionGeometry/optixMotionGeometry.cpp	/^    size_t                         temp_buffer_size = 0;$/;"	m	struct:MotionGeometryState	file:
temp_file	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    std::string temp_file;$/;"	m	struct:CompileOperation	file:
terminate	lib/CompileWithTasks.h	/^    void terminate()$/;"	f	struct:optix::CompileWithTasks::ThreadPool
tessellationShader	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    tessellationShader;$/;"	m	struct:VkPhysicalDeviceFeatures
test	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ bool test(RealT t) const { return (t >= t0 && t <= t1); }$/;"	f	struct:nanovdb::Ray::TimeSpan
test	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool test(RealT time) const { return mTimeSpan.test(time); }$/;"	f	class:nanovdb::Ray
tex	cuda/MaterialData.h	/^        cudaTextureObject_t  tex;$/;"	m	struct:MaterialData::Texture
texCoord	support/tinygltf/tiny_gltf.h	/^  int texCoord;     \/\/ The set index of texture's TEXCOORD attribute used for$/;"	m	struct:tinygltf::OcclusionTextureInfo
texCoord	support/tinygltf/tiny_gltf.h	/^  int texCoord;    \/\/ The set index of texture's TEXCOORD attribute used for$/;"	m	struct:tinygltf::NormalTextureInfo
texCoord	support/tinygltf/tiny_gltf.h	/^  int texCoord;    \/\/ The set index of texture's TEXCOORD attribute used for$/;"	m	struct:tinygltf::TextureInfo
tex_coords	optixCutouts/optixCutouts.h	/^    float2*  tex_coords;$/;"	m	struct:CutoutsHitGroupData
tex_coords	optixNVLink/optixNVLink.h	/^    float2* tex_coords;$/;"	m	struct:HitGroupData
texcoord	cuda/LocalGeometry.h	/^    } texcoord[GeometryData::num_texcoords];$/;"	m	struct:LocalGeometry	typeref:struct:LocalGeometry::Texcoord
texcoord	cuda/MaterialData.h	/^        int                  texcoord;$/;"	m	struct:MaterialData::Texture
texcoord_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*texcoord_cb)(void *user_data, real_t x, real_t y, real_t z);$/;"	m	struct:tinyobj::callback_t
texcoord_index	optixMotionGeometry/tiny_obj_loader.h	/^  int texcoord_index;$/;"	m	struct:tinyobj::index_t
texcoord_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> texcoord_indices;$/;"	m	struct:tinyobj::mesh_t
texcoord_offset	cuda/MaterialData.h	/^        float2               texcoord_offset;$/;"	m	struct:MaterialData::Texture
texcoord_rotation	cuda/MaterialData.h	/^        float2               texcoord_rotation; \/\/ sin,cos$/;"	m	struct:MaterialData::Texture
texcoord_scale	cuda/MaterialData.h	/^        float2               texcoord_scale;$/;"	m	struct:MaterialData::Texture
texcoord_ws	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> texcoord_ws;  \/\/ 'vt'(w)$/;"	m	struct:tinyobj::attrib_t
texcoords	cuda/GeometryData.h	/^        BufferView<Vec2f>  texcoords[num_texcoords]; \/\/ The buffer view may not be aligned, so don't use float2$/;"	m	struct:GeometryData::TriangleMesh
texcoords	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> texcoords;       \/\/ 'vt'(uv)$/;"	m	struct:tinyobj::attrib_t
texcoords	sutil/Scene.h	/^        std::vector<BufferView<Vec2f> >   texcoords[GeometryData::num_texcoords];$/;"	m	struct:sutil::Scene::MeshGroup
texture	sutil/sutil.h	/^    cudaTextureObject_t texture;$/;"	m	struct:sutil::Texture
textureCompressionASTC_LDR	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    textureCompressionASTC_LDR;$/;"	m	struct:VkPhysicalDeviceFeatures
textureCompressionBC	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    textureCompressionBC;$/;"	m	struct:VkPhysicalDeviceFeatures
textureCompressionETC2	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    textureCompressionETC2;$/;"	m	struct:VkPhysicalDeviceFeatures
texture_option_t	optixMotionGeometry/tiny_obj_loader.h	/^struct texture_option_t {$/;"	s	namespace:tinyobj
texture_resolution	optixMotionGeometry/tiny_obj_loader.h	/^  int   texture_resolution; \/\/ -texres resolution (No default value in the spec. We'll use -1)$/;"	m	struct:tinyobj::texture_option_t
texture_type_t	optixMotionGeometry/tiny_obj_loader.h	/^} texture_type_t;$/;"	t	namespace:tinyobj	typeref:enum:tinyobj::__anon5
textures	support/tinygltf/tiny_gltf.h	/^  std::vector<Texture> textures;$/;"	m	class:tinygltf::Model
thousands_sep	support/tinygltf/json.hpp	/^    const char thousands_sep = '\\0';$/;"	m	class:nlohmann::detail::serializer
thrd_busy	support/GLFW/deps/tinycthread.h	172;"	d
thrd_create	support/GLFW/deps/tinycthread.c	/^int thrd_create(thrd_t *thr, thrd_start_t func, void *arg)$/;"	f
thrd_current	support/GLFW/deps/tinycthread.c	/^thrd_t thrd_current(void)$/;"	f
thrd_detach	support/GLFW/deps/tinycthread.c	/^int thrd_detach(thrd_t thr)$/;"	f
thrd_equal	support/GLFW/deps/tinycthread.c	/^int thrd_equal(thrd_t thr0, thrd_t thr1)$/;"	f
thrd_error	support/GLFW/deps/tinycthread.h	169;"	d
thrd_exit	support/GLFW/deps/tinycthread.c	/^void thrd_exit(int res)$/;"	f
thrd_join	support/GLFW/deps/tinycthread.c	/^int thrd_join(thrd_t thr, int *res)$/;"	f
thrd_nomem	support/GLFW/deps/tinycthread.h	173;"	d
thrd_sleep	support/GLFW/deps/tinycthread.c	/^int thrd_sleep(const struct timespec *time_point, struct timespec *remaining)$/;"	f
thrd_start_t	support/GLFW/deps/tinycthread.h	/^typedef int (*thrd_start_t)(void *arg);$/;"	t
thrd_success	support/GLFW/deps/tinycthread.h	170;"	d
thrd_t	support/GLFW/deps/tinycthread.h	/^typedef HANDLE thrd_t;$/;"	t
thrd_t	support/GLFW/deps/tinycthread.h	/^typedef pthread_t thrd_t;$/;"	t
thrd_timeout	support/GLFW/deps/tinycthread.h	171;"	d
thrd_yield	support/GLFW/deps/tinycthread.c	/^void thrd_yield(void)$/;"	f
tileCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const uint32_t& tileCount() const { return DataType::mTileCount; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
tile_level_mode	support/tinyexr/tinyexr.h	/^  int tile_level_mode;$/;"	m	struct:_EXRHeader
tile_level_mode	support/tinyexr/tinyexr.h	/^  int tile_level_mode;$/;"	m	struct:tinyexr::HeaderInfo
tile_rounding_mode	support/tinyexr/tinyexr.h	/^  int tile_rounding_mode;$/;"	m	struct:_EXRHeader
tile_rounding_mode	support/tinyexr/tinyexr.h	/^  int tile_rounding_mode;$/;"	m	struct:tinyexr::HeaderInfo
tile_size_x	support/tinyexr/tinyexr.h	/^  int tile_size_x;$/;"	m	struct:_EXRHeader
tile_size_x	support/tinyexr/tinyexr.h	/^  int tile_size_x;$/;"	m	struct:tinyexr::HeaderInfo
tile_size_y	support/tinyexr/tinyexr.h	/^  int tile_size_y;$/;"	m	struct:_EXRHeader
tile_size_y	support/tinyexr/tinyexr.h	/^  int tile_size_y;$/;"	m	struct:tinyexr::HeaderInfo
tiled	support/tinyexr/tinyexr.h	/^  int tiled;      \/\/ tile format image$/;"	m	struct:_EXRVersion
tiled	support/tinyexr/tinyexr.h	/^  int tiled;$/;"	m	struct:_EXRHeader
tiles	support/tinyexr/tinyexr.h	/^  EXRTile *tiles;  \/\/ Tiled pixel data. The application must reconstruct image$/;"	m	struct:_EXRImage
tiling	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageTiling            tiling;$/;"	m	struct:VkImageCreateInfo
time	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    float                          time = 0.f;$/;"	m	struct:DynamicGeometryState	file:
time	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                          time = 0.f;$/;"	m	struct:MotionGeometryState	file:
time	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType time() const { return mT0; }$/;"	f	class:nanovdb::DDA
time	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ RealType time() const { return mT0; }$/;"	f	class:nanovdb::HDDA
timeGetTime	support/GLFW/src/win32_platform.h	/^        TIMEGETTIME_T   timeGetTime;$/;"	m	struct:_GLFWlibraryWin32::__anon12
timeLastASRebuild	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                   timeLastASRebuild = 0.f;$/;"	m	class:ExhaustFume	file:
time_last_frame	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                          time_last_frame = 0.f;$/;"	m	struct:MotionGeometryState	file:
time_last_fume	optixMotionGeometry/optixMotionGeometry.cpp	/^    float                          time_last_fume = 0.f;$/;"	m	struct:MotionGeometryState	file:
timeout	support/GLFW/src/x11_platform.h	/^        int         timeout;$/;"	m	struct:_GLFWlibraryX11::__anon22
timerOffset	support/GLFW/src/internal.h	/^    uint64_t            timerOffset;$/;"	m	struct:_GLFWlibrary
timespec	support/GLFW/deps/tinycthread.h	116;"	d
timestampComputeAndGraphics	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32              timestampComputeAndGraphics;$/;"	m	struct:VkPhysicalDeviceLimits
timestampPeriod	support/GLFW/deps/vulkan/vulkan.h	/^    float                 timestampPeriod;$/;"	m	struct:VkPhysicalDeviceLimits
timestampValidBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t        timestampValidBits;$/;"	m	struct:VkQueueFamilyProperties
tinfl_bit_buf_t	support/tinyexr/tinyexr.h	/^typedef mz_uint32 tinfl_bit_buf_t;$/;"	t
tinfl_bit_buf_t	support/tinyexr/tinyexr.h	/^typedef mz_uint64 tinfl_bit_buf_t;$/;"	t
tinfl_decompress	support/tinyexr/tinyexr.h	/^tinfl_status tinfl_decompress(tinfl_decompressor *r,$/;"	f
tinfl_decompress_mem_to_callback	support/tinyexr/tinyexr.h	/^int tinfl_decompress_mem_to_callback(const void *pIn_buf, size_t *pIn_buf_size,$/;"	f
tinfl_decompress_mem_to_heap	support/tinyexr/tinyexr.h	/^void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len,$/;"	f
tinfl_decompress_mem_to_mem	support/tinyexr/tinyexr.h	/^size_t tinfl_decompress_mem_to_mem(void *pOut_buf, size_t out_buf_len,$/;"	f
tinfl_decompressor	support/tinyexr/tinyexr.h	/^typedef struct tinfl_decompressor_tag tinfl_decompressor;$/;"	t	typeref:struct:tinyexr::miniz::tinfl_decompressor_tag
tinfl_decompressor_tag	support/tinyexr/tinyexr.h	/^struct tinfl_decompressor_tag {$/;"	s
tinfl_get_adler32	support/tinyexr/tinyexr.h	1592;"	d
tinfl_huff_table	support/tinyexr/tinyexr.h	/^} tinfl_huff_table;$/;"	t	typeref:struct:tinyexr::miniz::__anon45
tinfl_init	support/tinyexr/tinyexr.h	1587;"	d
tinfl_put_buf_func_ptr	support/tinyexr/tinyexr.h	/^typedef int (*tinfl_put_buf_func_ptr)(const void *pBuf, int len, void *pUser);$/;"	t
tinfl_status	support/tinyexr/tinyexr.h	/^} tinfl_status;$/;"	t	typeref:enum:tinyexr::miniz::__anon43
tinyexr	support/tinyexr/tinyexr.h	/^namespace tinyexr {$/;"	n
tinyexr_int64	support/tinyexr/tinyexr.h	/^typedef int64_t tinyexr_int64;$/;"	t	namespace:tinyexr
tinyexr_uint64	support/tinyexr/tinyexr.h	/^typedef uint64_t tinyexr_uint64;$/;"	t	namespace:tinyexr
tinygltf	support/tinygltf/tiny_gltf.h	/^namespace tinygltf {$/;"	n
tinyobj	optixMotionGeometry/tiny_obj_loader.h	/^namespace tinyobj {$/;"	n
tis	support/GLFW/src/cocoa_platform.h	/^    } tis;$/;"	m	struct:_GLFWlibraryNS	typeref:struct:_GLFWlibraryNS::__anon27
title	support/GLFW/src/internal.h	/^    const char*   title;$/;"	m	struct:_GLFWwndconfig
title	support/GLFW/src/wl_platform.h	/^    char*                       title;$/;"	m	struct:_GLFWwindowWayland
tmax	optixRaycasting/optixRaycastingKernels.h	/^    float  tmax;$/;"	m	struct:Ray
tmin	optixRaycasting/optixRaycastingKernels.h	/^    float  tmin;$/;"	m	struct:Ray
toGLFWKeyCode	support/GLFW/src/mir_window.c	/^static int toGLFWKeyCode(uint32_t key)$/;"	f	file:
toGLFWKeyCode	support/GLFW/src/wl_init.c	/^static int toGLFWKeyCode(uint32_t key)$/;"	f	file:
toSRGB	cuda/helpers.h	/^__forceinline__ __device__ float3 toSRGB( const float3& c )$/;"	f
toSRGB	sutil/sutil.cpp	/^static float toSRGB( float c )$/;"	f	namespace:sutil
toString	optixHair/Hair.cpp	/^std::string toString( bool b )$/;"	f
to_bson	support/tinygltf/json.hpp	/^    static std::vector<uint8_t> to_bson(const basic_json& j)$/;"	f	class:nlohmann::basic_json
to_bson	support/tinygltf/json.hpp	/^    static void to_bson(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json
to_bson	support/tinygltf/json.hpp	/^    static void to_bson(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json
to_cbor	support/tinygltf/json.hpp	/^    static std::vector<uint8_t> to_cbor(const basic_json& j)$/;"	f	class:nlohmann::basic_json
to_cbor	support/tinygltf/json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json
to_cbor	support/tinygltf/json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json
to_chars	support/tinygltf/json.hpp	/^char* to_chars(char* first, const char* last, FloatType value)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;$/;"	m	namespace:nlohmann::__anon113
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleString& s)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const T& b)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const T(&arr)[N])$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const std::pair<Args...>& p)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const std::valarray<T>& arr)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, const std::vector<bool>& e)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	namespace:nlohmann::detail
to_json	support/tinygltf/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	namespace:nlohmann::detail
to_json_fn	support/tinygltf/json.hpp	/^struct to_json_fn$/;"	s	namespace:nlohmann::detail
to_json_tuple_impl	support/tinygltf/json.hpp	/^void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> \/*unused*\/)$/;"	f	namespace:nlohmann::detail
to_msgpack	support/tinygltf/json.hpp	/^    static std::vector<uint8_t> to_msgpack(const basic_json& j)$/;"	f	class:nlohmann::basic_json
to_msgpack	support/tinygltf/json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json
to_msgpack	support/tinygltf/json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json
to_string	support/tinygltf/json.hpp	/^    std::string to_string() const$/;"	f	class:nlohmann::json_pointer
to_ubjson	support/tinygltf/json.hpp	/^    static std::vector<uint8_t> to_ubjson(const basic_json& j,$/;"	f	class:nlohmann::basic_json
to_ubjson	support/tinygltf/json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,$/;"	f	class:nlohmann::basic_json
to_ubjson	support/tinygltf/json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,$/;"	f	class:nlohmann::basic_json
todo	support/tinygltf/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon99
toggle	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void toggle()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
toggle	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void toggle(uint32_t n) { mWords[n >> 6] ^= uint64_t(1) << (n & 63); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
toggleCubeVisibility	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void toggleCubeVisibility()$/;"	f
togglePlaneVisibility	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void togglePlaneVisibility()$/;"	f
toggleVolumeVisibility	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void toggleVolumeVisibility()$/;"	f
token_type	support/tinygltf/json.hpp	/^    enum class token_type$/;"	c	class:nlohmann::detail::lexer
tolerance	support/tinyexr/tinyexr.h	/^  double tolerance;$/;"	m	struct:tinyexr::ZFPCompressionParam
top	support/tinygltf/json.hpp	/^    json_pointer top() const$/;"	f	class:nlohmann::json_pointer
topology	support/GLFW/deps/vulkan/vulkan.h	/^    VkPrimitiveTopology                        topology;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo
totalMemUsage	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t totalMemUsage() const { return DataType::mGridSize; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
total_in	support/tinyexr/tinyexr.h	/^  mz_ulong total_in;             \/\/ total number of bytes consumed so far$/;"	m	struct:tinyexr::miniz::mz_stream_s
total_out	support/tinyexr/tinyexr.h	/^  mz_ulong total_out;       \/\/ total number of bytes produced so far$/;"	m	struct:tinyexr::miniz::mz_stream_s
tq	support/tinygltf/stb_image.h	/^      int tq;$/;"	m	struct:__anon99::__anon100
traceOcclusion	cuda/whitted_cuda.h	/^static __forceinline__ __device__ float traceOcclusion($/;"	f	namespace:whitted
traceOcclusion	optixVolumeViewer/volume_cuda.h	/^static __forceinline__ __device__ void traceOcclusion($/;"	f
traceRadiance	cuda/whitted_cuda.h	/^static __forceinline__ __device__ void traceRadiance($/;"	f	namespace:whitted
traceRadiance	optixVolumeViewer/volume_cuda.h	/^static __forceinline__ __device__ void traceRadiance($/;"	f
trackball	optixBoundValues/optixBoundValues.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixCallablePrograms/optixCallablePrograms.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixCutouts/optixCutouts.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixDynamicGeometry/optixDynamicGeometry.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixMeshViewer/optixMeshViewer.cpp	/^sutil::Trackball  trackball;$/;"	v
trackball	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixMotionGeometry/optixMotionGeometry.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixMultiGPU/optixMultiGPU.cpp	/^sutil::Trackball  trackball;$/;"	v
trackball	optixNVLink/optixNVLink.cpp	/^sutil::Trackball  trackball;$/;"	v
trackball	optixPathTracer/optixPathTracer.cpp	/^sutil::Trackball trackball;$/;"	v
trackball	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^sutil::Trackball  trackball;$/;"	v
trackball	optixVolumeViewer/optixVolumeViewer.cpp	/^sutil::Trackball  trackball;$/;"	v
trackball	optixWhitted/optixWhitted.cpp	/^sutil::Trackball  trackball;$/;"	v
transform	optixBoundValues/optixBoundValues.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixCutouts/optixCutouts.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixMotionGeometry/motionHelper.hpp	/^    OptixDataType& transform( size_t transformIdx )$/;"	f	class:__anon4::MotionTransformArrayBase
transform	optixMotionGeometry/motionHelper.hpp	/^    const OptixDataType& transform( size_t transformIdx ) const$/;"	f	class:__anon4::MotionTransformArrayBase
transform	optixMultiGPU/optixMultiGPU.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixNVLink/optixNVLink.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixPathTracer/optixPathTracer.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    float transform[12];$/;"	m	struct:Instance	file:
transform	optixVolumeViewer/optixVolumeViewer.h	/^    sutil::Matrix4x4 transform;$/;"	m	struct:Cube
transform	optixVolumeViewer/optixVolumeViewer.h	/^    sutil::Matrix4x4 transform;$/;"	m	struct:Plane
transform	support/GLFW/deps/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR     transform;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR
transform	sutil/Aabb.h	/^    SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::transform( const Matrix3x4& m )$/;"	f	class:sutil::Aabb
transform	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE void Aabb::transform( const Matrix4x4& m )$/;"	f	class:sutil::Aabb
transform	sutil/Scene.h	/^        Matrix4x4                         transform;$/;"	m	struct:sutil::Scene::Instance
transforms	optixDynamicMaterials/optixDynamicMaterials.cpp	/^std::vector<Matrix> transforms = {$/;"	v
translate	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ void         translate(const Vec3T& xyz)$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::BaseBBox
translate	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<4,4> Matrix<4,4>::translate(const float3& vec)$/;"	f	class:sutil::Matrix
translateCursorShape	support/GLFW/src/win32_window.c	/^static LPWSTR translateCursorShape(int shape)$/;"	f	file:
translateCursorShape	support/GLFW/src/wl_window.c	/^static char *translateCursorShape(int shape)$/;"	f	file:
translateCursorShape	support/GLFW/src/x11_window.c	/^static int translateCursorShape(int shape)$/;"	f	file:
translateKey	support/GLFW/src/win32_window.c	/^static int translateKey(WPARAM wParam, LPARAM lParam)$/;"	f	file:
translateKey	support/GLFW/src/x11_window.c	/^static int translateKey(int scancode)$/;"	f	file:
translateKeyCode	support/GLFW/src/x11_init.c	/^static int translateKeyCode(int scancode)$/;"	f	file:
translateState	support/GLFW/src/x11_window.c	/^static int translateState(int state)$/;"	f	file:
translation	support/tinygltf/tiny_gltf.h	/^  std::vector<double> translation;  \/\/ length must be 0 or 3$/;"	m	class:tinygltf::Node
transmittance	optixMotionGeometry/tiny_obj_loader.h	/^  real_t transmittance[3];$/;"	m	struct:tinyobj::material_t
transparent	support/tinygltf/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon110
transpose	sutil/Matrix.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE Matrix<N,M> Matrix<M,N>::transpose() const$/;"	f	class:sutil::Matrix
traversable	optixHair/Head.cpp	/^OptixTraversableHandle Head::traversable() const$/;"	f	class:Head
traversableHandle	sutil/Scene.h	/^    SUTILAPI OptixTraversableHandle                         traversableHandle() const { return m_ias_handle; }$/;"	f	class:sutil::Scene
tree	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ TreeT& tree() { return *reinterpret_cast<TreeT*>(this->treePtr()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
tree	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const TreeT& tree() const { return *reinterpret_cast<const TreeT*>(this->treePtr()); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
tri_gas_handle	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixTraversableHandle       tri_gas_handle                 = 0;   \/\/ Traversable handle for triangle AS$/;"	m	struct:SimpleMotionBlurState	file:
tri_hit_group	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    OptixProgramGroup            tri_hit_group                  = 0;$/;"	m	struct:SimpleMotionBlurState	file:
triangle_checkerboard_hit_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup triangle_checkerboard_hit_group = 0;$/;"	m	struct:CutoutsState	file:
triangle_circle_hit_group	optixCutouts/optixCutouts.cpp	/^    OptixProgramGroup triangle_circle_hit_group       = 0;$/;"	m	struct:CutoutsState	file:
triangle_flags	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    unsigned int                   triangle_flags = OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT;$/;"	m	struct:DynamicGeometryState	file:
triangle_flags	optixMotionGeometry/optixMotionGeometry.cpp	/^    unsigned int                   triangle_flags = OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT;$/;"	m	struct:MotionGeometryState	file:
triangle_gas_handle	optixCutouts/optixCutouts.cpp	/^    OptixTraversableHandle triangle_gas_handle          = 0;  \/\/ Traversable handle for triangle AS$/;"	m	struct:CutoutsState	file:
triangle_input	optixDynamicGeometry/optixDynamicGeometry.cpp	/^    OptixBuildInput                triangle_input = {};$/;"	m	struct:DynamicGeometryState	file:
triangle_input	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixBuildInput                triangle_input = {};$/;"	m	struct:MotionGeometryState	file:
triangle_input_fume	optixMotionGeometry/optixMotionGeometry.cpp	/^    OptixBuildInput                triangle_input_fume = {};$/;"	m	struct:MotionGeometryState	file:
triangle_mesh	cuda/GeometryData.h	/^        TriangleMesh  triangle_mesh;$/;"	m	union:GeometryData::__anon3
triangulate	optixMotionGeometry/tiny_obj_loader.h	/^  bool triangulate;  \/\/ triangulate polygon?$/;"	m	struct:tinyobj::ObjReaderConfig
tryParseDouble	optixMotionGeometry/tiny_obj_loader.h	/^static bool tryParseDouble(const char *s, const char *s_end, double *result) {$/;"	f	namespace:tinyobj
tss_create	support/GLFW/deps/tinycthread.c	/^int tss_create(tss_t *key, tss_dtor_t dtor)$/;"	f
tss_delete	support/GLFW/deps/tinycthread.c	/^void tss_delete(tss_t key)$/;"	f
tss_dtor_t	support/GLFW/deps/tinycthread.h	/^typedef void (*tss_dtor_t)(void *val);$/;"	t
tss_get	support/GLFW/deps/tinycthread.c	/^void *tss_get(tss_t key)$/;"	f
tss_set	support/GLFW/deps/tinycthread.c	/^int tss_set(tss_t key, void *val)$/;"	f
tss_t	support/GLFW/deps/tinycthread.h	/^typedef DWORD tss_t;$/;"	t
tss_t	support/GLFW/deps/tinycthread.h	/^typedef pthread_key_t tss_t;$/;"	t
tszActionMap	support/GLFW/deps/mingw/dinput.h	/^	CHAR		tszActionMap[MAX_PATH];$/;"	m	struct:_DIACTIONFORMATA
tszActionMap	support/GLFW/deps/mingw/dinput.h	/^	WCHAR		tszActionMap[MAX_PATH];$/;"	m	struct:_DIACTIONFORMATW
tszImagePath	support/GLFW/deps/mingw/dinput.h	/^	CHAR	tszImagePath[MAX_PATH];$/;"	m	struct:_DIDEVICEIMAGEINFOA
tszImagePath	support/GLFW/deps/mingw/dinput.h	/^	WCHAR	tszImagePath[MAX_PATH];$/;"	m	struct:_DIDEVICEIMAGEINFOW
tszInstanceName	support/GLFW/deps/mingw/dinput.h	/^    CHAR	tszInstanceName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCEA
tszInstanceName	support/GLFW/deps/mingw/dinput.h	/^    CHAR    tszInstanceName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCE_DX3A
tszInstanceName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR	tszInstanceName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCEW
tszInstanceName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR   tszInstanceName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCE_DX3W
tszName	support/GLFW/deps/mingw/dinput.h	/^	CHAR			tszName[MAX_PATH];$/;"	m	struct:DIEFFECTINFOA
tszName	support/GLFW/deps/mingw/dinput.h	/^	WCHAR			tszName[MAX_PATH];$/;"	m	struct:DIEFFECTINFOW
tszName	support/GLFW/deps/mingw/dinput.h	/^    CHAR	tszName[MAX_PATH];$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
tszName	support/GLFW/deps/mingw/dinput.h	/^    CHAR    tszName[MAX_PATH];$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3A
tszName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR	tszName[MAX_PATH];$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
tszName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR   tszName[MAX_PATH];$/;"	m	struct:DIDEVICEOBJECTINSTANCE_DX3W
tszProductName	support/GLFW/deps/mingw/dinput.h	/^    CHAR	tszProductName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCEA
tszProductName	support/GLFW/deps/mingw/dinput.h	/^    CHAR    tszProductName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCE_DX3A
tszProductName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR	tszProductName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCEW
tszProductName	support/GLFW/deps/mingw/dinput.h	/^    WCHAR   tszProductName[MAX_PATH];$/;"	m	struct:DIDEVICEINSTANCE_DX3W
ttBYTE	support/imgui/imstb_truetype.h	1265;"	d
ttCHAR	support/imgui/imstb_truetype.h	1266;"	d
ttFixed	support/imgui/imstb_truetype.h	1267;"	d
ttLONG	support/imgui/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	support/imgui/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	support/imgui/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	support/imgui/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf_buffer	support/imgui/imstb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	support/imgui/imstb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
tuple_element	support/tinygltf/json.hpp	/^class tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >>$/;"	c	namespace:std
tuple_size	support/tinygltf/json.hpp	/^class tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>>$/;"	c	namespace:std
turbulence	optixMotionGeometry/tiny_obj_loader.h	/^  real_t turbulence[3];     \/\/ -t u [v [w]] (default 0 0 0)$/;"	m	struct:tinyobj::texture_option_t
tv_nsec	support/GLFW/deps/tinycthread.h	/^  long   tv_nsec;$/;"	m	struct:_ttherad_timespec
tv_sec	support/GLFW/deps/tinycthread.h	/^  time_t tv_sec;$/;"	m	struct:_ttherad_timespec
type	cuda/GeometryData.h	/^    Type  type = UNKNOWN_TYPE;$/;"	m	struct:GeometryData
type	cuda/Light.h	/^    Type  type;$/;"	m	class:Light::Type
type	cuda/MaterialData.h	/^    Type                 type            = PBR;$/;"	m	struct:MaterialData
type	optixMotionGeometry/tiny_obj_loader.h	/^  texture_type_t type;      \/\/ -type (default TEXTURE_TYPE_NONE)$/;"	m	struct:tinyobj::texture_option_t
type	support/GLFW/deps/vulkan/vulkan.h	/^    VkDescriptorType    type;$/;"	m	struct:VkDescriptorPoolSize
type	support/GLFW/src/win32_joystick.h	/^    int                     type;$/;"	m	struct:_GLFWjoyobjectWin32
type	support/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon70
type	support/tinyexr/tinyexr.h	/^  char type[256];$/;"	m	struct:_EXRAttribute
type	support/tinyexr/tinyexr.h	/^  int type;  \/\/ TINYEXR_ZFP_COMPRESSIONTYPE_*$/;"	m	struct:tinyexr::ZFPCompressionParam
type	support/tinygltf/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon104
type	support/tinygltf/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon108
type	support/tinygltf/tiny_gltf.h	/^  int type;           \/\/ (required) One of TINYGLTF_TYPE_***   ..$/;"	m	struct:tinygltf::Accessor
type	support/tinygltf/tiny_gltf.h	/^  std::string type;  \/\/ required. "perspective" or "orthographic"$/;"	m	struct:tinygltf::Camera
type	support/tinygltf/tiny_gltf.h	/^  std::string type;$/;"	m	struct:tinygltf::Light
type_	support/tinygltf/tiny_gltf.h	/^  int type_ = NULL_TYPE;$/;"	m	class:tinygltf::Value
type_error	support/tinygltf/json.hpp	/^    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::type_error
type_error	support/tinygltf/json.hpp	/^class type_error : public exception$/;"	c	namespace:nlohmann::detail
u	optixVolumeViewer/nanovdb/util/IO.h	/^    static_assert(sizeof(Header)   ==  16u, "Unexpected sizeof(Header)");$/;"	m	struct:nanovdb::io::Codec::Segment
u	support/tinyexr/tinyexr.h	/^  unsigned int u;$/;"	m	union:tinyexr::FP32
u	support/tinyexr/tinyexr.h	/^  unsigned short u;$/;"	m	union:tinyexr::FP16
uAppData	support/GLFW/deps/mingw/dinput.h	/^	UINT_PTR	uAppData;$/;"	m	struct:_DIACTIONA
uAppData	support/GLFW/deps/mingw/dinput.h	/^	UINT_PTR	uAppData;$/;"	m	struct:_DIACTIONW
uAppData	support/GLFW/deps/mingw/dinput.h	/^    UINT_PTR	uAppData;$/;"	m	struct:DIDEVICEOBJECTDATA
uData	support/GLFW/deps/mingw/dinput.h	/^	UINT_PTR     uData;$/;"	m	struct:DIPROPPOINTER
uInt	support/tinyexr/tinyexr.h	/^typedef unsigned int uInt;$/;"	t
uIntf	support/tinyexr/tinyexr.h	/^typedef uInt uIntf;$/;"	t
uLong	support/tinyexr/tinyexr.h	/^typedef mz_ulong uLong;$/;"	t
uLongf	support/tinyexr/tinyexr.h	/^typedef uLong uLongf;$/;"	t
uResIdString	support/GLFW/deps/mingw/dinput.h	/^		UINT	uResIdString;$/;"	m	union:_DIACTIONA::__anon29
uResIdString	support/GLFW/deps/mingw/dinput.h	/^		UINT	uResIdString;$/;"	m	union:_DIACTIONW::__anon30
ubjson	support/tinygltf/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	m	class:nlohmann::detail::input_format_t
ucs	support/GLFW/src/xkb_unicode.c	/^  unsigned short ucs;$/;"	m	struct:codepair	file:
uint16_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef unsigned short      uint16_t;$/;"	t
uint16_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef unsigned __int16 uint16_t;$/;"	t
uint32	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    uint32[4];$/;"	m	union:VkClearColorValue
uint32_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef unsigned __int32    uint32_t;$/;"	t
uint32_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef unsigned int       uint32_t;$/;"	t
uint32_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef unsigned __int64    uint64_t;$/;"	t
uint64_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	support/GLFW/deps/glad/glad.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	support/GLFW/deps/glad/glad.h	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	support/GLFW/deps/glad/glad.h	/^typedef unsigned long long int uint64_t;$/;"	t
uint64_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	optixOpticalFlow/nvOpticalFlowCommon.h	/^typedef unsigned char       uint8_t;$/;"	t
uint8_t	optixVolumeViewer/nanovdb/NanoVDB.h	/^typedef unsigned char      uint8_t;$/;"	t
uint8_t	support/GLFW/deps/vulkan/vk_platform.h	/^        typedef unsigned __int8  uint8_t;$/;"	t
uncompress	support/tinyexr/tinyexr.h	1208;"	d
undo_char	support/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon83
undo_char_point	support/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon83
undo_point	support/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon83
undo_rec	support/imgui/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon83
undostate	support/imgui/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon84
unescape	support/tinygltf/json.hpp	/^    static void unescape(std::string& s)$/;"	f	class:nlohmann::json_pointer
unexpect_eof	support/tinygltf/json.hpp	/^    bool unexpect_eof(const input_format_t format, const char* context) const$/;"	f	class:nlohmann::detail::binary_reader
unflatten	support/tinygltf/json.hpp	/^    basic_json unflatten() const$/;"	f	class:nlohmann::basic_json
unflatten	support/tinygltf/json.hpp	/^    unflatten(const BasicJsonType& value)$/;"	f	class:nlohmann::json_pointer
unget	support/tinygltf/json.hpp	/^    void unget()$/;"	f	class:nlohmann::detail::lexer
unicodeData	support/GLFW/src/cocoa_platform.h	/^    id                  unicodeData;$/;"	m	struct:_GLFWlibraryNS
uninitialized	support/tinygltf/json.hpp	/^        uninitialized,    \/\/\/< indicating the scanner is uninitialized$/;"	m	class:nlohmann::detail::lexer::token_type
unitNumber	support/GLFW/src/cocoa_platform.h	/^    uint32_t            unitNumber;$/;"	m	struct:_GLFWmonitorNS
unknown_parameter	optixMotionGeometry/tiny_obj_loader.h	/^  std::map<std::string, std::string> unknown_parameter;$/;"	m	struct:tinyobj::material_t
unlockPointer	support/GLFW/src/wl_window.c	/^static void unlockPointer(_GLFWwindow* window)$/;"	f	file:
unmap	sutil/CUDAOutputBuffer.h	/^void CUDAOutputBuffer<PIXEL_FORMAT>::unmap()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
unnormalizedCoordinates	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32                unnormalizedCoordinates;$/;"	m	struct:VkSamplerCreateInfo
unpackPointer	optixBoundValues/optixBoundValues.h	/^static __forceinline__ __device__ void* unpackPointer( unsigned int i0, unsigned int i1 )$/;"	f
unpackPointer	optixModuleCreateAbort/optixModuleCreateAbort.h	/^static __forceinline__ __device__ void* unpackPointer( unsigned int i0, unsigned int i1 )$/;"	f
up	sutil/Camera.h	/^    SUTILAPI const float3& up() const { return m_up; }$/;"	f	class:sutil::Camera
update	optixDenoiser/OptiXDenoiser.h	/^void OptiXDenoiser::update( const Data& data )$/;"	f	class:OptiXDenoiser
update	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^void update( DisplacedMicromeshState& state )$/;"	f
update	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ bool update(const RayT& ray, int dim)$/;"	f	class:nanovdb::HDDA
update	support/tinygltf/json.hpp	/^    void update(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json
update	support/tinygltf/json.hpp	/^    void update(const_reference j)$/;"	f	class:nlohmann::basic_json
updateBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^inline void LeafNode<ValueT, CoordT, MaskT, LOG2DIM>::updateBBox()$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
updateCamera	sutil/Trackball.cpp	/^void Trackball::updateCamera()$/;"	f	class:sutil::Trackball
updateClipRect	support/GLFW/src/win32_window.c	/^static void updateClipRect(_GLFWwindow* window)$/;"	f	file:
updateCursorImage	support/GLFW/src/win32_window.c	/^static void updateCursorImage(_GLFWwindow* window)$/;"	f	file:
updateCursorImage	support/GLFW/src/x11_window.c	/^static void updateCursorImage(_GLFWwindow* window)$/;"	f	file:
updateDeviceStates	optixNVLink/optixNVLink.cpp	/^void updateDeviceStates( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PerDeviceSampleState>& pd_states )$/;"	f
updateHitGroupData	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void updateHitGroupData( SampleState& state )$/;"	f
updateIAS	optixVolumeViewer/optixVolumeViewer.cpp	/^void updateIAS( IAS& ias, const OptixDeviceContext& context )$/;"	f
updateInstanceOffset	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void updateInstanceOffset( SampleState& state )$/;"	f
updateMeshAccel	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void updateMeshAccel( DynamicGeometryState& state )$/;"	f
updateMeshAccel	optixMotionGeometry/optixMotionGeometry.cpp	/^void updateMeshAccel( MotionGeometryState& state )$/;"	f
updateNormalHints	support/GLFW/src/x11_window.c	/^static void updateNormalHints(_GLFWwindow* window, int width, int height)$/;"	f	file:
updateParams	optixHair/optixHair.cpp	/^void updateParams( HairState* pState )$/;"	f
updatePipeline	optixBoundValues/optixBoundValues.cpp	/^void updatePipeline( PathTracerState& state )$/;"	f
updatePipeline	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void updatePipeline( PathTracerState& state )$/;"	f
updatePipelineWhenChanged	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void updatePipelineWhenChanged( PathTracerState& state )$/;"	f
updateSbtHeader	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void updateSbtHeader( SampleState& state )$/;"	f
updateSize	optixHair/optixHair.cpp	/^void updateSize( HairState* pState, int width, int height )$/;"	f
updateState	optixBoundValues/optixBoundValues.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixCallablePrograms/optixCallablePrograms.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, CallableProgramsState& state )$/;"	f
updateState	optixCutouts/optixCutouts.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixDynamicGeometry/optixDynamicGeometry.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixDynamicMaterials/optixDynamicMaterials.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, SampleState& state )$/;"	f
updateState	optixMeshViewer/optixMeshViewer.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, whitted::LaunchParams& params )$/;"	f
updateState	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixMultiGPU/optixMultiGPU.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, std::vector<PathTracerState>& states )$/;"	f
updateState	optixPathTracer/optixPathTracer.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, Params& params )$/;"	f
updateState	optixVolumeViewer/optixVolumeViewer.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, LaunchParams& params )$/;"	f
updateState	optixWhitted/optixWhitted.cpp	/^void updateState( sutil::CUDAOutputBuffer<uchar4>& output_buffer, WhittedState &state )$/;"	f
updateTracking	sutil/Trackball.cpp	/^void Trackball::updateTracking(int x, int y, int \/*canvasWidth*\/, int \/*canvasHeight*\/)$/;"	f	class:sutil::Trackball
updateWindowMode	support/GLFW/src/x11_window.c	/^static void updateWindowMode(_GLFWwindow* window)$/;"	f	file:
upload	sutil/CuBuffer.h	/^    void upload( const T* data )$/;"	f	class:CuBuffer
upload	sutil/CuBuffer.h	/^    void upload( std::initializer_list<T> data )$/;"	f	class:CuBuffer
uploadAdditionalShadingData	optixNVLink/optixNVLink.cpp	/^void uploadAdditionalShadingData( PerDeviceSampleState& pd_state )$/;"	f
uploadAsync	sutil/CuBuffer.h	/^    void uploadAsync( const T& data, CUstream stream = 0 )$/;"	f	class:CuBuffer
uploadAsync	sutil/CuBuffer.h	/^    void uploadAsync( const T* data, CUstream stream = 0 )$/;"	f	class:CuBuffer
uploadAsync	sutil/CuBuffer.h	/^    void uploadAsync( std::initializer_list<T> data, CUstream stream = 0 )$/;"	f	class:CuBuffer
uploadSub	sutil/CuBuffer.h	/^    void uploadSub( size_t count, size_t offset, const T* data )$/;"	f	class:CuBuffer
uploadSub	sutil/CuBuffer.h	/^    void uploadSub( size_t offset, std::initializer_list<T> data )$/;"	f	class:CuBuffer
uploadSubAsync	sutil/CuBuffer.h	/^    void uploadSubAsync( size_t count, size_t offset, const T* data, CUstream stream = 0 )$/;"	f	class:CuBuffer
uploadSubAsync	sutil/CuBuffer.h	/^    void uploadSubAsync( size_t offset, std::initializer_list<T> data, CUstream stream = 0 )$/;"	f	class:CuBuffer
uri	support/tinygltf/tiny_gltf.h	/^      uri;  \/\/ considered as required here but not in the spec (need to clarify)$/;"	m	struct:tinygltf::Buffer
uri	support/tinygltf/tiny_gltf.h	/^  std::string uri;       \/\/ (required if no mimeType) uri is not decoded(e.g.$/;"	m	struct:tinygltf::Image
urldecode	support/tinygltf/tiny_gltf.h	/^static const std::string urldecode(const std::string &str) {$/;"	f	namespace:tinygltf::dlib
usage	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^        OptixDisplacementMicromapUsageCount     usage;$/;"	m	struct:MeshData::DmmArray	file:
usage	support/GLFW/deps/vulkan/vulkan.h	/^    VkBufferUsageFlags     usage;$/;"	m	struct:VkBufferCreateInfo
usage	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageUsageFlags        usage;$/;"	m	struct:VkImageCreateInfo
use_pbo	optixCutouts/optixCutouts.cpp	/^bool             use_pbo      = true;$/;"	v
usemtl_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*usemtl_cb)(void *user_data, const char *name, int material_id);$/;"	m	struct:tinyobj::callback_t
user32	support/GLFW/src/win32_platform.h	/^    } user32;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon15
userPointer	support/GLFW/src/internal.h	/^    void*               userPointer;$/;"	m	struct:_GLFWwindow
user_allocator_context	support/imgui/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
user_data	support/tinygltf/tiny_gltf.h	/^  void *user_data;  \/\/ An argument that is passed to all fs callbacks$/;"	m	struct:tinygltf::FsCallbacks
userdata	support/imgui/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo
usesPrimitiveTypes	optixHair/Hair.h	/^    unsigned int usesPrimitiveTypes() const$/;"	f	class:Hair
usesPrimitiveTypes	optixHair/Head.h	/^    virtual unsigned int usesPrimitiveTypes() const { return OPTIX_PRIMITIVE_TYPE_FLAGS_TRIANGLE; }$/;"	f	class:Head
utf8_bytes	support/tinygltf/json.hpp	/^    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};$/;"	m	class:nlohmann::detail::wide_string_input_adapter
utf8_bytes_filled	support/tinygltf/json.hpp	/^    std::size_t utf8_bytes_filled = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter
utf8_bytes_index	support/tinygltf/json.hpp	/^    std::size_t utf8_bytes_index = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter
uv	support/imgui/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert
uvs	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^    std::vector<float2> uvs;$/;"	m	struct:MeshData	file:
uvs	optixOpacityMicromap/optixOpacityMicromap.h	/^    float2* uvs;$/;"	m	struct:HitGroupData
v	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> v;$/;"	m	struct:tinyobj::obj_shape
v	support/tinygltf/json.hpp	/^        : v(vec)$/;"	f	class:nlohmann::detail::output_vector_adapter
v	support/tinygltf/json.hpp	/^    std::vector<CharType>& v;$/;"	m	class:nlohmann::detail::output_vector_adapter
v	support/tinygltf/stb_image.h	/^      int h,v;$/;"	m	struct:__anon99::__anon100
v1	cuda/GeometryData.h	/^        float3 v1;$/;"	m	struct:GeometryData::Parallelogram
v1	optixBoundValues/optixBoundValues.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v1	optixBoundValues/optixBoundValues.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixCutouts/optixCutouts.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v1	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixMultiGPU/optixMultiGPU.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v1	optixMultiGPU/optixMultiGPU.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixNVLink/optixNVLink.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v1	optixNVLink/optixNVLink.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixPathTracer/optixPathTracer.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v1	optixPathTracer/optixPathTracer.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v1	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	cuda/GeometryData.h	/^        float3 v2;$/;"	m	struct:GeometryData::Parallelogram
v2	optixBoundValues/optixBoundValues.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	optixBoundValues/optixBoundValues.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixCutouts/optixCutouts.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixMultiGPU/optixMultiGPU.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	optixMultiGPU/optixMultiGPU.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixNVLink/optixNVLink.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	optixNVLink/optixNVLink.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixPathTracer/optixPathTracer.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v2	optixPathTracer/optixPathTracer.h	/^    float3 v1, v2;$/;"	m	struct:ParallelogramLight
v2	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixBoundValues/optixBoundValues.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixMultiGPU/optixMultiGPU.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixNVLink/optixNVLink.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixPathTracer/optixPathTracer.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v3	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    uint32_t v1, v2, v3, pad;$/;"	m	struct:IndexedTriangle	file:
v_idx	optixMotionGeometry/tiny_obj_loader.h	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index_t
v_oversample	support/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon68
v_oversample	support/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
va_copy	support/imgui/imgui.cpp	2123;"	d	file:
va_copy	support/imgui/imgui.cpp	2125;"	d	file:
val	support/GLFW/deps/getopt.h	/^  int val;$/;"	m	struct:option
val	support/tinygltf/json.hpp	/^    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())$/;"	m	struct:nlohmann::adl_serializer
val_f	support/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon91
val_i	support/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon91
val_p	support/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon91
valid	optixVolumeViewer/nanovdb/util/Ray.h	/^        __hostdev__ bool valid(RealT eps = Delta<RealT>::value()) const { return (t1 - t0) > eps; }$/;"	f	struct:nanovdb::Ray::TimeSpan
valid	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ bool valid(RealT eps = Delta<float>::value()) const { return mTimeSpan.valid(eps); }$/;"	f	class:nanovdb::Ray
valid	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE bool Aabb::valid() const$/;"	f	class:sutil::Aabb
valid_	optixMotionGeometry/tiny_obj_loader.h	/^  bool valid_;$/;"	m	class:tinyobj::ObjReader
validate_uint32	support/tinygltf/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static double value() { return 1e+308; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Maximum
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static double value() { return 1e-15; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tolerance
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static double value() { return 1e-9; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Delta
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static float value() { return 1e+38f; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Maximum
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static float value() { return 1e-5f; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Delta
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static float value() { return 1e-8f; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Tolerance
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static int value() { return 2147483647; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Maximum
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t value() { return 4294967295; }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Maximum
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static T value() { return std::numeric_limits<T>::max(); }$/;"	f	struct:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Maximum
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool value = false;$/;"	m	struct:nanovdb::is_same
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool value = false;$/;"	m	struct:nanovdb::is_specialization
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool value = is_same<T, float>::value || is_same<T, double>::value;$/;"	m	struct:nanovdb::is_floating_point
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool value = true;$/;"	m	struct:nanovdb::is_same
value	optixVolumeViewer/nanovdb/NanoVDB.h	/^    static const bool value = true;$/;"	m	struct:nanovdb::is_specialization
value	support/tinyexr/tinyexr.h	/^  unsigned char *value;  \/\/ uint8_t*$/;"	m	struct:_EXRAttribute
value	support/tinygltf/json.hpp	/^    ValueType value(const json_pointer& ptr, const ValueType& default_value) const$/;"	f	class:nlohmann::basic_json
value	support/tinygltf/json.hpp	/^    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const$/;"	f	class:nlohmann::basic_json
value	support/tinygltf/json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::iter_impl
value	support/tinygltf/json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::json_reverse_iterator
value	support/tinygltf/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_integer_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_string_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_constructible_string_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_iterator_traits
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_from_json
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_non_default_from_json
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_to_json
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_array_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_object_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_constructible_array_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_constructible_object_type_impl
value	support/tinygltf/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_sax
value	support/tinygltf/json.hpp	/^    string_t value(const json_pointer& ptr, const char* default_value) const$/;"	f	class:nlohmann::basic_json
value	support/tinygltf/json.hpp	/^    string_t value(const typename object_t::key_type& key, const char* default_value) const$/;"	f	class:nlohmann::basic_json
value	support/tinygltf/json.hpp	/^    typename IteratorType::reference value() const$/;"	f	class:nlohmann::detail::iteration_proxy_value
value	support/tinygltf/json.hpp	/^constexpr T static_const<T>::value;$/;"	m	class:nlohmann::detail::static_const
value	support/tinygltf/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon102
valueMask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const MaskType<LOG2DIM>& valueMask() const { return DataType::mValueMask; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
valueMask	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const MaskType<LOG2DIM>& valueMask() const { return DataType::mValueMask; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
valueMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMax() const { return DataType::mMaximum; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
valueMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMax() const { return DataType::mMaximum; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
valueMax	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMax() const { return DataType::valueMax(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
valueMin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMin() const { return DataType::mMinimum; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
valueMin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMin() const { return DataType::mMinimum; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
valueMin	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType& valueMin() const { return DataType::valueMin(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
value_float	support/tinygltf/json.hpp	/^        value_float,      \/\/\/< an floating point number -- use get_number_float() for actual value$/;"	m	class:nlohmann::detail::lexer::token_type
value_float	support/tinygltf/json.hpp	/^    number_float_t value_float = 0;$/;"	m	class:nlohmann::detail::lexer
value_integer	support/tinygltf/json.hpp	/^        value_integer,    \/\/\/< a signed integer -- use get_number_integer() for actual value$/;"	m	class:nlohmann::detail::lexer::token_type
value_integer	support/tinygltf/json.hpp	/^    number_integer_t value_integer = 0;$/;"	m	class:nlohmann::detail::lexer
value_ref	support/tinygltf/json.hpp	/^    value_type* value_ref = nullptr;$/;"	m	class:nlohmann::detail::json_ref
value_separator	support/tinygltf/json.hpp	/^        value_separator,  \/\/\/< the value separator `,`$/;"	m	class:nlohmann::detail::lexer::token_type
value_string	support/tinygltf/json.hpp	/^        value_string,     \/\/\/< a string -- use get_string() for actual value$/;"	m	class:nlohmann::detail::lexer::token_type
value_t	support/tinygltf/json.hpp	/^enum class value_t : std::uint8_t$/;"	c	namespace:nlohmann::detail
value_type	support/imgui/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector
value_unsigned	support/tinygltf/json.hpp	/^        value_unsigned,   \/\/\/< an unsigned integer -- use get_number_unsigned() for actual value$/;"	m	class:nlohmann::detail::lexer::token_type
value_unsigned	support/tinygltf/json.hpp	/^    number_unsigned_t value_unsigned = 0;$/;"	m	class:nlohmann::detail::lexer
values	support/tinygltf/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon98
values	support/tinygltf/tiny_gltf.h	/^    } values;$/;"	m	struct:tinygltf::Accessor::__anon115	typeref:struct:tinygltf::Accessor::__anon115::__anon117
values	support/tinygltf/tiny_gltf.h	/^  ParameterMap values;$/;"	m	struct:tinygltf::Material
variableMultisampleRate	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    variableMultisampleRate;$/;"	m	struct:VkPhysicalDeviceFeatures
variance	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ FloatType variance() const { return DataType::mStdDevi * DataType::mStdDevi; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode
variance	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ FloatType variance() const { return DataType::mStdDevi*DataType::mStdDevi; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::InternalNode
variance	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ FloatType variance() const { return DataType::stdDeviation()*DataType::stdDeviation(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
vec3_mul_cross	support/GLFW/deps/linmath.h	/^static inline void vec3_mul_cross(vec3 r, vec3 const a, vec3 const b)$/;"	f
vec3_reflect	support/GLFW/deps/linmath.h	/^static inline void vec3_reflect(vec3 r, vec3 const v, vec3 const n)$/;"	f
vec4_mul_cross	support/GLFW/deps/linmath.h	/^static inline void vec4_mul_cross(vec4 r, vec4 a, vec4 b)$/;"	f
vec4_reflect	support/GLFW/deps/linmath.h	/^static inline void vec4_reflect(vec4 r, vec4 v, vec4 n)$/;"	f
velocity3	cuda/curve.h	/^    __device__ __forceinline__ float3 velocity3( float u ) const$/;"	f	struct:CubicInterpolator
velocity3	cuda/curve.h	/^    __device__ __forceinline__ float3 velocity3( float u ) const$/;"	f	struct:LinearInterpolator
velocity3	cuda/curve.h	/^    __device__ __forceinline__ float3 velocity3( float u ) const$/;"	f	struct:QuadraticInterpolator
velocity4	cuda/curve.h	/^    __device__ __forceinline__ float4 velocity4( float u ) const$/;"	f	struct:CubicInterpolator
velocity4	cuda/curve.h	/^    __device__ __forceinline__ float4 velocity4( float u ) const$/;"	f	struct:LinearInterpolator
velocity4	cuda/curve.h	/^    __device__ __forceinline__ float4 velocity4( float u ) const$/;"	f	struct:QuadraticInterpolator
vendorID	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                            vendorID;$/;"	m	struct:VkPhysicalDeviceProperties
version	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Version                  version() const { return this->grid().version(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
version	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Version version() const { return DataType::mVersion; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
version	optixVolumeViewer/nanovdb/util/IO.h	/^    Version     version;\/\/ 4B$/;"	m	struct:nanovdb::io::Codec::MetaData
version	optixVolumeViewer/nanovdb/util/IO.h	/^    Version  version;\/\/ 4 bytes version numbers $/;"	m	struct:nanovdb::io::Codec::Header
version	support/tinyexr/tinyexr.h	/^  int version;    \/\/ this must be 2$/;"	m	struct:_EXRVersion
version	support/tinygltf/tiny_gltf.h	/^  std::string version;  \/\/ required$/;"	m	struct:tinygltf::Asset
vertexAttributeDescriptionCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    vertexAttributeDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
vertexBindingDescriptionCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    vertexBindingDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo
vertexCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    vertexCount;$/;"	m	struct:VkDrawIndirectCommand
vertexOffset	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t     vertexOffset;$/;"	m	struct:VkDrawIndexedIndirectCommand
vertexPipelineStoresAndAtomics	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    vertexPipelineStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures
vertex_cb	optixMotionGeometry/tiny_obj_loader.h	/^  void (*vertex_cb)(void *user_data, real_t x, real_t y, real_t z, real_t w);$/;"	m	struct:tinyobj::callback_t
vertex_color	optixMotionGeometry/tiny_obj_loader.h	/^  bool vertex_color;$/;"	m	struct:tinyobj::ObjReaderConfig
vertex_index	optixMotionGeometry/tiny_obj_loader.h	/^  int vertex_index;$/;"	m	struct:tinyobj::index_t
vertex_index_t	optixMotionGeometry/tiny_obj_loader.h	/^  explicit vertex_index_t(int idx) : v_idx(idx), vt_idx(idx), vn_idx(idx) {}$/;"	f	struct:tinyobj::vertex_index_t
vertex_index_t	optixMotionGeometry/tiny_obj_loader.h	/^  vertex_index_t() : v_idx(-1), vt_idx(-1), vn_idx(-1) {}$/;"	f	struct:tinyobj::vertex_index_t
vertex_index_t	optixMotionGeometry/tiny_obj_loader.h	/^  vertex_index_t(int vidx, int vtidx, int vnidx)$/;"	f	struct:tinyobj::vertex_index_t
vertex_index_t	optixMotionGeometry/tiny_obj_loader.h	/^struct vertex_index_t {$/;"	s	namespace:tinyobj
vertex_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<int> vertex_indices;$/;"	m	struct:tinyobj::mesh_t
vertex_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<vertex_index_t> vertex_indices;  \/\/ face vertex indices.$/;"	m	struct:tinyobj::face_t
vertex_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<vertex_index_t> vertex_indices;$/;"	m	struct:tinyobj::__line_t
vertex_indices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<vertex_index_t> vertex_indices;$/;"	m	struct:tinyobj::__points_t
vertex_weights	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> vertex_weights;  \/\/ 'v'(w)$/;"	m	struct:tinyobj::attrib_t
vertices	optixBoundValues/optixBoundValues.h	/^    float4* vertices;$/;"	m	struct:HitGroupData
vertices	optixCutouts/optixCutouts.h	/^    float4*  vertices;$/;"	m	struct:CutoutsHitGroupData
vertices	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    float4* vertices;$/;"	m	struct:HitGroupData
vertices	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> vertices;  \/\/ 'v'(xyz)$/;"	m	struct:tinyobj::attrib_t
vertices	optixMultiGPU/optixMultiGPU.h	/^    float4* vertices;$/;"	m	struct:HitGroupData
vertices	optixNVLink/optixNVLink.h	/^    float4* vertices;$/;"	m	struct:HitGroupData
vertices	optixPathTracer/optixPathTracer.h	/^    float4* vertices;$/;"	m	struct:HitGroupData
vertices	optixRibbons/optixRibbons.h	/^std::vector<float3> vertices = {$/;"	v
videoMode	support/GLFW/src/internal.h	/^    GLFWvidmode         videoMode;$/;"	m	struct:_GLFWwindow
vidmode	support/GLFW/src/x11_platform.h	/^    } vidmode;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon26
vidmodeFromModeInfo	support/GLFW/src/x11_monitor.c	/^static GLFWvidmode vidmodeFromModeInfo(const XRRModeInfo* mi,$/;"	f	file:
view	support/GLFW/src/cocoa_platform.h	/^    id              view;$/;"	m	struct:_GLFWwindowNS
viewMode	sutil/Trackball.h	/^    SUTILAPI ViewMode viewMode() const { return m_viewMode; }$/;"	f	class:sutil::Trackball
viewType	support/GLFW/deps/vulkan/vulkan.h	/^    VkImageViewType            viewType;$/;"	m	struct:VkImageViewCreateInfo
viewportBoundsRange	support/GLFW/deps/vulkan/vulkan.h	/^    float                 viewportBoundsRange[2];$/;"	m	struct:VkPhysicalDeviceLimits
viewportCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                              viewportCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo
viewportSubPixelBits	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t              viewportSubPixelBits;$/;"	m	struct:VkPhysicalDeviceLimits
virtualCursorPosX	support/GLFW/src/internal.h	/^    double              virtualCursorPosX, virtualCursorPosY;$/;"	m	struct:_GLFWwindow
virtualCursorPosY	support/GLFW/src/internal.h	/^    double              virtualCursorPosX, virtualCursorPosY;$/;"	m	struct:_GLFWwindow
vis	cuda/whitted_cuda.h	/^__device__ __forceinline__ float vis( const float N_dot_L, const float N_dot_V, const float alpha )$/;"	f	namespace:whitted
visible	support/GLFW/src/internal.h	/^    GLFWbool      visible;$/;"	m	struct:_GLFWwndconfig
visible	support/GLFW/src/wl_platform.h	/^    GLFWbool                    visible;$/;"	m	struct:_GLFWwindowWayland
visibleRegion	support/GLFW/deps/vulkan/vulkan.h	/^    VkExtent2D    visibleRegion;$/;"	m	struct:VkDisplayModeParametersKHR
vk	support/GLFW/src/internal.h	/^    } vk;$/;"	m	struct:_GLFWlibrary	typeref:struct:_GLFWlibrary::__anon10
vkEnumerateInstanceExtensionProperties	support/GLFW/src/internal.h	160;"	d
vkGetInstanceProcAddr	support/GLFW/src/internal.h	161;"	d
vn	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> vn;$/;"	m	struct:tinyobj::obj_shape
vn_idx	optixMotionGeometry/tiny_obj_loader.h	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index_t
voidp	support/tinyexr/tinyexr.h	/^typedef void *voidp;$/;"	t
voidpc	support/tinyexr/tinyexr.h	/^typedef void *const voidpc;$/;"	t
voidpf	support/tinyexr/tinyexr.h	/^typedef void *voidpf;$/;"	t
volatile	build-SDK-Desktop_Qt_6_5_2_GCC_64bit-Debug/CMakeFiles/3.27.7/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
volume	optixVolumeViewer/volume.h	/^        Volume  volume; $/;"	m	union:MaterialData::__anon6
volume	optixVolumeViewer/volume.h	/^        Volume volume;$/;"	m	union:GeometryData::__anon7
volume	sutil/Aabb.h	/^  SUTIL_INLINE SUTIL_HOSTDEVICE float Aabb::volume() const$/;"	f	class:sutil::Aabb
volume_object	optixVolumeViewer/volume.h	/^    unsigned int volume_object;$/;"	m	struct:LaunchParams
volume_occlusion	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup volume_occlusion = 0;$/;"	m	struct:ProgramGroups
volume_radiance	optixVolumeViewer/optixVolumeViewer.h	/^    OptixProgramGroup volume_radiance  = 0;$/;"	m	struct:ProgramGroups
voxel	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ const CoordT& voxel() const { return mVoxel; }$/;"	f	class:nanovdb::DDA
voxel	optixVolumeViewer/nanovdb/util/HDDA.h	/^    __hostdev__ const CoordT& voxel() const { return mVoxel; }$/;"	f	class:nanovdb::HDDA
voxelCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t voxelCount() { return 1u << (3 * LOG2DIM); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
voxelCount	optixVolumeViewer/nanovdb/util/IO.h	/^    uint64_t    gridSize, fileSize, nameKey, voxelCount; \/\/ 4 * 8 = 32B.$/;"	m	struct:nanovdb::io::Codec::MetaData
voxelPoints	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ uint64_t voxelPoints(const Coord& ijk, const AttT*& begin, const AttT*& end) const$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::PointAccessor
voxelSize	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3R              voxelSize() const { return this->grid().voxelSize(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
voxelSize	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const Vec3R& voxelSize() const { return DataType::mVoxelSize; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
voxelSize	optixVolumeViewer/nanovdb/util/IO.h	/^    Vec3R       voxelSize; \/\/ 24B.$/;"	m	struct:nanovdb::io::Codec::MetaData
voxels	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const ValueType* voxels() const { return DataType::values(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::RootNode::LeafNode
vs	support/tinygltf/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon101
vsnprintf	support/imgui/imgui.cpp	1406;"	d	file:
vsnprintf	support/imgui/imgui_demo.cpp	96;"	d	file:
vt	optixMotionGeometry/tiny_obj_loader.h	/^  std::vector<real_t> vt;$/;"	m	struct:tinyobj::obj_shape
vt_idx	optixMotionGeometry/tiny_obj_loader.h	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index_t
w	cuda/GeometryData.h	/^    float x, y, z, w;$/;"	m	struct:Vec4f
w	support/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
w	support/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
w	support/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	support/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon71
w	support/tinygltf/json.hpp	/^    diyfp w;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries
w	support/tinygltf/stb_image.h	/^   int w,h;$/;"	m	struct:__anon110
w	sutil/Quaternion.h	/^    float w() const           { return q[0]; }$/;"	f	class:sutil::Quaternion
w2	support/tinygltf/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon99::__anon100
wButtons	support/GLFW/deps/mingw/xinput.h	/^    WORD wButtons;$/;"	m	struct:_XINPUT_GAMEPAD
wCollectionNumber	support/GLFW/deps/mingw/dinput.h	/^    WORD	wCollectionNumber;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wCollectionNumber	support/GLFW/deps/mingw/dinput.h	/^    WORD	wCollectionNumber;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
wDesignatorIndex	support/GLFW/deps/mingw/dinput.h	/^    WORD	wDesignatorIndex;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wDesignatorIndex	support/GLFW/deps/mingw/dinput.h	/^    WORD	wDesignatorIndex;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
wExponent	support/GLFW/deps/mingw/dinput.h	/^    WORD	wExponent;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wExponent	support/GLFW/deps/mingw/dinput.h	/^    WORD	wExponent;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
wLeftMotorSpeed	support/GLFW/deps/mingw/xinput.h	/^    WORD wLeftMotorSpeed;$/;"	m	struct:_XINPUT_VIBRATION
wReserved	support/GLFW/deps/mingw/dinput.h	/^    WORD	wReserved;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wReserved	support/GLFW/deps/mingw/dinput.h	/^    WORD	wReserved;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
wRightMotorSpeed	support/GLFW/deps/mingw/xinput.h	/^    WORD wRightMotorSpeed;$/;"	m	struct:_XINPUT_VIBRATION
wUsage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsage;$/;"	m	struct:DIDEVICEINSTANCEA
wUsage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsage;$/;"	m	struct:DIDEVICEINSTANCEW
wUsage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsage;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wUsage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsage;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
wUsagePage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsagePage;$/;"	m	struct:DIDEVICEINSTANCEA
wUsagePage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsagePage;$/;"	m	struct:DIDEVICEINSTANCEW
wUsagePage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsagePage;$/;"	m	struct:DIDEVICEOBJECTINSTANCEA
wUsagePage	support/GLFW/deps/mingw/dinput.h	/^    WORD	wUsagePage;$/;"	m	struct:DIDEVICEOBJECTINSTANCEW
w_lores	support/tinygltf/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon101
waitForEvent	support/GLFW/src/x11_window.c	/^static GLFWbool waitForEvent(double* timeout)$/;"	f	file:
waitForVisibilityNotify	support/GLFW/src/x11_window.c	/^static GLFWbool waitForVisibilityNotify(_GLFWwindow* window)$/;"	f	file:
waitSemaphoreCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                                    waitSemaphoreCount;$/;"	m	struct:VkBindSparseInfo
waitSemaphoreCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                       waitSemaphoreCount;$/;"	m	struct:VkSubmitInfo
waitSemaphoreCount	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                 waitSemaphoreCount;$/;"	m	struct:VkPresentInfoKHR
warning_	optixMotionGeometry/tiny_obj_loader.h	/^  std::string warning_;$/;"	m	class:tinyobj::ObjReader
warpCursorPosX	support/GLFW/src/x11_platform.h	/^    int             warpCursorPosX, warpCursorPosY;$/;"	m	struct:_GLFWwindowX11
warpCursorPosY	support/GLFW/src/x11_platform.h	/^    int             warpCursorPosX, warpCursorPosY;$/;"	m	struct:_GLFWwindowX11
was_packed	support/imgui/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect
was_packed	support/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
watch	support/GLFW/src/linux_joystick.h	/^    int             watch;$/;"	m	struct:_GLFWjoylistLinux
wav2Decode	support/tinyexr/tinyexr.h	/^static void wav2Decode($/;"	f	namespace:tinyexr
wav2Encode	support/tinyexr/tinyexr.h	/^static void wav2Encode($/;"	f	namespace:tinyexr
wdec14	support/tinyexr/tinyexr.h	/^inline void wdec14(unsigned short l, unsigned short h, unsigned short &a,$/;"	f	namespace:tinyexr
wdec16	support/tinyexr/tinyexr.h	/^inline void wdec16(unsigned short l, unsigned short h, unsigned short &a,$/;"	f	namespace:tinyexr
weights	support/tinygltf/tiny_gltf.h	/^  std::vector<double> weights;  \/\/ The weights of the instantiated Morph Target$/;"	m	class:tinygltf::Node
weights	support/tinygltf/tiny_gltf.h	/^  std::vector<double> weights;  \/\/ weights to be applied to the Morph Targets$/;"	m	struct:tinygltf::Mesh
wenc14	support/tinyexr/tinyexr.h	/^inline void wenc14(unsigned short a, unsigned short b, unsigned short &l,$/;"	f	namespace:tinyexr
wenc16	support/tinyexr/tinyexr.h	/^inline void wenc16(unsigned short a, unsigned short b, unsigned short &l,$/;"	f	namespace:tinyexr
wglCreateContext	support/GLFW/src/wgl_context.h	93;"	d
wglDeleteContext	support/GLFW/src/wgl_context.h	94;"	d
wglGetCurrentDC	support/GLFW/src/wgl_context.h	96;"	d
wglGetProcAddress	support/GLFW/src/wgl_context.h	95;"	d
wglMakeCurrent	support/GLFW/src/wgl_context.h	97;"	d
wglShareLists	support/GLFW/src/wgl_context.h	98;"	d
wheelEvent	sutil/Trackball.cpp	/^bool Trackball::wheelEvent(int dir)$/;"	f	class:sutil::Trackball
where	support/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon82
whitted	cuda/whitted.h	/^namespace whitted$/;"	n
whitted	cuda/whitted_cuda.h	/^namespace whitted {$/;"	n
wideLines	support/GLFW/deps/vulkan/vulkan.h	/^    VkBool32    wideLines;$/;"	m	struct:VkPhysicalDeviceFeatures
wide_string_input_adapter	support/tinygltf/json.hpp	/^class wide_string_input_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
wide_string_input_helper	support/tinygltf/json.hpp	/^struct wide_string_input_helper$/;"	s	namespace:nlohmann::detail
wide_string_input_helper	support/tinygltf/json.hpp	/^struct wide_string_input_helper<WideStringType, 2>$/;"	s	namespace:nlohmann::detail
width	cuda/whitted.h	/^    unsigned int             width;$/;"	m	struct:whitted::LaunchParams
width	optixBoundValues/optixBoundValues.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixCutouts/optixCutouts.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixDenoiser/OptiXDenoiser.h	/^        uint32_t  width     = 0;$/;"	m	struct:OptiXDenoiser::Data
width	optixDisplacedMicromesh/optixDisplacedMicromesh.h	/^    unsigned int           width;$/;"	m	struct:Globals
width	optixDynamicGeometry/optixDynamicGeometry.h	/^    unsigned int           width;$/;"	m	struct:Params
width	optixHair/optixHair.h	/^    unsigned int width  = 0;$/;"	m	struct:HairState
width	optixMeshViewer/optixMeshViewer.cpp	/^int32_t                 width    = 768;$/;"	v
width	optixModuleCreateAbort/optixModuleCreateAbort.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixMotionGeometry/optixMotionGeometry.h	/^    unsigned int           width;$/;"	m	struct:Params
width	optixMultiGPU/optixMultiGPU.cpp	/^int32_t           width  = 768;$/;"	v
width	optixMultiGPU/optixMultiGPU.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixNVLink/optixNVLink.cpp	/^int32_t           width  = 768;$/;"	v
width	optixNVLink/optixNVLink.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        width;                            \/**< [in]: Specifies input buffer width *\/$/;"	m	struct:_NV_OF_INIT_PARAMS
width	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        width;                           \/**< [in]: Buffer width. *\/$/;"	m	struct:_NV_OF_BUFFER_DESCRIPTOR
width	optixOpticalFlow/nvOpticalFlowCommon.h	/^    uint32_t                        width;                           \/**< [in]: Width of ROI. *\/$/;"	m	struct:NV_OF_ROI_RECT
width	optixPathTracer/optixPathTracer.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixRaycasting/optixRaycasting.cpp	/^    int                         width                    = 0;$/;"	m	struct:RaycastingState	file:
width	optixSimpleMotionBlur/optixSimpleMotionBlur.h	/^    unsigned int width;$/;"	m	struct:Params
width	optixVolumeViewer/optixVolumeViewer.cpp	/^int32_t width  = 768;$/;"	v
width	optixVolumeViewer/volume.h	/^    unsigned int             width;$/;"	m	struct:LaunchParams
width	support/GLFW/deps/vulkan/vulkan.h	/^    float    width;$/;"	m	struct:VkViewport
width	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t                    width;$/;"	m	struct:VkFramebufferCreateInfo
width	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent2D
width	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent3D
width	support/GLFW/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage
width	support/GLFW/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode
width	support/GLFW/src/internal.h	/^    int           width;$/;"	m	struct:_GLFWwndconfig
width	support/GLFW/src/mir_platform.h	/^    int                     width;$/;"	m	struct:_GLFWwindowMir
width	support/GLFW/src/wl_platform.h	/^    int                         width, height;$/;"	m	struct:_GLFWcursorWayland
width	support/GLFW/src/wl_platform.h	/^    int                         width, height;$/;"	m	struct:_GLFWwindowWayland
width	support/GLFW/src/x11_platform.h	/^    int             width, height;$/;"	m	struct:_GLFWwindowX11
width	support/imgui/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context
width	support/imgui/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context
width	support/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon80
width	support/tinyexr/tinyexr.h	/^  int width;   \/\/ actual width in a tile.$/;"	m	struct:_EXRTile
width	support/tinyexr/tinyexr.h	/^  int width;$/;"	m	struct:_DeepImage
width	support/tinyexr/tinyexr.h	/^  int width;$/;"	m	struct:_EXRImage
width	support/tinygltf/tiny_gltf.h	/^  int width;$/;"	m	struct:tinygltf::Image
width	sutil/CUDAOutputBuffer.h	/^    int32_t        width() const  { return m_width;  }$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
width	sutil/PPMLoader.cpp	/^unsigned int PPMLoader::width() const$/;"	f	class:PPMLoader
width	sutil/sutil.h	/^    unsigned int      width = 0;$/;"	m	struct:sutil::ImageBuffer
widthMM	support/GLFW/src/internal.h	/^    int             widthMM, heightMM;$/;"	m	struct:_GLFWmonitor
widths	optixHair/Hair.cpp	/^std::vector<float> Hair::widths() const$/;"	f	class:Hair
window	support/GLFW/deps/vulkan/vulkan.h	/^    ANativeWindow*                    window;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR
window	support/GLFW/deps/vulkan/vulkan.h	/^    Window                         window;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
window	support/GLFW/deps/vulkan/vulkan.h	/^    xcb_window_t                  window;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
window	support/GLFW/src/glx_context.h	/^    GLXWindow       window;$/;"	m	struct:_GLFWcontextGLX
window	support/GLFW/src/internal.h	/^        _GLFWwndconfig  window;$/;"	m	struct:_GLFWlibrary::__anon9
window	support/GLFW/src/internal.h	/^    _GLFWwindow*    window;$/;"	m	struct:_GLFWmonitor
window	support/GLFW/src/mir_platform.h	/^    MirEGLNativeWindowType  window;$/;"	m	struct:_GLFWwindowMir
window	support/GLFW/src/mir_window.c	/^    _GLFWwindow*           window;$/;"	m	struct:EventNode	file:
window	support/GLFW/src/x11_platform.h	/^    Window                      window;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR
window	support/GLFW/src/x11_platform.h	/^    xcb_window_t                window;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR
windowIconifyCallback	optixBoundValues/optixBoundValues.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixCutouts/optixCutouts.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixHair/Renderers.cpp	/^void WindowRenderer::windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	class:WindowRenderer
windowIconifyCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixMultiGPU/optixMultiGPU.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixNVLink/optixNVLink.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixPathTracer/optixPathTracer.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowIconifyCallback	optixWhitted/optixWhitted.cpp	/^static void windowIconifyCallback( GLFWwindow* window, int32_t iconified )$/;"	f	file:
windowListHead	support/GLFW/src/internal.h	/^    _GLFWwindow*        windowListHead;$/;"	m	struct:_GLFWlibrary
windowProc	support/GLFW/src/win32_window.c	/^static LRESULT CALLBACK windowProc(HWND hWnd, UINT uMsg,$/;"	f	file:
windowSizeCallback	optixBoundValues/optixBoundValues.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixCallablePrograms/optixCallablePrograms.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixCutouts/optixCutouts.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixDisplacedMicromesh/optixDisplacedMicromesh.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixDynamicGeometry/optixDynamicGeometry.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixHair/Renderers.cpp	/^void WindowRenderer::windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	class:WindowRenderer
windowSizeCallback	optixMeshViewer/optixMeshViewer.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixMotionGeometry/optixMotionGeometry.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixMultiGPU/optixMultiGPU.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixNVLink/optixNVLink.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixPathTracer/optixPathTracer.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixVolumeViewer/optixVolumeViewer.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
windowSizeCallback	optixWhitted/optixWhitted.cpp	/^static void windowSizeCallback( GLFWwindow* window, int32_t res_x, int32_t res_y )$/;"	f	file:
winmm	support/GLFW/src/win32_platform.h	/^    } winmm;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon12
wl_compositor_version	support/GLFW/src/wl_platform.h	/^    int                         wl_compositor_version;$/;"	m	struct:_GLFWlibraryWayland
wordCount	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ static uint32_t wordCount() { return WORD_COUNT; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Mask
workerExecute	lib/CompileWithTasks.h	/^    void workerExecute()$/;"	f	struct:optix::CompileWithTasks::ThreadPool
worldAabb	optixVolumeViewer/optixVolumeViewer.cpp	/^sutil::Aabb worldAabb( const Volume& grid )$/;"	f
worldBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<Vec3R>& worldBBox() const { return DataType::mWorldBBox; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
worldBBox	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ const BBox<Vec3R>& worldBBox() const { return this->grid().worldBBox(); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::GridMetaData
worldBBox	optixVolumeViewer/nanovdb/util/IO.h	/^    BBox<Vec3d> worldBBox; \/\/ 2 * 3 * 8 = 48B.$/;"	m	struct:nanovdb::io::Codec::MetaData
worldToIndex	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T worldToIndex(const Vec3T& xyz) const { return this->applyInverseMap(xyz); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
worldToIndexDir	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T worldToIndexDir(const Vec3T& dir) const { return this->applyInverseJacobian(dir); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
worldToIndexDirF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T worldToIndexDirF(const Vec3T& dir) const { return this->applyInverseJacobianF(dir); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
worldToIndexF	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ Vec3T worldToIndexF(const Vec3T& xyz) const { return this->applyInverseMapF(xyz); }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Grid
worldToIndexF	optixVolumeViewer/nanovdb/util/Ray.h	/^    __hostdev__ Ray worldToIndexF(const GridType& grid) const$/;"	f	class:nanovdb::Ray
world_aabb	sutil/Scene.h	/^        Aabb                              world_aabb;$/;"	m	struct:sutil::Scene::Instance
wrapR	support/tinygltf/tiny_gltf.h	/^  int wrapR = TINYGLTF_TEXTURE_WRAP_REPEAT;  \/\/ TinyGLTF extension$/;"	m	struct:tinygltf::Sampler
wrapS	support/tinygltf/tiny_gltf.h	/^  int wrapS =$/;"	m	struct:tinygltf::Sampler
wrapT	support/tinygltf/tiny_gltf.h	/^  int wrapT =$/;"	m	struct:tinygltf::Sampler
write	optixVolumeViewer/nanovdb/util/IO.h	/^fileSize_t Internal::write(std::ostream& os, const GridHandle<BufferT>& handle, Codec codec)$/;"	f	class:nanovdb::io::Codec::Internal
write	optixVolumeViewer/nanovdb/util/IO.h	/^inline void GridMetaData::write(std::ostream& os) const$/;"	f	class:nanovdb::io::Codec::GridMetaData
write	optixVolumeViewer/nanovdb/util/IO.h	/^inline void Segment::write(std::ostream& os) const$/;"	f	class:nanovdb::io::Codec::Segment
writeGrid	optixVolumeViewer/nanovdb/util/IO.h	/^void writeGrid(const std::string& fileName, const GridHandle<BufferT>& handle, Codec codec, int verbose)$/;"	f	class:nanovdb::io::Codec
writeGrid	optixVolumeViewer/nanovdb/util/IO.h	/^void writeGrid(std::ostream& os, const GridHandle<BufferT>& handle, Codec codec)$/;"	f	class:nanovdb::io::Codec
writeGrids	optixVolumeViewer/nanovdb/util/IO.h	/^void writeGrids(const std::string& fileName, const VecT<GridHandle<BufferT>>& handles, Codec codec, int verbose)$/;"	f	class:nanovdb::io::Codec
writeGrids	optixVolumeViewer/nanovdb/util/IO.h	/^void writeGrids(std::ostream& os, const VecT<GridHandle<BufferT>>& handles, Codec codec)$/;"	f	class:nanovdb::io::Codec
writeMask	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t       writeMask;$/;"	m	struct:VkStencilOpState
writeTargetToProperty	support/GLFW/src/x11_window.c	/^static Atom writeTargetToProperty(const XSelectionRequestEvent* request)$/;"	f	file:
writeUInt	support/tinyexr/tinyexr.h	/^static void writeUInt(char buf[4], unsigned int i) {$/;"	f	namespace:tinyexr
write_bson	support/tinygltf/json.hpp	/^    void write_bson(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer
write_bson_array	support/tinygltf/json.hpp	/^    void write_bson_array(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_boolean	support/tinygltf/json.hpp	/^    void write_bson_boolean(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_double	support/tinygltf/json.hpp	/^    void write_bson_double(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_element	support/tinygltf/json.hpp	/^    void write_bson_element(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_entry_header	support/tinygltf/json.hpp	/^    void write_bson_entry_header(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_integer	support/tinygltf/json.hpp	/^    void write_bson_integer(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_null	support/tinygltf/json.hpp	/^    void write_bson_null(const string_t& name)$/;"	f	class:nlohmann::detail::binary_writer
write_bson_object	support/tinygltf/json.hpp	/^    void write_bson_object(const typename BasicJsonType::object_t& value)$/;"	f	class:nlohmann::detail::binary_writer
write_bson_object_entry	support/tinygltf/json.hpp	/^    void write_bson_object_entry(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_string	support/tinygltf/json.hpp	/^    void write_bson_string(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_bson_unsigned	support/tinygltf/json.hpp	/^    void write_bson_unsigned(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer
write_cbor	support/tinygltf/json.hpp	/^    void write_cbor(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer
write_msgpack	support/tinygltf/json.hpp	/^    void write_msgpack(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer
write_number	support/tinygltf/json.hpp	/^    void write_number(const NumberType n)$/;"	f	class:nlohmann::detail::binary_writer
write_number_with_ubjson_prefix	support/tinygltf/json.hpp	/^    void write_number_with_ubjson_prefix(const NumberType n,$/;"	f	class:nlohmann::detail::binary_writer
write_ubjson	support/tinygltf/json.hpp	/^    void write_ubjson(const BasicJsonType& j, const bool use_count,$/;"	f	class:nlohmann::detail::binary_writer
wsz	support/GLFW/deps/mingw/dinput.h	/^        WCHAR        wsz[MAX_PATH];$/;"	m	struct:DIPROPSTRING
wszPath	support/GLFW/deps/mingw/dinput.h	/^	WCHAR   wszPath[MAX_PATH];$/;"	m	struct:DIPROPGUIDANDPATH
x	cuda/GeometryData.h	/^    float x, y, z, w;$/;"	m	struct:Vec4f
x	cuda/GeometryData.h	/^    float x, y;$/;"	m	struct:Vec2f
x	optixBoundValues/optixBoundValues.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixCutouts/optixCutouts.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixMultiGPU/optixMultiGPU.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixNVLink/optixNVLink.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixPathTracer/optixPathTracer.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
x	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t x() const { return mVec[0]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
x	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t& x() { return mVec[0]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
x	support/GLFW/deps/vulkan/vulkan.h	/^    float    x;$/;"	m	struct:VkViewport
x	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset2D
x	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset3D
x	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    x;$/;"	m	struct:VkDispatchIndirectCommand
x	support/GLFW/src/mir_platform.h	/^    int x;$/;"	m	struct:_GLFWmonitorMir
x	support/GLFW/src/wl_platform.h	/^    int                         x;$/;"	m	struct:_GLFWmonitorWayland
x	support/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
x	support/imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2
x	support/imgui/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1
x	support/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon90
x	support/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
x	support/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
x	support/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon86
x	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
x	support/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon78
x	support/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon79
x	support/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
x	support/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80
x	support/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	support/imgui/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon81
x	support/tinygltf/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon99::__anon100
x	sutil/Quaternion.h	/^    float x() const           { return q[1]; }$/;"	f	class:sutil::Quaternion
x0	support/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, etc)$/;"	m	struct:__anon85
x0	support/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	support/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon66
x0	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon65
x0	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon67
x1	support/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, etc)$/;"	m	struct:__anon85
x1	support/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	support/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon66
x1	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon65
x1	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon67
x11xcb	support/GLFW/src/x11_platform.h	/^    } x11xcb;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon25
x_sampling	support/tinyexr/tinyexr.h	/^  int x_sampling;$/;"	m	struct:_EXRChannelInfo
x_sampling	support/tinyexr/tinyexr.h	/^  int x_sampling;$/;"	m	struct:tinyexr::__anon63
xadvance	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon65
xadvance	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon67
xcb_connection_t	support/GLFW/src/x11_platform.h	/^typedef struct xcb_connection_t xcb_connection_t;$/;"	t	typeref:struct:xcb_connection_t
xcb_visualid_t	support/GLFW/src/x11_platform.h	/^typedef XID xcb_visualid_t;$/;"	t
xcb_window_t	support/GLFW/src/x11_platform.h	/^typedef XID xcb_window_t;$/;"	t
xdnd	support/GLFW/src/x11_platform.h	/^    } xdnd;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon23
xhot	support/GLFW/src/wl_platform.h	/^    int                         xhot, yhot;$/;"	m	struct:_GLFWcursorWayland
xinerama	support/GLFW/src/x11_platform.h	/^    } xinerama;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon24
xinput	support/GLFW/src/win32_platform.h	/^    } xinput;$/;"	m	struct:_GLFWlibraryWin32	typeref:struct:_GLFWlibraryWin32::__anon14
xkb	support/GLFW/src/wl_platform.h	/^    } xkb;$/;"	m	struct:_GLFWlibraryWayland	typeref:struct:_GLFWlibraryWayland::__anon19
xkb	support/GLFW/src/x11_platform.h	/^    } xkb;$/;"	m	struct:_GLFWlibraryX11	typeref:struct:_GLFWlibraryX11::__anon21
xmag	support/tinygltf/tiny_gltf.h	/^  double xmag;   \/\/ required. must not be zero.$/;"	m	struct:tinygltf::OrthographicCamera
xoff	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon65
xoff	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon67
xoff2	support/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon67
xpos	support/GLFW/src/x11_platform.h	/^    int             xpos, ypos;$/;"	m	struct:_GLFWwindowX11
y	cuda/GeometryData.h	/^    float x, y, z, w;$/;"	m	struct:Vec4f
y	cuda/GeometryData.h	/^    float x, y;$/;"	m	struct:Vec2f
y	optixBoundValues/optixBoundValues.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixCutouts/optixCutouts.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixMultiGPU/optixMultiGPU.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixNVLink/optixNVLink.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixPathTracer/optixPathTracer.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
y	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t y() const { return mVec[1]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
y	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t& y() { return mVec[1]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
y	support/GLFW/deps/vulkan/vulkan.h	/^    float    y;$/;"	m	struct:VkViewport
y	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset2D
y	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset3D
y	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    y;$/;"	m	struct:VkDispatchIndirectCommand
y	support/GLFW/src/mir_platform.h	/^    int y;$/;"	m	struct:_GLFWmonitorMir
y	support/GLFW/src/wl_platform.h	/^    int                         y;$/;"	m	struct:_GLFWmonitorWayland
y	support/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
y	support/imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2
y	support/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon90
y	support/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
y	support/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
y	support/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon86
y	support/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon70
y	support/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon78
y	support/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon79
y	support/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80
y	support/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y	support/tinygltf/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon99::__anon100
y	sutil/Quaternion.h	/^    float y() const           { return q[2]; }$/;"	f	class:sutil::Quaternion
y0	support/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	support/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon66
y0	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon65
y0	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon67
y1	support/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	support/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon66
y1	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon65
y1	support/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon67
y_sampling	support/tinyexr/tinyexr.h	/^  int y_sampling;$/;"	m	struct:_EXRChannelInfo
y_sampling	support/tinyexr/tinyexr.h	/^  int y_sampling;$/;"	m	struct:tinyexr::__anon63
yfov	support/tinygltf/tiny_gltf.h	/^  double yfov;         \/\/ required. min > 0$/;"	m	struct:tinygltf::PerspectiveCamera
yhot	support/GLFW/src/wl_platform.h	/^    int                         xhot, yhot;$/;"	m	struct:_GLFWcursorWayland
ymag	support/tinygltf/tiny_gltf.h	/^  double ymag;   \/\/ required. must not be zero.$/;"	m	struct:tinygltf::OrthographicCamera
ymax	support/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon85
ymin	support/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon85
yoff	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon65
yoff	support/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon67
yoff2	support/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon67
ypos	support/GLFW/src/x11_platform.h	/^    int             xpos, ypos;$/;"	m	struct:_GLFWwindowX11
ypos	support/tinygltf/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon101
ys	support/tinyexr/tinyexr.h	/^  int ys;$/;"	m	struct:tinyexr::PIZChannelData
ystep	support/tinygltf/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon101
z	cuda/GeometryData.h	/^    float x, y, z, w;$/;"	m	struct:Vec4f
z	optixBoundValues/optixBoundValues.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixCutouts/optixCutouts.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixModuleCreateAbort/optixModuleCreateAbort.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixMultiGPU/optixMultiGPU.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixNVLink/optixNVLink.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixPathTracer/optixPathTracer.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixSimpleMotionBlur/optixSimpleMotionBlur.cpp	/^    float x, y, z, pad;$/;"	m	struct:Vertex	file:
z	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t z() const { return mVec[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
z	optixVolumeViewer/nanovdb/NanoVDB.h	/^    __hostdev__ int32_t& z() { return mVec[2]; }$/;"	f	class:nanovdb::GridType::GridClass::GridBlindDataClass::GridBlindDataSemantic::Coord
z	support/GLFW/deps/vulkan/vulkan.h	/^    int32_t    z;$/;"	m	struct:VkOffset3D
z	support/GLFW/deps/vulkan/vulkan.h	/^    uint32_t    z;$/;"	m	struct:VkDispatchIndirectCommand
z	support/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
z	sutil/Quaternion.h	/^    float z() const           { return q[3]; }$/;"	f	class:sutil::Quaternion
zError	support/tinyexr/tinyexr.h	1213;"	d
z_distance	support/tinygltf/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon103
z_expandable	support/tinygltf/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon103
z_length	support/tinygltf/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon103
z_stream	support/tinyexr/tinyexr.h	1194;"	d
zalloc	support/tinyexr/tinyexr.h	/^      zalloc;          \/\/ optional heap allocation function (defaults to malloc)$/;"	m	struct:tinyexr::miniz::mz_stream_s
zbuffer	support/tinygltf/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon103
zbuffer_end	support/tinygltf/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon103
zfar	support/tinygltf/tiny_gltf.h	/^  double zfar;         \/\/ min > 0$/;"	m	struct:tinygltf::PerspectiveCamera
zfar	support/tinygltf/tiny_gltf.h	/^  double zfar;   \/\/ required. `zfar` must be greater than `znear`.$/;"	m	struct:tinygltf::OrthographicCamera
zfree	support/tinyexr/tinyexr.h	/^  mz_free_func zfree;  \/\/ optional heap free function (defaults to free)$/;"	m	struct:tinyexr::miniz::mz_stream_s
zlibVersion	support/tinyexr/tinyexr.h	1220;"	d
zlib_version	support/tinyexr/tinyexr.h	1221;"	d
znear	support/tinygltf/tiny_gltf.h	/^  double znear;        \/\/ required. min > 0$/;"	m	struct:tinygltf::PerspectiveCamera
znear	support/tinygltf/tiny_gltf.h	/^  double znear;  \/\/ required$/;"	m	struct:tinygltf::OrthographicCamera
zoom	sutil/Trackball.cpp	/^void Trackball::zoom(int direction)$/;"	f	class:sutil::Trackball
zoomIn	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void zoomIn() $/;"	f
zoomOut	optixVolumeViewer/optixVolumeViewer.cpp	/^inline void zoomOut()$/;"	f
zout	support/tinygltf/stb_image.h	/^   char *zout;$/;"	m	struct:__anon103
zout_end	support/tinygltf/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon103
zout_start	support/tinygltf/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon103
~CUDAOutputBuffer	sutil/CUDAOutputBuffer.h	/^CUDAOutputBuffer<PIXEL_FORMAT>::~CUDAOutputBuffer()$/;"	f	class:sutil::CUDAOutputBufferType::CUDAOutputBuffer
~CuBuffer	sutil/CuBuffer.h	/^    ~CuBuffer()$/;"	f	class:CuBuffer
~ExampleAppConsole	support/imgui/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole
~ExhaustFume	optixMotionGeometry/optixMotionGeometry.cpp	/^    ~ExhaustFume()$/;"	f	class:ExhaustFume
~GridHandleBase	optixVolumeViewer/nanovdb/util/GridHandle.h	/^    virtual ~GridHandleBase() {}$/;"	f	class:nanovdb::GridHandleBase
~Hair	optixHair/Hair.cpp	/^Hair::~Hair() {}$/;"	f	class:Hair
~Head	optixHair/Head.cpp	/^Head::~Head()$/;"	f	class:Head
~HostBuffer	optixVolumeViewer/nanovdb/util/HostBuffer.h	/^    ~HostBuffer() { this->clear(); };$/;"	f	class:nanovdb::HostBuffer
~ImDrawData	support/imgui/imgui.h	/^    ~ImDrawData()   { Clear(); }$/;"	f	struct:ImDrawData
~ImDrawList	support/imgui/imgui.h	/^    ~ImDrawList() { ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImFont	support/imgui/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	support/imgui/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	support/imgui/imgui.h	/^    ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      \/\/ Assert if user forgot to call End() or Step() until false.$/;"	f	struct:ImGuiListClipper
~ImGuiWindow	support/imgui/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	support/imgui/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	support/imgui/imgui.h	/^    inline ~ImVector()                                      { if (Data) ImGui::MemFree(Data); }$/;"	f	struct:ImVector
~MaterialReader	optixMotionGeometry/tiny_obj_loader.h	/^MaterialReader::~MaterialReader() {}$/;"	f	class:tinyobj::MaterialReader
~ObjReader	optixMotionGeometry/tiny_obj_loader.h	/^  ~ObjReader() {}$/;"	f	class:tinyobj::ObjReader
~OptixUtilOpticalFlow	optixOpticalFlow/optix_denoiser_opticalflow.h	/^    ~OptixUtilOpticalFlow(){};$/;"	f	class:OptixUtilOpticalFlow
~PPMLoader	sutil/PPMLoader.cpp	/^PPMLoader::~PPMLoader()$/;"	f	class:PPMLoader
~Scene	sutil/Scene.cpp	/^Scene::~Scene( void )$/;"	f	class:sutil::Scene
~SourceCache	sutil/sutil.cpp	/^    ~SourceCache()$/;"	f	struct:sutil::SourceCache
~TinyGLTF	support/tinygltf/tiny_gltf.h	/^  ~TinyGLTF() {}$/;"	f	class:tinygltf::TinyGLTF
~WindowRenderer	optixHair/Renderers.cpp	/^WindowRenderer::~WindowRenderer()$/;"	f	class:WindowRenderer
